
BluePill_ILI_lvgl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001578c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040d4  08015898  08015898  00025898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801996c  0801996c  000300d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801996c  0801996c  0002996c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019974  08019974  000300d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019974  08019974  00029974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019978  08019978  00029978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0801997c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000340c  200000d8  08019a54  000300d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034e4  08019a54  000334e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000863ba  00000000  00000000  00030101  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000ce94  00000000  00000000  000b64bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0003579d  00000000  00000000  000c334f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000023e8  00000000  00000000  000f8af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000065e8  00000000  00000000  000faed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000235c4  00000000  00000000  001014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00035ad2  00000000  00000000  00124a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009aa0f  00000000  00000000  0015a556  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001f4f65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000777c  00000000  00000000  001f4fe0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08015880 	.word	0x08015880

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	08015880 	.word	0x08015880

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_uldivmod>:
 8000170:	b953      	cbnz	r3, 8000188 <__aeabi_uldivmod+0x18>
 8000172:	b94a      	cbnz	r2, 8000188 <__aeabi_uldivmod+0x18>
 8000174:	2900      	cmp	r1, #0
 8000176:	bf08      	it	eq
 8000178:	2800      	cmpeq	r0, #0
 800017a:	bf1c      	itt	ne
 800017c:	f04f 31ff 	movne.w	r1, #4294967295
 8000180:	f04f 30ff 	movne.w	r0, #4294967295
 8000184:	f000 b974 	b.w	8000470 <__aeabi_idiv0>
 8000188:	f1ad 0c08 	sub.w	ip, sp, #8
 800018c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000190:	f000 f806 	bl	80001a0 <__udivmoddi4>
 8000194:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800019c:	b004      	add	sp, #16
 800019e:	4770      	bx	lr

080001a0 <__udivmoddi4>:
 80001a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001a4:	468c      	mov	ip, r1
 80001a6:	4604      	mov	r4, r0
 80001a8:	9e08      	ldr	r6, [sp, #32]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d14b      	bne.n	8000246 <__udivmoddi4+0xa6>
 80001ae:	428a      	cmp	r2, r1
 80001b0:	4615      	mov	r5, r2
 80001b2:	d967      	bls.n	8000284 <__udivmoddi4+0xe4>
 80001b4:	fab2 f282 	clz	r2, r2
 80001b8:	b14a      	cbz	r2, 80001ce <__udivmoddi4+0x2e>
 80001ba:	f1c2 0720 	rsb	r7, r2, #32
 80001be:	fa01 f302 	lsl.w	r3, r1, r2
 80001c2:	fa20 f707 	lsr.w	r7, r0, r7
 80001c6:	4095      	lsls	r5, r2
 80001c8:	ea47 0c03 	orr.w	ip, r7, r3
 80001cc:	4094      	lsls	r4, r2
 80001ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001d2:	fbbc f7fe 	udiv	r7, ip, lr
 80001d6:	fa1f f885 	uxth.w	r8, r5
 80001da:	fb0e c317 	mls	r3, lr, r7, ip
 80001de:	fb07 f908 	mul.w	r9, r7, r8
 80001e2:	0c21      	lsrs	r1, r4, #16
 80001e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001e8:	4599      	cmp	r9, r3
 80001ea:	d909      	bls.n	8000200 <__udivmoddi4+0x60>
 80001ec:	18eb      	adds	r3, r5, r3
 80001ee:	f107 31ff 	add.w	r1, r7, #4294967295
 80001f2:	f080 811c 	bcs.w	800042e <__udivmoddi4+0x28e>
 80001f6:	4599      	cmp	r9, r3
 80001f8:	f240 8119 	bls.w	800042e <__udivmoddi4+0x28e>
 80001fc:	3f02      	subs	r7, #2
 80001fe:	442b      	add	r3, r5
 8000200:	eba3 0309 	sub.w	r3, r3, r9
 8000204:	fbb3 f0fe 	udiv	r0, r3, lr
 8000208:	fb0e 3310 	mls	r3, lr, r0, r3
 800020c:	fb00 f108 	mul.w	r1, r0, r8
 8000210:	b2a4      	uxth	r4, r4
 8000212:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000216:	42a1      	cmp	r1, r4
 8000218:	d909      	bls.n	800022e <__udivmoddi4+0x8e>
 800021a:	192c      	adds	r4, r5, r4
 800021c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000220:	f080 8107 	bcs.w	8000432 <__udivmoddi4+0x292>
 8000224:	42a1      	cmp	r1, r4
 8000226:	f240 8104 	bls.w	8000432 <__udivmoddi4+0x292>
 800022a:	3802      	subs	r0, #2
 800022c:	442c      	add	r4, r5
 800022e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000232:	2700      	movs	r7, #0
 8000234:	1a64      	subs	r4, r4, r1
 8000236:	b11e      	cbz	r6, 8000240 <__udivmoddi4+0xa0>
 8000238:	2300      	movs	r3, #0
 800023a:	40d4      	lsrs	r4, r2
 800023c:	e9c6 4300 	strd	r4, r3, [r6]
 8000240:	4639      	mov	r1, r7
 8000242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000246:	428b      	cmp	r3, r1
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0xbe>
 800024a:	2e00      	cmp	r6, #0
 800024c:	f000 80ec 	beq.w	8000428 <__udivmoddi4+0x288>
 8000250:	2700      	movs	r7, #0
 8000252:	e9c6 0100 	strd	r0, r1, [r6]
 8000256:	4638      	mov	r0, r7
 8000258:	4639      	mov	r1, r7
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	fab3 f783 	clz	r7, r3
 8000262:	2f00      	cmp	r7, #0
 8000264:	d148      	bne.n	80002f8 <__udivmoddi4+0x158>
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__udivmoddi4+0xd0>
 800026a:	4282      	cmp	r2, r0
 800026c:	f200 80fb 	bhi.w	8000466 <__udivmoddi4+0x2c6>
 8000270:	1a84      	subs	r4, r0, r2
 8000272:	eb61 0303 	sbc.w	r3, r1, r3
 8000276:	2001      	movs	r0, #1
 8000278:	469c      	mov	ip, r3
 800027a:	2e00      	cmp	r6, #0
 800027c:	d0e0      	beq.n	8000240 <__udivmoddi4+0xa0>
 800027e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000282:	e7dd      	b.n	8000240 <__udivmoddi4+0xa0>
 8000284:	b902      	cbnz	r2, 8000288 <__udivmoddi4+0xe8>
 8000286:	deff      	udf	#255	; 0xff
 8000288:	fab2 f282 	clz	r2, r2
 800028c:	2a00      	cmp	r2, #0
 800028e:	f040 808f 	bne.w	80003b0 <__udivmoddi4+0x210>
 8000292:	2701      	movs	r7, #1
 8000294:	1b49      	subs	r1, r1, r5
 8000296:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800029a:	fa1f f985 	uxth.w	r9, r5
 800029e:	fbb1 fef8 	udiv	lr, r1, r8
 80002a2:	fb08 111e 	mls	r1, r8, lr, r1
 80002a6:	fb09 f00e 	mul.w	r0, r9, lr
 80002aa:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ae:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0x126>
 80002b6:	18eb      	adds	r3, r5, r3
 80002b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x124>
 80002be:	4298      	cmp	r0, r3
 80002c0:	f200 80cd 	bhi.w	800045e <__udivmoddi4+0x2be>
 80002c4:	468e      	mov	lr, r1
 80002c6:	1a1b      	subs	r3, r3, r0
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	fb09 f900 	mul.w	r9, r9, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002da:	45a1      	cmp	r9, r4
 80002dc:	d907      	bls.n	80002ee <__udivmoddi4+0x14e>
 80002de:	192c      	adds	r4, r5, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	d202      	bcs.n	80002ec <__udivmoddi4+0x14c>
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	f200 80b6 	bhi.w	8000458 <__udivmoddi4+0x2b8>
 80002ec:	4618      	mov	r0, r3
 80002ee:	eba4 0409 	sub.w	r4, r4, r9
 80002f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002f6:	e79e      	b.n	8000236 <__udivmoddi4+0x96>
 80002f8:	f1c7 0520 	rsb	r5, r7, #32
 80002fc:	40bb      	lsls	r3, r7
 80002fe:	fa22 fc05 	lsr.w	ip, r2, r5
 8000302:	ea4c 0c03 	orr.w	ip, ip, r3
 8000306:	fa21 f405 	lsr.w	r4, r1, r5
 800030a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000312:	fa1f f88c 	uxth.w	r8, ip
 8000316:	fb0e 4419 	mls	r4, lr, r9, r4
 800031a:	fa20 f305 	lsr.w	r3, r0, r5
 800031e:	40b9      	lsls	r1, r7
 8000320:	fb09 fa08 	mul.w	sl, r9, r8
 8000324:	4319      	orrs	r1, r3
 8000326:	0c0b      	lsrs	r3, r1, #16
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	45a2      	cmp	sl, r4
 800032e:	fa02 f207 	lsl.w	r2, r2, r7
 8000332:	fa00 f307 	lsl.w	r3, r0, r7
 8000336:	d90b      	bls.n	8000350 <__udivmoddi4+0x1b0>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000340:	f080 8088 	bcs.w	8000454 <__udivmoddi4+0x2b4>
 8000344:	45a2      	cmp	sl, r4
 8000346:	f240 8085 	bls.w	8000454 <__udivmoddi4+0x2b4>
 800034a:	f1a9 0902 	sub.w	r9, r9, #2
 800034e:	4464      	add	r4, ip
 8000350:	eba4 040a 	sub.w	r4, r4, sl
 8000354:	fbb4 f0fe 	udiv	r0, r4, lr
 8000358:	fb0e 4410 	mls	r4, lr, r0, r4
 800035c:	fb00 fa08 	mul.w	sl, r0, r8
 8000360:	b289      	uxth	r1, r1
 8000362:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000366:	45a2      	cmp	sl, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1dc>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000372:	d26b      	bcs.n	800044c <__udivmoddi4+0x2ac>
 8000374:	45a2      	cmp	sl, r4
 8000376:	d969      	bls.n	800044c <__udivmoddi4+0x2ac>
 8000378:	3802      	subs	r0, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000380:	fba0 8902 	umull	r8, r9, r0, r2
 8000384:	eba4 040a 	sub.w	r4, r4, sl
 8000388:	454c      	cmp	r4, r9
 800038a:	4641      	mov	r1, r8
 800038c:	46ce      	mov	lr, r9
 800038e:	d354      	bcc.n	800043a <__udivmoddi4+0x29a>
 8000390:	d051      	beq.n	8000436 <__udivmoddi4+0x296>
 8000392:	2e00      	cmp	r6, #0
 8000394:	d069      	beq.n	800046a <__udivmoddi4+0x2ca>
 8000396:	1a5a      	subs	r2, r3, r1
 8000398:	eb64 040e 	sbc.w	r4, r4, lr
 800039c:	fa04 f505 	lsl.w	r5, r4, r5
 80003a0:	fa22 f307 	lsr.w	r3, r2, r7
 80003a4:	40fc      	lsrs	r4, r7
 80003a6:	431d      	orrs	r5, r3
 80003a8:	e9c6 5400 	strd	r5, r4, [r6]
 80003ac:	2700      	movs	r7, #0
 80003ae:	e747      	b.n	8000240 <__udivmoddi4+0xa0>
 80003b0:	4095      	lsls	r5, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	fa21 f003 	lsr.w	r0, r1, r3
 80003ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003be:	fbb0 f7f8 	udiv	r7, r0, r8
 80003c2:	fa1f f985 	uxth.w	r9, r5
 80003c6:	fb08 0017 	mls	r0, r8, r7, r0
 80003ca:	fa24 f303 	lsr.w	r3, r4, r3
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fb07 fc09 	mul.w	ip, r7, r9
 80003d4:	430b      	orrs	r3, r1
 80003d6:	0c19      	lsrs	r1, r3, #16
 80003d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003dc:	458c      	cmp	ip, r1
 80003de:	fa04 f402 	lsl.w	r4, r4, r2
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x254>
 80003e4:	1869      	adds	r1, r5, r1
 80003e6:	f107 30ff 	add.w	r0, r7, #4294967295
 80003ea:	d231      	bcs.n	8000450 <__udivmoddi4+0x2b0>
 80003ec:	458c      	cmp	ip, r1
 80003ee:	d92f      	bls.n	8000450 <__udivmoddi4+0x2b0>
 80003f0:	3f02      	subs	r7, #2
 80003f2:	4429      	add	r1, r5
 80003f4:	eba1 010c 	sub.w	r1, r1, ip
 80003f8:	fbb1 f0f8 	udiv	r0, r1, r8
 80003fc:	fb08 1c10 	mls	ip, r8, r0, r1
 8000400:	fb00 fe09 	mul.w	lr, r0, r9
 8000404:	b299      	uxth	r1, r3
 8000406:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800040a:	458e      	cmp	lr, r1
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x27e>
 800040e:	1869      	adds	r1, r5, r1
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d218      	bcs.n	8000448 <__udivmoddi4+0x2a8>
 8000416:	458e      	cmp	lr, r1
 8000418:	d916      	bls.n	8000448 <__udivmoddi4+0x2a8>
 800041a:	3802      	subs	r0, #2
 800041c:	4429      	add	r1, r5
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000426:	e73a      	b.n	800029e <__udivmoddi4+0xfe>
 8000428:	4637      	mov	r7, r6
 800042a:	4630      	mov	r0, r6
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0xa0>
 800042e:	460f      	mov	r7, r1
 8000430:	e6e6      	b.n	8000200 <__udivmoddi4+0x60>
 8000432:	4618      	mov	r0, r3
 8000434:	e6fb      	b.n	800022e <__udivmoddi4+0x8e>
 8000436:	4543      	cmp	r3, r8
 8000438:	d2ab      	bcs.n	8000392 <__udivmoddi4+0x1f2>
 800043a:	ebb8 0102 	subs.w	r1, r8, r2
 800043e:	eb69 020c 	sbc.w	r2, r9, ip
 8000442:	3801      	subs	r0, #1
 8000444:	4696      	mov	lr, r2
 8000446:	e7a4      	b.n	8000392 <__udivmoddi4+0x1f2>
 8000448:	4618      	mov	r0, r3
 800044a:	e7e8      	b.n	800041e <__udivmoddi4+0x27e>
 800044c:	4608      	mov	r0, r1
 800044e:	e795      	b.n	800037c <__udivmoddi4+0x1dc>
 8000450:	4607      	mov	r7, r0
 8000452:	e7cf      	b.n	80003f4 <__udivmoddi4+0x254>
 8000454:	4681      	mov	r9, r0
 8000456:	e77b      	b.n	8000350 <__udivmoddi4+0x1b0>
 8000458:	3802      	subs	r0, #2
 800045a:	442c      	add	r4, r5
 800045c:	e747      	b.n	80002ee <__udivmoddi4+0x14e>
 800045e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000462:	442b      	add	r3, r5
 8000464:	e72f      	b.n	80002c6 <__udivmoddi4+0x126>
 8000466:	4638      	mov	r0, r7
 8000468:	e707      	b.n	800027a <__udivmoddi4+0xda>
 800046a:	4637      	mov	r7, r6
 800046c:	e6e8      	b.n	8000240 <__udivmoddi4+0xa0>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <theme_apply>:
{
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
 8000474:	3a01      	subs	r2, #1
{
 8000476:	b570      	push	{r4, r5, r6, lr}
 8000478:	460c      	mov	r4, r1
    switch(name) {
 800047a:	2a0c      	cmp	r2, #12
 800047c:	d86e      	bhi.n	800055c <theme_apply+0xe8>
 800047e:	e8df f002 	tbb	[pc, r2]
 8000482:	1007      	.short	0x1007
 8000484:	69101826 	.word	0x69101826
 8000488:	74926969 	.word	0x74926969
 800048c:	af36      	.short	0xaf36
 800048e:	18          	.byte	0x18
 800048f:	00          	.byte	0x00
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 8000490:	2100      	movs	r1, #0
 8000492:	4620      	mov	r0, r4
 8000494:	f004 f8e6 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
 8000498:	4b5f      	ldr	r3, [pc, #380]	; (8000618 <theme_apply+0x1a4>)
 800049a:	6819      	ldr	r1, [r3, #0]

            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
            _lv_style_list_add_style(list, &styles->bg);

            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
            _lv_style_list_add_style(list, &styles->bg);
 800049c:	f007 fd60 	bl	8007f60 <_lv_style_list_add_style>
            break;
 80004a0:	e05c      	b.n	800055c <theme_apply+0xe8>
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 80004a2:	2100      	movs	r1, #0
 80004a4:	4620      	mov	r0, r4
 80004a6:	f004 f8dd 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80004aa:	4b5b      	ldr	r3, [pc, #364]	; (8000618 <theme_apply+0x1a4>)
 80004ac:	6819      	ldr	r1, [r3, #0]
            _lv_style_list_add_style(list, &styles->bg);
 80004ae:	3104      	adds	r1, #4
 80004b0:	e7f4      	b.n	800049c <theme_apply+0x28>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 80004b2:	2100      	movs	r1, #0
 80004b4:	4620      	mov	r0, r4
 80004b6:	f004 f8d5 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80004ba:	4d57      	ldr	r5, [pc, #348]	; (8000618 <theme_apply+0x1a4>)
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 80004bc:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 80004be:	6829      	ldr	r1, [r5, #0]
 80004c0:	3104      	adds	r1, #4
 80004c2:	f007 fd4d 	bl	8007f60 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->btn);
 80004c6:	6829      	ldr	r1, [r5, #0]
 80004c8:	3108      	adds	r1, #8
            _lv_style_list_add_style(list, &styles->round);
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7e6      	b.n	800049c <theme_apply+0x28>
            _lv_style_list_add_style(list, &styles->bar_bg);
 80004ce:	4d52      	ldr	r5, [pc, #328]	; (8000618 <theme_apply+0x1a4>)
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
 80004d0:	2100      	movs	r1, #0
 80004d2:	4620      	mov	r0, r4
 80004d4:	f004 f8c6 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_bg);
 80004d8:	6829      	ldr	r1, [r5, #0]
 80004da:	3120      	adds	r1, #32
 80004dc:	f007 fd40 	bl	8007f60 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
 80004e0:	2101      	movs	r1, #1
 80004e2:	4620      	mov	r0, r4
 80004e4:	f004 f8be 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
 80004e8:	6829      	ldr	r1, [r5, #0]
 80004ea:	3124      	adds	r1, #36	; 0x24
 80004ec:	e7d6      	b.n	800049c <theme_apply+0x28>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
 80004ee:	2100      	movs	r1, #0
 80004f0:	4620      	mov	r0, r4
 80004f2:	f004 f8b7 	bl	8004664 <lv_obj_get_style_list>
 80004f6:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 80004f8:	4d47      	ldr	r5, [pc, #284]	; (8000618 <theme_apply+0x1a4>)
 80004fa:	6829      	ldr	r1, [r5, #0]
 80004fc:	3104      	adds	r1, #4
 80004fe:	f007 fd2f 	bl	8007f60 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->tight);
 8000502:	6829      	ldr	r1, [r5, #0]
 8000504:	4630      	mov	r0, r6
 8000506:	311c      	adds	r1, #28
 8000508:	f007 fd2a 	bl	8007f60 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->round);
 800050c:	6829      	ldr	r1, [r5, #0]
 800050e:	4630      	mov	r0, r6
 8000510:	310c      	adds	r1, #12
 8000512:	f007 fd25 	bl	8007f60 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
 8000516:	2101      	movs	r1, #1
 8000518:	4620      	mov	r0, r4
 800051a:	f004 f8a3 	bl	8004664 <lv_obj_get_style_list>
 800051e:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 8000520:	6829      	ldr	r1, [r5, #0]
 8000522:	3104      	adds	r1, #4
 8000524:	f007 fd1c 	bl	8007f60 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->color);
 8000528:	6829      	ldr	r1, [r5, #0]
 800052a:	4630      	mov	r0, r6
 800052c:	3110      	adds	r1, #16
 800052e:	f007 fd17 	bl	8007f60 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
 8000532:	2102      	movs	r1, #2
 8000534:	4620      	mov	r0, r4
 8000536:	f004 f895 	bl	8004664 <lv_obj_get_style_list>
 800053a:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 800053c:	6829      	ldr	r1, [r5, #0]
 800053e:	3104      	adds	r1, #4
 8000540:	f007 fd0e 	bl	8007f60 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->tight);
 8000544:	6829      	ldr	r1, [r5, #0]
 8000546:	4630      	mov	r0, r6
 8000548:	311c      	adds	r1, #28
 800054a:	f007 fd09 	bl	8007f60 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->round);
 800054e:	6829      	ldr	r1, [r5, #0]
 8000550:	310c      	adds	r1, #12
 8000552:	e7ba      	b.n	80004ca <theme_apply+0x56>
            list = lv_obj_get_style_list(obj, LV_IMG_PART_MAIN);
 8000554:	2100      	movs	r1, #0
 8000556:	4620      	mov	r0, r4
 8000558:	f004 f884 	bl	8004664 <lv_obj_get_style_list>
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 800055c:	22ff      	movs	r2, #255	; 0xff
 800055e:	4620      	mov	r0, r4
}
 8000560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8000564:	4611      	mov	r1, r2
 8000566:	f005 bbdd 	b.w	8005d24 <lv_obj_refresh_style>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
 800056a:	2100      	movs	r1, #0
 800056c:	4620      	mov	r0, r4
 800056e:	f004 f879 	bl	8004664 <lv_obj_get_style_list>
 8000572:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
 8000574:	4d28      	ldr	r5, [pc, #160]	; (8000618 <theme_apply+0x1a4>)
 8000576:	6829      	ldr	r1, [r5, #0]
 8000578:	3120      	adds	r1, #32
 800057a:	f007 fcf1 	bl	8007f60 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->slider_bg);
 800057e:	6829      	ldr	r1, [r5, #0]
 8000580:	4630      	mov	r0, r6
 8000582:	312c      	adds	r1, #44	; 0x2c
 8000584:	f007 fcec 	bl	8007f60 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
 8000588:	2101      	movs	r1, #1
 800058a:	4620      	mov	r0, r4
 800058c:	f004 f86a 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bar_indic);
 8000590:	6829      	ldr	r1, [r5, #0]
 8000592:	3124      	adds	r1, #36	; 0x24
 8000594:	f007 fce4 	bl	8007f60 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
 8000598:	2102      	movs	r1, #2
 800059a:	4620      	mov	r0, r4
 800059c:	f004 f862 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->slider_knob);
 80005a0:	6829      	ldr	r1, [r5, #0]
 80005a2:	3128      	adds	r1, #40	; 0x28
 80005a4:	e77a      	b.n	800049c <theme_apply+0x28>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
 80005a6:	2100      	movs	r1, #0
 80005a8:	4620      	mov	r0, r4
 80005aa:	f004 f85b 	bl	8004664 <lv_obj_get_style_list>
 80005ae:	4606      	mov	r6, r0
            _lv_style_list_add_style(list, &styles->bg);
 80005b0:	4d19      	ldr	r5, [pc, #100]	; (8000618 <theme_apply+0x1a4>)
 80005b2:	6829      	ldr	r1, [r5, #0]
 80005b4:	3104      	adds	r1, #4
 80005b6:	f007 fcd3 	bl	8007f60 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->gray);
 80005ba:	6829      	ldr	r1, [r5, #0]
 80005bc:	4630      	mov	r0, r6
 80005be:	3114      	adds	r1, #20
 80005c0:	f007 fcce 	bl	8007f60 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	4620      	mov	r0, r4
 80005c8:	f004 f84c 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80005cc:	6829      	ldr	r1, [r5, #0]
 80005ce:	3104      	adds	r1, #4
 80005d0:	f007 fcc6 	bl	8007f60 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
 80005d4:	2101      	movs	r1, #1
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
 80005d6:	4620      	mov	r0, r4
 80005d8:	f004 f844 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80005dc:	6829      	ldr	r1, [r5, #0]
 80005de:	e766      	b.n	80004ae <theme_apply+0x3a>
            _lv_style_list_add_style(list, &styles->bg);
 80005e0:	4d0d      	ldr	r5, [pc, #52]	; (8000618 <theme_apply+0x1a4>)
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
 80005e2:	2100      	movs	r1, #0
 80005e4:	4620      	mov	r0, r4
 80005e6:	f004 f83d 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80005ea:	6829      	ldr	r1, [r5, #0]
 80005ec:	3104      	adds	r1, #4
 80005ee:	f007 fcb7 	bl	8007f60 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
 80005f2:	2142      	movs	r1, #66	; 0x42
 80005f4:	4620      	mov	r0, r4
 80005f6:	f004 f835 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 80005fa:	6829      	ldr	r1, [r5, #0]
 80005fc:	3104      	adds	r1, #4
 80005fe:	f007 fcaf 	bl	8007f60 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 8000602:	2141      	movs	r1, #65	; 0x41
 8000604:	4620      	mov	r0, r4
 8000606:	f004 f82d 	bl	8004664 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
 800060a:	6829      	ldr	r1, [r5, #0]
 800060c:	3104      	adds	r1, #4
 800060e:	f007 fca7 	bl	8007f60 <_lv_style_list_add_style>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
 8000612:	2140      	movs	r1, #64	; 0x40
 8000614:	e7df      	b.n	80005d6 <theme_apply+0x162>
 8000616:	bf00      	nop
 8000618:	200000f4 	.word	0x200000f4

0800061c <style_init_reset>:
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) lv_style_reset(style);
    else lv_style_init(style);
 800061c:	f007 bc4c 	b.w	8007eb8 <lv_style_init>

08000620 <lv_color_hex>:
{
    return LV_COLOR_MAKE(r, g, b);
}

static inline lv_color_t lv_color_hex(uint32_t c)
{
 8000620:	f04f 0300 	mov.w	r3, #0
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 8000624:	f3c0 2207 	ubfx	r2, r0, #8, #8
    return LV_COLOR_MAKE(r, g, b);
 8000628:	0951      	lsrs	r1, r2, #5
 800062a:	f361 0302 	bfi	r3, r1, #0, #3
 800062e:	f3c0 41c4 	ubfx	r1, r0, #19, #5
 8000632:	f361 03c7 	bfi	r3, r1, #3, #5
 8000636:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 800063a:	f360 230c 	bfi	r3, r0, #8, #5
 800063e:	0892      	lsrs	r2, r2, #2
 8000640:	f362 334f 	bfi	r3, r2, #13, #3
}
 8000644:	4618      	mov	r0, r3
 8000646:	4770      	bx	lr

08000648 <lv_theme_myown_init>:
{
 8000648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800064c:	4681      	mov	r9, r0
        styles = lv_mem_alloc(sizeof(theme_styles_t));
 800064e:	2030      	movs	r0, #48	; 0x30
{
 8000650:	4616      	mov	r6, r2
 8000652:	4688      	mov	r8, r1
 8000654:	461f      	mov	r7, r3
        styles = lv_mem_alloc(sizeof(theme_styles_t));
 8000656:	f00e ff49 	bl	800f4ec <lv_mem_alloc>
    theme.color_primary = color_primary;
 800065a:	4dd1      	ldr	r5, [pc, #836]	; (80009a0 <lv_theme_myown_init+0x358>)
    theme.font_normal = font_normal;
 800065c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        styles = lv_mem_alloc(sizeof(theme_styles_t));
 800065e:	4cd1      	ldr	r4, [pc, #836]	; (80009a4 <lv_theme_myown_init+0x35c>)
    theme.font_normal = font_normal;
 8000660:	616b      	str	r3, [r5, #20]
    theme.font_subtitle = font_subtitle;
 8000662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        styles = lv_mem_alloc(sizeof(theme_styles_t));
 8000664:	6020      	str	r0, [r4, #0]
    theme.font_subtitle = font_subtitle;
 8000666:	61ab      	str	r3, [r5, #24]
    theme.font_title = font_title;
 8000668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    theme.color_primary = color_primary;
 800066a:	f8a5 900c 	strh.w	r9, [r5, #12]
    theme.flags = flags;
 800066e:	e9c5 3607 	strd	r3, r6, [r5, #28]
    theme.color_secondary = color_secondary;
 8000672:	f8a5 800e 	strh.w	r8, [r5, #14]
    theme.font_small = font_small;
 8000676:	612f      	str	r7, [r5, #16]
	   style_init_reset(&styles->scr);
 8000678:	f7ff ffd0 	bl	800061c <style_init_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 800067c:	22ff      	movs	r2, #255	; 0xff
 800067e:	212c      	movs	r1, #44	; 0x2c
 8000680:	6820      	ldr	r0, [r4, #0]
 8000682:	f007 fdc7 	bl	8008214 <_lv_style_set_opa>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8000686:	f24e 0207 	movw	r2, #57351	; 0xe007
 800068a:	2129      	movs	r1, #41	; 0x29
 800068c:	6820      	ldr	r0, [r4, #0]
 800068e:	f007 fd73 	bl	8008178 <_lv_style_set_color>
	    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 8000692:	48c5      	ldr	r0, [pc, #788]	; (80009a8 <lv_theme_myown_init+0x360>)
 8000694:	f7ff ffc4 	bl	8000620 <lv_color_hex>
 8000698:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 800069a:	4602      	mov	r2, r0
 800069c:	f248 0189 	movw	r1, #32905	; 0x8089
 80006a0:	4630      	mov	r0, r6
 80006a2:	f007 fd69 	bl	8008178 <_lv_style_set_color>
	    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 80006a6:	48c0      	ldr	r0, [pc, #768]	; (80009a8 <lv_theme_myown_init+0x360>)
 80006a8:	f7ff ffba 	bl	8000620 <lv_color_hex>
 80006ac:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 80006ae:	4602      	mov	r2, r0
 80006b0:	2179      	movs	r1, #121	; 0x79
 80006b2:	4630      	mov	r0, r6
 80006b4:	f007 fd60 	bl	8008178 <_lv_style_set_color>
	    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 80006b8:	48bb      	ldr	r0, [pc, #748]	; (80009a8 <lv_theme_myown_init+0x360>)
 80006ba:	f7ff ffb1 	bl	8000620 <lv_color_hex>
 80006be:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
 80006c0:	4602      	mov	r2, r0
 80006c2:	f248 018a 	movw	r1, #32906	; 0x808a
 80006c6:	4630      	mov	r0, r6
 80006c8:	f007 fd56 	bl	8008178 <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
 80006cc:	89aa      	ldrh	r2, [r5, #12]
 80006ce:	f248 018b 	movw	r1, #32907	; 0x808b
 80006d2:	6820      	ldr	r0, [r4, #0]
 80006d4:	f007 fd50 	bl	8008178 <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 80006d8:	696a      	ldr	r2, [r5, #20]
 80006da:	217e      	movs	r1, #126	; 0x7e
 80006dc:	6820      	ldr	r0, [r4, #0]
 80006de:	f007 fde9 	bl	80082b4 <_lv_style_set_ptr>
	    style_init_reset(&styles->bg);
 80006e2:	6820      	ldr	r0, [r4, #0]
 80006e4:	3004      	adds	r0, #4
 80006e6:	f7ff ff99 	bl	800061c <style_init_reset>
	    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
 80006ea:	2000      	movs	r0, #0
 80006ec:	6826      	ldr	r6, [r4, #0]
 80006ee:	f00d fe99 	bl	800e424 <lv_disp_get_dpi>
 80006f2:	281d      	cmp	r0, #29
 80006f4:	f106 0604 	add.w	r6, r6, #4
 80006f8:	f340 82c4 	ble.w	8000c84 <lv_theme_myown_init+0x63c>
 80006fc:	2000      	movs	r0, #0
 80006fe:	f00d fe91 	bl	800e424 <lv_disp_get_dpi>
 8000702:	f100 020a 	add.w	r2, r0, #10
 8000706:	2014      	movs	r0, #20
 8000708:	fb92 f2f0 	sdiv	r2, r2, r0
 800070c:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 800070e:	4630      	mov	r0, r6
 8000710:	2101      	movs	r1, #1
 8000712:	f007 fce3 	bl	80080dc <_lv_style_set_int>
	    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8000716:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8000718:	22ff      	movs	r2, #255	; 0xff
 800071a:	212c      	movs	r1, #44	; 0x2c
 800071c:	3004      	adds	r0, #4
 800071e:	f007 fd79 	bl	8008214 <_lv_style_set_opa>
	    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
 8000722:	6820      	ldr	r0, [r4, #0]
 8000724:	1d06      	adds	r6, r0, #4
 8000726:	48a1      	ldr	r0, [pc, #644]	; (80009ac <lv_theme_myown_init+0x364>)
 8000728:	f7ff ff7a 	bl	8000620 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 800072c:	2129      	movs	r1, #41	; 0x29
 800072e:	4602      	mov	r2, r0
 8000730:	4630      	mov	r0, r6
 8000732:	f007 fd21 	bl	8008178 <_lv_style_set_color>
	    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8000736:	6820      	ldr	r0, [r4, #0]
 8000738:	1d06      	adds	r6, r0, #4
 800073a:	489d      	ldr	r0, [pc, #628]	; (80009b0 <lv_theme_myown_init+0x368>)
 800073c:	f7ff ff70 	bl	8000620 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8000740:	2139      	movs	r1, #57	; 0x39
 8000742:	4602      	mov	r2, r0
 8000744:	4630      	mov	r0, r6
 8000746:	f007 fd17 	bl	8008178 <_lv_style_set_color>
	    lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED, theme.color_primary);
 800074a:	6820      	ldr	r0, [r4, #0]
 800074c:	89aa      	ldrh	r2, [r5, #12]
 800074e:	f240 2139 	movw	r1, #569	; 0x239
 8000752:	3004      	adds	r0, #4
 8000754:	f007 fd10 	bl	8008178 <_lv_style_set_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
 8000758:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 800075a:	2201      	movs	r2, #1
 800075c:	2190      	movs	r1, #144	; 0x90
 800075e:	3004      	adds	r0, #4
 8000760:	f007 fcbc 	bl	80080dc <_lv_style_set_int>
    lv_style_set_scale_end_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
 8000764:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 8000766:	2201      	movs	r2, #1
 8000768:	21c3      	movs	r1, #195	; 0xc3
 800076a:	3004      	adds	r0, #4
 800076c:	f007 fcb6 	bl	80080dc <_lv_style_set_int>
    lv_style_set_scale_end_color(&styles->bg, LV_STATE_DEFAULT, theme.color_primary);
 8000770:	6820      	ldr	r0, [r4, #0]
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, LV_COLOR_SILVER);
 8000772:	4e90      	ldr	r6, [pc, #576]	; (80009b4 <lv_theme_myown_init+0x36c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 8000774:	89aa      	ldrh	r2, [r5, #12]
 8000776:	21ca      	movs	r1, #202	; 0xca
 8000778:	3004      	adds	r0, #4
 800077a:	f007 fcfd 	bl	8008178 <_lv_style_set_color>
 800077e:	8833      	ldrh	r3, [r6, #0]
 8000780:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8000782:	b29a      	uxth	r2, r3
 8000784:	f248 0189 	movw	r1, #32905	; 0x8089
 8000788:	3004      	adds	r0, #4
 800078a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800078e:	f007 fcf3 	bl	8008178 <_lv_style_set_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8000792:	2204      	movs	r2, #4
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, MY_DEFAULT_PADDING);
 8000794:	6820      	ldr	r0, [r4, #0]
 8000796:	2112      	movs	r1, #18
 8000798:	4410      	add	r0, r2
 800079a:	f007 fc9f 	bl	80080dc <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 800079e:	2204      	movs	r2, #4
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, MY_DEFAULT_PADDING);
 80007a0:	6820      	ldr	r0, [r4, #0]
 80007a2:	2113      	movs	r1, #19
 80007a4:	4410      	add	r0, r2
 80007a6:	f007 fc99 	bl	80080dc <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 80007aa:	2204      	movs	r2, #4
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, MY_DEFAULT_PADDING);
 80007ac:	6820      	ldr	r0, [r4, #0]
 80007ae:	2110      	movs	r1, #16
 80007b0:	4410      	add	r0, r2
 80007b2:	f007 fc93 	bl	80080dc <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80007b6:	2204      	movs	r2, #4
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, MY_DEFAULT_PADDING);
 80007b8:	6820      	ldr	r0, [r4, #0]
 80007ba:	2111      	movs	r1, #17
 80007bc:	4410      	add	r0, r2
 80007be:	f007 fc8d 	bl	80080dc <_lv_style_set_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 80007c2:	2204      	movs	r2, #4
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, MY_DEFAULT_PADDING);
 80007c4:	6820      	ldr	r0, [r4, #0]
 80007c6:	2114      	movs	r1, #20
 80007c8:	4410      	add	r0, r2
 80007ca:	f007 fc87 	bl	80080dc <_lv_style_set_int>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, 0);
 80007ce:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 80007d0:	2200      	movs	r2, #0
 80007d2:	2101      	movs	r1, #1
 80007d4:	3004      	adds	r0, #4
 80007d6:	f007 fc81 	bl	80080dc <_lv_style_set_int>
    style_init_reset(&styles->btn);
 80007da:	6820      	ldr	r0, [r4, #0]
 80007dc:	3008      	adds	r0, #8
 80007de:	f7ff ff1d 	bl	800061c <style_init_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, MY_BUTTON_RADIUS);
 80007e2:	6820      	ldr	r0, [r4, #0]
 80007e4:	2203      	movs	r2, #3
 80007e6:	2101      	movs	r1, #1
 80007e8:	3008      	adds	r0, #8
 80007ea:	f007 fc77 	bl	80080dc <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, 1);
 80007ee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 80007f0:	2201      	movs	r2, #1
 80007f2:	2130      	movs	r1, #48	; 0x30
 80007f4:	3008      	adds	r0, #8
 80007f6:	f007 fc71 	bl	80080dc <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_PRESSED, 1);
 80007fa:	6820      	ldr	r0, [r4, #0]
 80007fc:	2201      	movs	r2, #1
 80007fe:	f241 0130 	movw	r1, #4144	; 0x1030
 8000802:	3008      	adds	r0, #8
 8000804:	f007 fc6a 	bl	80080dc <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_CHECKED, 1);
 8000808:	6820      	ldr	r0, [r4, #0]
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8000810:	3008      	adds	r0, #8
 8000812:	f007 fc63 	bl	80080dc <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_FOCUSED, 1);
 8000816:	6820      	ldr	r0, [r4, #0]
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 710c 	mov.w	r1, #560	; 0x230
 800081e:	3008      	adds	r0, #8
 8000820:	f007 fc5c 	bl	80080dc <_lv_style_set_int>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, MY_BODER_COLOR);
 8000824:	8873      	ldrh	r3, [r6, #2]
 8000826:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 8000828:	b29a      	uxth	r2, r3
 800082a:	2139      	movs	r1, #57	; 0x39
 800082c:	3008      	adds	r0, #8
 800082e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8000832:	f007 fca1 	bl	8008178 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, MY_BTN_BG_DEFAULT_COLOR);
 8000836:	6820      	ldr	r0, [r4, #0]
 8000838:	f100 0708 	add.w	r7, r0, #8
 800083c:	485e      	ldr	r0, [pc, #376]	; (80009b8 <lv_theme_myown_init+0x370>)
 800083e:	f7ff feef 	bl	8000620 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8000842:	2129      	movs	r1, #41	; 0x29
 8000844:	4602      	mov	r2, r0
 8000846:	4638      	mov	r0, r7
 8000848:	f007 fc96 	bl	8008178 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, theme.color_primary);
 800084c:	6820      	ldr	r0, [r4, #0]
 800084e:	89aa      	ldrh	r2, [r5, #12]
 8000850:	f241 0129 	movw	r1, #4137	; 0x1029
 8000854:	3008      	adds	r0, #8
 8000856:	f007 fc8f 	bl	8008178 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, theme.color_primary);
 800085a:	6820      	ldr	r0, [r4, #0]
 800085c:	89aa      	ldrh	r2, [r5, #12]
 800085e:	f240 1129 	movw	r1, #297	; 0x129
 8000862:	3008      	adds	r0, #8
 8000864:	f007 fc88 	bl	8008178 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary, LV_OPA_10));
 8000868:	6820      	ldr	r0, [r4, #0]
 800086a:	2119      	movs	r1, #25
 800086c:	f100 0708 	add.w	r7, r0, #8
 8000870:	89a8      	ldrh	r0, [r5, #12]
 8000872:	f00e fba3 	bl	800efbc <lv_color_darken>
 8000876:	f241 1129 	movw	r1, #4393	; 0x1129
 800087a:	4602      	mov	r2, r0
 800087c:	4638      	mov	r0, r7
 800087e:	f007 fc7b 	bl	8008178 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, LV_COLOR_SILVER);
 8000882:	6820      	ldr	r0, [r4, #0]
 8000884:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8000888:	f242 0129 	movw	r1, #8233	; 0x2029
 800088c:	3008      	adds	r0, #8
 800088e:	f007 fc73 	bl	8008178 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, LV_COLOR_GRAY);
 8000892:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8000894:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000898:	f24a 0189 	movw	r1, #41097	; 0xa089
 800089c:	3008      	adds	r0, #8
 800089e:	f007 fc6b 	bl	8008178 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, LV_COLOR_GRAY);
 80008a2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 80008a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80008a8:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
 80008ac:	3008      	adds	r0, #8
 80008ae:	f007 fc63 	bl	8008178 <_lv_style_set_color>
    style_init_reset(&styles->round);
 80008b2:	6820      	ldr	r0, [r4, #0]
 80008b4:	300c      	adds	r0, #12
 80008b6:	f7ff feb1 	bl	800061c <style_init_reset>
    lv_style_set_radius(&styles->round, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80008ba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 80008bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80008c0:	2101      	movs	r1, #1
 80008c2:	300c      	adds	r0, #12
 80008c4:	f007 fc0a 	bl	80080dc <_lv_style_set_int>
    style_init_reset(&styles->color);
 80008c8:	6820      	ldr	r0, [r4, #0]
 80008ca:	3010      	adds	r0, #16
 80008cc:	f7ff fea6 	bl	800061c <style_init_reset>
    lv_style_set_bg_color(&styles->color, LV_STATE_DEFAULT, theme.color_primary);
 80008d0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 80008d2:	89aa      	ldrh	r2, [r5, #12]
 80008d4:	2129      	movs	r1, #41	; 0x29
 80008d6:	3010      	adds	r0, #16
 80008d8:	f007 fc4e 	bl	8008178 <_lv_style_set_color>
    lv_style_set_line_color(&styles->color, LV_STATE_DEFAULT, theme.color_primary);
 80008dc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 80008de:	89aa      	ldrh	r2, [r5, #12]
 80008e0:	2199      	movs	r1, #153	; 0x99
 80008e2:	3010      	adds	r0, #16
 80008e4:	f007 fc48 	bl	8008178 <_lv_style_set_color>
    style_init_reset(&styles->gray);
 80008e8:	6820      	ldr	r0, [r4, #0]
 80008ea:	3014      	adds	r0, #20
 80008ec:	f7ff fe96 	bl	800061c <style_init_reset>
    lv_style_set_bg_color(&styles->gray, LV_STATE_DEFAULT, LV_COLOR_SILVER);
 80008f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 80008f2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80008f6:	2129      	movs	r1, #41	; 0x29
 80008f8:	3014      	adds	r0, #20
 80008fa:	f007 fc3d 	bl	8008178 <_lv_style_set_color>
    lv_style_set_line_color(&styles->gray, LV_STATE_DEFAULT, LV_COLOR_SILVER);
 80008fe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8000900:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8000904:	2199      	movs	r1, #153	; 0x99
 8000906:	3014      	adds	r0, #20
 8000908:	f007 fc36 	bl	8008178 <_lv_style_set_color>
    lv_style_set_text_color(&styles->gray, LV_STATE_DEFAULT, LV_COLOR_GRAY);
 800090c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 800090e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000912:	f248 0189 	movw	r1, #32905	; 0x8089
 8000916:	3014      	adds	r0, #20
 8000918:	f007 fc2e 	bl	8008178 <_lv_style_set_color>
    style_init_reset(&styles->tick_line);
 800091c:	6820      	ldr	r0, [r4, #0]
 800091e:	3018      	adds	r0, #24
 8000920:	f7ff fe7c 	bl	800061c <style_init_reset>
    lv_style_set_line_width(&styles->tick_line, LV_STATE_DEFAULT, 1);
 8000924:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 8000926:	2201      	movs	r2, #1
 8000928:	2190      	movs	r1, #144	; 0x90
 800092a:	3018      	adds	r0, #24
 800092c:	f007 fbd6 	bl	80080dc <_lv_style_set_int>
    lv_style_set_scale_end_line_width(&styles->tick_line, LV_STATE_DEFAULT, 1);
 8000930:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 8000932:	2201      	movs	r2, #1
 8000934:	21c3      	movs	r1, #195	; 0xc3
 8000936:	3018      	adds	r0, #24
 8000938:	f007 fbd0 	bl	80080dc <_lv_style_set_int>
    lv_style_set_scale_end_color(&styles->tick_line, LV_STATE_DEFAULT, theme.color_primary);
 800093c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 800093e:	89aa      	ldrh	r2, [r5, #12]
 8000940:	21ca      	movs	r1, #202	; 0xca
 8000942:	3018      	adds	r0, #24
 8000944:	f007 fc18 	bl	8008178 <_lv_style_set_color>
    style_init_reset(&styles->tight);
 8000948:	6820      	ldr	r0, [r4, #0]
 800094a:	301c      	adds	r0, #28
 800094c:	f7ff fe66 	bl	800061c <style_init_reset>
    lv_style_set_pad_left(&styles->tight, LV_STATE_DEFAULT, 0);
 8000950:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8000952:	2200      	movs	r2, #0
 8000954:	2112      	movs	r1, #18
 8000956:	301c      	adds	r0, #28
 8000958:	f007 fbc0 	bl	80080dc <_lv_style_set_int>
    lv_style_set_pad_right(&styles->tight, LV_STATE_DEFAULT, 0);
 800095c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 800095e:	2200      	movs	r2, #0
 8000960:	2113      	movs	r1, #19
 8000962:	301c      	adds	r0, #28
 8000964:	f007 fbba 	bl	80080dc <_lv_style_set_int>
    lv_style_set_pad_top(&styles->tight, LV_STATE_DEFAULT, 0);
 8000968:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 800096a:	2200      	movs	r2, #0
 800096c:	2110      	movs	r1, #16
 800096e:	301c      	adds	r0, #28
 8000970:	f007 fbb4 	bl	80080dc <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->tight, LV_STATE_DEFAULT, 0);
 8000974:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8000976:	2200      	movs	r2, #0
 8000978:	2111      	movs	r1, #17
 800097a:	301c      	adds	r0, #28
 800097c:	f007 fbae 	bl	80080dc <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->tight, LV_STATE_DEFAULT, 0);
 8000980:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8000982:	2200      	movs	r2, #0
 8000984:	2114      	movs	r1, #20
 8000986:	301c      	adds	r0, #28
 8000988:	f007 fba8 	bl	80080dc <_lv_style_set_int>
    style_init_reset(&styles->bar_bg);
 800098c:	6820      	ldr	r0, [r4, #0]
 800098e:	3020      	adds	r0, #32
 8000990:	f7ff fe44 	bl	800061c <style_init_reset>
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8000994:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8000996:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800099a:	2101      	movs	r1, #1
 800099c:	3020      	adds	r0, #32
 800099e:	e00d      	b.n	80009bc <lv_theme_myown_init+0x374>
 80009a0:	200000f8 	.word	0x200000f8
 80009a4:	200000f4 	.word	0x200000f4
 80009a8:	00e7e9ec 	.word	0x00e7e9ec
 80009ac:	00586273 	.word	0x00586273
 80009b0:	00808a97 	.word	0x00808a97
 80009b4:	08015898 	.word	0x08015898
 80009b8:	00222222 	.word	0x00222222
 80009bc:	f007 fb8e 	bl	80080dc <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 80009c0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 80009c2:	22ff      	movs	r2, #255	; 0xff
 80009c4:	212c      	movs	r1, #44	; 0x2c
 80009c6:	3020      	adds	r0, #32
 80009c8:	f007 fc24 	bl	8008214 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 80009cc:	6820      	ldr	r0, [r4, #0]
 80009ce:	f100 0720 	add.w	r7, r0, #32
 80009d2:	48b5      	ldr	r0, [pc, #724]	; (8000ca8 <lv_theme_myown_init+0x660>)
 80009d4:	f7ff fe24 	bl	8000620 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 80009d8:	2129      	movs	r1, #41	; 0x29
 80009da:	4602      	mov	r2, r0
 80009dc:	4638      	mov	r0, r7
 80009de:	f007 fbcb 	bl	8008178 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 80009e2:	88b3      	ldrh	r3, [r6, #4]
 80009e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	2179      	movs	r1, #121	; 0x79
 80009ea:	3020      	adds	r0, #32
 80009ec:	f8ad 3004 	strh.w	r3, [sp, #4]
 80009f0:	f007 fbc2 	bl	8008178 <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
 80009f4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 80009f6:	89aa      	ldrh	r2, [r5, #12]
 80009f8:	2149      	movs	r1, #73	; 0x49
 80009fa:	3020      	adds	r0, #32
 80009fc:	f007 fbbc 	bl	8008178 <_lv_style_set_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
 8000a00:	6820      	ldr	r0, [r4, #0]
 8000a02:	89ea      	ldrh	r2, [r5, #14]
 8000a04:	f240 4149 	movw	r1, #1097	; 0x449
 8000a08:	3020      	adds	r0, #32
 8000a0a:	f007 fbb5 	bl	8008178 <_lv_style_set_color>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 8000a0e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 8000a10:	2200      	movs	r2, #0
 8000a12:	214c      	movs	r1, #76	; 0x4c
 8000a14:	3020      	adds	r0, #32
 8000a16:	f007 fbfd 	bl	8008214 <_lv_style_set_opa>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
 8000a1a:	6820      	ldr	r0, [r4, #0]
 8000a1c:	227f      	movs	r2, #127	; 0x7f
 8000a1e:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8000a22:	3020      	adds	r0, #32
 8000a24:	f007 fbf6 	bl	8008214 <_lv_style_set_opa>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, 1);
 8000a28:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	3020      	adds	r0, #32
 8000a30:	f007 fb54 	bl	80080dc <_lv_style_set_int>
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, 0);
 8000a34:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8000a36:	2200      	movs	r2, #0
 8000a38:	21b0      	movs	r1, #176	; 0xb0
 8000a3a:	3020      	adds	r0, #32
 8000a3c:	f007 fb4e 	bl	80080dc <_lv_style_set_int>
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 8000a40:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 8000a42:	224c      	movs	r2, #76	; 0x4c
 8000a44:	21b7      	movs	r1, #183	; 0xb7
 8000a46:	3020      	adds	r0, #32
 8000a48:	f007 fb48 	bl	80080dc <_lv_style_set_int>
    style_init_reset(&styles->bar_indic);
 8000a4c:	6820      	ldr	r0, [r4, #0]
 8000a4e:	3024      	adds	r0, #36	; 0x24
 8000a50:	f7ff fde4 	bl	800061c <style_init_reset>
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 8000a54:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8000a56:	22ff      	movs	r2, #255	; 0xff
 8000a58:	212c      	movs	r1, #44	; 0x2c
 8000a5a:	3024      	adds	r0, #36	; 0x24
 8000a5c:	f007 fbda 	bl	8008214 <_lv_style_set_opa>
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8000a60:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8000a62:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000a66:	2101      	movs	r1, #1
 8000a68:	3024      	adds	r0, #36	; 0x24
 8000a6a:	f007 fb37 	bl	80080dc <_lv_style_set_int>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
 8000a6e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8000a70:	89aa      	ldrh	r2, [r5, #12]
 8000a72:	2129      	movs	r1, #41	; 0x29
 8000a74:	3024      	adds	r0, #36	; 0x24
 8000a76:	f007 fb7f 	bl	8008178 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
 8000a7a:	6820      	ldr	r0, [r4, #0]
 8000a7c:	f245 128c 	movw	r2, #20876	; 0x518c
 8000a80:	f242 0129 	movw	r1, #8233	; 0x2029
 8000a84:	3024      	adds	r0, #36	; 0x24
 8000a86:	f007 fb77 	bl	8008178 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8000a8a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 8000a8c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8000a90:	2179      	movs	r1, #121	; 0x79
 8000a92:	3024      	adds	r0, #36	; 0x24
 8000a94:	f007 fb70 	bl	8008178 <_lv_style_set_color>
    style_init_reset(&styles->slider_knob);
 8000a98:	6820      	ldr	r0, [r4, #0]
 8000a9a:	3028      	adds	r0, #40	; 0x28
 8000a9c:	f7ff fdbe 	bl	800061c <style_init_reset>
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
 8000aa0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8000aa2:	22ff      	movs	r2, #255	; 0xff
 8000aa4:	212c      	movs	r1, #44	; 0x2c
 8000aa6:	3028      	adds	r0, #40	; 0x28
 8000aa8:	f007 fbb4 	bl	8008214 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, theme.color_primary);
 8000aac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8000aae:	89aa      	ldrh	r2, [r5, #12]
 8000ab0:	2129      	movs	r1, #41	; 0x29
 8000ab2:	3028      	adds	r0, #40	; 0x28
 8000ab4:	f007 fb60 	bl	8008178 <_lv_style_set_color>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, lv_color_hex(0x31404f));
 8000ab8:	6820      	ldr	r0, [r4, #0]
 8000aba:	f100 0628 	add.w	r6, r0, #40	; 0x28
 8000abe:	487b      	ldr	r0, [pc, #492]	; (8000cac <lv_theme_myown_init+0x664>)
 8000ac0:	f7ff fdae 	bl	8000620 <lv_color_hex>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 8000ac4:	2179      	movs	r1, #121	; 0x79
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	4630      	mov	r0, r6
 8000aca:	f007 fb55 	bl	8008178 <_lv_style_set_color>
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8000ace:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8000ad0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	3028      	adds	r0, #40	; 0x28
 8000ad8:	f007 fb00 	bl	80080dc <_lv_style_set_int>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8000adc:	2000      	movs	r0, #0
 8000ade:	6826      	ldr	r6, [r4, #0]
 8000ae0:	f00d fca0 	bl	800e424 <lv_disp_get_dpi>
 8000ae4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000ae8:	28ef      	cmp	r0, #239	; 0xef
 8000aea:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8000aee:	f340 80cb 	ble.w	8000c88 <lv_theme_myown_init+0x640>
 8000af2:	2000      	movs	r0, #0
 8000af4:	f00d fc96 	bl	800e424 <lv_disp_get_dpi>
 8000af8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000afc:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8000b00:	20a0      	movs	r0, #160	; 0xa0
 8000b02:	fb92 f2f0 	sdiv	r2, r2, r0
 8000b06:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8000b08:	4630      	mov	r0, r6
 8000b0a:	2112      	movs	r1, #18
 8000b0c:	f007 fae6 	bl	80080dc <_lv_style_set_int>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8000b10:	2000      	movs	r0, #0
 8000b12:	6826      	ldr	r6, [r4, #0]
 8000b14:	f00d fc86 	bl	800e424 <lv_disp_get_dpi>
 8000b18:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000b1c:	28ef      	cmp	r0, #239	; 0xef
 8000b1e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8000b22:	f340 80b3 	ble.w	8000c8c <lv_theme_myown_init+0x644>
 8000b26:	2000      	movs	r0, #0
 8000b28:	f00d fc7c 	bl	800e424 <lv_disp_get_dpi>
 8000b2c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000b30:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8000b34:	20a0      	movs	r0, #160	; 0xa0
 8000b36:	fb92 f2f0 	sdiv	r2, r2, r0
 8000b3a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8000b3c:	4630      	mov	r0, r6
 8000b3e:	2113      	movs	r1, #19
 8000b40:	f007 facc 	bl	80080dc <_lv_style_set_int>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8000b44:	2000      	movs	r0, #0
 8000b46:	6826      	ldr	r6, [r4, #0]
 8000b48:	f00d fc6c 	bl	800e424 <lv_disp_get_dpi>
 8000b4c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000b50:	28ef      	cmp	r0, #239	; 0xef
 8000b52:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8000b56:	f340 809b 	ble.w	8000c90 <lv_theme_myown_init+0x648>
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f00d fc62 	bl	800e424 <lv_disp_get_dpi>
 8000b60:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000b64:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8000b68:	20a0      	movs	r0, #160	; 0xa0
 8000b6a:	fb92 f2f0 	sdiv	r2, r2, r0
 8000b6e:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8000b70:	4630      	mov	r0, r6
 8000b72:	2110      	movs	r1, #16
 8000b74:	f007 fab2 	bl	80080dc <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8000b78:	2000      	movs	r0, #0
 8000b7a:	6826      	ldr	r6, [r4, #0]
 8000b7c:	f00d fc52 	bl	800e424 <lv_disp_get_dpi>
 8000b80:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000b84:	28ef      	cmp	r0, #239	; 0xef
 8000b86:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8000b8a:	f340 8083 	ble.w	8000c94 <lv_theme_myown_init+0x64c>
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f00d fc48 	bl	800e424 <lv_disp_get_dpi>
 8000b94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000b98:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8000b9c:	20a0      	movs	r0, #160	; 0xa0
 8000b9e:	fb92 f2f0 	sdiv	r2, r2, r0
 8000ba2:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8000ba4:	2111      	movs	r1, #17
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	f007 fa98 	bl	80080dc <_lv_style_set_int>
    style_init_reset(&styles->slider_bg);
 8000bac:	6820      	ldr	r0, [r4, #0]
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8000bae:	260a      	movs	r6, #10
    style_init_reset(&styles->slider_bg);
 8000bb0:	302c      	adds	r0, #44	; 0x2c
 8000bb2:	f7ff fd33 	bl	800061c <style_init_reset>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	6827      	ldr	r7, [r4, #0]
 8000bba:	f00d fc33 	bl	800e424 <lv_disp_get_dpi>
 8000bbe:	4370      	muls	r0, r6
 8000bc0:	28ef      	cmp	r0, #239	; 0xef
 8000bc2:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8000bc6:	dd67      	ble.n	8000c98 <lv_theme_myown_init+0x650>
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f00d fc2b 	bl	800e424 <lv_disp_get_dpi>
 8000bce:	fb06 f200 	mul.w	r2, r6, r0
 8000bd2:	20a0      	movs	r0, #160	; 0xa0
 8000bd4:	3250      	adds	r2, #80	; 0x50
 8000bd6:	fb92 f2f0 	sdiv	r2, r2, r0
 8000bda:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8000bdc:	4638      	mov	r0, r7
 8000bde:	2117      	movs	r1, #23
 8000be0:	f007 fa7c 	bl	80080dc <_lv_style_set_int>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8000be4:	2000      	movs	r0, #0
 8000be6:	6827      	ldr	r7, [r4, #0]
 8000be8:	260a      	movs	r6, #10
 8000bea:	f00d fc1b 	bl	800e424 <lv_disp_get_dpi>
 8000bee:	4370      	muls	r0, r6
 8000bf0:	28ef      	cmp	r0, #239	; 0xef
 8000bf2:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8000bf6:	dd51      	ble.n	8000c9c <lv_theme_myown_init+0x654>
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f00d fc13 	bl	800e424 <lv_disp_get_dpi>
 8000bfe:	fb06 f200 	mul.w	r2, r6, r0
 8000c02:	20a0      	movs	r0, #160	; 0xa0
 8000c04:	3250      	adds	r2, #80	; 0x50
 8000c06:	fb92 f2f0 	sdiv	r2, r2, r0
 8000c0a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 8000c0c:	4638      	mov	r0, r7
 8000c0e:	2118      	movs	r1, #24
 8000c10:	f007 fa64 	bl	80080dc <_lv_style_set_int>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8000c14:	2000      	movs	r0, #0
 8000c16:	6827      	ldr	r7, [r4, #0]
 8000c18:	260a      	movs	r6, #10
 8000c1a:	f00d fc03 	bl	800e424 <lv_disp_get_dpi>
 8000c1e:	4370      	muls	r0, r6
 8000c20:	28ef      	cmp	r0, #239	; 0xef
 8000c22:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8000c26:	dd3b      	ble.n	8000ca0 <lv_theme_myown_init+0x658>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f00d fbfb 	bl	800e424 <lv_disp_get_dpi>
 8000c2e:	fb06 f200 	mul.w	r2, r6, r0
 8000c32:	20a0      	movs	r0, #160	; 0xa0
 8000c34:	3250      	adds	r2, #80	; 0x50
 8000c36:	fb92 f2f0 	sdiv	r2, r2, r0
 8000c3a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 8000c3c:	2115      	movs	r1, #21
 8000c3e:	4638      	mov	r0, r7
 8000c40:	f007 fa4c 	bl	80080dc <_lv_style_set_int>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8000c44:	2000      	movs	r0, #0
 8000c46:	6826      	ldr	r6, [r4, #0]
 8000c48:	f00d fbec 	bl	800e424 <lv_disp_get_dpi>
 8000c4c:	240a      	movs	r4, #10
 8000c4e:	4360      	muls	r0, r4
 8000c50:	28ef      	cmp	r0, #239	; 0xef
 8000c52:	f106 062c 	add.w	r6, r6, #44	; 0x2c
 8000c56:	dd25      	ble.n	8000ca4 <lv_theme_myown_init+0x65c>
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f00d fbe3 	bl	800e424 <lv_disp_get_dpi>
 8000c5e:	fb04 f200 	mul.w	r2, r4, r0
 8000c62:	20a0      	movs	r0, #160	; 0xa0
 8000c64:	3250      	adds	r2, #80	; 0x50
 8000c66:	fb92 f2f0 	sdiv	r2, r2, r0
 8000c6a:	b212      	sxth	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	2116      	movs	r1, #22
 8000c70:	f007 fa34 	bl	80080dc <_lv_style_set_int>
    theme.apply_xcb = NULL;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <lv_theme_myown_init+0x668>)
    theme.apply_xcb = NULL;
 8000c78:	606b      	str	r3, [r5, #4]
    theme.apply_cb = theme_apply;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <lv_theme_myown_init+0x66c>)
 8000c7c:	602b      	str	r3, [r5, #0]
}
 8000c7e:	b003      	add	sp, #12
 8000c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
 8000c84:	2201      	movs	r2, #1
 8000c86:	e542      	b.n	800070e <lv_theme_myown_init+0xc6>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8000c88:	2201      	movs	r2, #1
 8000c8a:	e73d      	b.n	8000b08 <lv_theme_myown_init+0x4c0>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	e755      	b.n	8000b3c <lv_theme_myown_init+0x4f4>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8000c90:	2201      	movs	r2, #1
 8000c92:	e76d      	b.n	8000b70 <lv_theme_myown_init+0x528>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8000c94:	2201      	movs	r2, #1
 8000c96:	e785      	b.n	8000ba4 <lv_theme_myown_init+0x55c>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8000c98:	2201      	movs	r2, #1
 8000c9a:	e79f      	b.n	8000bdc <lv_theme_myown_init+0x594>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	e7b5      	b.n	8000c0c <lv_theme_myown_init+0x5c4>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	e7cb      	b.n	8000c3c <lv_theme_myown_init+0x5f4>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	e7e1      	b.n	8000c6c <lv_theme_myown_init+0x624>
 8000ca8:	0045494d 	.word	0x0045494d
 8000cac:	0031404f 	.word	0x0031404f
 8000cb0:	200000f8 	.word	0x200000f8
 8000cb4:	08000475 	.word	0x08000475

08000cb8 <lv_page_close_event_cb>:
    }

}

static void lv_page_close_event_cb(lv_obj_t* btn, lv_event_t event)
{
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	4604      	mov	r4, r0
 8000cbc:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btn, "lv_btn");
 8000cbe:	f00e f983 	bl	800efc8 <lv_debug_check_null>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b920      	cbnz	r0, 8000cd0 <lv_page_close_event_cb+0x18>
 8000cc6:	4622      	mov	r2, r4
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <lv_page_close_event_cb+0x38>)
 8000cca:	f00e f981 	bl	800efd0 <lv_debug_log_error>
 8000cce:	e7fe      	b.n	8000cce <lv_page_close_event_cb+0x16>

    if (event == LV_EVENT_RELEASED) {
 8000cd0:	2d07      	cmp	r5, #7
 8000cd2:	d10c      	bne.n	8000cee <lv_page_close_event_cb+0x36>
        lv_obj_t* page = lv_win_get_from_btn(btn);
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f014 f8ab 	bl	8014e30 <lv_win_get_from_btn>

        lv_obj_del(page);
 8000cda:	f005 fa2f 	bl	800613c <lv_obj_del>
        //lv_group_focus_obj(btn1);

        lv_indev_set_group(indev_encoder, grpMain);
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <lv_page_close_event_cb+0x3c>)
 8000ce0:	6819      	ldr	r1, [r3, #0]
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <lv_page_close_event_cb+0x40>)
 8000ce4:	6818      	ldr	r0, [r3, #0]
    }
}
 8000ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_indev_set_group(indev_encoder, grpMain);
 8000cea:	f002 ba07 	b.w	80030fc <lv_indev_set_group>
}
 8000cee:	bd38      	pop	{r3, r4, r5, pc}
 8000cf0:	080158e8 	.word	0x080158e8
 8000cf4:	2000014c 	.word	0x2000014c
 8000cf8:	200034a8 	.word	0x200034a8

08000cfc <JK_Test_Button.isra.1>:
static void JK_Test_Button(lv_obj_t* btn, lv_obj_t* parent, const char* symbol, const char* text, lv_event_cb_t event_cb) {
 8000cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d00:	4605      	mov	r5, r0
 8000d02:	4699      	mov	r9, r3
 8000d04:	460f      	mov	r7, r1
 8000d06:	4690      	mov	r8, r2
    lv_obj_set_pos(btn, posX, posY);
 8000d08:	4c18      	ldr	r4, [pc, #96]	; (8000d6c <JK_Test_Button.isra.1+0x70>)
 8000d0a:	4e19      	ldr	r6, [pc, #100]	; (8000d70 <JK_Test_Button.isra.1+0x74>)
 8000d0c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8000d10:	f9b6 1000 	ldrsh.w	r1, [r6]
 8000d14:	f003 fe40 	bl	8004998 <lv_obj_set_pos>
    lv_obj_set_size(btn, width, height);
 8000d18:	221e      	movs	r2, #30
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	2182      	movs	r1, #130	; 0x82
 8000d1e:	f004 fac9 	bl	80052b4 <lv_obj_set_size>
    lv_obj_set_event_cb(btn, event_cb);
 8000d22:	4628      	mov	r0, r5
 8000d24:	4649      	mov	r1, r9
 8000d26:	f003 fafd 	bl	8004324 <lv_obj_set_event_cb>
    lv_obj_t* label = lv_label_create(btn, NULL);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	f012 fad3 	bl	80132d8 <lv_label_create>
    lv_label_set_text_fmt(label, "%s %s", symbol, text);
 8000d32:	4643      	mov	r3, r8
 8000d34:	463a      	mov	r2, r7
 8000d36:	490f      	ldr	r1, [pc, #60]	; (8000d74 <JK_Test_Button.isra.1+0x78>)
 8000d38:	f012 f9fe 	bl	8013138 <lv_label_set_text_fmt>
    lv_obj_add_style(btn, LV_BTN_PART_MAIN, &style_buttons);
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <JK_Test_Button.isra.1+0x7c>)
 8000d40:	2100      	movs	r1, #0
 8000d42:	f005 f85d 	bl	8005e00 <lv_obj_add_style>
    if ((posY + height + yShift) < lv_obj_get_height(pgMain)) {
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <JK_Test_Button.isra.1+0x80>)
 8000d48:	8825      	ldrh	r5, [r4, #0]
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	f003 fc6a 	bl	8004624 <lv_obj_get_height>
 8000d50:	3528      	adds	r5, #40	; 0x28
 8000d52:	4285      	cmp	r5, r0
        posX = posX + width + xShift;
 8000d54:	bfa9      	itett	ge
 8000d56:	8833      	ldrhge	r3, [r6, #0]
        posY = posY + height + yShift;
 8000d58:	8823      	ldrhlt	r3, [r4, #0]
        posX = posX + width + xShift;
 8000d5a:	3396      	addge	r3, #150	; 0x96
 8000d5c:	8033      	strhge	r3, [r6, #0]
        posY = yShift;
 8000d5e:	bfac      	ite	ge
 8000d60:	230a      	movge	r3, #10
        posY = posY + height + yShift;
 8000d62:	3328      	addlt	r3, #40	; 0x28
        posY = yShift;
 8000d64:	8023      	strh	r3, [r4, #0]
}
 8000d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000002 	.word	0x20000002
 8000d70:	20000000 	.word	0x20000000
 8000d74:	080158d8 	.word	0x080158d8
 8000d78:	20000164 	.word	0x20000164
 8000d7c:	20000158 	.word	0x20000158

08000d80 <slider_event_cb>:

}

static void slider_event_cb(lv_obj_t* slider, lv_event_t event)
{
    if (event == LV_EVENT_VALUE_CHANGED) {
 8000d80:	2910      	cmp	r1, #16
{
 8000d82:	b508      	push	{r3, lr}
    if (event == LV_EVENT_VALUE_CHANGED) {
 8000d84:	d10e      	bne.n	8000da4 <slider_event_cb+0x24>
        static char buf[4]; /* max 3 bytes for number plus 1 null terminating byte */
        snprintf(buf, 4, "%u", lv_slider_get_value(slider));
 8000d86:	f013 fe21 	bl	80149cc <lv_slider_get_value>
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <slider_event_cb+0x28>)
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <slider_event_cb+0x2c>)
 8000d92:	f014 f951 	bl	8015038 <sniprintf>
        lv_label_set_text(slider_label, buf);
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <slider_event_cb+0x30>)
 8000d98:	4904      	ldr	r1, [pc, #16]	; (8000dac <slider_event_cb+0x2c>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
    }
}
 8000d9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_label_set_text(slider_label, buf);
 8000da0:	f012 b966 	b.w	8013070 <lv_label_set_text>
}
 8000da4:	bd08      	pop	{r3, pc}
 8000da6:	bf00      	nop
 8000da8:	08015981 	.word	0x08015981
 8000dac:	20000148 	.word	0x20000148
 8000db0:	20000160 	.word	0x20000160

08000db4 <lvgl_GUI>:
{
 8000db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
 8000db8:	f00d fb0c 	bl	800e3d4 <lv_disp_get_default>
 8000dbc:	f001 fdba 	bl	8002934 <lv_disp_get_scr_act>
    pgHeader = lv_page_create(lv_scr_act(), NULL);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f012 fec1 	bl	8013b48 <lv_page_create>
    lv_obj_set_pos(pgHeader, 0, 0);
 8000dc6:	2200      	movs	r2, #0
    pgHeader = lv_page_create(lv_scr_act(), NULL);
 8000dc8:	4c8f      	ldr	r4, [pc, #572]	; (8001008 <lvgl_GUI+0x254>)
    lv_obj_set_pos(pgHeader, 0, 0);
 8000dca:	4611      	mov	r1, r2
    pgHeader = lv_page_create(lv_scr_act(), NULL);
 8000dcc:	6020      	str	r0, [r4, #0]
    lv_obj_set_pos(pgHeader, 0, 0);
 8000dce:	f003 fde3 	bl	8004998 <lv_obj_set_pos>
    lv_obj_set_size(pgHeader, 320, 20);
 8000dd2:	2214      	movs	r2, #20
 8000dd4:	6820      	ldr	r0, [r4, #0]
 8000dd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000dda:	f004 fa6b 	bl	80052b4 <lv_obj_set_size>
    labelHeader = lv_label_create(pgHeader, NULL);
 8000dde:	2100      	movs	r1, #0
 8000de0:	6820      	ldr	r0, [r4, #0]
 8000de2:	f012 fa79 	bl	80132d8 <lv_label_create>
    lv_label_set_text_fmt(labelHeader, "%s %s", LV_SYMBOL_HOME, "Settings");
 8000de6:	4d89      	ldr	r5, [pc, #548]	; (800100c <lvgl_GUI+0x258>)
    labelHeader = lv_label_create(pgHeader, NULL);
 8000de8:	4c89      	ldr	r4, [pc, #548]	; (8001010 <lvgl_GUI+0x25c>)
    lv_label_set_text_fmt(labelHeader, "%s %s", LV_SYMBOL_HOME, "Settings");
 8000dea:	4b8a      	ldr	r3, [pc, #552]	; (8001014 <lvgl_GUI+0x260>)
 8000dec:	462a      	mov	r2, r5
 8000dee:	498a      	ldr	r1, [pc, #552]	; (8001018 <lvgl_GUI+0x264>)
    labelHeader = lv_label_create(pgHeader, NULL);
 8000df0:	6020      	str	r0, [r4, #0]
    lv_label_set_text_fmt(labelHeader, "%s %s", LV_SYMBOL_HOME, "Settings");
 8000df2:	f012 f9a1 	bl	8013138 <lv_label_set_text_fmt>
    lv_obj_set_pos(labelHeader, 20, 7);
 8000df6:	2207      	movs	r2, #7
 8000df8:	2114      	movs	r1, #20
 8000dfa:	6820      	ldr	r0, [r4, #0]
 8000dfc:	f003 fdcc 	bl	8004998 <lv_obj_set_pos>
 8000e00:	f00d fae8 	bl	800e3d4 <lv_disp_get_default>
 8000e04:	f001 fd96 	bl	8002934 <lv_disp_get_scr_act>
    pgMain = lv_page_create(lv_scr_act(), NULL);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f012 fe9d 	bl	8013b48 <lv_page_create>
 8000e0e:	4c83      	ldr	r4, [pc, #524]	; (800101c <lvgl_GUI+0x268>)
    lv_obj_set_pos(pgMain, 0, 31);
 8000e10:	221f      	movs	r2, #31
 8000e12:	2100      	movs	r1, #0
    pgMain = lv_page_create(lv_scr_act(), NULL);
 8000e14:	6020      	str	r0, [r4, #0]
    lv_obj_set_pos(pgMain, 0, 31);
 8000e16:	f003 fdbf 	bl	8004998 <lv_obj_set_pos>
    lv_obj_set_size(pgMain, 320, 210);
 8000e1a:	6820      	ldr	r0, [r4, #0]
 8000e1c:	22d2      	movs	r2, #210	; 0xd2
 8000e1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000e22:	f004 fa47 	bl	80052b4 <lv_obj_set_size>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8000e26:	2300      	movs	r3, #0
 8000e28:	6820      	ldr	r0, [r4, #0]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	2214      	movs	r2, #20
 8000e2e:	f005 f80c 	bl	8005e4a <_lv_obj_set_style_local_int>
    lv_obj_set_style_local_pad_all(pgMain, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, 20);
 8000e32:	6826      	ldr	r6, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8000e34:	2314      	movs	r3, #20
 8000e36:	4630      	mov	r0, r6
 8000e38:	2210      	movs	r2, #16
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f005 f805 	bl	8005e4a <_lv_obj_set_style_local_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8000e40:	4630      	mov	r0, r6
 8000e42:	2314      	movs	r3, #20
 8000e44:	2211      	movs	r2, #17
 8000e46:	2100      	movs	r1, #0
 8000e48:	f004 ffff 	bl	8005e4a <_lv_obj_set_style_local_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	2314      	movs	r3, #20
 8000e50:	2212      	movs	r2, #18
 8000e52:	2100      	movs	r1, #0
 8000e54:	f004 fff9 	bl	8005e4a <_lv_obj_set_style_local_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8000e58:	4630      	mov	r0, r6
 8000e5a:	2314      	movs	r3, #20
 8000e5c:	2213      	movs	r2, #19
 8000e5e:	2100      	movs	r1, #0
 8000e60:	f004 fff3 	bl	8005e4a <_lv_obj_set_style_local_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 8000e64:	2300      	movs	r3, #0
    lv_obj_set_style_local_margin_all(pgMain, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, 0);
 8000e66:	6826      	ldr	r6, [r4, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	2215      	movs	r2, #21
 8000e6e:	f004 ffec 	bl	8005e4a <_lv_obj_set_style_local_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8000e72:	2300      	movs	r3, #0
 8000e74:	4630      	mov	r0, r6
 8000e76:	4619      	mov	r1, r3
 8000e78:	2216      	movs	r2, #22
 8000e7a:	f004 ffe6 	bl	8005e4a <_lv_obj_set_style_local_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	4630      	mov	r0, r6
 8000e82:	4619      	mov	r1, r3
 8000e84:	2217      	movs	r2, #23
 8000e86:	f004 ffe0 	bl	8005e4a <_lv_obj_set_style_local_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	4619      	mov	r1, r3
 8000e90:	2218      	movs	r2, #24
 8000e92:	f004 ffda 	bl	8005e4a <_lv_obj_set_style_local_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8000e96:	2301      	movs	r3, #1
 8000e98:	2100      	movs	r1, #0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	6820      	ldr	r0, [r4, #0]
 8000e9e:	f004 ffd4 	bl	8005e4a <_lv_obj_set_style_local_int>
    lv_style_init(&style_buttons);
 8000ea2:	485f      	ldr	r0, [pc, #380]	; (8001020 <lvgl_GUI+0x26c>)
 8000ea4:	f007 f808 	bl	8007eb8 <lv_style_init>
    btn1 = lv_btn_create(pgMain, NULL);
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	6820      	ldr	r0, [r4, #0]
 8000eac:	f010 fb24 	bl	80114f8 <lv_btn_create>
 8000eb0:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 8001094 <lvgl_GUI+0x2e0>
    JK_Test_Button(btn1, pgMain, LV_SYMBOL_WIFI, " Button1", NULL);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	4a5b      	ldr	r2, [pc, #364]	; (8001024 <lvgl_GUI+0x270>)
 8000eb8:	495b      	ldr	r1, [pc, #364]	; (8001028 <lvgl_GUI+0x274>)
    btn1 = lv_btn_create(pgMain, NULL);
 8000eba:	f8cb 0000 	str.w	r0, [fp]
    JK_Test_Button(btn1, pgMain, LV_SYMBOL_WIFI, " Button1", NULL);
 8000ebe:	f7ff ff1d 	bl	8000cfc <JK_Test_Button.isra.1>
    btn2 = lv_btn_create(pgMain, NULL);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	6820      	ldr	r0, [r4, #0]
 8000ec6:	f010 fb17 	bl	80114f8 <lv_btn_create>
 8000eca:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8001098 <lvgl_GUI+0x2e4>
    JK_Test_Button(btn2, pgMain, LV_SYMBOL_POWER, " Button2", MY_btn2Event);
 8000ece:	4b57      	ldr	r3, [pc, #348]	; (800102c <lvgl_GUI+0x278>)
 8000ed0:	4a57      	ldr	r2, [pc, #348]	; (8001030 <lvgl_GUI+0x27c>)
 8000ed2:	4958      	ldr	r1, [pc, #352]	; (8001034 <lvgl_GUI+0x280>)
    btn2 = lv_btn_create(pgMain, NULL);
 8000ed4:	f8ca 0000 	str.w	r0, [sl]
    JK_Test_Button(btn2, pgMain, LV_SYMBOL_POWER, " Button2", MY_btn2Event);
 8000ed8:	f7ff ff10 	bl	8000cfc <JK_Test_Button.isra.1>
    btn3 = lv_btn_create(pgMain, NULL);
 8000edc:	2100      	movs	r1, #0
 8000ede:	6820      	ldr	r0, [r4, #0]
 8000ee0:	f010 fb0a 	bl	80114f8 <lv_btn_create>
 8000ee4:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800109c <lvgl_GUI+0x2e8>
    JK_Test_Button(btn3, pgMain, LV_SYMBOL_KEYBOARD, " Button3", NULL);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4a53      	ldr	r2, [pc, #332]	; (8001038 <lvgl_GUI+0x284>)
 8000eec:	4953      	ldr	r1, [pc, #332]	; (800103c <lvgl_GUI+0x288>)
    btn3 = lv_btn_create(pgMain, NULL);
 8000eee:	f8c9 0000 	str.w	r0, [r9]
    JK_Test_Button(btn3, pgMain, LV_SYMBOL_KEYBOARD, " Button3", NULL);
 8000ef2:	f7ff ff03 	bl	8000cfc <JK_Test_Button.isra.1>
    btn4 = lv_btn_create(pgMain, NULL);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	6820      	ldr	r0, [r4, #0]
 8000efa:	f010 fafd 	bl	80114f8 <lv_btn_create>
 8000efe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80010a0 <lvgl_GUI+0x2ec>
    JK_Test_Button(btn4, pgMain, LV_SYMBOL_SETTINGS, " Button4", NULL);
 8000f02:	2300      	movs	r3, #0
 8000f04:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <lvgl_GUI+0x28c>)
 8000f06:	494f      	ldr	r1, [pc, #316]	; (8001044 <lvgl_GUI+0x290>)
    btn4 = lv_btn_create(pgMain, NULL);
 8000f08:	f8c8 0000 	str.w	r0, [r8]
    JK_Test_Button(btn4, pgMain, LV_SYMBOL_SETTINGS, " Button4", NULL);
 8000f0c:	f7ff fef6 	bl	8000cfc <JK_Test_Button.isra.1>
    btn5 = lv_btn_create(pgMain, NULL);
 8000f10:	2100      	movs	r1, #0
 8000f12:	6820      	ldr	r0, [r4, #0]
 8000f14:	f010 faf0 	bl	80114f8 <lv_btn_create>
 8000f18:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <lvgl_GUI+0x294>)
    JK_Test_Button(btn5, pgMain, LV_SYMBOL_BLUETOOTH, " Button5", NULL);
 8000f1a:	4a4c      	ldr	r2, [pc, #304]	; (800104c <lvgl_GUI+0x298>)
    btn5 = lv_btn_create(pgMain, NULL);
 8000f1c:	6018      	str	r0, [r3, #0]
    JK_Test_Button(btn5, pgMain, LV_SYMBOL_BLUETOOTH, " Button5", NULL);
 8000f1e:	494c      	ldr	r1, [pc, #304]	; (8001050 <lvgl_GUI+0x29c>)
 8000f20:	2300      	movs	r3, #0
 8000f22:	f7ff feeb 	bl	8000cfc <JK_Test_Button.isra.1>
    btn6 = lv_btn_create(pgMain, NULL);
 8000f26:	2100      	movs	r1, #0
 8000f28:	6820      	ldr	r0, [r4, #0]
 8000f2a:	f010 fae5 	bl	80114f8 <lv_btn_create>
 8000f2e:	4a49      	ldr	r2, [pc, #292]	; (8001054 <lvgl_GUI+0x2a0>)
    JK_Test_Button(btn6, pgMain, LV_SYMBOL_SD_CARD, " Button6", NULL);
 8000f30:	2300      	movs	r3, #0
    btn6 = lv_btn_create(pgMain, NULL);
 8000f32:	6010      	str	r0, [r2, #0]
    JK_Test_Button(btn6, pgMain, LV_SYMBOL_SD_CARD, " Button6", NULL);
 8000f34:	4948      	ldr	r1, [pc, #288]	; (8001058 <lvgl_GUI+0x2a4>)
 8000f36:	4a49      	ldr	r2, [pc, #292]	; (800105c <lvgl_GUI+0x2a8>)
 8000f38:	f7ff fee0 	bl	8000cfc <JK_Test_Button.isra.1>
    btn7 = lv_btn_create(pgMain, NULL);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	6820      	ldr	r0, [r4, #0]
 8000f40:	f010 fada 	bl	80114f8 <lv_btn_create>
 8000f44:	4946      	ldr	r1, [pc, #280]	; (8001060 <lvgl_GUI+0x2ac>)
    JK_Test_Button(btn7, pgMain, LV_SYMBOL_DIRECTORY, " Button7", NULL);
 8000f46:	2300      	movs	r3, #0
    btn7 = lv_btn_create(pgMain, NULL);
 8000f48:	6008      	str	r0, [r1, #0]
    JK_Test_Button(btn7, pgMain, LV_SYMBOL_DIRECTORY, " Button7", NULL);
 8000f4a:	4a46      	ldr	r2, [pc, #280]	; (8001064 <lvgl_GUI+0x2b0>)
 8000f4c:	4946      	ldr	r1, [pc, #280]	; (8001068 <lvgl_GUI+0x2b4>)
 8000f4e:	f7ff fed5 	bl	8000cfc <JK_Test_Button.isra.1>
    btn8 = lv_btn_create(pgMain, NULL);
 8000f52:	2100      	movs	r1, #0
 8000f54:	6820      	ldr	r0, [r4, #0]
 8000f56:	f010 facf 	bl	80114f8 <lv_btn_create>
 8000f5a:	4f44      	ldr	r7, [pc, #272]	; (800106c <lvgl_GUI+0x2b8>)
    JK_Test_Button(btn8, pgMain, LV_SYMBOL_HOME, " Button8", NULL);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	4a44      	ldr	r2, [pc, #272]	; (8001070 <lvgl_GUI+0x2bc>)
 8000f60:	4629      	mov	r1, r5
    btn8 = lv_btn_create(pgMain, NULL);
 8000f62:	6038      	str	r0, [r7, #0]
    JK_Test_Button(btn8, pgMain, LV_SYMBOL_HOME, " Button8", NULL);
 8000f64:	f7ff feca 	bl	8000cfc <JK_Test_Button.isra.1>
    btn9 = lv_btn_create(pgMain, NULL);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	6820      	ldr	r0, [r4, #0]
 8000f6c:	f010 fac4 	bl	80114f8 <lv_btn_create>
 8000f70:	4e40      	ldr	r6, [pc, #256]	; (8001074 <lvgl_GUI+0x2c0>)
    JK_Test_Button(btn9, pgMain, LV_SYMBOL_EJECT, " Button9", NULL);
 8000f72:	2300      	movs	r3, #0
 8000f74:	4a40      	ldr	r2, [pc, #256]	; (8001078 <lvgl_GUI+0x2c4>)
 8000f76:	4941      	ldr	r1, [pc, #260]	; (800107c <lvgl_GUI+0x2c8>)
    btn9 = lv_btn_create(pgMain, NULL);
 8000f78:	6030      	str	r0, [r6, #0]
    JK_Test_Button(btn9, pgMain, LV_SYMBOL_EJECT, " Button9", NULL);
 8000f7a:	f7ff febf 	bl	8000cfc <JK_Test_Button.isra.1>
    btn10 = lv_btn_create(pgMain, NULL);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	6820      	ldr	r0, [r4, #0]
 8000f82:	f010 fab9 	bl	80114f8 <lv_btn_create>
 8000f86:	4d3e      	ldr	r5, [pc, #248]	; (8001080 <lvgl_GUI+0x2cc>)
    JK_Test_Button(btn10, pgMain, LV_SYMBOL_EYE_OPEN, " Button10", NULL);
 8000f88:	4a3e      	ldr	r2, [pc, #248]	; (8001084 <lvgl_GUI+0x2d0>)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	493e      	ldr	r1, [pc, #248]	; (8001088 <lvgl_GUI+0x2d4>)
    btn10 = lv_btn_create(pgMain, NULL);
 8000f8e:	6028      	str	r0, [r5, #0]
    JK_Test_Button(btn10, pgMain, LV_SYMBOL_EYE_OPEN, " Button10", NULL);
 8000f90:	f7ff feb4 	bl	8000cfc <JK_Test_Button.isra.1>
    grpMain = lv_group_create();
 8000f94:	f001 fd7a 	bl	8002a8c <lv_group_create>
 8000f98:	4c3c      	ldr	r4, [pc, #240]	; (800108c <lvgl_GUI+0x2d8>)
    lv_group_add_obj(grpMain, btn1);
 8000f9a:	f8db 1000 	ldr.w	r1, [fp]
    grpMain = lv_group_create();
 8000f9e:	6020      	str	r0, [r4, #0]
    lv_group_add_obj(grpMain, btn1);
 8000fa0:	f001 fdc2 	bl	8002b28 <lv_group_add_obj>
    lv_group_add_obj(grpMain, btn2);
 8000fa4:	f8da 1000 	ldr.w	r1, [sl]
 8000fa8:	6820      	ldr	r0, [r4, #0]
 8000faa:	f001 fdbd 	bl	8002b28 <lv_group_add_obj>
    lv_group_add_obj(grpMain, btn3);
 8000fae:	f8d9 1000 	ldr.w	r1, [r9]
 8000fb2:	6820      	ldr	r0, [r4, #0]
 8000fb4:	f001 fdb8 	bl	8002b28 <lv_group_add_obj>
    lv_group_add_obj(grpMain, btn4);
 8000fb8:	f8d8 1000 	ldr.w	r1, [r8]
 8000fbc:	6820      	ldr	r0, [r4, #0]
 8000fbe:	f001 fdb3 	bl	8002b28 <lv_group_add_obj>
    lv_group_add_obj(grpMain, btn5);
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <lvgl_GUI+0x294>)
 8000fc4:	6820      	ldr	r0, [r4, #0]
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	f001 fdae 	bl	8002b28 <lv_group_add_obj>
    lv_group_add_obj(grpMain, btn6);
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <lvgl_GUI+0x2a0>)
 8000fce:	6820      	ldr	r0, [r4, #0]
 8000fd0:	6811      	ldr	r1, [r2, #0]
 8000fd2:	f001 fda9 	bl	8002b28 <lv_group_add_obj>
    lv_group_add_obj(grpMain, btn7);
 8000fd6:	4922      	ldr	r1, [pc, #136]	; (8001060 <lvgl_GUI+0x2ac>)
 8000fd8:	6820      	ldr	r0, [r4, #0]
 8000fda:	6809      	ldr	r1, [r1, #0]
 8000fdc:	f001 fda4 	bl	8002b28 <lv_group_add_obj>
    lv_group_add_obj(grpMain, btn8);
 8000fe0:	6839      	ldr	r1, [r7, #0]
 8000fe2:	6820      	ldr	r0, [r4, #0]
 8000fe4:	f001 fda0 	bl	8002b28 <lv_group_add_obj>
    lv_group_add_obj(grpMain, btn9);
 8000fe8:	6831      	ldr	r1, [r6, #0]
 8000fea:	6820      	ldr	r0, [r4, #0]
 8000fec:	f001 fd9c 	bl	8002b28 <lv_group_add_obj>
    lv_group_add_obj(grpMain, btn10);
 8000ff0:	6829      	ldr	r1, [r5, #0]
 8000ff2:	6820      	ldr	r0, [r4, #0]
 8000ff4:	f001 fd98 	bl	8002b28 <lv_group_add_obj>
    lv_indev_set_group(indev_encoder, grpMain);
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <lvgl_GUI+0x2dc>)
 8000ffa:	6821      	ldr	r1, [r4, #0]
 8000ffc:	6818      	ldr	r0, [r3, #0]
}
 8000ffe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_indev_set_group(indev_encoder, grpMain);
 8001002:	f002 b87b 	b.w	80030fc <lv_indev_set_group>
 8001006:	bf00      	nop
 8001008:	20000154 	.word	0x20000154
 800100c:	080158fe 	.word	0x080158fe
 8001010:	20000150 	.word	0x20000150
 8001014:	080158f5 	.word	0x080158f5
 8001018:	080158d8 	.word	0x080158d8
 800101c:	20000158 	.word	0x20000158
 8001020:	20000164 	.word	0x20000164
 8001024:	08015902 	.word	0x08015902
 8001028:	0801590b 	.word	0x0801590b
 800102c:	080010f1 	.word	0x080010f1
 8001030:	0801590f 	.word	0x0801590f
 8001034:	08015918 	.word	0x08015918
 8001038:	0801591c 	.word	0x0801591c
 800103c:	08015925 	.word	0x08015925
 8001040:	08015929 	.word	0x08015929
 8001044:	08015932 	.word	0x08015932
 8001048:	20000134 	.word	0x20000134
 800104c:	08015936 	.word	0x08015936
 8001050:	0801593f 	.word	0x0801593f
 8001054:	20000138 	.word	0x20000138
 8001058:	0801594c 	.word	0x0801594c
 800105c:	08015943 	.word	0x08015943
 8001060:	2000013c 	.word	0x2000013c
 8001064:	08015950 	.word	0x08015950
 8001068:	08015959 	.word	0x08015959
 800106c:	20000140 	.word	0x20000140
 8001070:	0801595d 	.word	0x0801595d
 8001074:	20000144 	.word	0x20000144
 8001078:	08015966 	.word	0x08015966
 800107c:	0801596f 	.word	0x0801596f
 8001080:	20000124 	.word	0x20000124
 8001084:	08015973 	.word	0x08015973
 8001088:	0801597d 	.word	0x0801597d
 800108c:	2000014c 	.word	0x2000014c
 8001090:	200034a8 	.word	0x200034a8
 8001094:	20000120 	.word	0x20000120
 8001098:	20000128 	.word	0x20000128
 800109c:	2000012c 	.word	0x2000012c
 80010a0:	20000130 	.word	0x20000130

080010a4 <MY_lv_ex_slider_2>:
{
 80010a4:	b538      	push	{r3, r4, r5, lr}
    slider = lv_slider_create(parent, NULL);
 80010a6:	2100      	movs	r1, #0
{
 80010a8:	4605      	mov	r5, r0
    slider = lv_slider_create(parent, NULL);
 80010aa:	f013 fc09 	bl	80148c0 <lv_slider_create>
 80010ae:	4c0c      	ldr	r4, [pc, #48]	; (80010e0 <MY_lv_ex_slider_2+0x3c>)
    lv_obj_set_width(slider, 180); //lv_obj_get_width(parent - 50)
 80010b0:	21b4      	movs	r1, #180	; 0xb4
    slider = lv_slider_create(parent, NULL);
 80010b2:	6020      	str	r0, [r4, #0]
    lv_obj_set_width(slider, 180); //lv_obj_get_width(parent - 50)
 80010b4:	f004 f95c 	bl	8005370 <lv_obj_set_width>
    lv_obj_set_event_cb(slider, slider_event_cb);
 80010b8:	6820      	ldr	r0, [r4, #0]
 80010ba:	490a      	ldr	r1, [pc, #40]	; (80010e4 <MY_lv_ex_slider_2+0x40>)
 80010bc:	f003 f932 	bl	8004324 <lv_obj_set_event_cb>
 * @param min minimum value
 * @param max maximum value
 */
static inline void lv_slider_set_range(lv_obj_t * slider, int16_t min, int16_t max)
{
    lv_bar_set_range(slider, min, max);
 80010c0:	6820      	ldr	r0, [r4, #0]
 80010c2:	221e      	movs	r2, #30
 80010c4:	2100      	movs	r1, #0
 80010c6:	f010 f9c5 	bl	8011454 <lv_bar_set_range>
    slider_label = lv_label_create(parent, NULL);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4628      	mov	r0, r5
 80010ce:	f012 f903 	bl	80132d8 <lv_label_create>
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <MY_lv_ex_slider_2+0x44>)
    lv_label_set_text(slider_label, "0");
 80010d4:	4905      	ldr	r1, [pc, #20]	; (80010ec <MY_lv_ex_slider_2+0x48>)
    slider_label = lv_label_create(parent, NULL);
 80010d6:	6018      	str	r0, [r3, #0]
}
 80010d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_set_text(slider_label, "0");
 80010dc:	f011 bfc8 	b.w	8013070 <lv_label_set_text>
 80010e0:	2000015c 	.word	0x2000015c
 80010e4:	08000d81 	.word	0x08000d81
 80010e8:	20000160 	.word	0x20000160
 80010ec:	0801597b 	.word	0x0801597b

080010f0 <MY_btn2Event>:
    if (event == LV_EVENT_RELEASED) {
 80010f0:	2907      	cmp	r1, #7
static void MY_btn2Event(lv_obj_t* btn, lv_event_t event) {
 80010f2:	b538      	push	{r3, r4, r5, lr}
    if (event == LV_EVENT_RELEASED) {
 80010f4:	d153      	bne.n	800119e <MY_btn2Event+0xae>
        lv_obj_t* pgDialog = lv_page_create(pgMain, NULL);
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <MY_btn2Event+0xb0>)
 80010f8:	2100      	movs	r1, #0
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	f012 fd24 	bl	8013b48 <lv_page_create>
 8001100:	4604      	mov	r4, r0
        lv_obj_set_pos(pgDialog, 35, 25);
 8001102:	2219      	movs	r2, #25
 8001104:	2123      	movs	r1, #35	; 0x23
 8001106:	f003 fc47 	bl	8004998 <lv_obj_set_pos>
        lv_obj_set_size(pgDialog, 250, 160);
 800110a:	22a0      	movs	r2, #160	; 0xa0
 800110c:	21fa      	movs	r1, #250	; 0xfa
 800110e:	4620      	mov	r0, r4
 8001110:	f004 f8d0 	bl	80052b4 <lv_obj_set_size>
 * @param page pointer to a page object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_page_set_scrl_layout(lv_obj_t * page, lv_layout_t layout)
{
    lv_cont_set_layout(lv_page_get_scrollable(page), layout);
 8001114:	4620      	mov	r0, r4
 8001116:	f012 fde7 	bl	8013ce8 <lv_page_get_scrollable>
 800111a:	2103      	movs	r1, #3
 800111c:	f010 fd42 	bl	8011ba4 <lv_cont_set_layout>
        MY_lv_ex_slider_2(pgDialog, 20, 20);
 8001120:	2214      	movs	r2, #20
 8001122:	4620      	mov	r0, r4
 8001124:	4611      	mov	r1, r2
 8001126:	f7ff ffbd 	bl	80010a4 <MY_lv_ex_slider_2>
        lv_obj_t* btn = lv_btn_create(pgDialog, NULL);
 800112a:	2100      	movs	r1, #0
 800112c:	4620      	mov	r0, r4
 800112e:	f010 f9e3 	bl	80114f8 <lv_btn_create>
 8001132:	4604      	mov	r4, r0
        lv_obj_set_event_cb(btn, lv_page_close_event_cb);
 8001134:	491b      	ldr	r1, [pc, #108]	; (80011a4 <MY_btn2Event+0xb4>)
 8001136:	f003 f8f5 	bl	8004324 <lv_obj_set_event_cb>
        lv_obj_t* label = lv_label_create(btn, NULL);
 800113a:	2100      	movs	r1, #0
 800113c:	4620      	mov	r0, r4
 800113e:	f012 f8cb 	bl	80132d8 <lv_label_create>
        lv_label_set_text_fmt(label, "%s %s", LV_SYMBOL_CLOSE, "Close");
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MY_btn2Event+0xb8>)
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <MY_btn2Event+0xbc>)
 8001146:	491a      	ldr	r1, [pc, #104]	; (80011b0 <MY_btn2Event+0xc0>)
 8001148:	f011 fff6 	bl	8013138 <lv_label_set_text_fmt>
        lv_obj_add_style(btn, LV_BTN_PART_MAIN, &style_buttons);
 800114c:	4620      	mov	r0, r4
 800114e:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <MY_btn2Event+0xc4>)
 8001150:	2100      	movs	r1, #0
 8001152:	f004 fe55 	bl	8005e00 <lv_obj_add_style>
        lv_obj_set_pos(btn, 10, 70);
 8001156:	4620      	mov	r0, r4
 8001158:	2246      	movs	r2, #70	; 0x46
 800115a:	210a      	movs	r1, #10
 800115c:	f003 fc1c 	bl	8004998 <lv_obj_set_pos>
        lv_obj_set_size(btn, 110, 30);
 8001160:	4620      	mov	r0, r4
 8001162:	221e      	movs	r2, #30
 8001164:	216e      	movs	r1, #110	; 0x6e
 8001166:	f004 f8a5 	bl	80052b4 <lv_obj_set_size>
        lv_obj_add_style(btn, LV_BTN_PART_MAIN, &style_buttons);
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MY_btn2Event+0xc4>)
 800116c:	2100      	movs	r1, #0
 800116e:	4620      	mov	r0, r4
 8001170:	f004 fe46 	bl	8005e00 <lv_obj_add_style>
        lv_group_t* grpDialog = lv_group_create();
 8001174:	f001 fc8a 	bl	8002a8c <lv_group_create>
 8001178:	4605      	mov	r5, r0
        lv_group_add_obj(grpDialog, btn);
 800117a:	4621      	mov	r1, r4
 800117c:	f001 fcd4 	bl	8002b28 <lv_group_add_obj>
        lv_group_add_obj(grpDialog, slider);
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MY_btn2Event+0xc8>)
 8001182:	4628      	mov	r0, r5
 8001184:	6819      	ldr	r1, [r3, #0]
 8001186:	f001 fccf 	bl	8002b28 <lv_group_add_obj>
        lv_indev_set_group(indev_encoder, grpDialog);
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MY_btn2Event+0xcc>)
 800118c:	4629      	mov	r1, r5
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	f001 ffb4 	bl	80030fc <lv_indev_set_group>
        lv_group_focus_obj(btn);
 8001194:	4620      	mov	r0, r4
}
 8001196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_group_focus_obj(btn);
 800119a:	f001 bd75 	b.w	8002c88 <lv_group_focus_obj>
}
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	20000158 	.word	0x20000158
 80011a4:	08000cb9 	.word	0x08000cb9
 80011a8:	080158de 	.word	0x080158de
 80011ac:	080158e4 	.word	0x080158e4
 80011b0:	080158d8 	.word	0x080158d8
 80011b4:	20000164 	.word	0x20000164
 80011b8:	2000015c 	.word	0x2000015c
 80011bc:	200034a8 	.word	0x200034a8

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b510      	push	{r4, lr}
 80011c2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c4:	2214      	movs	r2, #20
 80011c6:	2100      	movs	r1, #0
 80011c8:	a808      	add	r0, sp, #32
 80011ca:	f013 ff2d 	bl	8015028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ce:	2214      	movs	r2, #20
 80011d0:	2100      	movs	r1, #0
 80011d2:	a801      	add	r0, sp, #4
 80011d4:	f013 ff28 	bl	8015028 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011de:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e0:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ec:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ee:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011f0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	f000 fbe1 	bl	80019b8 <HAL_RCC_OscConfig>
 80011f6:	b108      	cbz	r0, 80011fc <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
 80011fa:	e7fe      	b.n	80011fa <SystemClock_Config+0x3a>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001208:	e9cd 3004 	strd	r3, r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800120c:	4621      	mov	r1, r4
 800120e:	a801      	add	r0, sp, #4
 8001210:	f000 fdaa 	bl	8001d68 <HAL_RCC_ClockConfig>
 8001214:	b108      	cbz	r0, 800121a <SystemClock_Config+0x5a>
 8001216:	b672      	cpsid	i
 8001218:	e7fe      	b.n	8001218 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }
}
 800121a:	b010      	add	sp, #64	; 0x40
 800121c:	bd10      	pop	{r4, pc}
	...

08001220 <main>:
{
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : MY_BTN_Pin */
  GPIO_InitStruct.Pin = MY_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001222:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001224:	2601      	movs	r6, #1
{
 8001226:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001228:	f000 fa24 	bl	8001674 <HAL_Init>
  SystemClock_Config();
 800122c:	f7ff ffc8 	bl	80011c0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	2210      	movs	r2, #16
 8001232:	2100      	movs	r1, #0
 8001234:	a805      	add	r0, sp, #20
 8001236:	f013 fef7 	bl	8015028 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	4b68      	ldr	r3, [pc, #416]	; (80013dc <main+0x1bc>)
  HAL_GPIO_WritePin(MY_LED_GPIO_Port, MY_LED_Pin, GPIO_PIN_RESET);
 800123c:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(MY_LED_GPIO_Port, MY_LED_Pin, GPIO_PIN_RESET);
 8001240:	4867      	ldr	r0, [pc, #412]	; (80013e0 <main+0x1c0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	f042 0220 	orr.w	r2, r2, #32
 8001246:	619a      	str	r2, [r3, #24]
 8001248:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(MY_BTN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MY_LED_Pin */
  GPIO_InitStruct.Pin = MY_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124c:	f002 0220 	and.w	r2, r2, #32
 8001250:	9200      	str	r2, [sp, #0]
 8001252:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	f042 0204 	orr.w	r2, r2, #4
 800125a:	619a      	str	r2, [r3, #24]
 800125c:	699a      	ldr	r2, [r3, #24]
 800125e:	f002 0204 	and.w	r2, r2, #4
 8001262:	9201      	str	r2, [sp, #4]
 8001264:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	699a      	ldr	r2, [r3, #24]
 8001268:	f042 0208 	orr.w	r2, r2, #8
 800126c:	619a      	str	r2, [r3, #24]
 800126e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(MY_LED_GPIO_Port, MY_LED_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(MY_LED_GPIO_Port, MY_LED_Pin, GPIO_PIN_RESET);
 800127a:	f000 fb81 	bl	8001980 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2138      	movs	r1, #56	; 0x38
 8001282:	4858      	ldr	r0, [pc, #352]	; (80013e4 <main+0x1c4>)
 8001284:	f000 fb7c 	bl	8001980 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <main+0x1c8>)
  HAL_GPIO_Init(MY_BTN_GPIO_Port, &GPIO_InitStruct);
 800128a:	a905      	add	r1, sp, #20
 800128c:	4854      	ldr	r0, [pc, #336]	; (80013e0 <main+0x1c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800128e:	e9cd 5305 	strd	r5, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001292:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(MY_BTN_GPIO_Port, &GPIO_InitStruct);
 8001294:	f000 fa8e 	bl	80017b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MY_LED_Pin;
 8001298:	2304      	movs	r3, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MY_LED_GPIO_Port, &GPIO_InitStruct);
 800129a:	a905      	add	r1, sp, #20
 800129c:	4850      	ldr	r0, [pc, #320]	; (80013e0 <main+0x1c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	e9cd 4507 	strd	r4, r5, [sp, #28]
  HAL_GPIO_Init(MY_LED_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f000 fa85 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012aa:	2338      	movs	r3, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	a905      	add	r1, sp, #20
 80012ae:	484d      	ldr	r0, [pc, #308]	; (80013e4 <main+0x1c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	e9cd 4507 	strd	r4, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f000 fa7c 	bl	80017b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80012bc:	4622      	mov	r2, r4
 80012be:	4621      	mov	r1, r4
 80012c0:	2007      	movs	r0, #7
 80012c2:	f000 fa1f 	bl	8001704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80012c6:	2007      	movs	r0, #7
 80012c8:	f000 fa50 	bl	800176c <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012cc:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80012d0:	4846      	ldr	r0, [pc, #280]	; (80013ec <main+0x1cc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d2:	4a47      	ldr	r2, [pc, #284]	; (80013f0 <main+0x1d0>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012d4:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d8:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012dc:	2308      	movs	r3, #8
 80012de:	e9c0 1306 	strd	r1, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80012e2:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e8:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ec:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f0:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012f4:	f000 fe38 	bl	8001f68 <HAL_SPI_Init>
 80012f8:	4604      	mov	r4, r0
 80012fa:	b108      	cbz	r0, 8001300 <main+0xe0>
 80012fc:	b672      	cpsid	i
 80012fe:	e7fe      	b.n	80012fe <main+0xde>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001300:	4601      	mov	r1, r0
 8001302:	2214      	movs	r2, #20
 8001304:	a806      	add	r0, sp, #24
 8001306:	f013 fe8f 	bl	8015028 <memset>
  htim4.Instance = TIM4;
 800130a:	4d3a      	ldr	r5, [pc, #232]	; (80013f4 <main+0x1d4>)
 800130c:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <main+0x1d8>)
  sConfig.IC1Filter = 5;
 800130e:	220c      	movs	r2, #12
  htim4.Init.Prescaler = 0;
 8001310:	e9c5 3400 	strd	r3, r4, [r5]
  htim4.Init.Period = 65535;
 8001314:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	e9c5 3403 	strd	r3, r4, [r5, #12]
  sConfig.IC1Filter = 5;
 800131c:	2305      	movs	r3, #5
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800131e:	a905      	add	r1, sp, #20
 8001320:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001322:	e9cd 4403 	strd	r4, r4, [sp, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	60ac      	str	r4, [r5, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001328:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800132a:	9605      	str	r6, [sp, #20]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800132c:	9607      	str	r6, [sp, #28]
  sConfig.IC1Filter = 5;
 800132e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV8;
 8001332:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
  sConfig.IC2Filter = 5;
 8001336:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001338:	f001 f868 	bl	800240c <HAL_TIM_Encoder_Init>
 800133c:	b108      	cbz	r0, 8001342 <main+0x122>
 800133e:	b672      	cpsid	i
 8001340:	e7fe      	b.n	8001340 <main+0x120>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001342:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001346:	a903      	add	r1, sp, #12
 8001348:	4628      	mov	r0, r5
 800134a:	f001 f8b5 	bl	80024b8 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4604      	mov	r4, r0
 8001350:	b108      	cbz	r0, 8001356 <main+0x136>
 8001352:	b672      	cpsid	i
 8001354:	e7fe      	b.n	8001354 <main+0x134>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001356:	4628      	mov	r0, r5
	  if(encoderBtnInterruptFlag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET && timeCnt % 10 == 0) {
 8001358:	4d28      	ldr	r5, [pc, #160]	; (80013fc <main+0x1dc>)
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800135a:	213c      	movs	r1, #60	; 0x3c
 800135c:	f000 ff07 	bl	800216e <HAL_TIM_Encoder_Start_IT>
 8001360:	462e      	mov	r6, r5
	  lv_init();
 8001362:	f002 ff05 	bl	8004170 <lv_init>
	  lv_lcd_init();
 8001366:	f013 fddf 	bl	8014f28 <lv_lcd_init>
	  lv_encoder_init();
 800136a:	f013 fe03 	bl	8014f74 <lv_encoder_init>
	  lvgl_GUI();
 800136e:	f7ff fd21 	bl	8000db4 <lvgl_GUI>
	  } else if(encoderBtnInterruptFlag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET && timeCnt % 10 == 0) {
 8001372:	4f1b      	ldr	r7, [pc, #108]	; (80013e0 <main+0x1c0>)
	  if(timeCnt % 5 == 0) {
 8001374:	2305      	movs	r3, #5
 8001376:	fbb4 f3f3 	udiv	r3, r4, r3
 800137a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800137e:	429c      	cmp	r4, r3
 8001380:	d101      	bne.n	8001386 <main+0x166>
		  lv_task_handler();
 8001382:	f00e ffab 	bl	80102dc <lv_task_handler>
	  if(encoderBtnInterruptFlag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET && timeCnt % 10 == 0) {
 8001386:	782b      	ldrb	r3, [r5, #0]
 8001388:	b19b      	cbz	r3, 80013b2 <main+0x192>
 800138a:	2102      	movs	r1, #2
 800138c:	4638      	mov	r0, r7
 800138e:	f000 faf1 	bl	8001974 <HAL_GPIO_ReadPin>
 8001392:	b970      	cbnz	r0, 80013b2 <main+0x192>
 8001394:	220a      	movs	r2, #10
 8001396:	fbb4 f3f2 	udiv	r3, r4, r2
 800139a:	fb02 4313 	mls	r3, r2, r3, r4
 800139e:	b943      	cbnz	r3, 80013b2 <main+0x192>
		  encBtnFlag = 1;
 80013a0:	2101      	movs	r1, #1
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <main+0x1e0>)
		  encoderBtnInterruptFlag = 0;
 80013a4:	702b      	strb	r3, [r5, #0]
		  encBtnFlag = 1;
 80013a6:	7011      	strb	r1, [r2, #0]
	  HAL_Delay(1);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f000 f987 	bl	80016bc <HAL_Delay>
	  timeCnt++;
 80013ae:	3401      	adds	r4, #1
	  if(timeCnt % 500 == 0) {
 80013b0:	e7e0      	b.n	8001374 <main+0x154>
	  } else if(encoderBtnInterruptFlag && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET && timeCnt % 10 == 0) {
 80013b2:	7833      	ldrb	r3, [r6, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f7      	beq.n	80013a8 <main+0x188>
 80013b8:	2102      	movs	r1, #2
 80013ba:	4638      	mov	r0, r7
 80013bc:	f000 fada 	bl	8001974 <HAL_GPIO_ReadPin>
 80013c0:	2801      	cmp	r0, #1
 80013c2:	d1f1      	bne.n	80013a8 <main+0x188>
 80013c4:	220a      	movs	r2, #10
 80013c6:	fbb4 f3f2 	udiv	r3, r4, r2
 80013ca:	fb02 4313 	mls	r3, r2, r3, r4
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1ea      	bne.n	80013a8 <main+0x188>
		  encBtnFlag = 0;
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <main+0x1e0>)
		  encoderBtnInterruptFlag = 0;
 80013d4:	7033      	strb	r3, [r6, #0]
		  encBtnFlag = 0;
 80013d6:	7013      	strb	r3, [r2, #0]
 80013d8:	e7e6      	b.n	80013a8 <main+0x188>
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010800 	.word	0x40010800
 80013e4:	40010c00 	.word	0x40010c00
 80013e8:	10310000 	.word	0x10310000
 80013ec:	200032c4 	.word	0x200032c4
 80013f0:	40013000 	.word	0x40013000
 80013f4:	20003278 	.word	0x20003278
 80013f8:	40000800 	.word	0x40000800
 80013fc:	200032c0 	.word	0x200032c0
 8001400:	20003268 	.word	0x20003268

08001404 <Interrupt_EncoderChange>:

	static int16_t previousEncoderCnt = 0;

	int16_t encoderCnt = 0;

	encoderCnt = ((int16_t)__HAL_TIM_GET_COUNTER(&htim4))/2;
 8001404:	2202      	movs	r2, #2
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <Interrupt_EncoderChange+0x2c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	b21b      	sxth	r3, r3
 800140e:	fb93 f3f2 	sdiv	r3, r3, r2

	if(encoderCnt > previousEncoderCnt) {
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <Interrupt_EncoderChange+0x30>)
 8001414:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001418:	4299      	cmp	r1, r3
 800141a:	da04      	bge.n	8001426 <Interrupt_EncoderChange+0x22>
		encoderStep = 1;
 800141c:	2001      	movs	r0, #1
 800141e:	4906      	ldr	r1, [pc, #24]	; (8001438 <Interrupt_EncoderChange+0x34>)

	} else if(encoderCnt < previousEncoderCnt) {
		encoderStep = -1;
 8001420:	8008      	strh	r0, [r1, #0]
	} else {
		//encoderStep = 0;
	}

	previousEncoderCnt = encoderCnt;
 8001422:	8013      	strh	r3, [r2, #0]

}
 8001424:	4770      	bx	lr
	} else if(encoderCnt < previousEncoderCnt) {
 8001426:	ddfc      	ble.n	8001422 <Interrupt_EncoderChange+0x1e>
		encoderStep = -1;
 8001428:	4903      	ldr	r1, [pc, #12]	; (8001438 <Interrupt_EncoderChange+0x34>)
 800142a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800142e:	e7f7      	b.n	8001420 <Interrupt_EncoderChange+0x1c>
 8001430:	20003278 	.word	0x20003278
 8001434:	20000168 	.word	0x20000168
 8001438:	2000326a 	.word	0x2000326a

0800143c <Interrupt_ButtonPressed>:

void Interrupt_ButtonPressed() {
	//debouncing is in main() while() loop
	encoderBtnInterruptFlag = 1;
 800143c:	2201      	movs	r2, #1
 800143e:	4b01      	ldr	r3, [pc, #4]	; (8001444 <Interrupt_ButtonPressed+0x8>)
 8001440:	701a      	strb	r2, [r3, #0]
}
 8001442:	4770      	bx	lr
 8001444:	200032c0 	.word	0x200032c0

08001448 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_MspInit+0x3c>)
{
 800144a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	f002 0201 	and.w	r2, r2, #1
 800145a:	9200      	str	r2, [sp, #0]
 800145c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	69da      	ldr	r2, [r3, #28]
 8001460:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001464:	61da      	str	r2, [r3, #28]
 8001466:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001472:	6853      	ldr	r3, [r2, #4]
 8001474:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001478:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800147c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	b002      	add	sp, #8
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000

0800148c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800148c:	b510      	push	{r4, lr}
 800148e:	4604      	mov	r4, r0
 8001490:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	2210      	movs	r2, #16
 8001494:	2100      	movs	r1, #0
 8001496:	a802      	add	r0, sp, #8
 8001498:	f013 fdc6 	bl	8015028 <memset>
  if(hspi->Instance==SPI1)
 800149c:	6822      	ldr	r2, [r4, #0]
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_SPI_MspInit+0x58>)
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d11d      	bne.n	80014e0 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014a4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80014a8:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014b0:	619a      	str	r2, [r3, #24]
 80014b2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80014ba:	9200      	str	r2, [sp, #0]
 80014bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	f042 0204 	orr.w	r2, r2, #4
 80014c4:	619a      	str	r2, [r3, #24]
 80014c6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f000 f96a 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014e0:	b006      	add	sp, #24
 80014e2:	bd10      	pop	{r4, pc}
 80014e4:	40013000 	.word	0x40013000
 80014e8:	40010800 	.word	0x40010800

080014ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014ec:	b510      	push	{r4, lr}
 80014ee:	4604      	mov	r4, r0
 80014f0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	2210      	movs	r2, #16
 80014f4:	2100      	movs	r1, #0
 80014f6:	a802      	add	r0, sp, #8
 80014f8:	f013 fd96 	bl	8015028 <memset>
  if(htim_encoder->Instance==TIM4)
 80014fc:	6822      	ldr	r2, [r4, #0]
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_TIM_Encoder_MspInit+0x64>)
 8001500:	429a      	cmp	r2, r3
 8001502:	d123      	bne.n	800154c <HAL_TIM_Encoder_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001504:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001508:	69da      	ldr	r2, [r3, #28]
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 800150c:	f042 0204 	orr.w	r2, r2, #4
 8001510:	61da      	str	r2, [r3, #28]
 8001512:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <HAL_TIM_Encoder_MspInit+0x68>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001516:	f002 0204 	and.w	r2, r2, #4
 800151a:	9200      	str	r2, [sp, #0]
 800151c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	f042 0208 	orr.w	r2, r2, #8
 8001524:	619a      	str	r2, [r3, #24]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001530:	23c0      	movs	r3, #192	; 0xc0
 8001532:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001534:	2301      	movs	r3, #1
 8001536:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f000 f93c 	bl	80017b4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	201e      	movs	r0, #30
 8001540:	4611      	mov	r1, r2
 8001542:	f000 f8df 	bl	8001704 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001546:	201e      	movs	r0, #30
 8001548:	f000 f910 	bl	800176c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800154c:	b006      	add	sp, #24
 800154e:	bd10      	pop	{r4, pc}
 8001550:	40000800 	.word	0x40000800
 8001554:	40010c00 	.word	0x40010c00

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	e7fe      	b.n	8001558 <NMI_Handler>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	e7fe      	b.n	800155a <HardFault_Handler>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	e7fe      	b.n	800155c <MemManage_Handler>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	e7fe      	b.n	800155e <BusFault_Handler>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler>

08001562 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	lv_tick_inc(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f00d f892 	bl	800e694 <lv_tick_inc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001570:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 8001574:	f000 b890 	b.w	8001698 <HAL_IncTick>

08001578 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001578:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	Interrupt_ButtonPressed();
 800157a:	f7ff ff5f 	bl	800143c <Interrupt_ButtonPressed>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800157e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001582:	2002      	movs	r0, #2
 8001584:	f000 ba0c 	b.w	80019a0 <HAL_GPIO_EXTI_IRQHandler>

08001588 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001588:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
	Interrupt_EncoderChange();
 800158a:	f7ff ff3b 	bl	8001404 <Interrupt_EncoderChange>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800158e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim4);
 8001592:	4801      	ldr	r0, [pc, #4]	; (8001598 <TIM4_IRQHandler+0x10>)
 8001594:	f000 be60 	b.w	8002258 <HAL_TIM_IRQHandler>
 8001598:	20003278 	.word	0x20003278

0800159c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <_sbrk+0x30>)
{
 800159e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80015a0:	6819      	ldr	r1, [r3, #0]
{
 80015a2:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80015a4:	b909      	cbnz	r1, 80015aa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80015a6:	490a      	ldr	r1, [pc, #40]	; (80015d0 <_sbrk+0x34>)
 80015a8:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	4909      	ldr	r1, [pc, #36]	; (80015d4 <_sbrk+0x38>)
 80015ae:	4c0a      	ldr	r4, [pc, #40]	; (80015d8 <_sbrk+0x3c>)
 80015b0:	4402      	add	r2, r0
 80015b2:	1b09      	subs	r1, r1, r4
 80015b4:	428a      	cmp	r2, r1
 80015b6:	d906      	bls.n	80015c6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80015b8:	f013 fcf2 	bl	8014fa0 <__errno>
 80015bc:	230c      	movs	r3, #12
 80015be:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80015c4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80015c6:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80015c8:	e7fc      	b.n	80015c4 <_sbrk+0x28>
 80015ca:	bf00      	nop
 80015cc:	2000016c 	.word	0x2000016c
 80015d0:	200034e8 	.word	0x200034e8
 80015d4:	20005000 	.word	0x20005000
 80015d8:	00000400 	.word	0x00000400

080015dc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	4770      	bx	lr
	...

080015e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015e2:	e003      	b.n	80015ec <LoopCopyDataInit>

080015e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ea:	3104      	adds	r1, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015ec:	480a      	ldr	r0, [pc, #40]	; (8001618 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015f4:	d3f6      	bcc.n	80015e4 <CopyDataInit>
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015f8:	e002      	b.n	8001600 <LoopFillZerobss>

080015fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015fc:	f842 3b04 	str.w	r3, [r2], #4

08001600 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001602:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001604:	d3f9      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001606:	f7ff ffe9 	bl	80015dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160a:	f013 fccf 	bl	8014fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160e:	f7ff fe07 	bl	8001220 <main>
  bx lr
 8001612:	4770      	bx	lr
  ldr r3, =_sidata
 8001614:	0801997c 	.word	0x0801997c
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800161c:	200000d8 	.word	0x200000d8
  ldr r2, =_sbss
 8001620:	200000d8 	.word	0x200000d8
  ldr r3, = _ebss
 8001624:	200034e4 	.word	0x200034e4

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_InitTick+0x3c>)
{
 8001630:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001632:	7818      	ldrb	r0, [r3, #0]
 8001634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001638:	fbb3 f3f0 	udiv	r3, r3, r0
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_InitTick+0x40>)
 800163e:	6810      	ldr	r0, [r2, #0]
 8001640:	fbb0 f0f3 	udiv	r0, r0, r3
 8001644:	f000 f8a0 	bl	8001788 <HAL_SYSTICK_Config>
 8001648:	4604      	mov	r4, r0
 800164a:	b958      	cbnz	r0, 8001664 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164c:	2d0f      	cmp	r5, #15
 800164e:	d809      	bhi.n	8001664 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	4602      	mov	r2, r0
 8001652:	4629      	mov	r1, r5
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f000 f854 	bl	8001704 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4620      	mov	r0, r4
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <HAL_InitTick+0x44>)
 8001660:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001662:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001664:	2001      	movs	r0, #1
 8001666:	e7fc      	b.n	8001662 <HAL_InitTick+0x36>
 8001668:	20000008 	.word	0x20000008
 800166c:	20000004 	.word	0x20000004
 8001670:	2000000c 	.word	0x2000000c

08001674 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_Init+0x20>)
{
 8001676:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001682:	f000 f82d 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff ffd0 	bl	800162c <HAL_InitTick>
  HAL_MspInit();
 800168c:	f7ff fedc 	bl	8001448 <HAL_MspInit>
}
 8001690:	2000      	movs	r0, #0
 8001692:	bd08      	pop	{r3, pc}
 8001694:	40022000 	.word	0x40022000

08001698 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001698:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <HAL_IncTick+0x10>)
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_IncTick+0x14>)
 800169c:	6811      	ldr	r1, [r2, #0]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	440b      	add	r3, r1
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	2000331c 	.word	0x2000331c
 80016ac:	20000008 	.word	0x20000008

080016b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016b0:	4b01      	ldr	r3, [pc, #4]	; (80016b8 <HAL_GetTick+0x8>)
 80016b2:	6818      	ldr	r0, [r3, #0]
}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	2000331c 	.word	0x2000331c

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b538      	push	{r3, r4, r5, lr}
 80016be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff fff6 	bl	80016b0 <HAL_GetTick>
 80016c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80016c8:	bf1e      	ittt	ne
 80016ca:	4b04      	ldrne	r3, [pc, #16]	; (80016dc <HAL_Delay+0x20>)
 80016cc:	781b      	ldrbne	r3, [r3, #0]
 80016ce:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d0:	f7ff ffee 	bl	80016b0 <HAL_GetTick>
 80016d4:	1b40      	subs	r0, r0, r5
 80016d6:	42a0      	cmp	r0, r4
 80016d8:	d3fa      	bcc.n	80016d0 <HAL_Delay+0x14>
  {
  }
}
 80016da:	bd38      	pop	{r3, r4, r5, pc}
 80016dc:	20000008 	.word	0x20000008

080016e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	0c1b      	lsrs	r3, r3, #16
 80016f2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80016fa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016fc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001706:	b570      	push	{r4, r5, r6, lr}
 8001708:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001712:	f1c4 0507 	rsb	r5, r4, #7
 8001716:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001718:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	bf28      	it	cs
 800171e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001720:	2b06      	cmp	r3, #6
 8001722:	bf98      	it	ls
 8001724:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001726:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	bf88      	it	hi
 800172c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172e:	ea21 0303 	bic.w	r3, r1, r3
 8001732:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001734:	fa06 f404 	lsl.w	r4, r6, r4
 8001738:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800173c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173e:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	bfa8      	it	ge
 8001744:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001748:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	bfb8      	it	lt
 800174e:	4a06      	ldrlt	r2, [pc, #24]	; (8001768 <HAL_NVIC_SetPriority+0x64>)
 8001750:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	bfab      	itete	ge
 8001754:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001762:	bd70      	pop	{r4, r5, r6, pc}
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	e000ed14 	.word	0xe000ed14

0800176c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800176c:	2800      	cmp	r0, #0
 800176e:	db08      	blt.n	8001782 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001770:	2301      	movs	r3, #1
 8001772:	0942      	lsrs	r2, r0, #5
 8001774:	f000 001f 	and.w	r0, r0, #31
 8001778:	fa03 f000 	lsl.w	r0, r3, r0
 800177c:	4b01      	ldr	r3, [pc, #4]	; (8001784 <HAL_NVIC_EnableIRQ+0x18>)
 800177e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100

08001788 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	3801      	subs	r0, #1
 800178a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800178e:	d20a      	bcs.n	80017a6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80017ba:	4626      	mov	r6, r4
 80017bc:	4b65      	ldr	r3, [pc, #404]	; (8001954 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017be:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001964 <HAL_GPIO_Init+0x1b0>
 80017c2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001968 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c6:	680a      	ldr	r2, [r1, #0]
 80017c8:	fa32 f506 	lsrs.w	r5, r2, r6
 80017cc:	d102      	bne.n	80017d4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80017ce:	b003      	add	sp, #12
 80017d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80017d4:	f04f 0801 	mov.w	r8, #1
 80017d8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017dc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80017e0:	4590      	cmp	r8, r2
 80017e2:	d17e      	bne.n	80018e2 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 80017e4:	684d      	ldr	r5, [r1, #4]
 80017e6:	2d12      	cmp	r5, #18
 80017e8:	f000 80a9 	beq.w	800193e <HAL_GPIO_Init+0x18a>
 80017ec:	f200 8082 	bhi.w	80018f4 <HAL_GPIO_Init+0x140>
 80017f0:	2d02      	cmp	r5, #2
 80017f2:	f000 80a1 	beq.w	8001938 <HAL_GPIO_Init+0x184>
 80017f6:	d876      	bhi.n	80018e6 <HAL_GPIO_Init+0x132>
 80017f8:	2d00      	cmp	r5, #0
 80017fa:	f000 8088 	beq.w	800190e <HAL_GPIO_Init+0x15a>
 80017fe:	2d01      	cmp	r5, #1
 8001800:	f000 8098 	beq.w	8001934 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001804:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001808:	2aff      	cmp	r2, #255	; 0xff
 800180a:	bf93      	iteet	ls
 800180c:	4682      	movls	sl, r0
 800180e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001812:	3d08      	subhi	r5, #8
 8001814:	f8d0 b000 	ldrls.w	fp, [r0]
 8001818:	bf92      	itee	ls
 800181a:	00b5      	lslls	r5, r6, #2
 800181c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001820:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001822:	fa09 f805 	lsl.w	r8, r9, r5
 8001826:	ea2b 0808 	bic.w	r8, fp, r8
 800182a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800182e:	bf88      	it	hi
 8001830:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001834:	ea48 0505 	orr.w	r5, r8, r5
 8001838:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001840:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001844:	d04d      	beq.n	80018e2 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001846:	4f44      	ldr	r7, [pc, #272]	; (8001958 <HAL_GPIO_Init+0x1a4>)
 8001848:	f026 0803 	bic.w	r8, r6, #3
 800184c:	69bd      	ldr	r5, [r7, #24]
 800184e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001852:	f045 0501 	orr.w	r5, r5, #1
 8001856:	61bd      	str	r5, [r7, #24]
 8001858:	69bd      	ldr	r5, [r7, #24]
 800185a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800185e:	f005 0501 	and.w	r5, r5, #1
 8001862:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001864:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001868:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800186a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800186e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001872:	fa09 f90b 	lsl.w	r9, r9, fp
 8001876:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187a:	4d38      	ldr	r5, [pc, #224]	; (800195c <HAL_GPIO_Init+0x1a8>)
 800187c:	42a8      	cmp	r0, r5
 800187e:	d063      	beq.n	8001948 <HAL_GPIO_Init+0x194>
 8001880:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001884:	42a8      	cmp	r0, r5
 8001886:	d061      	beq.n	800194c <HAL_GPIO_Init+0x198>
 8001888:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800188c:	42a8      	cmp	r0, r5
 800188e:	d05f      	beq.n	8001950 <HAL_GPIO_Init+0x19c>
 8001890:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001894:	42a8      	cmp	r0, r5
 8001896:	bf0c      	ite	eq
 8001898:	2503      	moveq	r5, #3
 800189a:	2504      	movne	r5, #4
 800189c:	fa05 f50b 	lsl.w	r5, r5, fp
 80018a0:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80018a4:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80018a8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018aa:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80018ae:	bf14      	ite	ne
 80018b0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b2:	4395      	biceq	r5, r2
 80018b4:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80018b6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80018bc:	bf14      	ite	ne
 80018be:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c0:	4395      	biceq	r5, r2
 80018c2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c4:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80018ca:	bf14      	ite	ne
 80018cc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ce:	4395      	biceq	r5, r2
 80018d0:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80018d2:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80018d8:	bf14      	ite	ne
 80018da:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018dc:	ea25 0202 	biceq.w	r2, r5, r2
 80018e0:	60da      	str	r2, [r3, #12]
	position++;
 80018e2:	3601      	adds	r6, #1
 80018e4:	e76f      	b.n	80017c6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80018e6:	2d03      	cmp	r5, #3
 80018e8:	d022      	beq.n	8001930 <HAL_GPIO_Init+0x17c>
 80018ea:	2d11      	cmp	r5, #17
 80018ec:	d18a      	bne.n	8001804 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018ee:	68cc      	ldr	r4, [r1, #12]
 80018f0:	3404      	adds	r4, #4
          break;
 80018f2:	e787      	b.n	8001804 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80018f4:	4f1a      	ldr	r7, [pc, #104]	; (8001960 <HAL_GPIO_Init+0x1ac>)
 80018f6:	42bd      	cmp	r5, r7
 80018f8:	d009      	beq.n	800190e <HAL_GPIO_Init+0x15a>
 80018fa:	d812      	bhi.n	8001922 <HAL_GPIO_Init+0x16e>
 80018fc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800196c <HAL_GPIO_Init+0x1b8>
 8001900:	454d      	cmp	r5, r9
 8001902:	d004      	beq.n	800190e <HAL_GPIO_Init+0x15a>
 8001904:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001908:	454d      	cmp	r5, r9
 800190a:	f47f af7b 	bne.w	8001804 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800190e:	688c      	ldr	r4, [r1, #8]
 8001910:	b1c4      	cbz	r4, 8001944 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001912:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001914:	bf0c      	ite	eq
 8001916:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800191a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191e:	2408      	movs	r4, #8
 8001920:	e770      	b.n	8001804 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001922:	4565      	cmp	r5, ip
 8001924:	d0f3      	beq.n	800190e <HAL_GPIO_Init+0x15a>
 8001926:	4575      	cmp	r5, lr
 8001928:	d0f1      	beq.n	800190e <HAL_GPIO_Init+0x15a>
 800192a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001970 <HAL_GPIO_Init+0x1bc>
 800192e:	e7eb      	b.n	8001908 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001930:	2400      	movs	r4, #0
 8001932:	e767      	b.n	8001804 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001934:	68cc      	ldr	r4, [r1, #12]
          break;
 8001936:	e765      	b.n	8001804 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001938:	68cc      	ldr	r4, [r1, #12]
 800193a:	3408      	adds	r4, #8
          break;
 800193c:	e762      	b.n	8001804 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800193e:	68cc      	ldr	r4, [r1, #12]
 8001940:	340c      	adds	r4, #12
          break;
 8001942:	e75f      	b.n	8001804 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001944:	2404      	movs	r4, #4
 8001946:	e75d      	b.n	8001804 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001948:	2500      	movs	r5, #0
 800194a:	e7a7      	b.n	800189c <HAL_GPIO_Init+0xe8>
 800194c:	2501      	movs	r5, #1
 800194e:	e7a5      	b.n	800189c <HAL_GPIO_Init+0xe8>
 8001950:	2502      	movs	r5, #2
 8001952:	e7a3      	b.n	800189c <HAL_GPIO_Init+0xe8>
 8001954:	40010400 	.word	0x40010400
 8001958:	40021000 	.word	0x40021000
 800195c:	40010800 	.word	0x40010800
 8001960:	10210000 	.word	0x10210000
 8001964:	10310000 	.word	0x10310000
 8001968:	10320000 	.word	0x10320000
 800196c:	10110000 	.word	0x10110000
 8001970:	10220000 	.word	0x10220000

08001974 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001974:	6883      	ldr	r3, [r0, #8]
 8001976:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001978:	bf14      	ite	ne
 800197a:	2001      	movne	r0, #1
 800197c:	2000      	moveq	r0, #0
 800197e:	4770      	bx	lr

08001980 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001980:	b10a      	cbz	r2, 8001986 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001982:	6101      	str	r1, [r0, #16]
  }
}
 8001984:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001986:	0409      	lsls	r1, r1, #16
 8001988:	e7fb      	b.n	8001982 <HAL_GPIO_WritePin+0x2>

0800198a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800198a:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800198c:	ea01 0203 	and.w	r2, r1, r3
 8001990:	ea21 0103 	bic.w	r1, r1, r3
 8001994:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001998:	6101      	str	r1, [r0, #16]
}
 800199a:	4770      	bx	lr

0800199c <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80019a0:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80019a4:	6959      	ldr	r1, [r3, #20]
 80019a6:	4201      	tst	r1, r0
 80019a8:	d002      	beq.n	80019b0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019aa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019ac:	f7ff fff6 	bl	800199c <HAL_GPIO_EXTI_Callback>
}
 80019b0:	bd08      	pop	{r3, pc}
 80019b2:	bf00      	nop
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019bc:	4605      	mov	r5, r0
 80019be:	b908      	cbnz	r0, 80019c4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80019c0:	2001      	movs	r0, #1
 80019c2:	e03c      	b.n	8001a3e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c4:	6803      	ldr	r3, [r0, #0]
 80019c6:	07db      	lsls	r3, r3, #31
 80019c8:	d410      	bmi.n	80019ec <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	682b      	ldr	r3, [r5, #0]
 80019cc:	079f      	lsls	r7, r3, #30
 80019ce:	d45d      	bmi.n	8001a8c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d0:	682b      	ldr	r3, [r5, #0]
 80019d2:	0719      	lsls	r1, r3, #28
 80019d4:	f100 8094 	bmi.w	8001b00 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d8:	682b      	ldr	r3, [r5, #0]
 80019da:	075a      	lsls	r2, r3, #29
 80019dc:	f100 80be 	bmi.w	8001b5c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e0:	69e8      	ldr	r0, [r5, #28]
 80019e2:	2800      	cmp	r0, #0
 80019e4:	f040 812c 	bne.w	8001c40 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80019e8:	2000      	movs	r0, #0
 80019ea:	e028      	b.n	8001a3e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ec:	4c8f      	ldr	r4, [pc, #572]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 80019ee:	6863      	ldr	r3, [r4, #4]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d007      	beq.n	8001a08 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f8:	6863      	ldr	r3, [r4, #4]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_OscConfig+0x5e>
 8001a02:	6863      	ldr	r3, [r4, #4]
 8001a04:	03de      	lsls	r6, r3, #15
 8001a06:	d506      	bpl.n	8001a16 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	039c      	lsls	r4, r3, #14
 8001a0c:	d5dd      	bpl.n	80019ca <HAL_RCC_OscConfig+0x12>
 8001a0e:	686b      	ldr	r3, [r5, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1da      	bne.n	80019ca <HAL_RCC_OscConfig+0x12>
 8001a14:	e7d4      	b.n	80019c0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a16:	686b      	ldr	r3, [r5, #4]
 8001a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1c:	d112      	bne.n	8001a44 <HAL_RCC_OscConfig+0x8c>
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a26:	f7ff fe43 	bl	80016b0 <HAL_GetTick>
 8001a2a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	0398      	lsls	r0, r3, #14
 8001a30:	d4cb      	bmi.n	80019ca <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a32:	f7ff fe3d 	bl	80016b0 <HAL_GetTick>
 8001a36:	1b80      	subs	r0, r0, r6
 8001a38:	2864      	cmp	r0, #100	; 0x64
 8001a3a:	d9f7      	bls.n	8001a2c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001a3c:	2003      	movs	r0, #3
}
 8001a3e:	b002      	add	sp, #8
 8001a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a44:	b99b      	cbnz	r3, 8001a6e <HAL_RCC_OscConfig+0xb6>
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4c:	6023      	str	r3, [r4, #0]
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a54:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a56:	f7ff fe2b 	bl	80016b0 <HAL_GetTick>
 8001a5a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	0399      	lsls	r1, r3, #14
 8001a60:	d5b3      	bpl.n	80019ca <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a62:	f7ff fe25 	bl	80016b0 <HAL_GetTick>
 8001a66:	1b80      	subs	r0, r0, r6
 8001a68:	2864      	cmp	r0, #100	; 0x64
 8001a6a:	d9f7      	bls.n	8001a5c <HAL_RCC_OscConfig+0xa4>
 8001a6c:	e7e6      	b.n	8001a3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	d103      	bne.n	8001a7e <HAL_RCC_OscConfig+0xc6>
 8001a76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7a:	6023      	str	r3, [r4, #0]
 8001a7c:	e7cf      	b.n	8001a1e <HAL_RCC_OscConfig+0x66>
 8001a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a82:	6023      	str	r3, [r4, #0]
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8a:	e7cb      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a8c:	4c67      	ldr	r4, [pc, #412]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001a8e:	6863      	ldr	r3, [r4, #4]
 8001a90:	f013 0f0c 	tst.w	r3, #12
 8001a94:	d007      	beq.n	8001aa6 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a96:	6863      	ldr	r3, [r4, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d110      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x10a>
 8001aa0:	6863      	ldr	r3, [r4, #4]
 8001aa2:	03da      	lsls	r2, r3, #15
 8001aa4:	d40d      	bmi.n	8001ac2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	079b      	lsls	r3, r3, #30
 8001aaa:	d502      	bpl.n	8001ab2 <HAL_RCC_OscConfig+0xfa>
 8001aac:	692b      	ldr	r3, [r5, #16]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d186      	bne.n	80019c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	696a      	ldr	r2, [r5, #20]
 8001ab6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001aba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001abe:	6023      	str	r3, [r4, #0]
 8001ac0:	e786      	b.n	80019d0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac2:	692a      	ldr	r2, [r5, #16]
 8001ac4:	4b5a      	ldr	r3, [pc, #360]	; (8001c30 <HAL_RCC_OscConfig+0x278>)
 8001ac6:	b16a      	cbz	r2, 8001ae4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001acc:	f7ff fdf0 	bl	80016b0 <HAL_GetTick>
 8001ad0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	079f      	lsls	r7, r3, #30
 8001ad6:	d4ec      	bmi.n	8001ab2 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fdea 	bl	80016b0 <HAL_GetTick>
 8001adc:	1b80      	subs	r0, r0, r6
 8001ade:	2802      	cmp	r0, #2
 8001ae0:	d9f7      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x11a>
 8001ae2:	e7ab      	b.n	8001a3c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001ae4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fde3 	bl	80016b0 <HAL_GetTick>
 8001aea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	0798      	lsls	r0, r3, #30
 8001af0:	f57f af6e 	bpl.w	80019d0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff fddc 	bl	80016b0 <HAL_GetTick>
 8001af8:	1b80      	subs	r0, r0, r6
 8001afa:	2802      	cmp	r0, #2
 8001afc:	d9f6      	bls.n	8001aec <HAL_RCC_OscConfig+0x134>
 8001afe:	e79d      	b.n	8001a3c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b00:	69aa      	ldr	r2, [r5, #24]
 8001b02:	4c4a      	ldr	r4, [pc, #296]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001b04:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <HAL_RCC_OscConfig+0x27c>)
 8001b06:	b1da      	cbz	r2, 8001b40 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b0c:	f7ff fdd0 	bl	80016b0 <HAL_GetTick>
 8001b10:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b14:	079b      	lsls	r3, r3, #30
 8001b16:	d50d      	bpl.n	8001b34 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b18:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b24:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001b26:	bf00      	nop
  }
  while (Delay --);
 8001b28:	9b01      	ldr	r3, [sp, #4]
 8001b2a:	1e5a      	subs	r2, r3, #1
 8001b2c:	9201      	str	r2, [sp, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f9      	bne.n	8001b26 <HAL_RCC_OscConfig+0x16e>
 8001b32:	e751      	b.n	80019d8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff fdbc 	bl	80016b0 <HAL_GetTick>
 8001b38:	1b80      	subs	r0, r0, r6
 8001b3a:	2802      	cmp	r0, #2
 8001b3c:	d9e9      	bls.n	8001b12 <HAL_RCC_OscConfig+0x15a>
 8001b3e:	e77d      	b.n	8001a3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001b40:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b42:	f7ff fdb5 	bl	80016b0 <HAL_GetTick>
 8001b46:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b4a:	079f      	lsls	r7, r3, #30
 8001b4c:	f57f af44 	bpl.w	80019d8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff fdae 	bl	80016b0 <HAL_GetTick>
 8001b54:	1b80      	subs	r0, r0, r6
 8001b56:	2802      	cmp	r0, #2
 8001b58:	d9f6      	bls.n	8001b48 <HAL_RCC_OscConfig+0x190>
 8001b5a:	e76f      	b.n	8001a3c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5c:	4c33      	ldr	r4, [pc, #204]	; (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001b5e:	69e3      	ldr	r3, [r4, #28]
 8001b60:	00d8      	lsls	r0, r3, #3
 8001b62:	d424      	bmi.n	8001bae <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001b64:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	69e3      	ldr	r3, [r4, #28]
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	61e3      	str	r3, [r4, #28]
 8001b6e:	69e3      	ldr	r3, [r4, #28]
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	4e30      	ldr	r6, [pc, #192]	; (8001c3c <HAL_RCC_OscConfig+0x284>)
 8001b7a:	6833      	ldr	r3, [r6, #0]
 8001b7c:	05d9      	lsls	r1, r3, #23
 8001b7e:	d518      	bpl.n	8001bb2 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b80:	68eb      	ldr	r3, [r5, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d126      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x21c>
 8001b86:	6a23      	ldr	r3, [r4, #32]
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fd8f 	bl	80016b0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b96:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	6a23      	ldr	r3, [r4, #32]
 8001b9a:	079b      	lsls	r3, r3, #30
 8001b9c:	d53f      	bpl.n	8001c1e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001b9e:	2f00      	cmp	r7, #0
 8001ba0:	f43f af1e 	beq.w	80019e0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba4:	69e3      	ldr	r3, [r4, #28]
 8001ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001baa:	61e3      	str	r3, [r4, #28]
 8001bac:	e718      	b.n	80019e0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001bae:	2700      	movs	r7, #0
 8001bb0:	e7e2      	b.n	8001b78 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb2:	6833      	ldr	r3, [r6, #0]
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001bba:	f7ff fd79 	bl	80016b0 <HAL_GetTick>
 8001bbe:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	6833      	ldr	r3, [r6, #0]
 8001bc2:	05da      	lsls	r2, r3, #23
 8001bc4:	d4dc      	bmi.n	8001b80 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc6:	f7ff fd73 	bl	80016b0 <HAL_GetTick>
 8001bca:	eba0 0008 	sub.w	r0, r0, r8
 8001bce:	2864      	cmp	r0, #100	; 0x64
 8001bd0:	d9f6      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x208>
 8001bd2:	e733      	b.n	8001a3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd4:	b9ab      	cbnz	r3, 8001c02 <HAL_RCC_OscConfig+0x24a>
 8001bd6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6223      	str	r3, [r4, #32]
 8001be2:	6a23      	ldr	r3, [r4, #32]
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001bea:	f7ff fd61 	bl	80016b0 <HAL_GetTick>
 8001bee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	6a23      	ldr	r3, [r4, #32]
 8001bf2:	0798      	lsls	r0, r3, #30
 8001bf4:	d5d3      	bpl.n	8001b9e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff fd5b 	bl	80016b0 <HAL_GetTick>
 8001bfa:	1b80      	subs	r0, r0, r6
 8001bfc:	4540      	cmp	r0, r8
 8001bfe:	d9f7      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x238>
 8001c00:	e71c      	b.n	8001a3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	6a23      	ldr	r3, [r4, #32]
 8001c06:	d103      	bne.n	8001c10 <HAL_RCC_OscConfig+0x258>
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6223      	str	r3, [r4, #32]
 8001c0e:	e7ba      	b.n	8001b86 <HAL_RCC_OscConfig+0x1ce>
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6223      	str	r3, [r4, #32]
 8001c16:	6a23      	ldr	r3, [r4, #32]
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	e7b6      	b.n	8001b8c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7ff fd47 	bl	80016b0 <HAL_GetTick>
 8001c22:	eba0 0008 	sub.w	r0, r0, r8
 8001c26:	42b0      	cmp	r0, r6
 8001c28:	d9b6      	bls.n	8001b98 <HAL_RCC_OscConfig+0x1e0>
 8001c2a:	e707      	b.n	8001a3c <HAL_RCC_OscConfig+0x84>
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	42420000 	.word	0x42420000
 8001c34:	42420480 	.word	0x42420480
 8001c38:	20000004 	.word	0x20000004
 8001c3c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c40:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_RCC_OscConfig+0x334>)
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	461c      	mov	r4, r3
 8001c46:	f002 020c 	and.w	r2, r2, #12
 8001c4a:	2a08      	cmp	r2, #8
 8001c4c:	d03d      	beq.n	8001cca <HAL_RCC_OscConfig+0x312>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	4e27      	ldr	r6, [pc, #156]	; (8001cf0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c52:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001c54:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c56:	d12b      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001c58:	f7ff fd2a 	bl	80016b0 <HAL_GetTick>
 8001c5c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	0199      	lsls	r1, r3, #6
 8001c62:	d41f      	bmi.n	8001ca4 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c64:	6a2b      	ldr	r3, [r5, #32]
 8001c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c6c:	6862      	ldr	r2, [r4, #4]
 8001c6e:	68a9      	ldr	r1, [r5, #8]
 8001c70:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c74:	430a      	orrs	r2, r1
 8001c76:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c78:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001c7a:	6862      	ldr	r2, [r4, #4]
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001c82:	4313      	orrs	r3, r2
 8001c84:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c86:	2301      	movs	r3, #1
 8001c88:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fd11 	bl	80016b0 <HAL_GetTick>
 8001c8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	019a      	lsls	r2, r3, #6
 8001c94:	f53f aea8 	bmi.w	80019e8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff fd0a 	bl	80016b0 <HAL_GetTick>
 8001c9c:	1b40      	subs	r0, r0, r5
 8001c9e:	2802      	cmp	r0, #2
 8001ca0:	d9f6      	bls.n	8001c90 <HAL_RCC_OscConfig+0x2d8>
 8001ca2:	e6cb      	b.n	8001a3c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff fd04 	bl	80016b0 <HAL_GetTick>
 8001ca8:	1bc0      	subs	r0, r0, r7
 8001caa:	2802      	cmp	r0, #2
 8001cac:	d9d7      	bls.n	8001c5e <HAL_RCC_OscConfig+0x2a6>
 8001cae:	e6c5      	b.n	8001a3c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fcfe 	bl	80016b0 <HAL_GetTick>
 8001cb4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	019b      	lsls	r3, r3, #6
 8001cba:	f57f ae95 	bpl.w	80019e8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff fcf7 	bl	80016b0 <HAL_GetTick>
 8001cc2:	1b40      	subs	r0, r0, r5
 8001cc4:	2802      	cmp	r0, #2
 8001cc6:	d9f6      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x2fe>
 8001cc8:	e6b8      	b.n	8001a3c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cca:	2801      	cmp	r0, #1
 8001ccc:	f43f aeb7 	beq.w	8001a3e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001cd0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	6a2b      	ldr	r3, [r5, #32]
 8001cd4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f47f ae71 	bne.w	80019c0 <HAL_RCC_OscConfig+0x8>
 8001cde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001ce4:	1ac0      	subs	r0, r0, r3
 8001ce6:	bf18      	it	ne
 8001ce8:	2001      	movne	r0, #1
 8001cea:	e6a8      	b.n	8001a3e <HAL_RCC_OscConfig+0x86>
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	42420060 	.word	0x42420060

08001cf4 <HAL_RCC_GetSysClockFreq>:
{
 8001cf4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001cf8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cfa:	ac02      	add	r4, sp, #8
 8001cfc:	f103 0510 	add.w	r5, r3, #16
 8001d00:	4622      	mov	r2, r4
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	3308      	adds	r3, #8
 8001d08:	c203      	stmia	r2!, {r0, r1}
 8001d0a:	42ab      	cmp	r3, r5
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	d1f7      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d10:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001d14:	4911      	ldr	r1, [pc, #68]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d16:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001d1a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d1c:	f003 020c 	and.w	r2, r3, #12
 8001d20:	2a08      	cmp	r2, #8
 8001d22:	d117      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d24:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001d28:	a806      	add	r0, sp, #24
 8001d2a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d2c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d2e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d32:	d50c      	bpl.n	8001d4e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d34:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d36:	480a      	ldr	r0, [pc, #40]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d38:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d3c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d3e:	aa06      	add	r2, sp, #24
 8001d40:	4413      	add	r3, r2
 8001d42:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d46:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d4a:	b007      	add	sp, #28
 8001d4c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x70>)
 8001d50:	4350      	muls	r0, r2
 8001d52:	e7fa      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001d56:	e7f8      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x56>
 8001d58:	0801589e 	.word	0x0801589e
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	007a1200 	.word	0x007a1200
 8001d64:	003d0900 	.word	0x003d0900

08001d68 <HAL_RCC_ClockConfig>:
{
 8001d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001d6e:	4604      	mov	r4, r0
 8001d70:	b910      	cbnz	r0, 8001d78 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d72:	2001      	movs	r0, #1
}
 8001d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4a44      	ldr	r2, [pc, #272]	; (8001e8c <HAL_RCC_ClockConfig+0x124>)
 8001d7a:	6813      	ldr	r3, [r2, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	428b      	cmp	r3, r1
 8001d82:	d328      	bcc.n	8001dd6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	6821      	ldr	r1, [r4, #0]
 8001d86:	078e      	lsls	r6, r1, #30
 8001d88:	d430      	bmi.n	8001dec <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	07ca      	lsls	r2, r1, #31
 8001d8c:	d443      	bmi.n	8001e16 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8e:	4a3f      	ldr	r2, [pc, #252]	; (8001e8c <HAL_RCC_ClockConfig+0x124>)
 8001d90:	6813      	ldr	r3, [r2, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	42ab      	cmp	r3, r5
 8001d98:	d865      	bhi.n	8001e66 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9a:	6822      	ldr	r2, [r4, #0]
 8001d9c:	4d3c      	ldr	r5, [pc, #240]	; (8001e90 <HAL_RCC_ClockConfig+0x128>)
 8001d9e:	f012 0f04 	tst.w	r2, #4
 8001da2:	d16c      	bne.n	8001e7e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da4:	0713      	lsls	r3, r2, #28
 8001da6:	d506      	bpl.n	8001db6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001da8:	686b      	ldr	r3, [r5, #4]
 8001daa:	6922      	ldr	r2, [r4, #16]
 8001dac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001db0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001db4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db6:	f7ff ff9d 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001dba:	686b      	ldr	r3, [r5, #4]
 8001dbc:	4a35      	ldr	r2, [pc, #212]	; (8001e94 <HAL_RCC_ClockConfig+0x12c>)
 8001dbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	40d8      	lsrs	r0, r3
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_RCC_ClockConfig+0x130>)
 8001dc8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001dca:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <HAL_RCC_ClockConfig+0x134>)
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	f7ff fc2d 	bl	800162c <HAL_InitTick>
  return HAL_OK;
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	e7ce      	b.n	8001d74 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	6813      	ldr	r3, [r2, #0]
 8001dd8:	f023 0307 	bic.w	r3, r3, #7
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de0:	6813      	ldr	r3, [r2, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	428b      	cmp	r3, r1
 8001de8:	d1c3      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xa>
 8001dea:	e7cb      	b.n	8001d84 <HAL_RCC_ClockConfig+0x1c>
 8001dec:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dee:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df2:	bf1e      	ittt	ne
 8001df4:	685a      	ldrne	r2, [r3, #4]
 8001df6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001dfa:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dfe:	bf42      	ittt	mi
 8001e00:	685a      	ldrmi	r2, [r3, #4]
 8001e02:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001e06:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	68a0      	ldr	r0, [r4, #8]
 8001e0c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e10:	4302      	orrs	r2, r0
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	e7b9      	b.n	8001d8a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e16:	6862      	ldr	r2, [r4, #4]
 8001e18:	4e1d      	ldr	r6, [pc, #116]	; (8001e90 <HAL_RCC_ClockConfig+0x128>)
 8001e1a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1e:	d11a      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	d0a5      	beq.n	8001d72 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e26:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e28:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2c:	f023 0303 	bic.w	r3, r3, #3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001e34:	f7ff fc3c 	bl	80016b0 <HAL_GetTick>
 8001e38:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	6873      	ldr	r3, [r6, #4]
 8001e3c:	6862      	ldr	r2, [r4, #4]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e46:	d0a2      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7ff fc32 	bl	80016b0 <HAL_GetTick>
 8001e4c:	1bc0      	subs	r0, r0, r7
 8001e4e:	4540      	cmp	r0, r8
 8001e50:	d9f3      	bls.n	8001e3a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001e52:	2003      	movs	r0, #3
 8001e54:	e78e      	b.n	8001d74 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e56:	2a02      	cmp	r2, #2
 8001e58:	d102      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e5e:	e7e1      	b.n	8001e24 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	f013 0f02 	tst.w	r3, #2
 8001e64:	e7de      	b.n	8001e24 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	6813      	ldr	r3, [r2, #0]
 8001e68:	f023 0307 	bic.w	r3, r3, #7
 8001e6c:	432b      	orrs	r3, r5
 8001e6e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e70:	6813      	ldr	r3, [r2, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	42ab      	cmp	r3, r5
 8001e78:	f47f af7b 	bne.w	8001d72 <HAL_RCC_ClockConfig+0xa>
 8001e7c:	e78d      	b.n	8001d9a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7e:	686b      	ldr	r3, [r5, #4]
 8001e80:	68e1      	ldr	r1, [r4, #12]
 8001e82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e86:	430b      	orrs	r3, r1
 8001e88:	606b      	str	r3, [r5, #4]
 8001e8a:	e78b      	b.n	8001da4 <HAL_RCC_ClockConfig+0x3c>
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08015984 	.word	0x08015984
 8001e98:	20000004 	.word	0x20000004
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001ea0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001ea4:	461c      	mov	r4, r3
 8001ea6:	4616      	mov	r6, r2
 8001ea8:	460f      	mov	r7, r1
 8001eaa:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001eac:	f7ff fc00 	bl	80016b0 <HAL_GetTick>
 8001eb0:	4434      	add	r4, r6
 8001eb2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8001eb4:	f7ff fbfc 	bl	80016b0 <HAL_GetTick>
 8001eb8:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001ec2:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ec4:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8001ec6:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ec8:	6893      	ldr	r3, [r2, #8]
 8001eca:	ea37 0303 	bics.w	r3, r7, r3
 8001ece:	d001      	beq.n	8001ed4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x34>
    }
  }

  return HAL_OK;
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	e02e      	b.n	8001f32 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8001ed4:	1c73      	adds	r3, r6, #1
 8001ed6:	d0f7      	beq.n	8001ec8 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ed8:	f7ff fbea 	bl	80016b0 <HAL_GetTick>
 8001edc:	eba0 0008 	sub.w	r0, r0, r8
 8001ee0:	42a0      	cmp	r0, r4
 8001ee2:	d329      	bcc.n	8001f38 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ee4:	682b      	ldr	r3, [r5, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001eec:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eee:	686a      	ldr	r2, [r5, #4]
 8001ef0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001ef4:	d10a      	bne.n	8001f0c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
 8001ef6:	68aa      	ldr	r2, [r5, #8]
 8001ef8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001efc:	d002      	beq.n	8001f04 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001efe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001f02:	d103      	bne.n	8001f0c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f0a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f0c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001f0e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001f12:	d107      	bne.n	8001f24 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x84>
          SPI_RESET_CRC(hspi);
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f22:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8001f32:	b002      	add	sp, #8
 8001f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8001f38:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001f3a:	2b00      	cmp	r3, #0
      count--;
 8001f3c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001f3e:	bf08      	it	eq
 8001f40:	2400      	moveq	r4, #0
      count--;
 8001f42:	3b01      	subs	r3, #1
 8001f44:	e7be      	b.n	8001ec4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x24>
 8001f46:	bf00      	nop
 8001f48:	20000004 	.word	0x20000004

08001f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f4e:	4613      	mov	r3, r2
 8001f50:	460a      	mov	r2, r1
 8001f52:	2180      	movs	r1, #128	; 0x80
{
 8001f54:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f56:	f7ff ffa3 	bl	8001ea0 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8001f5a:	b120      	cbz	r0, 8001f66 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001f5c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f60:	f043 0320 	orr.w	r3, r3, #32
 8001f64:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001f66:	bd10      	pop	{r4, pc}

08001f68 <HAL_SPI_Init>:
{
 8001f68:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d051      	beq.n	8002014 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d14a      	bne.n	800200c <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f76:	6842      	ldr	r2, [r0, #4]
 8001f78:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001f7c:	d000      	beq.n	8001f80 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f7e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f84:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001f88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f8c:	b923      	cbnz	r3, 8001f98 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8001f8e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7ff fa7a 	bl	800148c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f98:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001f9a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001fa0:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fa2:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fa8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001faa:	6863      	ldr	r3, [r4, #4]
 8001fac:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8001fb0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001fb4:	4303      	orrs	r3, r0
 8001fb6:	68e0      	ldr	r0, [r4, #12]
 8001fb8:	69a1      	ldr	r1, [r4, #24]
 8001fba:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8001fbe:	4303      	orrs	r3, r0
 8001fc0:	6920      	ldr	r0, [r4, #16]
 8001fc2:	f000 0002 	and.w	r0, r0, #2
 8001fc6:	4303      	orrs	r3, r0
 8001fc8:	6960      	ldr	r0, [r4, #20]
 8001fca:	f000 0001 	and.w	r0, r0, #1
 8001fce:	4303      	orrs	r3, r0
 8001fd0:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8001fd4:	4303      	orrs	r3, r0
 8001fd6:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fd8:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fda:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8001fde:	4303      	orrs	r3, r0
 8001fe0:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fe2:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fe6:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8001fea:	4303      	orrs	r3, r0
 8001fec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001fee:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8001ff2:	4303      	orrs	r3, r0
 8001ff4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ff6:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ff8:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ffa:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002000:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002002:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002004:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002006:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800200a:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800200c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800200e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002012:	e7b5      	b.n	8001f80 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002014:	2001      	movs	r0, #1
 8002016:	e7f8      	b.n	800200a <HAL_SPI_Init+0xa2>

08002018 <HAL_SPI_Transmit>:
{
 8002018:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800201c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800201e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002022:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002024:	2b01      	cmp	r3, #1
{
 8002026:	460d      	mov	r5, r1
 8002028:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800202a:	f000 809e 	beq.w	800216a <HAL_SPI_Transmit+0x152>
 800202e:	2301      	movs	r3, #1
 8002030:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002034:	f7ff fb3c 	bl	80016b0 <HAL_GetTick>
 8002038:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800203a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800203e:	b2c0      	uxtb	r0, r0
 8002040:	2801      	cmp	r0, #1
 8002042:	f040 8090 	bne.w	8002166 <HAL_SPI_Transmit+0x14e>
  if ((pData == NULL) || (Size == 0U))
 8002046:	2d00      	cmp	r5, #0
 8002048:	d060      	beq.n	800210c <HAL_SPI_Transmit+0xf4>
 800204a:	f1b8 0f00 	cmp.w	r8, #0
 800204e:	d05d      	beq.n	800210c <HAL_SPI_Transmit+0xf4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002050:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002052:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002054:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002058:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800205a:	6560      	str	r0, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800205c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferCount = Size;
 8002060:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002064:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002066:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002068:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800206a:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800206e:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002070:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
 8002074:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002076:	d107      	bne.n	8002088 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8002078:	6803      	ldr	r3, [r0, #0]
 800207a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800207e:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8002080:	6803      	ldr	r3, [r0, #0]
 8002082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002086:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002088:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800208a:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800208c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800208e:	bf5e      	ittt	pl
 8002090:	6803      	ldrpl	r3, [r0, #0]
 8002092:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002096:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002098:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800209c:	6863      	ldr	r3, [r4, #4]
 800209e:	d13e      	bne.n	800211e <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020a0:	b113      	cbz	r3, 80020a8 <HAL_SPI_Transmit+0x90>
 80020a2:	f1b8 0f01 	cmp.w	r8, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020a8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80020ac:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ae:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80020b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80020b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	b9a3      	cbnz	r3, 80020e8 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020be:	463a      	mov	r2, r7
 80020c0:	4631      	mov	r1, r6
 80020c2:	4620      	mov	r0, r4
 80020c4:	f7ff ff42 	bl	8001f4c <SPI_EndRxTxTransaction>
 80020c8:	2800      	cmp	r0, #0
 80020ca:	d149      	bne.n	8002160 <HAL_SPI_Transmit+0x148>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020cc:	68a3      	ldr	r3, [r4, #8]
 80020ce:	b933      	cbnz	r3, 80020de <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	9201      	str	r2, [sp, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020de:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80020e0:	3000      	adds	r0, #0
 80020e2:	bf18      	it	ne
 80020e4:	2001      	movne	r0, #1
error:
 80020e6:	e011      	b.n	800210c <HAL_SPI_Transmit+0xf4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020e8:	6822      	ldr	r2, [r4, #0]
 80020ea:	6893      	ldr	r3, [r2, #8]
 80020ec:	0798      	lsls	r0, r3, #30
 80020ee:	d505      	bpl.n	80020fc <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020f2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80020f6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f8:	6323      	str	r3, [r4, #48]	; 0x30
 80020fa:	e7d9      	b.n	80020b0 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020fc:	f7ff fad8 	bl	80016b0 <HAL_GetTick>
 8002100:	1bc0      	subs	r0, r0, r7
 8002102:	42b0      	cmp	r0, r6
 8002104:	d3d8      	bcc.n	80020b8 <HAL_SPI_Transmit+0xa0>
 8002106:	1c71      	adds	r1, r6, #1
 8002108:	d0d6      	beq.n	80020b8 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 800210a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800210c:	2301      	movs	r3, #1
 800210e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002112:	2300      	movs	r3, #0
 8002114:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002118:	b002      	add	sp, #8
 800211a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800211e:	b113      	cbz	r3, 8002126 <HAL_SPI_Transmit+0x10e>
 8002120:	f1b8 0f01 	cmp.w	r8, #1
 8002124:	d108      	bne.n	8002138 <HAL_SPI_Transmit+0x120>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002126:	782b      	ldrb	r3, [r5, #0]
 8002128:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800212a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800212c:	3301      	adds	r3, #1
 800212e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002130:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002132:	3b01      	subs	r3, #1
 8002134:	b29b      	uxth	r3, r3
 8002136:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002138:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0be      	beq.n	80020be <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	0792      	lsls	r2, r2, #30
 8002146:	d503      	bpl.n	8002150 <HAL_SPI_Transmit+0x138>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002148:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	731a      	strb	r2, [r3, #12]
 800214e:	e7ec      	b.n	800212a <HAL_SPI_Transmit+0x112>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002150:	f7ff faae 	bl	80016b0 <HAL_GetTick>
 8002154:	1bc0      	subs	r0, r0, r7
 8002156:	42b0      	cmp	r0, r6
 8002158:	d3ee      	bcc.n	8002138 <HAL_SPI_Transmit+0x120>
 800215a:	1c73      	adds	r3, r6, #1
 800215c:	d0ec      	beq.n	8002138 <HAL_SPI_Transmit+0x120>
 800215e:	e7d4      	b.n	800210a <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002160:	2320      	movs	r3, #32
 8002162:	6563      	str	r3, [r4, #84]	; 0x54
 8002164:	e7b2      	b.n	80020cc <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8002166:	2002      	movs	r0, #2
 8002168:	e7d0      	b.n	800210c <HAL_SPI_Transmit+0xf4>
  __HAL_LOCK(hspi);
 800216a:	2002      	movs	r0, #2
 800216c:	e7d4      	b.n	8002118 <HAL_SPI_Transmit+0x100>

0800216e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800216e:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002170:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002174:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002178:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800217c:	f890 5043 	ldrb.w	r5, [r0, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002180:	b2e4      	uxtb	r4, r4
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002182:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002184:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002186:	b2ed      	uxtb	r5, r5

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002188:	b9e1      	cbnz	r1, 80021c4 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800218a:	2c01      	cmp	r4, #1
 800218c:	d15b      	bne.n	8002246 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800218e:	2b01      	cmp	r3, #1
 8002190:	d159      	bne.n	8002246 <HAL_TIM_Encoder_Start_IT+0xd8>
    {
      return HAL_ERROR;
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002192:	2302      	movs	r3, #2
 8002194:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002198:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800219c:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800219e:	6a1a      	ldr	r2, [r3, #32]
 80021a0:	f022 0201 	bic.w	r2, r2, #1
 80021a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	f042 0202 	orr.w	r2, r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80021b4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80021b6:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
 80021b8:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6013      	str	r3, [r2, #0]
}
 80021c2:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 80021c4:	2904      	cmp	r1, #4
 80021c6:	d115      	bne.n	80021f4 <HAL_TIM_Encoder_Start_IT+0x86>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80021c8:	2a01      	cmp	r2, #1
 80021ca:	d13c      	bne.n	8002246 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80021cc:	2d01      	cmp	r5, #1
 80021ce:	d13a      	bne.n	8002246 <HAL_TIM_Encoder_Start_IT+0xd8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021d0:	2302      	movs	r3, #2
 80021d2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021d6:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80021da:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	f022 0210 	bic.w	r2, r2, #16
 80021e2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021e4:	6a1a      	ldr	r2, [r3, #32]
 80021e6:	f042 0210 	orr.w	r2, r2, #16
 80021ea:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	f042 0204 	orr.w	r2, r2, #4
 80021f2:	e7df      	b.n	80021b4 <HAL_TIM_Encoder_Start_IT+0x46>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80021f4:	2c01      	cmp	r4, #1
 80021f6:	d126      	bne.n	8002246 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80021f8:	2a01      	cmp	r2, #1
 80021fa:	d124      	bne.n	8002246 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d122      	bne.n	8002246 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002200:	2d01      	cmp	r5, #1
 8002202:	d122      	bne.n	800224a <HAL_TIM_Encoder_Start_IT+0xdc>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002204:	2302      	movs	r3, #2
 8002206:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800220a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800220e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002212:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8002216:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8002218:	2900      	cmp	r1, #0
 800221a:	d0bf      	beq.n	800219c <HAL_TIM_Encoder_Start_IT+0x2e>
  TIMx->CCER &= ~tmp;
 800221c:	6a1a      	ldr	r2, [r3, #32]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002224:	6a1a      	ldr	r2, [r3, #32]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 800222c:	6a1a      	ldr	r2, [r3, #32]
 800222e:	f022 0210 	bic.w	r2, r2, #16
 8002232:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002234:	6a1a      	ldr	r2, [r3, #32]
 8002236:	f042 0210 	orr.w	r2, r2, #16
 800223a:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	f042 0202 	orr.w	r2, r2, #2
 8002242:	60da      	str	r2, [r3, #12]
 8002244:	e7d2      	b.n	80021ec <HAL_TIM_Encoder_Start_IT+0x7e>
      return HAL_ERROR;
 8002246:	2001      	movs	r0, #1
 8002248:	e7bb      	b.n	80021c2 <HAL_TIM_Encoder_Start_IT+0x54>
 800224a:	4618      	mov	r0, r3
 800224c:	e7b9      	b.n	80021c2 <HAL_TIM_Encoder_Start_IT+0x54>

0800224e <HAL_TIM_PeriodElapsedCallback>:
 800224e:	4770      	bx	lr

08002250 <HAL_TIM_OC_DelayElapsedCallback>:
 8002250:	4770      	bx	lr

08002252 <HAL_TIM_IC_CaptureCallback>:
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002254:	4770      	bx	lr

08002256 <HAL_TIM_TriggerCallback>:
 8002256:	4770      	bx	lr

08002258 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002258:	6803      	ldr	r3, [r0, #0]
{
 800225a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800225c:	691a      	ldr	r2, [r3, #16]
{
 800225e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002260:	0791      	lsls	r1, r2, #30
 8002262:	d50e      	bpl.n	8002282 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	0792      	lsls	r2, r2, #30
 8002268:	d50b      	bpl.n	8002282 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800226a:	f06f 0202 	mvn.w	r2, #2
 800226e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002270:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002272:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002274:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002276:	079b      	lsls	r3, r3, #30
 8002278:	d077      	beq.n	800236a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800227a:	f7ff ffea 	bl	8002252 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	2300      	movs	r3, #0
 8002280:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	0750      	lsls	r0, r2, #29
 8002288:	d510      	bpl.n	80022ac <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	0751      	lsls	r1, r2, #29
 800228e:	d50d      	bpl.n	80022ac <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002290:	f06f 0204 	mvn.w	r2, #4
 8002294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002296:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002298:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800229a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800229c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80022a0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a2:	d068      	beq.n	8002376 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80022a4:	f7ff ffd5 	bl	8002252 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a8:	2300      	movs	r3, #0
 80022aa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	0712      	lsls	r2, r2, #28
 80022b2:	d50f      	bpl.n	80022d4 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	0710      	lsls	r0, r2, #28
 80022b8:	d50c      	bpl.n	80022d4 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022ba:	f06f 0208 	mvn.w	r2, #8
 80022be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022c0:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022c2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022c6:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80022c8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022ca:	d05a      	beq.n	8002382 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80022cc:	f7ff ffc1 	bl	8002252 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d0:	2300      	movs	r3, #0
 80022d2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	06d2      	lsls	r2, r2, #27
 80022da:	d510      	bpl.n	80022fe <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	06d0      	lsls	r0, r2, #27
 80022e0:	d50d      	bpl.n	80022fe <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022e2:	f06f 0210 	mvn.w	r2, #16
 80022e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022e8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ee:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80022f2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f4:	d04b      	beq.n	800238e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	f7ff ffac 	bl	8002252 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	2300      	movs	r3, #0
 80022fc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	07d1      	lsls	r1, r2, #31
 8002304:	d508      	bpl.n	8002318 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	07d2      	lsls	r2, r2, #31
 800230a:	d505      	bpl.n	8002318 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800230c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002310:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002312:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002314:	f7ff ff9b 	bl	800224e <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	0610      	lsls	r0, r2, #24
 800231e:	d508      	bpl.n	8002332 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	0611      	lsls	r1, r2, #24
 8002324:	d505      	bpl.n	8002332 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002326:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800232a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800232c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800232e:	f000 f8f6 	bl	800251e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	0652      	lsls	r2, r2, #25
 8002338:	d508      	bpl.n	800234c <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	0650      	lsls	r0, r2, #25
 800233e:	d505      	bpl.n	800234c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002340:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002344:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002346:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002348:	f7ff ff85 	bl	8002256 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	0691      	lsls	r1, r2, #26
 8002352:	d522      	bpl.n	800239a <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	0692      	lsls	r2, r2, #26
 8002358:	d51f      	bpl.n	800239a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800235a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800235e:	4620      	mov	r0, r4
}
 8002360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002364:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002366:	f000 b8d9 	b.w	800251c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	f7ff ff71 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff ff70 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
 8002374:	e783      	b.n	800227e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	f7ff ff6b 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff ff6a 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
 8002380:	e792      	b.n	80022a8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	f7ff ff65 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002386:	4620      	mov	r0, r4
 8002388:	f7ff ff64 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
 800238c:	e7a0      	b.n	80022d0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	f7ff ff5f 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002392:	4620      	mov	r0, r4
 8002394:	f7ff ff5e 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
 8002398:	e7af      	b.n	80022fa <HAL_TIM_IRQHandler+0xa2>
}
 800239a:	bd10      	pop	{r4, pc}

0800239c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800239c:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800239e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023a0:	4290      	cmp	r0, r2
 80023a2:	d00a      	beq.n	80023ba <TIM_Base_SetConfig+0x1e>
 80023a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023a8:	d007      	beq.n	80023ba <TIM_Base_SetConfig+0x1e>
 80023aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80023ae:	4290      	cmp	r0, r2
 80023b0:	d003      	beq.n	80023ba <TIM_Base_SetConfig+0x1e>
 80023b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b6:	4290      	cmp	r0, r2
 80023b8:	d115      	bne.n	80023e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80023ba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80023c0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c2:	4a11      	ldr	r2, [pc, #68]	; (8002408 <TIM_Base_SetConfig+0x6c>)
 80023c4:	4290      	cmp	r0, r2
 80023c6:	d00a      	beq.n	80023de <TIM_Base_SetConfig+0x42>
 80023c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023cc:	d007      	beq.n	80023de <TIM_Base_SetConfig+0x42>
 80023ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80023d2:	4290      	cmp	r0, r2
 80023d4:	d003      	beq.n	80023de <TIM_Base_SetConfig+0x42>
 80023d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023da:	4290      	cmp	r0, r2
 80023dc:	d103      	bne.n	80023e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023de:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023e6:	694a      	ldr	r2, [r1, #20]
 80023e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80023ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f0:	688b      	ldr	r3, [r1, #8]
 80023f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80023f4:	680b      	ldr	r3, [r1, #0]
 80023f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <TIM_Base_SetConfig+0x6c>)
 80023fa:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80023fc:	bf04      	itt	eq
 80023fe:	690b      	ldreq	r3, [r1, #16]
 8002400:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002402:	2301      	movs	r3, #1
 8002404:	6143      	str	r3, [r0, #20]
}
 8002406:	4770      	bx	lr
 8002408:	40012c00 	.word	0x40012c00

0800240c <HAL_TIM_Encoder_Init>:
{
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	460d      	mov	r5, r1
  if (htim == NULL)
 8002410:	4604      	mov	r4, r0
 8002412:	2800      	cmp	r0, #0
 8002414:	d04d      	beq.n	80024b2 <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002416:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800241a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800241e:	b91b      	cbnz	r3, 8002428 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002420:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002424:	f7ff f862 	bl	80014ec <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002428:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800242a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800242c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002434:	6883      	ldr	r3, [r0, #8]
 8002436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800243a:	f023 0307 	bic.w	r3, r3, #7
 800243e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002440:	f7ff ffac 	bl	800239c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002444:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8002446:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002448:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800244a:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800244c:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800244e:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002450:	69ab      	ldr	r3, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002452:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002456:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800245a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800245e:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002460:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002464:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002466:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800246e:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 8002470:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002472:	430b      	orrs	r3, r1
 8002474:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002476:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800247a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800247e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002480:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002482:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002486:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002488:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800248a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800248e:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002490:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002492:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8002494:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8002496:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002498:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 80024ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80024b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80024b2:	2001      	movs	r0, #1
 80024b4:	e7fc      	b.n	80024b0 <HAL_TIM_Encoder_Init+0xa4>
	...

080024b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80024bc:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80024be:	2b01      	cmp	r3, #1
 80024c0:	f04f 0302 	mov.w	r3, #2
 80024c4:	d025      	beq.n	8002512 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80024c6:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024cc:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024ce:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80024d0:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 80024d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 80024d6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024da:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80024dc:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024de:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e0:	4c0d      	ldr	r4, [pc, #52]	; (8002518 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80024e2:	42a3      	cmp	r3, r4
 80024e4:	d00a      	beq.n	80024fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ea:	d007      	beq.n	80024fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80024ec:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80024f0:	42a3      	cmp	r3, r4
 80024f2:	d003      	beq.n	80024fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80024f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024f8:	42a3      	cmp	r3, r4
 80024fa:	d104      	bne.n	8002506 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024fc:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002502:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002504:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002506:	2301      	movs	r3, #1
 8002508:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800250c:	2300      	movs	r3, #0
 800250e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002512:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002514:	bd30      	pop	{r4, r5, pc}
 8002516:	bf00      	nop
 8002518:	40012c00 	.word	0x40012c00

0800251c <HAL_TIMEx_CommutCallback>:
 800251c:	4770      	bx	lr

0800251e <HAL_TIMEx_BreakCallback>:
 800251e:	4770      	bx	lr

08002520 <ILI9341_WriteCommand>:
//
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

static void ILI9341_WriteCommand(uint8_t cmd) {
 8002520:	b513      	push	{r0, r1, r4, lr}
 8002522:	ac02      	add	r4, sp, #8
 8002524:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002528:	2200      	movs	r2, #0
 800252a:	2110      	movs	r1, #16
 800252c:	4805      	ldr	r0, [pc, #20]	; (8002544 <ILI9341_WriteCommand+0x24>)
 800252e:	f7ff fa27 	bl	8001980 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(HSPI_INSTANCE, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
 8002536:	2201      	movs	r2, #1
 8002538:	4621      	mov	r1, r4
 800253a:	4803      	ldr	r0, [pc, #12]	; (8002548 <ILI9341_WriteCommand+0x28>)
 800253c:	f7ff fd6c 	bl	8002018 <HAL_SPI_Transmit>
}
 8002540:	b002      	add	sp, #8
 8002542:	bd10      	pop	{r4, pc}
 8002544:	40010c00 	.word	0x40010c00
 8002548:	200032c4 	.word	0x200032c4

0800254c <ILI9341_SPI_Init>:
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800254c:	2200      	movs	r2, #0
 800254e:	2108      	movs	r1, #8
 8002550:	4801      	ldr	r0, [pc, #4]	; (8002558 <ILI9341_SPI_Init+0xc>)
 8002552:	f7ff ba15 	b.w	8001980 <HAL_GPIO_WritePin>
 8002556:	bf00      	nop
 8002558:	40010c00 	.word	0x40010c00

0800255c <ILI9341_SPI_Send>:
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800255c:	2301      	movs	r3, #1
{
 800255e:	b507      	push	{r0, r1, r2, lr}
 8002560:	a902      	add	r1, sp, #8
 8002562:	f801 0d01 	strb.w	r0, [r1, #-1]!
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002566:	461a      	mov	r2, r3
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <ILI9341_SPI_Send+0x18>)
 800256a:	f7ff fd55 	bl	8002018 <HAL_SPI_Transmit>
}
 800256e:	b003      	add	sp, #12
 8002570:	f85d fb04 	ldr.w	pc, [sp], #4
 8002574:	200032c4 	.word	0x200032c4

08002578 <ILI9341_Write_Command>:
{
 8002578:	b538      	push	{r3, r4, r5, lr}
 800257a:	4605      	mov	r5, r0
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800257c:	4c0a      	ldr	r4, [pc, #40]	; (80025a8 <ILI9341_Write_Command+0x30>)
 800257e:	2200      	movs	r2, #0
 8002580:	4620      	mov	r0, r4
 8002582:	2108      	movs	r1, #8
 8002584:	f7ff f9fc 	bl	8001980 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002588:	2200      	movs	r2, #0
 800258a:	2110      	movs	r1, #16
 800258c:	4620      	mov	r0, r4
 800258e:	f7ff f9f7 	bl	8001980 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002592:	4628      	mov	r0, r5
 8002594:	f7ff ffe2 	bl	800255c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002598:	4620      	mov	r0, r4
}
 800259a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800259e:	2201      	movs	r2, #1
 80025a0:	2108      	movs	r1, #8
 80025a2:	f7ff b9ed 	b.w	8001980 <HAL_GPIO_WritePin>
 80025a6:	bf00      	nop
 80025a8:	40010c00 	.word	0x40010c00

080025ac <ILI9341_Write_Data>:
{
 80025ac:	b538      	push	{r3, r4, r5, lr}
 80025ae:	4605      	mov	r5, r0
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80025b0:	4c0a      	ldr	r4, [pc, #40]	; (80025dc <ILI9341_Write_Data+0x30>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	4620      	mov	r0, r4
 80025b6:	2110      	movs	r1, #16
 80025b8:	f7ff f9e2 	bl	8001980 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80025bc:	2200      	movs	r2, #0
 80025be:	2108      	movs	r1, #8
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7ff f9dd 	bl	8001980 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7ff ffc8 	bl	800255c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025cc:	4620      	mov	r0, r4
}
 80025ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025d2:	2201      	movs	r2, #1
 80025d4:	2108      	movs	r1, #8
 80025d6:	f7ff b9d3 	b.w	8001980 <HAL_GPIO_WritePin>
 80025da:	bf00      	nop
 80025dc:	40010c00 	.word	0x40010c00

080025e0 <ILI9341_Reset>:
{
 80025e0:	b510      	push	{r4, lr}
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80025e2:	4c0c      	ldr	r4, [pc, #48]	; (8002614 <ILI9341_Reset+0x34>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	2120      	movs	r1, #32
 80025e8:	4620      	mov	r0, r4
 80025ea:	f7ff f9c9 	bl	8001980 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80025ee:	20c8      	movs	r0, #200	; 0xc8
 80025f0:	f7ff f864 	bl	80016bc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2108      	movs	r1, #8
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7ff f9c1 	bl	8001980 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80025fe:	20c8      	movs	r0, #200	; 0xc8
 8002600:	f7ff f85c 	bl	80016bc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002604:	4620      	mov	r0, r4
}
 8002606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800260a:	2201      	movs	r2, #1
 800260c:	2120      	movs	r1, #32
 800260e:	f7ff b9b7 	b.w	8001980 <HAL_GPIO_WritePin>
 8002612:	bf00      	nop
 8002614:	40010c00 	.word	0x40010c00

08002618 <ILI9341_Set_Rotation>:
{
 8002618:	b510      	push	{r4, lr}
 800261a:	4604      	mov	r4, r0
ILI9341_Write_Command(0x36);
 800261c:	2036      	movs	r0, #54	; 0x36
 800261e:	f7ff ffab 	bl	8002578 <ILI9341_Write_Command>
HAL_Delay(1);
 8002622:	2001      	movs	r0, #1
 8002624:	f7ff f84a 	bl	80016bc <HAL_Delay>
switch(screen_rotation) 
 8002628:	2c03      	cmp	r4, #3
 800262a:	d80d      	bhi.n	8002648 <ILI9341_Set_Rotation+0x30>
 800262c:	e8df f004 	tbb	[pc, r4]
 8002630:	19170d02 	.word	0x19170d02
			ILI9341_Write_Data(0x40|0x08);
 8002634:	2048      	movs	r0, #72	; 0x48
			ILI9341_Write_Data(0x80|0x08);
 8002636:	f7ff ffb9 	bl	80025ac <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800263a:	22f0      	movs	r2, #240	; 0xf0
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <ILI9341_Set_Rotation+0x50>)
 800263e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002640:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <ILI9341_Set_Rotation+0x54>)
			LCD_HEIGHT = 240;
 8002646:	801a      	strh	r2, [r3, #0]
}
 8002648:	bd10      	pop	{r4, pc}
			ILI9341_Write_Data(0x20|0x08);
 800264a:	2028      	movs	r0, #40	; 0x28
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800264c:	f7ff ffae 	bl	80025ac <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002650:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <ILI9341_Set_Rotation+0x50>)
 8002656:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <ILI9341_Set_Rotation+0x54>)
 800265a:	22f0      	movs	r2, #240	; 0xf0
 800265c:	e7f3      	b.n	8002646 <ILI9341_Set_Rotation+0x2e>
			ILI9341_Write_Data(0x80|0x08);
 800265e:	2088      	movs	r0, #136	; 0x88
 8002660:	e7e9      	b.n	8002636 <ILI9341_Set_Rotation+0x1e>
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002662:	20e8      	movs	r0, #232	; 0xe8
 8002664:	e7f2      	b.n	800264c <ILI9341_Set_Rotation+0x34>
 8002666:	bf00      	nop
 8002668:	20000012 	.word	0x20000012
 800266c:	20000010 	.word	0x20000010

08002670 <ILI9341_Enable>:
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002670:	2201      	movs	r2, #1
 8002672:	2120      	movs	r1, #32
 8002674:	4801      	ldr	r0, [pc, #4]	; (800267c <ILI9341_Enable+0xc>)
 8002676:	f7ff b983 	b.w	8001980 <HAL_GPIO_WritePin>
 800267a:	bf00      	nop
 800267c:	40010c00 	.word	0x40010c00

08002680 <ILI9341_Init>:
{
 8002680:	b508      	push	{r3, lr}
ILI9341_Enable();
 8002682:	f7ff fff5 	bl	8002670 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002686:	f7ff ff61 	bl	800254c <ILI9341_SPI_Init>
ILI9341_Reset();
 800268a:	f7ff ffa9 	bl	80025e0 <ILI9341_Reset>
ILI9341_Write_Command(0x01);
 800268e:	2001      	movs	r0, #1
 8002690:	f7ff ff72 	bl	8002578 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002698:	f7ff f810 	bl	80016bc <HAL_Delay>
ILI9341_Write_Command(0xCB);
 800269c:	20cb      	movs	r0, #203	; 0xcb
 800269e:	f7ff ff6b 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80026a2:	2039      	movs	r0, #57	; 0x39
 80026a4:	f7ff ff82 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80026a8:	202c      	movs	r0, #44	; 0x2c
 80026aa:	f7ff ff7f 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7ff ff7c 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80026b4:	2034      	movs	r0, #52	; 0x34
 80026b6:	f7ff ff79 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80026ba:	2002      	movs	r0, #2
 80026bc:	f7ff ff76 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xCF);
 80026c0:	20cf      	movs	r0, #207	; 0xcf
 80026c2:	f7ff ff59 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7ff ff70 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80026cc:	20c1      	movs	r0, #193	; 0xc1
 80026ce:	f7ff ff6d 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80026d2:	2030      	movs	r0, #48	; 0x30
 80026d4:	f7ff ff6a 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xE8);
 80026d8:	20e8      	movs	r0, #232	; 0xe8
 80026da:	f7ff ff4d 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80026de:	2085      	movs	r0, #133	; 0x85
 80026e0:	f7ff ff64 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7ff ff61 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80026ea:	2078      	movs	r0, #120	; 0x78
 80026ec:	f7ff ff5e 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xEA);
 80026f0:	20ea      	movs	r0, #234	; 0xea
 80026f2:	f7ff ff41 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7ff ff58 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7ff ff55 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xED);
 8002702:	20ed      	movs	r0, #237	; 0xed
 8002704:	f7ff ff38 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002708:	2064      	movs	r0, #100	; 0x64
 800270a:	f7ff ff4f 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800270e:	2003      	movs	r0, #3
 8002710:	f7ff ff4c 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002714:	2012      	movs	r0, #18
 8002716:	f7ff ff49 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 800271a:	2081      	movs	r0, #129	; 0x81
 800271c:	f7ff ff46 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xF7);
 8002720:	20f7      	movs	r0, #247	; 0xf7
 8002722:	f7ff ff29 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002726:	2020      	movs	r0, #32
 8002728:	f7ff ff40 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xC0);
 800272c:	20c0      	movs	r0, #192	; 0xc0
 800272e:	f7ff ff23 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002732:	2023      	movs	r0, #35	; 0x23
 8002734:	f7ff ff3a 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xC1);
 8002738:	20c1      	movs	r0, #193	; 0xc1
 800273a:	f7ff ff1d 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800273e:	2010      	movs	r0, #16
 8002740:	f7ff ff34 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xC5);
 8002744:	20c5      	movs	r0, #197	; 0xc5
 8002746:	f7ff ff17 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800274a:	203e      	movs	r0, #62	; 0x3e
 800274c:	f7ff ff2e 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002750:	2028      	movs	r0, #40	; 0x28
 8002752:	f7ff ff2b 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xC7);
 8002756:	20c7      	movs	r0, #199	; 0xc7
 8002758:	f7ff ff0e 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800275c:	2086      	movs	r0, #134	; 0x86
 800275e:	f7ff ff25 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0x36);
 8002762:	2036      	movs	r0, #54	; 0x36
 8002764:	f7ff ff08 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002768:	2048      	movs	r0, #72	; 0x48
 800276a:	f7ff ff1f 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0x3A);
 800276e:	203a      	movs	r0, #58	; 0x3a
 8002770:	f7ff ff02 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002774:	2055      	movs	r0, #85	; 0x55
 8002776:	f7ff ff19 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xB1);
 800277a:	20b1      	movs	r0, #177	; 0xb1
 800277c:	f7ff fefc 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7ff ff13 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002786:	2018      	movs	r0, #24
 8002788:	f7ff ff10 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xB6);
 800278c:	20b6      	movs	r0, #182	; 0xb6
 800278e:	f7ff fef3 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002792:	2008      	movs	r0, #8
 8002794:	f7ff ff0a 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002798:	2082      	movs	r0, #130	; 0x82
 800279a:	f7ff ff07 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800279e:	2027      	movs	r0, #39	; 0x27
 80027a0:	f7ff ff04 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xF2);
 80027a4:	20f2      	movs	r0, #242	; 0xf2
 80027a6:	f7ff fee7 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7ff fefe 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0x26);
 80027b0:	2026      	movs	r0, #38	; 0x26
 80027b2:	f7ff fee1 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7ff fef8 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xE0);
 80027bc:	20e0      	movs	r0, #224	; 0xe0
 80027be:	f7ff fedb 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80027c2:	200f      	movs	r0, #15
 80027c4:	f7ff fef2 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80027c8:	2031      	movs	r0, #49	; 0x31
 80027ca:	f7ff feef 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80027ce:	202b      	movs	r0, #43	; 0x2b
 80027d0:	f7ff feec 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80027d4:	200c      	movs	r0, #12
 80027d6:	f7ff fee9 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80027da:	200e      	movs	r0, #14
 80027dc:	f7ff fee6 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80027e0:	2008      	movs	r0, #8
 80027e2:	f7ff fee3 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80027e6:	204e      	movs	r0, #78	; 0x4e
 80027e8:	f7ff fee0 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80027ec:	20f1      	movs	r0, #241	; 0xf1
 80027ee:	f7ff fedd 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80027f2:	2037      	movs	r0, #55	; 0x37
 80027f4:	f7ff feda 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80027f8:	2007      	movs	r0, #7
 80027fa:	f7ff fed7 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80027fe:	2010      	movs	r0, #16
 8002800:	f7ff fed4 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002804:	2003      	movs	r0, #3
 8002806:	f7ff fed1 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800280a:	200e      	movs	r0, #14
 800280c:	f7ff fece 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002810:	2009      	movs	r0, #9
 8002812:	f7ff fecb 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002816:	2000      	movs	r0, #0
 8002818:	f7ff fec8 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0xE1);
 800281c:	20e1      	movs	r0, #225	; 0xe1
 800281e:	f7ff feab 	bl	8002578 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002822:	2000      	movs	r0, #0
 8002824:	f7ff fec2 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002828:	200e      	movs	r0, #14
 800282a:	f7ff febf 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800282e:	2014      	movs	r0, #20
 8002830:	f7ff febc 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002834:	2003      	movs	r0, #3
 8002836:	f7ff feb9 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800283a:	2011      	movs	r0, #17
 800283c:	f7ff feb6 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002840:	2007      	movs	r0, #7
 8002842:	f7ff feb3 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002846:	2031      	movs	r0, #49	; 0x31
 8002848:	f7ff feb0 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800284c:	20c1      	movs	r0, #193	; 0xc1
 800284e:	f7ff fead 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002852:	2048      	movs	r0, #72	; 0x48
 8002854:	f7ff feaa 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002858:	2008      	movs	r0, #8
 800285a:	f7ff fea7 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800285e:	200f      	movs	r0, #15
 8002860:	f7ff fea4 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002864:	200c      	movs	r0, #12
 8002866:	f7ff fea1 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800286a:	2031      	movs	r0, #49	; 0x31
 800286c:	f7ff fe9e 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002870:	2036      	movs	r0, #54	; 0x36
 8002872:	f7ff fe9b 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002876:	200f      	movs	r0, #15
 8002878:	f7ff fe98 	bl	80025ac <ILI9341_Write_Data>
ILI9341_Write_Command(0x11);
 800287c:	2011      	movs	r0, #17
 800287e:	f7ff fe7b 	bl	8002578 <ILI9341_Write_Command>
HAL_Delay(120);
 8002882:	2078      	movs	r0, #120	; 0x78
 8002884:	f7fe ff1a 	bl	80016bc <HAL_Delay>
ILI9341_Write_Command(0x29);
 8002888:	2029      	movs	r0, #41	; 0x29
 800288a:	f7ff fe75 	bl	8002578 <ILI9341_Write_Command>
}
 800288e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002892:	2000      	movs	r0, #0
 8002894:	f7ff bec0 	b.w	8002618 <ILI9341_Set_Rotation>

08002898 <ILI9341_WriteData>:
    ILI9341_WriteCommand(0x2C); // RAMWR
}



void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800289a:	2201      	movs	r2, #1
void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 800289c:	4605      	mov	r5, r0
 800289e:	460c      	mov	r4, r1
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80028a0:	480b      	ldr	r0, [pc, #44]	; (80028d0 <ILI9341_WriteData+0x38>)
 80028a2:	2110      	movs	r1, #16
 80028a4:	f7ff f86c 	bl	8001980 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
        HAL_SPI_Transmit(HSPI_INSTANCE, buff, chunk_size, HAL_MAX_DELAY);
 80028a8:	4f0a      	ldr	r7, [pc, #40]	; (80028d4 <ILI9341_WriteData+0x3c>)
    while(buff_size > 0) {
 80028aa:	b904      	cbnz	r4, 80028ae <ILI9341_WriteData+0x16>
        buff += chunk_size;
        buff_size -= chunk_size;
    }
}
 80028ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80028ae:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80028b2:	4626      	mov	r6, r4
 80028b4:	bf28      	it	cs
 80028b6:	f44f 4600 	movcs.w	r6, #32768	; 0x8000
        HAL_SPI_Transmit(HSPI_INSTANCE, buff, chunk_size, HAL_MAX_DELAY);
 80028ba:	4629      	mov	r1, r5
 80028bc:	f04f 33ff 	mov.w	r3, #4294967295
 80028c0:	b2b2      	uxth	r2, r6
 80028c2:	4638      	mov	r0, r7
 80028c4:	f7ff fba8 	bl	8002018 <HAL_SPI_Transmit>
        buff += chunk_size;
 80028c8:	4435      	add	r5, r6
        buff_size -= chunk_size;
 80028ca:	1ba4      	subs	r4, r4, r6
 80028cc:	e7ed      	b.n	80028aa <ILI9341_WriteData+0x12>
 80028ce:	bf00      	nop
 80028d0:	40010c00 	.word	0x40010c00
 80028d4:	200032c4 	.word	0x200032c4

080028d8 <ILI9341_SetAddressWindow>:
void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80028d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028da:	4607      	mov	r7, r0
    ILI9341_WriteCommand(0x2A); // CASET
 80028dc:	202a      	movs	r0, #42	; 0x2a
void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80028de:	4616      	mov	r6, r2
 80028e0:	460d      	mov	r5, r1
 80028e2:	461c      	mov	r4, r3
    ILI9341_WriteCommand(0x2A); // CASET
 80028e4:	f7ff fe1c 	bl	8002520 <ILI9341_WriteCommand>
        ILI9341_WriteData(data, sizeof(data));
 80028e8:	2104      	movs	r1, #4
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80028ea:	0a3b      	lsrs	r3, r7, #8
        ILI9341_WriteData(data, sizeof(data));
 80028ec:	eb0d 0001 	add.w	r0, sp, r1
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80028f0:	f88d 3004 	strb.w	r3, [sp, #4]
 80028f4:	0a33      	lsrs	r3, r6, #8
 80028f6:	f88d 3006 	strb.w	r3, [sp, #6]
 80028fa:	f88d 7005 	strb.w	r7, [sp, #5]
 80028fe:	f88d 6007 	strb.w	r6, [sp, #7]
        ILI9341_WriteData(data, sizeof(data));
 8002902:	f7ff ffc9 	bl	8002898 <ILI9341_WriteData>
    ILI9341_WriteCommand(0x2B); // RASET
 8002906:	202b      	movs	r0, #43	; 0x2b
 8002908:	f7ff fe0a 	bl	8002520 <ILI9341_WriteCommand>
        ILI9341_WriteData(data, sizeof(data));
 800290c:	2104      	movs	r1, #4
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800290e:	0a2b      	lsrs	r3, r5, #8
        ILI9341_WriteData(data, sizeof(data));
 8002910:	eb0d 0001 	add.w	r0, sp, r1
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8002914:	f88d 3004 	strb.w	r3, [sp, #4]
 8002918:	0a23      	lsrs	r3, r4, #8
 800291a:	f88d 3006 	strb.w	r3, [sp, #6]
 800291e:	f88d 5005 	strb.w	r5, [sp, #5]
 8002922:	f88d 4007 	strb.w	r4, [sp, #7]
        ILI9341_WriteData(data, sizeof(data));
 8002926:	f7ff ffb7 	bl	8002898 <ILI9341_WriteData>
    ILI9341_WriteCommand(0x2C); // RAMWR
 800292a:	202c      	movs	r0, #44	; 0x2c
 800292c:	f7ff fdf8 	bl	8002520 <ILI9341_WriteCommand>
}
 8002930:	b003      	add	sp, #12
 8002932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002934 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8002934:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8002936:	b910      	cbnz	r0, 800293e <lv_disp_get_scr_act+0xa>
 8002938:	f00b fd4c 	bl	800e3d4 <lv_disp_get_default>
    if(!disp) {
 800293c:	b100      	cbz	r0, 8002940 <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 800293e:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8002940:	bd08      	pop	{r3, pc}

08002942 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8002942:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8002944:	b910      	cbnz	r0, 800294c <lv_disp_get_scr_prev+0xa>
 8002946:	f00b fd45 	bl	800e3d4 <lv_disp_get_default>
    if(!disp) {
 800294a:	b100      	cbz	r0, 800294e <lv_disp_get_scr_prev+0xc>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 800294c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
 800294e:	bd08      	pop	{r3, pc}

08002950 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8002950:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8002952:	b910      	cbnz	r0, 800295a <lv_disp_get_layer_top+0xa>
 8002954:	f00b fd3e 	bl	800e3d4 <lv_disp_get_default>
    if(!disp) {
 8002958:	b100      	cbz	r0, 800295c <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 800295a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 800295c:	bd08      	pop	{r3, pc}

0800295e <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 800295e:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8002960:	b910      	cbnz	r0, 8002968 <lv_disp_get_layer_sys+0xa>
 8002962:	f00b fd37 	bl	800e3d4 <lv_disp_get_default>
    if(!disp) {
 8002966:	b100      	cbz	r0, 800296a <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 8002968:	6d00      	ldr	r0, [r0, #80]	; 0x50
}
 800296a:	bd08      	pop	{r3, pc}

0800296c <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 800296c:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 800296e:	2400      	movs	r4, #0
    while(i != NULL) {
 8002970:	b928      	cbnz	r0, 800297e <obj_to_foreground+0x12>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 8002972:	b16c      	cbz	r4, 8002990 <obj_to_foreground+0x24>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8002974:	4620      	mov	r0, r4
    }
}
 8002976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_move_foreground(last_top);
 800297a:	f001 bfe1 	b.w	8004940 <lv_obj_move_foreground>
        if(i->top != 0) last_top = i;
 800297e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002982:	f013 0f20 	tst.w	r3, #32
 8002986:	bf18      	it	ne
 8002988:	4604      	movne	r4, r0
        i = lv_obj_get_parent(i);
 800298a:	f001 fd99 	bl	80044c0 <lv_obj_get_parent>
 800298e:	e7ef      	b.n	8002970 <obj_to_foreground+0x4>
}
 8002990:	bd10      	pop	{r4, pc}

08002992 <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8002992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002996:	4604      	mov	r4, r0
 8002998:	4689      	mov	r9, r1
 800299a:	4692      	mov	sl, r2
    bool can_begin           = true;
 800299c:	f04f 0801 	mov.w	r8, #1
    lv_obj_t ** obj_sentinel = NULL;
 80029a0:	2700      	movs	r7, #0
    lv_obj_t ** obj_next     = group->obj_focus;
 80029a2:	68c5      	ldr	r5, [r0, #12]
        if(obj_next == NULL) {
 80029a4:	2d00      	cmp	r5, #0
 80029a6:	d159      	bne.n	8002a5c <focus_next_core.part.0+0xca>
            if(group->wrap || obj_sentinel == NULL) {
 80029a8:	7d23      	ldrb	r3, [r4, #20]
 80029aa:	06da      	lsls	r2, r3, #27
 80029ac:	d403      	bmi.n	80029b6 <focus_next_core.part.0+0x24>
 80029ae:	2f00      	cmp	r7, #0
 80029b0:	d05f      	beq.n	8002a72 <focus_next_core.part.0+0xe0>
}
 80029b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if(!can_begin) return;
 80029b6:	f1b8 0f00 	cmp.w	r8, #0
 80029ba:	d0fa      	beq.n	80029b2 <focus_next_core.part.0+0x20>
                obj_next  = begin(&group->obj_ll);
 80029bc:	4620      	mov	r0, r4
 80029be:	47c8      	blx	r9
 80029c0:	4606      	mov	r6, r0
        if(obj_sentinel == NULL) {
 80029c2:	2f00      	cmp	r7, #0
 80029c4:	d142      	bne.n	8002a4c <focus_next_core.part.0+0xba>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 80029c6:	2e00      	cmp	r6, #0
 80029c8:	d0f3      	beq.n	80029b2 <focus_next_core.part.0+0x20>
 80029ca:	4635      	mov	r5, r6
                can_begin = false;
 80029cc:	f04f 0800 	mov.w	r8, #0
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
 80029d0:	2100      	movs	r1, #0
 80029d2:	6828      	ldr	r0, [r5, #0]
 80029d4:	f002 fd0c 	bl	80053f0 <lv_obj_get_state>
 80029d8:	0683      	lsls	r3, r0, #26
 80029da:	d43d      	bmi.n	8002a58 <focus_next_core.part.0+0xc6>
        if(!lv_obj_get_hidden(*obj_next)) break;
 80029dc:	6828      	ldr	r0, [r5, #0]
 80029de:	f001 feef 	bl	80047c0 <lv_obj_get_hidden>
 80029e2:	4607      	mov	r7, r0
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d137      	bne.n	8002a58 <focus_next_core.part.0+0xc6>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 80029e8:	68e3      	ldr	r3, [r4, #12]
 80029ea:	42ab      	cmp	r3, r5
 80029ec:	d0e1      	beq.n	80029b2 <focus_next_core.part.0+0x20>
    if(group->obj_focus) {
 80029ee:	b183      	cbz	r3, 8002a12 <focus_next_core.part.0+0x80>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	463a      	mov	r2, r7
 80029f4:	69c3      	ldr	r3, [r0, #28]
 80029f6:	2117      	movs	r1, #23
 80029f8:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 80029fa:	68e3      	ldr	r3, [r4, #12]
 80029fc:	463a      	mov	r2, r7
 80029fe:	210e      	movs	r1, #14
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	f001 fcf1 	bl	80043e8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8002a06:	2801      	cmp	r0, #1
 8002a08:	d1d3      	bne.n	80029b2 <focus_next_core.part.0+0x20>
        lv_obj_invalidate(*group->obj_focus);
 8002a0a:	68e3      	ldr	r3, [r4, #12]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	f001 ff67 	bl	80048e0 <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8002a12:	6828      	ldr	r0, [r5, #0]
 8002a14:	2200      	movs	r2, #0
 8002a16:	69c3      	ldr	r3, [r0, #28]
 8002a18:	2116      	movs	r1, #22
    group->obj_focus = obj_next;
 8002a1a:	60e5      	str	r5, [r4, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8002a1c:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8002a1e:	68e3      	ldr	r3, [r4, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	210d      	movs	r1, #13
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	f001 fcdf 	bl	80043e8 <lv_event_send>
    if(res != LV_RES_OK) return;
 8002a2a:	2801      	cmp	r0, #1
 8002a2c:	d1c1      	bne.n	80029b2 <focus_next_core.part.0+0x20>
    obj_to_foreground(*group->obj_focus);
 8002a2e:	68e3      	ldr	r3, [r4, #12]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	f7ff ff9b 	bl	800296c <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 8002a36:	68e3      	ldr	r3, [r4, #12]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	f001 ff51 	bl	80048e0 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8002a3e:	6923      	ldr	r3, [r4, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0b6      	beq.n	80029b2 <focus_next_core.part.0+0x20>
 8002a44:	4620      	mov	r0, r4
}
 8002a46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 8002a4a:	4718      	bx	r3
                obj_next  = begin(&group->obj_ll);
 8002a4c:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
 8002a4e:	463e      	mov	r6, r7
                can_begin = false;
 8002a50:	f04f 0800 	mov.w	r8, #0
        if(obj_next == NULL) continue;
 8002a54:	2d00      	cmp	r5, #0
 8002a56:	d1bb      	bne.n	80029d0 <focus_next_core.part.0+0x3e>
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8002a58:	4637      	mov	r7, r6
 8002a5a:	e7a3      	b.n	80029a4 <focus_next_core.part.0+0x12>
            obj_next = move(&group->obj_ll, obj_next);
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	4620      	mov	r0, r4
        if(obj_sentinel == NULL) {
 8002a60:	2f00      	cmp	r7, #0
 8002a62:	bf14      	ite	ne
 8002a64:	463e      	movne	r6, r7
 8002a66:	462e      	moveq	r6, r5
            obj_next = move(&group->obj_ll, obj_next);
 8002a68:	47d0      	blx	sl
            if(obj_next == obj_sentinel) return;
 8002a6a:	42b0      	cmp	r0, r6
            obj_next = move(&group->obj_ll, obj_next);
 8002a6c:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return;
 8002a6e:	d1f1      	bne.n	8002a54 <focus_next_core.part.0+0xc2>
 8002a70:	e79f      	b.n	80029b2 <focus_next_core.part.0+0x20>
                if(!can_begin) return;
 8002a72:	f1b8 0f00 	cmp.w	r8, #0
 8002a76:	d09c      	beq.n	80029b2 <focus_next_core.part.0+0x20>
                obj_next  = begin(&group->obj_ll);
 8002a78:	4620      	mov	r0, r4
 8002a7a:	47c8      	blx	r9
 8002a7c:	4606      	mov	r6, r0
 8002a7e:	e7a2      	b.n	80029c6 <focus_next_core.part.0+0x34>

08002a80 <_lv_group_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8002a80:	2118      	movs	r1, #24
 8002a82:	4801      	ldr	r0, [pc, #4]	; (8002a88 <_lv_group_init+0x8>)
 8002a84:	f00c bb83 	b.w	800f18e <_lv_ll_init>
 8002a88:	20003490 	.word	0x20003490

08002a8c <lv_group_create>:
{
 8002a8c:	b510      	push	{r4, lr}
    lv_group_t * group = _lv_ll_ins_head(&LV_GC_ROOT(_lv_group_ll));
 8002a8e:	480e      	ldr	r0, [pc, #56]	; (8002ac8 <lv_group_create+0x3c>)
 8002a90:	f00c fb85 	bl	800f19e <_lv_ll_ins_head>
 8002a94:	4604      	mov	r4, r0
    LV_ASSERT_MEM(group);
 8002a96:	f00c fa97 	bl	800efc8 <lv_debug_check_null>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	b920      	cbnz	r0, 8002aa8 <lv_group_create+0x1c>
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <lv_group_create+0x40>)
 8002aa2:	f00c fa95 	bl	800efd0 <lv_debug_log_error>
 8002aa6:	e7fe      	b.n	8002aa6 <lv_group_create+0x1a>
    if(group == NULL) return NULL;
 8002aa8:	b164      	cbz	r4, 8002ac4 <lv_group_create+0x38>
    _lv_ll_init(&group->obj_ll, sizeof(lv_obj_t *));
 8002aaa:	2104      	movs	r1, #4
 8002aac:	4620      	mov	r0, r4
 8002aae:	f00c fb6e 	bl	800f18e <_lv_ll_init>
    group->obj_focus      = NULL;
 8002ab2:	2200      	movs	r2, #0
    group->frozen         = 0;
 8002ab4:	7d23      	ldrb	r3, [r4, #20]
    group->obj_focus      = NULL;
 8002ab6:	60e2      	str	r2, [r4, #12]
    group->refocus_policy = LV_GROUP_REFOCUS_POLICY_PREV;
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    group->wrap           = 1;
 8002abc:	f043 031c 	orr.w	r3, r3, #28
    group->focus_cb       = NULL;
 8002ac0:	6122      	str	r2, [r4, #16]
    group->wrap           = 1;
 8002ac2:	7523      	strb	r3, [r4, #20]
}
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	bd10      	pop	{r4, pc}
 8002ac8:	20003490 	.word	0x20003490
 8002acc:	08015994 	.word	0x08015994

08002ad0 <lv_group_focus_next>:
    if(group->frozen) return;
 8002ad0:	7d03      	ldrb	r3, [r0, #20]
 8002ad2:	07db      	lsls	r3, r3, #31
 8002ad4:	d403      	bmi.n	8002ade <lv_group_focus_next+0xe>
 8002ad6:	4a02      	ldr	r2, [pc, #8]	; (8002ae0 <lv_group_focus_next+0x10>)
 8002ad8:	4902      	ldr	r1, [pc, #8]	; (8002ae4 <lv_group_focus_next+0x14>)
 8002ada:	f7ff bf5a 	b.w	8002992 <focus_next_core.part.0>
}
 8002ade:	4770      	bx	lr
 8002ae0:	0800f219 	.word	0x0800f219
 8002ae4:	0800f20d 	.word	0x0800f20d

08002ae8 <lv_group_focus_prev>:
    if(group->frozen) return;
 8002ae8:	7d03      	ldrb	r3, [r0, #20]
 8002aea:	07db      	lsls	r3, r3, #31
 8002aec:	d403      	bmi.n	8002af6 <lv_group_focus_prev+0xe>
 8002aee:	4a02      	ldr	r2, [pc, #8]	; (8002af8 <lv_group_focus_prev+0x10>)
 8002af0:	4902      	ldr	r1, [pc, #8]	; (8002afc <lv_group_focus_prev+0x14>)
 8002af2:	f7ff bf4e 	b.w	8002992 <focus_next_core.part.0>
}
 8002af6:	4770      	bx	lr
 8002af8:	0800f223 	.word	0x0800f223
 8002afc:	0800f213 	.word	0x0800f213

08002b00 <lv_group_refocus>:
{
 8002b00:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 8002b02:	7d03      	ldrb	r3, [r0, #20]
{
 8002b04:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 8002b06:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
 8002b0a:	f043 0310 	orr.w	r3, r3, #16
 8002b0e:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8002b10:	071b      	lsls	r3, r3, #28
 8002b12:	d406      	bmi.n	8002b22 <lv_group_refocus+0x22>
        lv_group_focus_next(g);
 8002b14:	f7ff ffdc 	bl	8002ad0 <lv_group_focus_next>
    g->wrap = temp_wrap;
 8002b18:	7d23      	ldrb	r3, [r4, #20]
 8002b1a:	f365 1304 	bfi	r3, r5, #4, #1
 8002b1e:	7523      	strb	r3, [r4, #20]
}
 8002b20:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8002b22:	f7ff ffe1 	bl	8002ae8 <lv_group_focus_prev>
 8002b26:	e7f7      	b.n	8002b18 <lv_group_refocus+0x18>

08002b28 <lv_group_add_obj>:
{
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	460c      	mov	r4, r1
    if(group == NULL) return;
 8002b2c:	4605      	mov	r5, r0
 8002b2e:	b368      	cbz	r0, 8002b8c <lv_group_add_obj+0x64>
    _LV_LL_READ(group->obj_ll, obj_i) {
 8002b30:	f00c fb6c 	bl	800f20c <_lv_ll_get_head>
 8002b34:	b9b0      	cbnz	r0, 8002b64 <lv_group_add_obj+0x3c>
    if(obj->group_p) {
 8002b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b38:	b133      	cbz	r3, 8002b48 <lv_group_add_obj+0x20>
        if(lv_obj_is_focused(obj)) {
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f003 fb2e 	bl	800619c <lv_obj_is_focused>
 8002b40:	b110      	cbz	r0, 8002b48 <lv_group_add_obj+0x20>
            lv_group_refocus(obj->group_p);
 8002b42:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002b44:	f7ff ffdc 	bl	8002b00 <lv_group_refocus>
    obj->group_p     = group;
 8002b48:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f00c fb42 	bl	800f1d4 <_lv_ll_ins_tail>
 8002b50:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
 8002b52:	f00c fa39 	bl	800efc8 <lv_debug_check_null>
 8002b56:	4603      	mov	r3, r0
 8002b58:	b960      	cbnz	r0, 8002b74 <lv_group_add_obj+0x4c>
 8002b5a:	4632      	mov	r2, r6
 8002b5c:	480c      	ldr	r0, [pc, #48]	; (8002b90 <lv_group_add_obj+0x68>)
 8002b5e:	f00c fa37 	bl	800efd0 <lv_debug_log_error>
 8002b62:	e7fe      	b.n	8002b62 <lv_group_add_obj+0x3a>
        if((*obj_i) == obj) {
 8002b64:	6803      	ldr	r3, [r0, #0]
 8002b66:	42a3      	cmp	r3, r4
 8002b68:	d010      	beq.n	8002b8c <lv_group_add_obj+0x64>
    _LV_LL_READ(group->obj_ll, obj_i) {
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	f00c fb53 	bl	800f218 <_lv_ll_get_next>
 8002b72:	e7df      	b.n	8002b34 <lv_group_add_obj+0xc>
    if(next == NULL) return;
 8002b74:	b156      	cbz	r6, 8002b8c <lv_group_add_obj+0x64>
    *next = obj;
 8002b76:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 8002b78:	4628      	mov	r0, r5
 8002b7a:	f00c fb47 	bl	800f20c <_lv_ll_get_head>
 8002b7e:	4286      	cmp	r6, r0
 8002b80:	d104      	bne.n	8002b8c <lv_group_add_obj+0x64>
        lv_group_refocus(group);
 8002b82:	4628      	mov	r0, r5
}
 8002b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 8002b88:	f7ff bfba 	b.w	8002b00 <lv_group_refocus>
}
 8002b8c:	bd70      	pop	{r4, r5, r6, pc}
 8002b8e:	bf00      	nop
 8002b90:	08015994 	.word	0x08015994

08002b94 <lv_group_remove_obj>:
{
 8002b94:	b570      	push	{r4, r5, r6, lr}
    lv_group_t * g = obj->group_p;
 8002b96:	6b84      	ldr	r4, [r0, #56]	; 0x38
{
 8002b98:	4606      	mov	r6, r0
    if(g == NULL) return;
 8002b9a:	2c00      	cmp	r4, #0
 8002b9c:	d031      	beq.n	8002c02 <lv_group_remove_obj+0x6e>
    if(*g->obj_focus == obj) {
 8002b9e:	68e3      	ldr	r3, [r4, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4283      	cmp	r3, r0
 8002ba4:	d116      	bne.n	8002bd4 <lv_group_remove_obj+0x40>
        if(g->frozen) g->frozen = 0;
 8002ba6:	7d23      	ldrb	r3, [r4, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8002ba8:	4620      	mov	r0, r4
        if(g->frozen) g->frozen = 0;
 8002baa:	07da      	lsls	r2, r3, #31
 8002bac:	bf44      	itt	mi
 8002bae:	f36f 0300 	bfcmi	r3, #0, #1
 8002bb2:	7523      	strbmi	r3, [r4, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8002bb4:	f00c fb2a 	bl	800f20c <_lv_ll_get_head>
 8002bb8:	68e3      	ldr	r3, [r4, #12]
 8002bba:	4283      	cmp	r3, r0
 8002bbc:	d122      	bne.n	8002c04 <lv_group_remove_obj+0x70>
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f00c fb27 	bl	800f212 <_lv_ll_get_tail>
 8002bc4:	68e3      	ldr	r3, [r4, #12]
 8002bc6:	4298      	cmp	r0, r3
 8002bc8:	d11c      	bne.n	8002c04 <lv_group_remove_obj+0x70>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8002bca:	6800      	ldr	r0, [r0, #0]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	69c3      	ldr	r3, [r0, #28]
 8002bd0:	2117      	movs	r1, #23
 8002bd2:	4798      	blx	r3
    if(*g->obj_focus == obj) {
 8002bd4:	68e3      	ldr	r3, [r4, #12]
    _LV_LL_READ(g->obj_ll, i) {
 8002bd6:	4620      	mov	r0, r4
    if(*g->obj_focus == obj) {
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	42b3      	cmp	r3, r6
        g->obj_focus = NULL;
 8002bdc:	bf04      	itt	eq
 8002bde:	2300      	moveq	r3, #0
 8002be0:	60e3      	streq	r3, [r4, #12]
    _LV_LL_READ(g->obj_ll, i) {
 8002be2:	f00c fb13 	bl	800f20c <_lv_ll_get_head>
 8002be6:	4605      	mov	r5, r0
 8002be8:	b158      	cbz	r0, 8002c02 <lv_group_remove_obj+0x6e>
        if(*i == obj) {
 8002bea:	682b      	ldr	r3, [r5, #0]
            _lv_ll_remove(&g->obj_ll, i);
 8002bec:	4629      	mov	r1, r5
        if(*i == obj) {
 8002bee:	42b3      	cmp	r3, r6
            _lv_ll_remove(&g->obj_ll, i);
 8002bf0:	4620      	mov	r0, r4
        if(*i == obj) {
 8002bf2:	d10b      	bne.n	8002c0c <lv_group_remove_obj+0x78>
            _lv_ll_remove(&g->obj_ll, i);
 8002bf4:	f00c fb47 	bl	800f286 <_lv_ll_remove>
            lv_mem_free(i);
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	f00c fcc7 	bl	800f58c <lv_mem_free>
            obj->group_p = NULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	63b3      	str	r3, [r6, #56]	; 0x38
}
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff ff7b 	bl	8002b00 <lv_group_refocus>
 8002c0a:	e7e3      	b.n	8002bd4 <lv_group_remove_obj+0x40>
    _LV_LL_READ(g->obj_ll, i) {
 8002c0c:	f00c fb04 	bl	800f218 <_lv_ll_get_next>
 8002c10:	e7e9      	b.n	8002be6 <lv_group_remove_obj+0x52>

08002c12 <lv_group_get_focused>:
    if(!group) return NULL;
 8002c12:	b110      	cbz	r0, 8002c1a <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 8002c14:	68c0      	ldr	r0, [r0, #12]
 8002c16:	b100      	cbz	r0, 8002c1a <lv_group_get_focused+0x8>
    return *group->obj_focus;
 8002c18:	6800      	ldr	r0, [r0, #0]
}
 8002c1a:	4770      	bx	lr

08002c1c <lv_group_send_data>:
{
 8002c1c:	b513      	push	{r0, r1, r4, lr}
 8002c1e:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
 8002c20:	f7ff fff7 	bl	8002c12 <lv_group_get_focused>
    if(act == NULL) return LV_RES_OK;
 8002c24:	4604      	mov	r4, r0
 8002c26:	b160      	cbz	r0, 8002c42 <lv_group_send_data+0x26>
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
 8002c28:	69c3      	ldr	r3, [r0, #28]
 8002c2a:	aa01      	add	r2, sp, #4
 8002c2c:	2118      	movs	r1, #24
 8002c2e:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8002c30:	2801      	cmp	r0, #1
 8002c32:	d104      	bne.n	8002c3e <lv_group_send_data+0x22>
    res = lv_event_send(act, LV_EVENT_KEY, &c);
 8002c34:	aa01      	add	r2, sp, #4
 8002c36:	210c      	movs	r1, #12
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f001 fbd5 	bl	80043e8 <lv_event_send>
}
 8002c3e:	b002      	add	sp, #8
 8002c40:	bd10      	pop	{r4, pc}
    if(act == NULL) return LV_RES_OK;
 8002c42:	2001      	movs	r0, #1
 8002c44:	e7fb      	b.n	8002c3e <lv_group_send_data+0x22>

08002c46 <lv_group_set_editing>:
{
 8002c46:	b538      	push	{r3, r4, r5, lr}
    if(group == NULL) return;
 8002c48:	4604      	mov	r4, r0
 8002c4a:	b1e0      	cbz	r0, 8002c86 <lv_group_set_editing+0x40>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8002c4c:	7d03      	ldrb	r3, [r0, #20]
 8002c4e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002c52:	428a      	cmp	r2, r1
 8002c54:	d017      	beq.n	8002c86 <lv_group_set_editing+0x40>
    group->editing     = en_val;
 8002c56:	f361 0341 	bfi	r3, r1, #1, #1
 8002c5a:	7503      	strb	r3, [r0, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
 8002c5c:	f7ff ffd9 	bl	8002c12 <lv_group_get_focused>
    if(focused) {
 8002c60:	4605      	mov	r5, r0
 8002c62:	b180      	cbz	r0, 8002c86 <lv_group_set_editing+0x40>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 8002c64:	69c3      	ldr	r3, [r0, #28]
 8002c66:	2200      	movs	r2, #0
 8002c68:	2116      	movs	r1, #22
 8002c6a:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8002c6c:	68e3      	ldr	r3, [r4, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	210d      	movs	r1, #13
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	f001 fbb8 	bl	80043e8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8002c78:	2801      	cmp	r0, #1
 8002c7a:	d104      	bne.n	8002c86 <lv_group_set_editing+0x40>
        lv_obj_invalidate(focused);
 8002c7c:	4628      	mov	r0, r5
}
 8002c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(focused);
 8002c82:	f001 be2d 	b.w	80048e0 <lv_obj_invalidate>
}
 8002c86:	bd38      	pop	{r3, r4, r5, pc}

08002c88 <lv_group_focus_obj>:
{
 8002c88:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return;
 8002c8a:	4606      	mov	r6, r0
 8002c8c:	b190      	cbz	r0, 8002cb4 <lv_group_focus_obj+0x2c>
    lv_group_t * g = obj->group_p;
 8002c8e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    if(g == NULL) return;
 8002c90:	b184      	cbz	r4, 8002cb4 <lv_group_focus_obj+0x2c>
    if(g->frozen != 0) return;
 8002c92:	7d23      	ldrb	r3, [r4, #20]
 8002c94:	07db      	lsls	r3, r3, #31
 8002c96:	d40d      	bmi.n	8002cb4 <lv_group_focus_obj+0x2c>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
 8002c98:	68e3      	ldr	r3, [r4, #12]
 8002c9a:	b113      	cbz	r3, 8002ca2 <lv_group_focus_obj+0x1a>
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4283      	cmp	r3, r0
 8002ca0:	d008      	beq.n	8002cb4 <lv_group_focus_obj+0x2c>
    lv_group_set_editing(g, false);
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	f7ff ffce 	bl	8002c46 <lv_group_set_editing>
    _LV_LL_READ(g->obj_ll, i) {
 8002caa:	4620      	mov	r0, r4
 8002cac:	f00c faae 	bl	800f20c <_lv_ll_get_head>
 8002cb0:	4605      	mov	r5, r0
 8002cb2:	b900      	cbnz	r0, 8002cb6 <lv_group_focus_obj+0x2e>
}
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
        if(*i == obj) {
 8002cb6:	682b      	ldr	r3, [r5, #0]
 8002cb8:	42b3      	cmp	r3, r6
 8002cba:	d12e      	bne.n	8002d1a <lv_group_focus_obj+0x92>
            if(g->obj_focus != NULL) {
 8002cbc:	68e3      	ldr	r3, [r4, #12]
 8002cbe:	b183      	cbz	r3, 8002ce2 <lv_group_focus_obj+0x5a>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	69c3      	ldr	r3, [r0, #28]
 8002cc6:	2117      	movs	r1, #23
 8002cc8:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8002cca:	68e3      	ldr	r3, [r4, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	210e      	movs	r1, #14
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	f001 fb89 	bl	80043e8 <lv_event_send>
                if(res != LV_RES_OK) return;
 8002cd6:	2801      	cmp	r0, #1
 8002cd8:	d1ec      	bne.n	8002cb4 <lv_group_focus_obj+0x2c>
                lv_obj_invalidate(*g->obj_focus);
 8002cda:	68e3      	ldr	r3, [r4, #12]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	f001 fdff 	bl	80048e0 <lv_obj_invalidate>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8002ce2:	6828      	ldr	r0, [r5, #0]
            g->obj_focus = i;
 8002ce4:	60e5      	str	r5, [r4, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8002ce6:	69c3      	ldr	r3, [r0, #28]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2116      	movs	r1, #22
 8002cec:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 8002cee:	6923      	ldr	r3, [r4, #16]
 8002cf0:	b10b      	cbz	r3, 8002cf6 <lv_group_focus_obj+0x6e>
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
 8002cf6:	68e3      	ldr	r3, [r4, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	210d      	movs	r1, #13
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	f001 fb73 	bl	80043e8 <lv_event_send>
                if(res != LV_RES_OK) return;
 8002d02:	2801      	cmp	r0, #1
 8002d04:	d1d6      	bne.n	8002cb4 <lv_group_focus_obj+0x2c>
                lv_obj_invalidate(*g->obj_focus);
 8002d06:	68e3      	ldr	r3, [r4, #12]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	f001 fde9 	bl	80048e0 <lv_obj_invalidate>
                obj_to_foreground(*g->obj_focus);
 8002d0e:	68e3      	ldr	r3, [r4, #12]
}
 8002d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                obj_to_foreground(*g->obj_focus);
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	f7ff be29 	b.w	800296c <obj_to_foreground>
    _LV_LL_READ(g->obj_ll, i) {
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f00c fa7b 	bl	800f218 <_lv_ll_get_next>
 8002d22:	e7c5      	b.n	8002cb0 <lv_group_focus_obj+0x28>

08002d24 <lv_group_get_editing>:
    if(!group) return false;
 8002d24:	b110      	cbz	r0, 8002d2c <lv_group_get_editing+0x8>
    return group->editing ? true : false;
 8002d26:	7d00      	ldrb	r0, [r0, #20]
 8002d28:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8002d2c:	4770      	bx	lr
	...

08002d30 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 8002d30:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002d34:	0783      	lsls	r3, r0, #30
        indev_obj_act = NULL;
 8002d36:	bf44      	itt	mi
 8002d38:	2200      	movmi	r2, #0
 8002d3a:	4b03      	ldrmi	r3, [pc, #12]	; (8002d48 <indev_reset_check+0x18>)
    }

    return proc->reset_query ? true : false;
}
 8002d3c:	f3c0 0040 	ubfx	r0, r0, #1, #1
        indev_obj_act = NULL;
 8002d40:	bf48      	it	mi
 8002d42:	601a      	strmi	r2, [r3, #0]
}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20000174 	.word	0x20000174

08002d4c <indev_proc_reset_query_handler>:
    if(indev->proc.reset_query) {
 8002d4c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8002d50:	b510      	push	{r4, lr}
    if(indev->proc.reset_query) {
 8002d52:	0793      	lsls	r3, r2, #30
 8002d54:	d51b      	bpl.n	8002d8e <indev_proc_reset_query_handler+0x42>
        indev->proc.pr_timestamp                    = 0;
 8002d56:	2300      	movs	r3, #0
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8002d58:	2403      	movs	r4, #3
        indev->proc.types.pointer.drag_limit_out    = 0;
 8002d5a:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
        indev->proc.reset_query                     = 0;
 8002d5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d62:	f363 0241 	bfi	r2, r3, #1, #1
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8002d66:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
        indev->proc.reset_query                     = 0;
 8002d6a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        indev->proc.longpr_rep_timestamp            = 0;
 8002d6e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
        indev_obj_act                               = NULL;
 8002d72:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <indev_proc_reset_query_handler+0x44>)
        indev->proc.types.pointer.drag_sum.y        = 0;
 8002d74:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.act_obj           = NULL;
 8002d78:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8002d7c:	f364 0184 	bfi	r1, r4, #2, #3
 8002d80:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.gesture_sum.x     = 0;
 8002d84:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
 8002d88:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        indev_obj_act                               = NULL;
 8002d8c:	6013      	str	r3, [r2, #0]
}
 8002d8e:	bd10      	pop	{r4, pc}
 8002d90:	20000174 	.word	0x20000174

08002d94 <get_dragged_obj>:
{
 8002d94:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
 8002d96:	4604      	mov	r4, r0
 8002d98:	b930      	cbnz	r0, 8002da8 <get_dragged_obj+0x14>
 8002d9a:	2400      	movs	r4, #0
}
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	bd10      	pop	{r4, pc}
        drag_obj = lv_obj_get_parent(drag_obj);
 8002da0:	4620      	mov	r0, r4
 8002da2:	f001 fb8d 	bl	80044c0 <lv_obj_get_parent>
 8002da6:	4604      	mov	r4, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8002da8:	4620      	mov	r0, r4
 8002daa:	f002 f84b 	bl	8004e44 <lv_obj_get_drag_parent>
 8002dae:	2800      	cmp	r0, #0
 8002db0:	d0f4      	beq.n	8002d9c <get_dragged_obj+0x8>
 8002db2:	2c00      	cmp	r4, #0
 8002db4:	d1f4      	bne.n	8002da0 <get_dragged_obj+0xc>
 8002db6:	e7f0      	b.n	8002d9a <get_dragged_obj+0x6>

08002db8 <indev_drag_throw.part.2>:
static void indev_drag_throw(lv_indev_proc_t * proc)
 8002db8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002dbc:	4604      	mov	r4, r0
    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
 8002dbe:	69c0      	ldr	r0, [r0, #28]
 8002dc0:	f7ff ffe8 	bl	8002d94 <get_dragged_obj>
    if(drag_obj == NULL) return;
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	b1b8      	cbz	r0, 8002df8 <indev_drag_throw.part.2+0x40>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 8002dc8:	f002 f82a 	bl	8004e20 <lv_obj_get_drag_throw>
 8002dcc:	4f4e      	ldr	r7, [pc, #312]	; (8002f08 <indev_drag_throw.part.2+0x150>)
 8002dce:	b9b0      	cbnz	r0, 8002dfe <indev_drag_throw.part.2+0x46>
        proc->types.pointer.drag_in_prog = 0;
 8002dd0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8002dd4:	683a      	ldr	r2, [r7, #0]
        proc->types.pointer.drag_in_prog = 0;
 8002dd6:	f360 0341 	bfi	r3, r0, #1, #1
 8002dda:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8002dde:	2113      	movs	r1, #19
 8002de0:	69eb      	ldr	r3, [r5, #28]
 8002de2:	4628      	mov	r0, r5
 8002de4:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8002de6:	4620      	mov	r0, r4
 8002de8:	f7ff ffa2 	bl	8002d30 <indev_reset_check>
 8002dec:	4602      	mov	r2, r0
 8002dee:	b918      	cbnz	r0, 8002df8 <indev_drag_throw.part.2+0x40>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8002df0:	2109      	movs	r1, #9
 8002df2:	4628      	mov	r0, r5
 8002df4:	f001 faf8 	bl	80043e8 <lv_event_send>
}
 8002df8:	b004      	add	sp, #16
 8002dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8002dfe:	4628      	mov	r0, r5
 8002e00:	f001 fffc 	bl	8004dfc <lv_obj_get_drag_dir>
 8002e04:	4680      	mov	r8, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8002e06:	2064      	movs	r0, #100	; 0x64
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	7d51      	ldrb	r1, [r2, #21]
 8002e0c:	f1c1 0364 	rsb	r3, r1, #100	; 0x64
 8002e10:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8002e14:	4359      	muls	r1, r3
 8002e16:	fb91 f1f0 	sdiv	r1, r1, r0
    proc->types.pointer.drag_throw_vect.x =
 8002e1a:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
 8002e1c:	7d53      	ldrb	r3, [r2, #21]
 8002e1e:	1ac1      	subs	r1, r0, r3
 8002e20:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8002e24:	434b      	muls	r3, r1
 8002e26:	fb93 f3f0 	sdiv	r3, r3, r0
    proc->types.pointer.drag_throw_vect.y =
 8002e2a:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8002e2c:	6961      	ldr	r1, [r4, #20]
 8002e2e:	2900      	cmp	r1, #0
 8002e30:	d062      	beq.n	8002ef8 <indev_drag_throw.part.2+0x140>
        lv_obj_get_coords(drag_obj, &coords_ori);
 8002e32:	4669      	mov	r1, sp
 8002e34:	4628      	mov	r0, r5
 8002e36:	f001 fb9d 	bl	8004574 <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f001 fbb0 	bl	80045a0 <lv_obj_get_x>
 8002e40:	8aa6      	ldrh	r6, [r4, #20]
 8002e42:	4406      	add	r6, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8002e44:	4628      	mov	r0, r5
 8002e46:	f001 fbc5 	bl	80045d4 <lv_obj_get_y>
 8002e4a:	8ae2      	ldrh	r2, [r4, #22]
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
 8002e4c:	f1b8 0f03 	cmp.w	r8, #3
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8002e50:	4402      	add	r2, r0
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 8002e52:	b236      	sxth	r6, r6
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8002e54:	b211      	sxth	r1, r2
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
 8002e56:	d138      	bne.n	8002eca <indev_drag_throw.part.2+0x112>
 8002e58:	460a      	mov	r2, r1
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	4631      	mov	r1, r6
 8002e5e:	f001 fd9b 	bl	8004998 <lv_obj_set_pos>
        lv_obj_get_coords(drag_obj, &coord_new);
 8002e62:	a902      	add	r1, sp, #8
 8002e64:	4628      	mov	r0, r5
 8002e66:	f001 fb85 	bl	8004574 <lv_obj_get_coords>
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8002e6a:	f9bd 2000 	ldrsh.w	r2, [sp]
 8002e6e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d003      	beq.n	8002e7e <indev_drag_throw.part.2+0xc6>
 8002e76:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1bc      	bne.n	8002df8 <indev_drag_throw.part.2+0x40>
 8002e7e:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8002e82:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d003      	beq.n	8002e92 <indev_drag_throw.part.2+0xda>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8002e8a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1b2      	bne.n	8002df8 <indev_drag_throw.part.2+0x40>
            proc->types.pointer.drag_in_prog      = 0;
 8002e92:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8002e96:	683a      	ldr	r2, [r7, #0]
            proc->types.pointer.drag_in_prog      = 0;
 8002e98:	f36f 0341 	bfc	r3, #1, #1
 8002e9c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60e3      	str	r3, [r4, #12]
            proc->types.pointer.drag_throw_vect.x = 0;
 8002ea4:	6163      	str	r3, [r4, #20]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8002ea6:	69eb      	ldr	r3, [r5, #28]
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8002ea8:	2113      	movs	r1, #19
 8002eaa:	4628      	mov	r0, r5
 8002eac:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f7ff ff3e 	bl	8002d30 <indev_reset_check>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d19e      	bne.n	8002df8 <indev_drag_throw.part.2+0x40>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8002eba:	2109      	movs	r1, #9
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f001 fa93 	bl	80043e8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f7ff ff34 	bl	8002d30 <indev_reset_check>
 8002ec8:	e796      	b.n	8002df8 <indev_drag_throw.part.2+0x40>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
 8002eca:	f1b8 0f01 	cmp.w	r8, #1
 8002ece:	d104      	bne.n	8002eda <indev_drag_throw.part.2+0x122>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
 8002ed0:	4631      	mov	r1, r6
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f001 fdb2 	bl	8004a3c <lv_obj_set_x>
 8002ed8:	e7c3      	b.n	8002e62 <indev_drag_throw.part.2+0xaa>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
 8002eda:	f1b8 0f02 	cmp.w	r8, #2
 8002ede:	d103      	bne.n	8002ee8 <indev_drag_throw.part.2+0x130>
            else lv_obj_set_y(drag_obj, act_y);
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	f001 fdc3 	bl	8004a6c <lv_obj_set_y>
 8002ee6:	e7bc      	b.n	8002e62 <indev_drag_throw.part.2+0xaa>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8002ee8:	f1b8 0f04 	cmp.w	r8, #4
 8002eec:	d1b9      	bne.n	8002e62 <indev_drag_throw.part.2+0xaa>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
 8002eee:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f4      	beq.n	8002ee0 <indev_drag_throw.part.2+0x128>
 8002ef6:	e7eb      	b.n	8002ed0 <indev_drag_throw.part.2+0x118>
        proc->types.pointer.drag_in_prog = 0;
 8002ef8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8002efc:	f361 0341 	bfi	r3, r1, #1, #1
 8002f00:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8002f04:	69eb      	ldr	r3, [r5, #28]
 8002f06:	e7cf      	b.n	8002ea8 <indev_drag_throw.part.2+0xf0>
 8002f08:	20000170 	.word	0x20000170

08002f0c <lv_indev_reset.part.3>:
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	4604      	mov	r4, r0
        lv_indev_t * i = lv_indev_get_next(NULL);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f00b fb91 	bl	800e638 <lv_indev_get_next>
            if(indev_act == i) indev_obj_act = NULL;
 8002f16:	2500      	movs	r5, #0
 8002f18:	4e0a      	ldr	r6, [pc, #40]	; (8002f44 <lv_indev_reset.part.3+0x38>)
 8002f1a:	4f0b      	ldr	r7, [pc, #44]	; (8002f48 <lv_indev_reset.part.3+0x3c>)
        while(i) {
 8002f1c:	b900      	cbnz	r0, 8002f20 <lv_indev_reset.part.3+0x14>
}
 8002f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            i->proc.reset_query = 1;
 8002f20:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
 8002f2c:	6833      	ldr	r3, [r6, #0]
 8002f2e:	4298      	cmp	r0, r3
 8002f30:	bf08      	it	eq
 8002f32:	603d      	streq	r5, [r7, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8002f34:	b114      	cbz	r4, 8002f3c <lv_indev_reset.part.3+0x30>
 8002f36:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002f38:	429c      	cmp	r4, r3
 8002f3a:	d100      	bne.n	8002f3e <lv_indev_reset.part.3+0x32>
                i->proc.types.pointer.last_pressed = NULL;
 8002f3c:	63c5      	str	r5, [r0, #60]	; 0x3c
            i = lv_indev_get_next(i);
 8002f3e:	f00b fb7b 	bl	800e638 <lv_indev_get_next>
 8002f42:	e7eb      	b.n	8002f1c <lv_indev_reset.part.3+0x10>
 8002f44:	20000170 	.word	0x20000170
 8002f48:	20000174 	.word	0x20000174

08002f4c <indev_proc_release>:
    if(proc->wait_until_release != 0) {
 8002f4c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8002f50:	b570      	push	{r4, r5, r6, lr}
    if(proc->wait_until_release != 0) {
 8002f52:	071a      	lsls	r2, r3, #28
{
 8002f54:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
 8002f56:	d508      	bpl.n	8002f6a <indev_proc_release+0x1e>
        proc->types.pointer.act_obj  = NULL;
 8002f58:	2200      	movs	r2, #0
        proc->types.pointer.last_obj = NULL;
 8002f5a:	e9c0 2206 	strd	r2, r2, [r0, #24]
        proc->longpr_rep_timestamp   = 0;
 8002f5e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
        proc->wait_until_release     = 0;
 8002f62:	f362 03c3 	bfi	r3, r2, #3, #1
 8002f66:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
 8002f6a:	69a0      	ldr	r0, [r4, #24]
 8002f6c:	4d4b      	ldr	r5, [pc, #300]	; (800309c <indev_proc_release+0x150>)
 8002f6e:	6028      	str	r0, [r5, #0]
    if(indev_obj_act) {
 8002f70:	b338      	cbz	r0, 8002fc2 <indev_proc_release+0x76>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
 8002f72:	2110      	movs	r1, #16
 8002f74:	f002 fa2c 	bl	80053d0 <lv_obj_is_protected>
 8002f78:	4b49      	ldr	r3, [pc, #292]	; (80030a0 <indev_proc_release+0x154>)
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d04d      	beq.n	800301a <indev_proc_release+0xce>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8002f7e:	6828      	ldr	r0, [r5, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	69c6      	ldr	r6, [r0, #28]
 8002f84:	210e      	movs	r1, #14
 8002f86:	47b0      	blx	r6
            if(indev_reset_check(proc)) return;
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff fed1 	bl	8002d30 <indev_reset_check>
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d142      	bne.n	8003018 <indev_proc_release+0xcc>
            if(proc->types.pointer.drag_in_prog == 0) {
 8002f92:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8002f96:	079e      	lsls	r6, r3, #30
 8002f98:	d525      	bpl.n	8002fe6 <indev_proc_release+0x9a>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2107      	movs	r1, #7
 8002f9e:	6828      	ldr	r0, [r5, #0]
 8002fa0:	f001 fa22 	bl	80043e8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f7ff fec3 	bl	8002d30 <indev_reset_check>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d134      	bne.n	8003018 <indev_proc_release+0xcc>
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
 8002fae:	6828      	ldr	r0, [r5, #0]
 8002fb0:	f7ff fef0 	bl	8002d94 <get_dragged_obj>
        if(drag_obj) {
 8002fb4:	4605      	mov	r5, r0
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	d152      	bne.n	8003060 <indev_proc_release+0x114>
        proc->types.pointer.act_obj = NULL;
 8002fba:	2300      	movs	r3, #0
        proc->longpr_rep_timestamp  = 0;
 8002fbc:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
        proc->types.pointer.act_obj = NULL;
 8002fc0:	61a3      	str	r3, [r4, #24]
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
 8002fc2:	69e3      	ldr	r3, [r4, #28]
 8002fc4:	b343      	cbz	r3, 8003018 <indev_proc_release+0xcc>
 8002fc6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002fca:	079a      	lsls	r2, r3, #30
 8002fcc:	d424      	bmi.n	8003018 <indev_proc_release+0xcc>
    if(proc->types.pointer.drag_in_prog == 0) return;
 8002fce:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8002fd2:	079b      	lsls	r3, r3, #30
 8002fd4:	d502      	bpl.n	8002fdc <indev_proc_release+0x90>
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7ff feee 	bl	8002db8 <indev_drag_throw.part.2>
        if(indev_reset_check(proc)) return;
 8002fdc:	4620      	mov	r0, r4
}
 8002fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(indev_reset_check(proc)) return;
 8002fe2:	f7ff bea5 	b.w	8002d30 <indev_reset_check>
                if(proc->long_pr_sent == 0) {
 8002fe6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8002fea:	f012 0201 	ands.w	r2, r2, #1
 8002fee:	d00a      	beq.n	8003006 <indev_proc_release+0xba>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8002ff0:	2200      	movs	r2, #0
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8002ff2:	2106      	movs	r1, #6
 8002ff4:	6828      	ldr	r0, [r5, #0]
 8002ff6:	f001 f9f7 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f7ff fe98 	bl	8002d30 <indev_reset_check>
 8003000:	2800      	cmp	r0, #0
 8003002:	d0ca      	beq.n	8002f9a <indev_proc_release+0x4e>
 8003004:	e008      	b.n	8003018 <indev_proc_release+0xcc>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8003006:	2103      	movs	r1, #3
 8003008:	6828      	ldr	r0, [r5, #0]
 800300a:	f001 f9ed 	bl	80043e8 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 800300e:	4620      	mov	r0, r4
 8003010:	f7ff fe8e 	bl	8002d30 <indev_reset_check>
 8003014:	2800      	cmp	r0, #0
 8003016:	d0eb      	beq.n	8002ff0 <indev_proc_release+0xa4>
}
 8003018:	bd70      	pop	{r4, r5, r6, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 800301a:	6828      	ldr	r0, [r5, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	69c6      	ldr	r6, [r0, #28]
 8003020:	210e      	movs	r1, #14
 8003022:	47b0      	blx	r6
            if(indev_reset_check(proc)) return;
 8003024:	4620      	mov	r0, r4
 8003026:	f7ff fe83 	bl	8002d30 <indev_reset_check>
 800302a:	2800      	cmp	r0, #0
 800302c:	d1f4      	bne.n	8003018 <indev_proc_release+0xcc>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 800302e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003032:	07d8      	lsls	r0, r3, #31
 8003034:	d505      	bpl.n	8003042 <indev_proc_release+0xf6>
            if(proc->types.pointer.drag_in_prog == 0) {
 8003036:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800303a:	f012 0202 	ands.w	r2, r2, #2
 800303e:	d0d8      	beq.n	8002ff2 <indev_proc_release+0xa6>
 8003040:	e7ab      	b.n	8002f9a <indev_proc_release+0x4e>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 8003042:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8003046:	f012 0202 	ands.w	r2, r2, #2
 800304a:	d1f4      	bne.n	8003036 <indev_proc_release+0xea>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 800304c:	2103      	movs	r1, #3
 800304e:	6828      	ldr	r0, [r5, #0]
 8003050:	f001 f9ca 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003054:	4620      	mov	r0, r4
 8003056:	f7ff fe6b 	bl	8002d30 <indev_reset_check>
 800305a:	2800      	cmp	r0, #0
 800305c:	d0eb      	beq.n	8003036 <indev_proc_release+0xea>
 800305e:	e7db      	b.n	8003018 <indev_proc_release+0xcc>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
 8003060:	f001 fede 	bl	8004e20 <lv_obj_get_drag_throw>
 8003064:	2800      	cmp	r0, #0
 8003066:	d0a8      	beq.n	8002fba <indev_proc_release+0x6e>
 8003068:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800306c:	0799      	lsls	r1, r3, #30
 800306e:	d5a4      	bpl.n	8002fba <indev_proc_release+0x6e>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
 8003070:	69eb      	ldr	r3, [r5, #28]
 8003072:	b11b      	cbz	r3, 800307c <indev_proc_release+0x130>
 8003074:	2200      	movs	r2, #0
 8003076:	2112      	movs	r1, #18
 8003078:	4628      	mov	r0, r5
 800307a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 800307c:	4620      	mov	r0, r4
 800307e:	f7ff fe57 	bl	8002d30 <indev_reset_check>
 8003082:	4602      	mov	r2, r0
 8003084:	2800      	cmp	r0, #0
 8003086:	d1c7      	bne.n	8003018 <indev_proc_release+0xcc>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
 8003088:	210a      	movs	r1, #10
 800308a:	4628      	mov	r0, r5
 800308c:	f001 f9ac 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003090:	4620      	mov	r0, r4
 8003092:	f7ff fe4d 	bl	8002d30 <indev_reset_check>
 8003096:	2800      	cmp	r0, #0
 8003098:	d08f      	beq.n	8002fba <indev_proc_release+0x6e>
 800309a:	e7bd      	b.n	8003018 <indev_proc_release+0xcc>
 800309c:	20000174 	.word	0x20000174
 80030a0:	20000170 	.word	0x20000170

080030a4 <_lv_indev_init>:
{
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7ff bf31 	b.w	8002f0c <lv_indev_reset.part.3>
	...

080030ac <lv_indev_get_act>:
}
 80030ac:	4b01      	ldr	r3, [pc, #4]	; (80030b4 <lv_indev_get_act+0x8>)
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000170 	.word	0x20000170

080030b8 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 80030b8:	b100      	cbz	r0, 80030bc <lv_indev_get_type+0x4>
    return indev->driver.type;
 80030ba:	7800      	ldrb	r0, [r0, #0]
}
 80030bc:	4770      	bx	lr
	...

080030c0 <lv_indev_reset>:
    if(indev) {
 80030c0:	b198      	cbz	r0, 80030ea <lv_indev_reset+0x2a>
        indev->proc.reset_query = 1;
 80030c2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80030c6:	f043 0302 	orr.w	r3, r3, #2
 80030ca:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <lv_indev_reset+0x34>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4283      	cmp	r3, r0
 80030d4:	bf02      	ittt	eq
 80030d6:	2200      	moveq	r2, #0
 80030d8:	4b07      	ldreq	r3, [pc, #28]	; (80030f8 <lv_indev_reset+0x38>)
 80030da:	601a      	streq	r2, [r3, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 80030dc:	b111      	cbz	r1, 80030e4 <lv_indev_reset+0x24>
 80030de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80030e0:	428b      	cmp	r3, r1
 80030e2:	d105      	bne.n	80030f0 <lv_indev_reset+0x30>
            indev->proc.types.pointer.last_pressed = NULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	63c3      	str	r3, [r0, #60]	; 0x3c
 80030e8:	4770      	bx	lr
 80030ea:	4608      	mov	r0, r1
 80030ec:	f7ff bf0e 	b.w	8002f0c <lv_indev_reset.part.3>
}
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000170 	.word	0x20000170
 80030f8:	20000174 	.word	0x20000174

080030fc <lv_indev_set_group>:
    if(indev->driver.type == LV_INDEV_TYPE_KEYPAD || indev->driver.type == LV_INDEV_TYPE_ENCODER) {
 80030fc:	7803      	ldrb	r3, [r0, #0]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d001      	beq.n	8003106 <lv_indev_set_group+0xa>
 8003102:	2b04      	cmp	r3, #4
 8003104:	d100      	bne.n	8003108 <lv_indev_set_group+0xc>
        indev->group = group;
 8003106:	6581      	str	r1, [r0, #88]	; 0x58
}
 8003108:	4770      	bx	lr

0800310a <lv_indev_get_point>:
    if(indev == NULL) {
 800310a:	b910      	cbnz	r0, 8003112 <lv_indev_get_point+0x8>
        point->x = 0;
 800310c:	8008      	strh	r0, [r1, #0]
        point->y = 0;
 800310e:	8048      	strh	r0, [r1, #2]
        return;
 8003110:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 8003112:	7803      	ldrb	r3, [r0, #0]
 8003114:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8003118:	2b01      	cmp	r3, #1
        point->x = -1;
 800311a:	bf15      	itete	ne
 800311c:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->x = indev->proc.types.pointer.act_point.x;
 8003120:	f9b0 3020 	ldrsheq.w	r3, [r0, #32]
        point->x = -1;
 8003124:	800b      	strhne	r3, [r1, #0]
        point->x = indev->proc.types.pointer.act_point.x;
 8003126:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 8003128:	bf08      	it	eq
 800312a:	f9b0 3022 	ldrsheq.w	r3, [r0, #34]	; 0x22
 800312e:	804b      	strh	r3, [r1, #2]
}
 8003130:	4770      	bx	lr

08003132 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
 8003132:	b150      	cbz	r0, 800314a <lv_indev_is_dragging+0x18>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 8003134:	7803      	ldrb	r3, [r0, #0]
 8003136:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800313a:	2b01      	cmp	r3, #1
 800313c:	d104      	bne.n	8003148 <lv_indev_is_dragging+0x16>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 800313e:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
 8003142:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003146:	4770      	bx	lr
    if(indev == NULL) return false;
 8003148:	2000      	movs	r0, #0
}
 800314a:	4770      	bx	lr

0800314c <lv_indev_get_obj_act>:
}
 800314c:	4b01      	ldr	r3, [pc, #4]	; (8003154 <lv_indev_get_obj_act+0x8>)
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000174 	.word	0x20000174

08003158 <lv_indev_search_obj>:
{
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	4604      	mov	r4, r0
 800315c:	460f      	mov	r7, r1
    if(lv_obj_hittest(obj, point)) {
 800315e:	f003 f849 	bl	80061f4 <lv_obj_hittest>
 8003162:	b908      	cbnz	r0, 8003168 <lv_indev_search_obj+0x10>
    lv_obj_t * found_p = NULL;
 8003164:	2000      	movs	r0, #0
}
 8003166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _LV_LL_READ(obj->child_ll, i) {
 8003168:	1d26      	adds	r6, r4, #4
 800316a:	4630      	mov	r0, r6
 800316c:	f00c f84e 	bl	800f20c <_lv_ll_get_head>
 8003170:	4605      	mov	r5, r0
 8003172:	b930      	cbnz	r0, 8003182 <lv_indev_search_obj+0x2a>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 8003174:	4620      	mov	r0, r4
 8003176:	f001 fe1d 	bl	8004db4 <lv_obj_get_click>
 800317a:	2800      	cmp	r0, #0
 800317c:	d0f2      	beq.n	8003164 <lv_indev_search_obj+0xc>
            lv_obj_t * hidden_i = obj;
 800317e:	4625      	mov	r5, r4
 8003180:	e013      	b.n	80031aa <lv_indev_search_obj+0x52>
            found_p = lv_indev_search_obj(i, point);
 8003182:	4639      	mov	r1, r7
 8003184:	4628      	mov	r0, r5
 8003186:	f7ff ffe7 	bl	8003158 <lv_indev_search_obj>
            if(found_p != NULL) {
 800318a:	2800      	cmp	r0, #0
 800318c:	d1eb      	bne.n	8003166 <lv_indev_search_obj+0xe>
        _LV_LL_READ(obj->child_ll, i) {
 800318e:	4629      	mov	r1, r5
 8003190:	4630      	mov	r0, r6
 8003192:	f00c f841 	bl	800f218 <_lv_ll_get_next>
 8003196:	e7eb      	b.n	8003170 <lv_indev_search_obj+0x18>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 8003198:	4628      	mov	r0, r5
 800319a:	f001 fb11 	bl	80047c0 <lv_obj_get_hidden>
 800319e:	2800      	cmp	r0, #0
 80031a0:	d1e0      	bne.n	8003164 <lv_indev_search_obj+0xc>
                hidden_i = lv_obj_get_parent(hidden_i);
 80031a2:	4628      	mov	r0, r5
 80031a4:	f001 f98c 	bl	80044c0 <lv_obj_get_parent>
 80031a8:	4605      	mov	r5, r0
            while(hidden_i != NULL) {
 80031aa:	2d00      	cmp	r5, #0
 80031ac:	d1f4      	bne.n	8003198 <lv_indev_search_obj+0x40>
            if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
 80031ae:	4629      	mov	r1, r5
 80031b0:	4620      	mov	r0, r4
 80031b2:	f002 f91d 	bl	80053f0 <lv_obj_get_state>
 80031b6:	0683      	lsls	r3, r0, #26
 80031b8:	d4d4      	bmi.n	8003164 <lv_indev_search_obj+0xc>
 80031ba:	4620      	mov	r0, r4
    return found_p;
 80031bc:	e7d3      	b.n	8003166 <lv_indev_search_obj+0xe>
	...

080031c0 <indev_proc_press>:
{
 80031c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c4:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) return;
 80031c6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
 80031ca:	6980      	ldr	r0, [r0, #24]
 80031cc:	4db6      	ldr	r5, [pc, #728]	; (80034a8 <indev_proc_press+0x2e8>)
    if(proc->wait_until_release != 0) return;
 80031ce:	071a      	lsls	r2, r3, #28
{
 80031d0:	b085      	sub	sp, #20
    indev_obj_act = proc->types.pointer.act_obj;
 80031d2:	6028      	str	r0, [r5, #0]
    if(proc->wait_until_release != 0) return;
 80031d4:	f100 8146 	bmi.w	8003464 <indev_proc_press+0x2a4>
    lv_disp_t * disp = indev_act->driver.disp;
 80031d8:	4fb4      	ldr	r7, [pc, #720]	; (80034ac <indev_proc_press+0x2ec>)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68de      	ldr	r6, [r3, #12]
    if(indev_obj_act == NULL) {
 80031de:	bb28      	cbnz	r0, 800322c <indev_proc_press+0x6c>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 80031e0:	4630      	mov	r0, r6
 80031e2:	f104 0804 	add.w	r8, r4, #4
 80031e6:	f7ff fbba 	bl	800295e <lv_disp_get_layer_sys>
 80031ea:	4641      	mov	r1, r8
 80031ec:	f7ff ffb4 	bl	8003158 <lv_indev_search_obj>
 80031f0:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 80031f2:	b930      	cbnz	r0, 8003202 <indev_proc_press+0x42>
 80031f4:	4630      	mov	r0, r6
 80031f6:	f7ff fbab 	bl	8002950 <lv_disp_get_layer_top>
 80031fa:	4641      	mov	r1, r8
 80031fc:	f7ff ffac 	bl	8003158 <lv_indev_search_obj>
 8003200:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8003202:	682b      	ldr	r3, [r5, #0]
 8003204:	b933      	cbnz	r3, 8003214 <indev_proc_press+0x54>
 8003206:	4630      	mov	r0, r6
 8003208:	f7ff fb94 	bl	8002934 <lv_disp_get_scr_act>
 800320c:	4641      	mov	r1, r8
 800320e:	f7ff ffa3 	bl	8003158 <lv_indev_search_obj>
 8003212:	6028      	str	r0, [r5, #0]
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8003214:	69e3      	ldr	r3, [r4, #28]
 8003216:	b193      	cbz	r3, 800323e <indev_proc_press+0x7e>
        proc->types.pointer.drag_throw_vect.x = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	6163      	str	r3, [r4, #20]
    if(proc->types.pointer.drag_in_prog == 0) return;
 800321c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003220:	079e      	lsls	r6, r3, #30
 8003222:	d50c      	bpl.n	800323e <indev_proc_press+0x7e>
 8003224:	4620      	mov	r0, r4
 8003226:	f7ff fdc7 	bl	8002db8 <indev_drag_throw.part.2>
 800322a:	e008      	b.n	800323e <indev_proc_press+0x7e>
    else if(proc->types.pointer.drag_in_prog == 0 &&
 800322c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003230:	079b      	lsls	r3, r3, #30
 8003232:	d409      	bmi.n	8003248 <indev_proc_press+0x88>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
 8003234:	2110      	movs	r1, #16
 8003236:	f002 f8cb 	bl	80053d0 <lv_obj_is_protected>
    else if(proc->types.pointer.drag_in_prog == 0 &&
 800323a:	2800      	cmp	r0, #0
 800323c:	d0d0      	beq.n	80031e0 <indev_proc_press+0x20>
    if(indev_obj_act != proc->types.pointer.act_obj) {
 800323e:	69a6      	ldr	r6, [r4, #24]
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	429e      	cmp	r6, r3
 8003244:	f040 8082 	bne.w	800334c <indev_proc_press+0x18c>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8003248:	8923      	ldrh	r3, [r4, #8]
 800324a:	88a0      	ldrh	r0, [r4, #4]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800324c:	88e1      	ldrh	r1, [r4, #6]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800324e:	1ac0      	subs	r0, r0, r3
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8003250:	8963      	ldrh	r3, [r4, #10]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8003252:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8003256:	1ac9      	subs	r1, r1, r3
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8003258:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 800325c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003260:	10d2      	asrs	r2, r2, #3
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8003262:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8003266:	b200      	sxth	r0, r0
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8003268:	b209      	sxth	r1, r1
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 800326a:	10db      	asrs	r3, r3, #3
    if(proc->types.pointer.drag_throw_vect.x < 0)
 800326c:	2a00      	cmp	r2, #0
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800326e:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8003270:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8003272:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8003274:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
 8003276:	f280 8162 	bge.w	800353e <indev_proc_press+0x37e>
        proc->types.pointer.drag_throw_vect.x++;
 800327a:	3201      	adds	r2, #1
        proc->types.pointer.drag_throw_vect.x--;
 800327c:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
 800327e:	2b00      	cmp	r3, #0
 8003280:	f280 8161 	bge.w	8003546 <indev_proc_press+0x386>
        proc->types.pointer.drag_throw_vect.y++;
 8003284:	3301      	adds	r3, #1
        proc->types.pointer.drag_throw_vect.y--;
 8003286:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8003288:	8aa3      	ldrh	r3, [r4, #20]
 800328a:	eb03 0060 	add.w	r0, r3, r0, asr #1
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 800328e:	8ae3      	ldrh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8003290:	82a0      	strh	r0, [r4, #20]
    if(indev_obj_act != NULL) {
 8003292:	6828      	ldr	r0, [r5, #0]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 8003294:	eb03 0161 	add.w	r1, r3, r1, asr #1
 8003298:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
 800329a:	2800      	cmp	r0, #0
 800329c:	f000 80e2 	beq.w	8003464 <indev_proc_press+0x2a4>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	69c3      	ldr	r3, [r0, #28]
 80032a4:	210c      	movs	r1, #12
 80032a6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 80032a8:	4620      	mov	r0, r4
 80032aa:	f7ff fd41 	bl	8002d30 <indev_reset_check>
 80032ae:	4602      	mov	r2, r0
 80032b0:	2800      	cmp	r0, #0
 80032b2:	f040 80d7 	bne.w	8003464 <indev_proc_press+0x2a4>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 80032b6:	2101      	movs	r1, #1
 80032b8:	6828      	ldr	r0, [r5, #0]
 80032ba:	f001 f895 	bl	80043e8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80032be:	4620      	mov	r0, r4
 80032c0:	f7ff fd36 	bl	8002d30 <indev_reset_check>
 80032c4:	4681      	mov	r9, r0
 80032c6:	2800      	cmp	r0, #0
 80032c8:	f040 80cc 	bne.w	8003464 <indev_proc_press+0x2a4>
        if(indev_act->proc.wait_until_release) return;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032d2:	0719      	lsls	r1, r3, #28
 80032d4:	f100 80c6 	bmi.w	8003464 <indev_proc_press+0x2a4>
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
 80032d8:	69a0      	ldr	r0, [r4, #24]
 80032da:	f7ff fd5b 	bl	8002d94 <get_dragged_obj>
    if(drag_obj == NULL) return;
 80032de:	4606      	mov	r6, r0
 80032e0:	2800      	cmp	r0, #0
 80032e2:	f000 8214 	beq.w	800370e <indev_proc_press+0x54e>
    if(lv_obj_get_drag(drag_obj) == false) return;
 80032e6:	f001 fd77 	bl	8004dd8 <lv_obj_get_drag>
 80032ea:	4682      	mov	sl, r0
 80032ec:	2800      	cmp	r0, #0
 80032ee:	f000 820e 	beq.w	800370e <indev_proc_press+0x54e>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 80032f2:	4630      	mov	r0, r6
 80032f4:	f001 fd82 	bl	8004dfc <lv_obj_get_drag_dir>
    if(proc->types.pointer.drag_limit_out == 0) {
 80032f8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 80032fc:	4680      	mov	r8, r0
    if(proc->types.pointer.drag_limit_out == 0) {
 80032fe:	07da      	lsls	r2, r3, #31
 8003300:	f100 8145 	bmi.w	800358e <indev_proc_press+0x3ce>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 8003304:	8a22      	ldrh	r2, [r4, #16]
 8003306:	89a3      	ldrh	r3, [r4, #12]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 8003308:	89e1      	ldrh	r1, [r4, #14]
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 800330a:	441a      	add	r2, r3
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 800330c:	8a63      	ldrh	r3, [r4, #18]
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 800330e:	b212      	sxth	r2, r2
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 8003310:	440b      	add	r3, r1
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
 8003312:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 8003316:	3802      	subs	r0, #2
 8003318:	b2c0      	uxtb	r0, r0
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 800331a:	b21b      	sxth	r3, r3
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 800331c:	2801      	cmp	r0, #1
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 800331e:	8222      	strh	r2, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 8003320:	8263      	strh	r3, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 8003322:	d90e      	bls.n	8003342 <indev_proc_press+0x182>
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8003324:	f1b8 0f04 	cmp.w	r8, #4
 8003328:	f040 8111 	bne.w	800354e <indev_proc_press+0x38e>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 800332c:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
 8003330:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8003334:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
 8003338:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800333c:	4584      	cmp	ip, r0
 800333e:	f300 8109 	bgt.w	8003554 <indev_proc_press+0x394>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 8003342:	2901      	cmp	r1, #1
 8003344:	f040 8111 	bne.w	800356a <indev_proc_press+0x3aa>
                ver_en = true;
 8003348:	46d1      	mov	r9, sl
 800334a:	e103      	b.n	8003554 <indev_proc_press+0x394>
 800334c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8003350:	88a2      	ldrh	r2, [r4, #4]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
 8003352:	8163      	strh	r3, [r4, #10]
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8003354:	8122      	strh	r2, [r4, #8]
        if(proc->types.pointer.act_obj != NULL) {
 8003356:	2e00      	cmp	r6, #0
 8003358:	d170      	bne.n	800343c <indev_proc_press+0x27c>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 800335a:	682b      	ldr	r3, [r5, #0]
        proc->types.pointer.last_obj = indev_obj_act;
 800335c:	e9c4 3306 	strd	r3, r3, [r4, #24]
        if(indev_obj_act != NULL) {
 8003360:	2b00      	cmp	r3, #0
 8003362:	f43f af71 	beq.w	8003248 <indev_proc_press+0x88>
            proc->pr_timestamp                 = lv_tick_get();
 8003366:	f00b f9a1 	bl	800e6ac <lv_tick_get>
            proc->types.pointer.gesture_sum.x  = 0;
 800336a:	2600      	movs	r6, #0
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 800336c:	2203      	movs	r2, #3
            proc->long_pr_sent                 = 0;
 800336e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.vect.y         = 0;
 8003372:	e9c4 6603 	strd	r6, r6, [r4, #12]
            proc->long_pr_sent                 = 0;
 8003376:	f36f 0300 	bfc	r3, #0, #1
 800337a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
 800337e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
            proc->pr_timestamp                 = lv_tick_get();
 8003382:	62e0      	str	r0, [r4, #44]	; 0x2c
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8003384:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8003388:	f362 0384 	bfi	r3, r2, #2, #3
            proc->types.pointer.gesture_sent   = 0;
 800338c:	f36f 1345 	bfc	r3, #5, #1
            lv_obj_t * i        = indev_obj_act;
 8003390:	6828      	ldr	r0, [r5, #0]
            proc->types.pointer.gesture_sent   = 0;
 8003392:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
 8003396:	84e6      	strh	r6, [r4, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
 8003398:	8526      	strh	r6, [r4, #40]	; 0x28
            while(i != NULL) {
 800339a:	2800      	cmp	r0, #0
 800339c:	d165      	bne.n	800346a <indev_proc_press+0x2aa>
            if(last_top != NULL) {
 800339e:	b116      	cbz	r6, 80033a6 <indev_proc_press+0x1e6>
                lv_obj_move_foreground(last_top);
 80033a0:	4630      	mov	r0, r6
 80033a2:	f001 facd 	bl	8004940 <lv_obj_move_foreground>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
 80033a6:	6828      	ldr	r0, [r5, #0]
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	69c3      	ldr	r3, [r0, #28]
 80033ac:	210b      	movs	r1, #11
 80033ae:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 80033b0:	4620      	mov	r0, r4
 80033b2:	f7ff fcbd 	bl	8002d30 <indev_reset_check>
 80033b6:	4602      	mov	r2, r0
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d153      	bne.n	8003464 <indev_proc_press+0x2a4>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 80033bc:	4601      	mov	r1, r0
 80033be:	6828      	ldr	r0, [r5, #0]
 80033c0:	f001 f812 	bl	80043e8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80033c4:	4620      	mov	r0, r4
 80033c6:	f7ff fcb3 	bl	8002d30 <indev_reset_check>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d14a      	bne.n	8003464 <indev_proc_press+0x2a4>
            if(indev_act->proc.wait_until_release) return;
 80033ce:	f8d7 8000 	ldr.w	r8, [r7]
 80033d2:	f898 3050 	ldrb.w	r3, [r8, #80]	; 0x50
 80033d6:	0718      	lsls	r0, r3, #28
 80033d8:	d444      	bmi.n	8003464 <indev_proc_press+0x2a4>
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
 80033da:	6828      	ldr	r0, [r5, #0]
 80033dc:	f003 ff98 	bl	8007310 <lv_obj_get_focused_obj>
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 80033e0:	2120      	movs	r1, #32
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
 80033e2:	4682      	mov	sl, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 80033e4:	6828      	ldr	r0, [r5, #0]
 80033e6:	f001 fff3 	bl	80053d0 <lv_obj_is_protected>
 80033ea:	bb00      	cbnz	r0, 800342e <indev_proc_press+0x26e>
 80033ec:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80033f0:	459a      	cmp	sl, r3
 80033f2:	d01c      	beq.n	800342e <indev_proc_press+0x26e>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 80033f4:	4650      	mov	r0, sl
 80033f6:	f002 fe2f 	bl	8006058 <lv_obj_get_group>
 80033fa:	4683      	mov	fp, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 80033fc:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
            indev_click_focus(&indev_act->proc);
 8003400:	f108 061c 	add.w	r6, r8, #28
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8003404:	2800      	cmp	r0, #0
 8003406:	f000 827f 	beq.w	8003908 <indev_proc_press+0x748>
 800340a:	f002 fe25 	bl	8006058 <lv_obj_get_group>
        if(g_act == g_prev) {
 800340e:	4583      	cmp	fp, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8003410:	4681      	mov	r9, r0
        if(g_act == g_prev) {
 8003412:	d14d      	bne.n	80034b0 <indev_proc_press+0x2f0>
            if(g_act) {
 8003414:	f1bb 0f00 	cmp.w	fp, #0
 8003418:	f000 827a 	beq.w	8003910 <indev_proc_press+0x750>
                lv_group_focus_obj(obj_to_focus);
 800341c:	4650      	mov	r0, sl
 800341e:	f7ff fc33 	bl	8002c88 <lv_group_focus_obj>
                if(indev_reset_check(proc)) return;
 8003422:	4630      	mov	r0, r6
 8003424:	f7ff fc84 	bl	8002d30 <indev_reset_check>
 8003428:	b908      	cbnz	r0, 800342e <indev_proc_press+0x26e>
        proc->types.pointer.last_pressed = obj_to_focus;
 800342a:	f8c8 a03c 	str.w	sl, [r8, #60]	; 0x3c
            if(indev_reset_check(proc)) return;
 800342e:	4620      	mov	r0, r4
 8003430:	f7ff fc7e 	bl	8002d30 <indev_reset_check>
 8003434:	2800      	cmp	r0, #0
 8003436:	f43f af07 	beq.w	8003248 <indev_proc_press+0x88>
 800343a:	e013      	b.n	8003464 <indev_proc_press+0x2a4>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	69f3      	ldr	r3, [r6, #28]
 8003440:	210d      	movs	r1, #13
 8003442:	4630      	mov	r0, r6
 8003444:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8003446:	4620      	mov	r0, r4
 8003448:	f7ff fc72 	bl	8002d30 <indev_reset_check>
 800344c:	4602      	mov	r2, r0
 800344e:	b948      	cbnz	r0, 8003464 <indev_proc_press+0x2a4>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
 8003450:	2102      	movs	r1, #2
 8003452:	4630      	mov	r0, r6
 8003454:	f000 ffc8 	bl	80043e8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8003458:	4620      	mov	r0, r4
 800345a:	f7ff fc69 	bl	8002d30 <indev_reset_check>
 800345e:	2800      	cmp	r0, #0
 8003460:	f43f af7b 	beq.w	800335a <indev_proc_press+0x19a>
}
 8003464:	b005      	add	sp, #20
 8003466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(i->top) last_top = i;
 800346a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800346e:	f013 0f20 	tst.w	r3, #32
 8003472:	bf18      	it	ne
 8003474:	4606      	movne	r6, r0
                i = lv_obj_get_parent(i);
 8003476:	f001 f823 	bl	80044c0 <lv_obj_get_parent>
 800347a:	e78e      	b.n	800339a <indev_proc_press+0x1da>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 800347c:	2200      	movs	r2, #0
 800347e:	2117      	movs	r1, #23
 8003480:	f000 ffe2 	bl	8004448 <lv_signal_send>
                    if(indev_reset_check(proc)) return;
 8003484:	4630      	mov	r0, r6
 8003486:	f7ff fc53 	bl	8002d30 <indev_reset_check>
 800348a:	4602      	mov	r2, r0
 800348c:	2800      	cmp	r0, #0
 800348e:	d1ce      	bne.n	800342e <indev_proc_press+0x26e>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 8003490:	210e      	movs	r1, #14
 8003492:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8003496:	f000 ffa7 	bl	80043e8 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 800349a:	4630      	mov	r0, r6
 800349c:	f7ff fc48 	bl	8002d30 <indev_reset_check>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	f000 823a 	beq.w	800391a <indev_proc_press+0x75a>
 80034a6:	e7c2      	b.n	800342e <indev_proc_press+0x26e>
 80034a8:	20000174 	.word	0x20000174
 80034ac:	20000170 	.word	0x20000170
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 80034b0:	bb30      	cbnz	r0, 8003500 <indev_proc_press+0x340>
 80034b2:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 80034b6:	b310      	cbz	r0, 80034fe <indev_proc_press+0x33e>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 80034b8:	2200      	movs	r2, #0
 80034ba:	2117      	movs	r1, #23
 80034bc:	f000 ffc4 	bl	8004448 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 80034c0:	4630      	mov	r0, r6
 80034c2:	f7ff fc35 	bl	8002d30 <indev_reset_check>
 80034c6:	4602      	mov	r2, r0
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d1b0      	bne.n	800342e <indev_proc_press+0x26e>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 80034cc:	210e      	movs	r1, #14
 80034ce:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 80034d2:	f000 ff89 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80034d6:	4630      	mov	r0, r6
 80034d8:	f7ff fc2a 	bl	8002d30 <indev_reset_check>
 80034dc:	2800      	cmp	r0, #0
 80034de:	d1a6      	bne.n	800342e <indev_proc_press+0x26e>
            if(g_act) {
 80034e0:	f1bb 0f00 	cmp.w	fp, #0
 80034e4:	d19a      	bne.n	800341c <indev_proc_press+0x25c>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 80034e6:	465a      	mov	r2, fp
 80034e8:	2116      	movs	r1, #22
 80034ea:	4650      	mov	r0, sl
 80034ec:	f000 ffac 	bl	8004448 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7ff fc1d 	bl	8002d30 <indev_reset_check>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d199      	bne.n	800342e <indev_proc_press+0x26e>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
 80034fa:	465a      	mov	r2, fp
 80034fc:	e219      	b.n	8003932 <indev_proc_press+0x772>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 80034fe:	4681      	mov	r9, r0
                if(proc->types.pointer.last_pressed) {
 8003500:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8003504:	2800      	cmp	r0, #0
 8003506:	d0eb      	beq.n	80034e0 <indev_proc_press+0x320>
                    if(g_prev == NULL) {
 8003508:	f1b9 0f00 	cmp.w	r9, #0
 800350c:	d10a      	bne.n	8003524 <indev_proc_press+0x364>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 800350e:	464a      	mov	r2, r9
 8003510:	2117      	movs	r1, #23
 8003512:	f000 ff99 	bl	8004448 <lv_signal_send>
                        if(indev_reset_check(proc)) return;
 8003516:	4630      	mov	r0, r6
 8003518:	f7ff fc0a 	bl	8002d30 <indev_reset_check>
 800351c:	2800      	cmp	r0, #0
 800351e:	d186      	bne.n	800342e <indev_proc_press+0x26e>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 8003520:	464a      	mov	r2, r9
 8003522:	e7d3      	b.n	80034cc <indev_proc_press+0x30c>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
 8003524:	2200      	movs	r2, #0
 8003526:	2115      	movs	r1, #21
 8003528:	f000 ff8e 	bl	8004448 <lv_signal_send>
                        if(indev_reset_check(proc)) return;
 800352c:	4630      	mov	r0, r6
 800352e:	f7ff fbff 	bl	8002d30 <indev_reset_check>
 8003532:	4602      	mov	r2, r0
 8003534:	2800      	cmp	r0, #0
 8003536:	f47f af7a 	bne.w	800342e <indev_proc_press+0x26e>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
 800353a:	210f      	movs	r1, #15
 800353c:	e7c7      	b.n	80034ce <indev_proc_press+0x30e>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
 800353e:	f43f ae9e 	beq.w	800327e <indev_proc_press+0xbe>
        proc->types.pointer.drag_throw_vect.x--;
 8003542:	3a01      	subs	r2, #1
 8003544:	e69a      	b.n	800327c <indev_proc_press+0xbc>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
 8003546:	f43f ae9f 	beq.w	8003288 <indev_proc_press+0xc8>
        proc->types.pointer.drag_throw_vect.y--;
 800354a:	3b01      	subs	r3, #1
 800354c:	e69b      	b.n	8003286 <indev_proc_press+0xc6>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 800354e:	2901      	cmp	r1, #1
 8003550:	f040 80dd 	bne.w	800370e <indev_proc_press+0x54e>
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	2a00      	cmp	r2, #0
 8003558:	7d09      	ldrb	r1, [r1, #20]
 800355a:	bfb8      	it	lt
 800355c:	4252      	neglt	r2, r2
 800355e:	428a      	cmp	r2, r1
 8003560:	da0b      	bge.n	800357a <indev_proc_press+0x3ba>
 8003562:	f1b9 0f00 	cmp.w	r9, #0
 8003566:	f000 80d2 	beq.w	800370e <indev_proc_press+0x54e>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	7d12      	ldrb	r2, [r2, #20]
 8003570:	bfb8      	it	lt
 8003572:	425b      	neglt	r3, r3
 8003574:	4293      	cmp	r3, r2
 8003576:	f2c0 80ca 	blt.w	800370e <indev_proc_press+0x54e>
            proc->types.pointer.drag_limit_out = 1;
 800357a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    if(proc->types.pointer.drag_limit_out != 0) {
 8003586:	07db      	lsls	r3, r3, #31
 8003588:	f140 80c1 	bpl.w	800370e <indev_proc_press+0x54e>
            drag_just_started                   = true;
 800358c:	46d1      	mov	r9, sl
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
 800358e:	68e3      	ldr	r3, [r4, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80bc 	beq.w	800370e <indev_proc_press+0x54e>
            lv_coord_t prev_x     = drag_obj->coords.x1;
 8003596:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 800359a:	4630      	mov	r0, r6
            lv_coord_t prev_x     = drag_obj->coords.x1;
 800359c:	9300      	str	r3, [sp, #0]
            lv_coord_t prev_y     = drag_obj->coords.y1;
 800359e:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 80035a2:	9301      	str	r3, [sp, #4]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 80035a4:	f000 ff8c 	bl	80044c0 <lv_obj_get_parent>
 80035a8:	f001 f82e 	bl	8004608 <lv_obj_get_width>
 80035ac:	9002      	str	r0, [sp, #8]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 80035ae:	4630      	mov	r0, r6
 80035b0:	f000 ff86 	bl	80044c0 <lv_obj_get_parent>
 80035b4:	f001 f836 	bl	8004624 <lv_obj_get_height>
 80035b8:	4683      	mov	fp, r0
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 80035ba:	4630      	mov	r0, r6
 80035bc:	f000 fff0 	bl	80045a0 <lv_obj_get_x>
 80035c0:	4682      	mov	sl, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 80035c2:	4630      	mov	r0, r6
 80035c4:	f001 f806 	bl	80045d4 <lv_obj_get_y>
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
 80035c8:	f1b8 0f03 	cmp.w	r8, #3
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 80035cc:	4602      	mov	r2, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
 80035ce:	d116      	bne.n	80035fe <indev_proc_press+0x43e>
                if(drag_just_started) {
 80035d0:	f1b9 0f00 	cmp.w	r9, #0
 80035d4:	d00d      	beq.n	80035f2 <indev_proc_press+0x432>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 80035d6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80035da:	f368 0384 	bfi	r3, r8, #2, #3
 80035de:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
 80035e2:	8a23      	ldrh	r3, [r4, #16]
 80035e4:	eb0a 0103 	add.w	r1, sl, r3
                    act_y += proc->types.pointer.drag_sum.y;
 80035e8:	8a63      	ldrh	r3, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
 80035ea:	fa0f fa81 	sxth.w	sl, r1
                    act_y += proc->types.pointer.drag_sum.y;
 80035ee:	441a      	add	r2, r3
 80035f0:	b212      	sxth	r2, r2
                act_x += proc->types.pointer.vect.x;
 80035f2:	89a3      	ldrh	r3, [r4, #12]
 80035f4:	eb0a 0103 	add.w	r1, sl, r3
 80035f8:	fa0f fa81 	sxth.w	sl, r1
 80035fc:	e026      	b.n	800364c <indev_proc_press+0x48c>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
 80035fe:	f1b8 0f01 	cmp.w	r8, #1
 8003602:	d111      	bne.n	8003628 <indev_proc_press+0x468>
 8003604:	fa1f f38a 	uxth.w	r3, sl
                if(drag_just_started) {
 8003608:	f1b9 0f00 	cmp.w	r9, #0
 800360c:	d0f1      	beq.n	80035f2 <indev_proc_press+0x432>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 800360e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8003612:	f368 0184 	bfi	r1, r8, #2, #3
 8003616:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
 800361a:	2100      	movs	r1, #0
 800361c:	8261      	strh	r1, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
 800361e:	8a21      	ldrh	r1, [r4, #16]
 8003620:	4419      	add	r1, r3
 8003622:	fa0f fa81 	sxth.w	sl, r1
 8003626:	e7e4      	b.n	80035f2 <indev_proc_press+0x432>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
 8003628:	f1b8 0f02 	cmp.w	r8, #2
 800362c:	f040 8126 	bne.w	800387c <indev_proc_press+0x6bc>
                if(drag_just_started) {
 8003630:	f1b9 0f00 	cmp.w	r9, #0
 8003634:	d00a      	beq.n	800364c <indev_proc_press+0x48c>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8003636:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800363a:	f368 0384 	bfi	r3, r8, #2, #3
 800363e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	8223      	strh	r3, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
 8003646:	8a63      	ldrh	r3, [r4, #18]
 8003648:	441a      	add	r2, r3
 800364a:	b212      	sxth	r2, r2
            if(allowed_dirs == LV_DRAG_DIR_VER ||
 800364c:	f1a8 0302 	sub.w	r3, r8, #2
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d90e      	bls.n	8003674 <indev_proc_press+0x4b4>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
 8003656:	f1b8 0f04 	cmp.w	r8, #4
 800365a:	d10e      	bne.n	800367a <indev_proc_press+0x4ba>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 800365c:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8003660:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8003664:	2800      	cmp	r0, #0
 8003666:	bfb8      	it	lt
 8003668:	4240      	neglt	r0, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	bfb8      	it	lt
 800366e:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 8003670:	4298      	cmp	r0, r3
 8003672:	da02      	bge.n	800367a <indev_proc_press+0x4ba>
                act_y += proc->types.pointer.vect.y;
 8003674:	89e3      	ldrh	r3, [r4, #14]
 8003676:	441a      	add	r2, r3
 8003678:	b212      	sxth	r2, r2
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	9203      	str	r2, [sp, #12]
            uint16_t inv_buf_size =
 800367e:	68d8      	ldr	r0, [r3, #12]
 8003680:	f00a fee3 	bl	800e44a <lv_disp_get_inv_buf_size>
            lv_obj_set_pos(drag_obj, act_x, act_y);
 8003684:	9a03      	ldr	r2, [sp, #12]
            uint16_t inv_buf_size =
 8003686:	4680      	mov	r8, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
 8003688:	4651      	mov	r1, sl
 800368a:	4630      	mov	r0, r6
 800368c:	f001 f984 	bl	8004998 <lv_obj_set_pos>
            proc->types.pointer.drag_in_prog = 1;
 8003690:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 8003694:	9a00      	ldr	r2, [sp, #0]
            proc->types.pointer.drag_in_prog = 1;
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 800369e:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d11f      	bne.n	80036e6 <indev_proc_press+0x526>
 80036a6:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 80036aa:	9a01      	ldr	r2, [sp, #4]
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d11a      	bne.n	80036e6 <indev_proc_press+0x526>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 80036b0:	4630      	mov	r0, r6
 80036b2:	f000 ff05 	bl	80044c0 <lv_obj_get_parent>
 80036b6:	f000 ffa7 	bl	8004608 <lv_obj_get_width>
 80036ba:	4682      	mov	sl, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 80036bc:	4630      	mov	r0, r6
 80036be:	f000 feff 	bl	80044c0 <lv_obj_get_parent>
 80036c2:	f000 ffaf 	bl	8004624 <lv_obj_get_height>
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
 80036c6:	9b02      	ldr	r3, [sp, #8]
 80036c8:	4553      	cmp	r3, sl
 80036ca:	d10c      	bne.n	80036e6 <indev_proc_press+0x526>
 80036cc:	4583      	cmp	fp, r0
 80036ce:	d10a      	bne.n	80036e6 <indev_proc_press+0x526>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68d8      	ldr	r0, [r3, #12]
 80036d4:	f00a feb9 	bl	800e44a <lv_disp_get_inv_buf_size>
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	eba0 0108 	sub.w	r1, r0, r8
 80036de:	b289      	uxth	r1, r1
 80036e0:	68d8      	ldr	r0, [r3, #12]
 80036e2:	f00a feb7 	bl	800e454 <_lv_disp_pop_from_inv_buf>
            if(drag_just_started) {
 80036e6:	f1b9 0f00 	cmp.w	r9, #0
 80036ea:	d010      	beq.n	800370e <indev_proc_press+0x54e>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	69f3      	ldr	r3, [r6, #28]
 80036f0:	2111      	movs	r1, #17
 80036f2:	4630      	mov	r0, r6
 80036f4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7ff fb1a 	bl	8002d30 <indev_reset_check>
 80036fc:	4602      	mov	r2, r0
 80036fe:	b930      	cbnz	r0, 800370e <indev_proc_press+0x54e>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
 8003700:	2108      	movs	r1, #8
 8003702:	4630      	mov	r0, r6
 8003704:	f000 fe70 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003708:	4620      	mov	r0, r4
 800370a:	f7ff fb11 	bl	8002d30 <indev_reset_check>
    if(proc->types.pointer.gesture_sent) return;
 800370e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003712:	069e      	lsls	r6, r3, #26
 8003714:	d451      	bmi.n	80037ba <indev_proc_press+0x5fa>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 8003716:	69a6      	ldr	r6, [r4, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
 8003718:	2e00      	cmp	r6, #0
 800371a:	d04e      	beq.n	80037ba <indev_proc_press+0x5fa>
 800371c:	4630      	mov	r0, r6
 800371e:	f001 fb96 	bl	8004e4e <lv_obj_get_gesture_parent>
 8003722:	2800      	cmp	r0, #0
 8003724:	f040 80e6 	bne.w	80038f4 <indev_proc_press+0x734>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 8003728:	4b84      	ldr	r3, [pc, #528]	; (800393c <indev_proc_press+0x77c>)
 800372a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 8003734:	7d97      	ldrb	r7, [r2, #22]
 8003736:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
 800373a:	45bc      	cmp	ip, r7
 800373c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003740:	da07      	bge.n	8003752 <indev_proc_press+0x592>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
 8003742:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 8003746:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 800374a:	4567      	cmp	r7, ip
        proc->types.pointer.gesture_sum.x = 0;
 800374c:	bfc4      	itt	gt
 800374e:	84e0      	strhgt	r0, [r4, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
 8003750:	8520      	strhgt	r0, [r4, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8003752:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003754:	4401      	add	r1, r0
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8003756:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8003758:	b209      	sxth	r1, r1
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 800375a:	4403      	add	r3, r0
 800375c:	b21b      	sxth	r3, r3
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 800375e:	84e1      	strh	r1, [r4, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8003760:	8523      	strh	r3, [r4, #40]	; 0x28
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 8003762:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 8003766:	7dd0      	ldrb	r0, [r2, #23]
 8003768:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
 800376c:	ea83 77e3 	eor.w	r7, r3, r3, asr #31
 8003770:	4584      	cmp	ip, r0
 8003772:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
 8003776:	dc01      	bgt.n	800377c <indev_proc_press+0x5bc>
 8003778:	42b8      	cmp	r0, r7
 800377a:	da1e      	bge.n	80037ba <indev_proc_press+0x5fa>
        proc->types.pointer.gesture_sent = 1;
 800377c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
 8003780:	45bc      	cmp	ip, r7
        proc->types.pointer.gesture_sent = 1;
 8003782:	f040 0020 	orr.w	r0, r0, #32
 8003786:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
 800378a:	f340 80b8 	ble.w	80038fe <indev_proc_press+0x73e>
            if(proc->types.pointer.gesture_sum.x > 0)
 800378e:	2900      	cmp	r1, #0
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
 8003790:	bfcc      	ite	gt
 8003792:	2303      	movgt	r3, #3
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
 8003794:	2302      	movle	r3, #2
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
 8003796:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
 800379a:	2114      	movs	r1, #20
 800379c:	69f3      	ldr	r3, [r6, #28]
 800379e:	4630      	mov	r0, r6
 80037a0:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 80037a2:	4620      	mov	r0, r4
 80037a4:	f7ff fac4 	bl	8002d30 <indev_reset_check>
 80037a8:	4602      	mov	r2, r0
 80037aa:	b930      	cbnz	r0, 80037ba <indev_proc_press+0x5fa>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
 80037ac:	210b      	movs	r1, #11
 80037ae:	4630      	mov	r0, r6
 80037b0:	f000 fe1a 	bl	80043e8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff fabb 	bl	8002d30 <indev_reset_check>
        if(indev_reset_check(proc)) return;
 80037ba:	4620      	mov	r0, r4
 80037bc:	f7ff fab8 	bl	8002d30 <indev_reset_check>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f47f ae4f 	bne.w	8003464 <indev_proc_press+0x2a4>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
 80037c6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80037ca:	0798      	lsls	r0, r3, #30
 80037cc:	f53f ae4a 	bmi.w	8003464 <indev_proc_press+0x2a4>
 80037d0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80037d4:	07d9      	lsls	r1, r3, #31
 80037d6:	d42a      	bmi.n	800382e <indev_proc_press+0x66e>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
 80037d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80037da:	f00a ff75 	bl	800e6c8 <lv_tick_elaps>
 80037de:	4b57      	ldr	r3, [pc, #348]	; (800393c <indev_proc_press+0x77c>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	8b13      	ldrh	r3, [r2, #24]
 80037e4:	4298      	cmp	r0, r3
 80037e6:	d91d      	bls.n	8003824 <indev_proc_press+0x664>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
 80037e8:	6828      	ldr	r0, [r5, #0]
 80037ea:	210f      	movs	r1, #15
 80037ec:	69c3      	ldr	r3, [r0, #28]
 80037ee:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 80037f0:	4620      	mov	r0, r4
 80037f2:	f7ff fa9d 	bl	8002d30 <indev_reset_check>
 80037f6:	4602      	mov	r2, r0
 80037f8:	2800      	cmp	r0, #0
 80037fa:	f47f ae33 	bne.w	8003464 <indev_proc_press+0x2a4>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 80037fe:	2104      	movs	r1, #4
 8003800:	6828      	ldr	r0, [r5, #0]
 8003802:	f000 fdf1 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff fa92 	bl	8002d30 <indev_reset_check>
 800380c:	2800      	cmp	r0, #0
 800380e:	f47f ae29 	bne.w	8003464 <indev_proc_press+0x2a4>
                proc->long_pr_sent = 1;
 8003812:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
 800381e:	f00a ff45 	bl	800e6ac <lv_tick_get>
 8003822:	6320      	str	r0, [r4, #48]	; 0x30
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
 8003824:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003828:	079a      	lsls	r2, r3, #30
 800382a:	f53f ae1b 	bmi.w	8003464 <indev_proc_press+0x2a4>
 800382e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003832:	07db      	lsls	r3, r3, #31
 8003834:	f57f ae16 	bpl.w	8003464 <indev_proc_press+0x2a4>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
 8003838:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800383a:	f00a ff45 	bl	800e6c8 <lv_tick_elaps>
 800383e:	4b3f      	ldr	r3, [pc, #252]	; (800393c <indev_proc_press+0x77c>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	8b53      	ldrh	r3, [r2, #26]
 8003844:	4298      	cmp	r0, r3
 8003846:	f67f ae0d 	bls.w	8003464 <indev_proc_press+0x2a4>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 800384a:	6828      	ldr	r0, [r5, #0]
 800384c:	2110      	movs	r1, #16
 800384e:	69c3      	ldr	r3, [r0, #28]
 8003850:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8003852:	4620      	mov	r0, r4
 8003854:	f7ff fa6c 	bl	8002d30 <indev_reset_check>
 8003858:	4602      	mov	r2, r0
 800385a:	2800      	cmp	r0, #0
 800385c:	f47f ae02 	bne.w	8003464 <indev_proc_press+0x2a4>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8003860:	2105      	movs	r1, #5
 8003862:	6828      	ldr	r0, [r5, #0]
 8003864:	f000 fdc0 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff fa61 	bl	8002d30 <indev_reset_check>
 800386e:	2800      	cmp	r0, #0
 8003870:	f47f adf8 	bne.w	8003464 <indev_proc_press+0x2a4>
                proc->longpr_rep_timestamp = lv_tick_get();
 8003874:	f00a ff1a 	bl	800e6ac <lv_tick_get>
 8003878:	6320      	str	r0, [r4, #48]	; 0x30
 800387a:	e5f3      	b.n	8003464 <indev_proc_press+0x2a4>
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
 800387c:	f1b8 0f04 	cmp.w	r8, #4
 8003880:	f47f aee4 	bne.w	800364c <indev_proc_press+0x48c>
                if(drag_just_started) {
 8003884:	f1b9 0f00 	cmp.w	r9, #0
 8003888:	d01a      	beq.n	80038c0 <indev_proc_press+0x700>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 800388a:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 800388e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8003892:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 8003896:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 800389a:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
 800389e:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
 80038a2:	45e6      	cmp	lr, ip
 80038a4:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
 80038a8:	dd18      	ble.n	80038dc <indev_proc_press+0x71c>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f363 0c84 	bfi	ip, r3, #2, #3
                        proc->types.pointer.drag_sum.y = 0;
 80038b0:	2300      	movs	r3, #0
                        act_x += proc->types.pointer.drag_sum.x;
 80038b2:	eb00 010a 	add.w	r1, r0, sl
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 80038b6:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
 80038ba:	8263      	strh	r3, [r4, #18]
                        act_x += proc->types.pointer.drag_sum.x;
 80038bc:	fa0f fa81 	sxth.w	sl, r1
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 80038c0:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 80038c4:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 80038c8:	2800      	cmp	r0, #0
 80038ca:	bfb8      	it	lt
 80038cc:	4240      	neglt	r0, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bfb8      	it	lt
 80038d2:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 80038d4:	4298      	cmp	r0, r3
 80038d6:	f73f ae8c 	bgt.w	80035f2 <indev_proc_press+0x432>
 80038da:	e6b7      	b.n	800364c <indev_proc_press+0x48c>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 80038dc:	4660      	mov	r0, ip
 80038de:	f04f 0c02 	mov.w	ip, #2
 80038e2:	f36c 0084 	bfi	r0, ip, #2, #3
 80038e6:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
 80038ea:	2000      	movs	r0, #0
                        act_y += proc->types.pointer.drag_sum.y;
 80038ec:	441a      	add	r2, r3
                        proc->types.pointer.drag_sum.x = 0;
 80038ee:	8220      	strh	r0, [r4, #16]
                        act_y += proc->types.pointer.drag_sum.y;
 80038f0:	b212      	sxth	r2, r2
 80038f2:	e7e5      	b.n	80038c0 <indev_proc_press+0x700>
        gesture_obj = lv_obj_get_parent(gesture_obj);
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 fde3 	bl	80044c0 <lv_obj_get_parent>
 80038fa:	4606      	mov	r6, r0
 80038fc:	e70c      	b.n	8003718 <indev_proc_press+0x558>
            if(proc->types.pointer.gesture_sum.y > 0)
 80038fe:	2b00      	cmp	r3, #0
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
 8003900:	bfcc      	ite	gt
 8003902:	2301      	movgt	r3, #1
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
 8003904:	2300      	movle	r3, #0
 8003906:	e746      	b.n	8003796 <indev_proc_press+0x5d6>
        if(g_act == g_prev) {
 8003908:	f1bb 0f00 	cmp.w	fp, #0
 800390c:	f47f add1 	bne.w	80034b2 <indev_proc_press+0x2f2>
                if(proc->types.pointer.last_pressed) {
 8003910:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8003914:	2800      	cmp	r0, #0
 8003916:	f47f adb1 	bne.w	800347c <indev_proc_press+0x2bc>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 800391a:	2200      	movs	r2, #0
 800391c:	2116      	movs	r1, #22
 800391e:	4650      	mov	r0, sl
 8003920:	f000 fd92 	bl	8004448 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 8003924:	4630      	mov	r0, r6
 8003926:	f7ff fa03 	bl	8002d30 <indev_reset_check>
 800392a:	4602      	mov	r2, r0
 800392c:	2800      	cmp	r0, #0
 800392e:	f47f ad7e 	bne.w	800342e <indev_proc_press+0x26e>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
 8003932:	210d      	movs	r1, #13
 8003934:	4650      	mov	r0, sl
 8003936:	f000 fd57 	bl	80043e8 <lv_event_send>
 800393a:	e572      	b.n	8003422 <indev_proc_press+0x262>
 800393c:	20000170 	.word	0x20000170

08003940 <_lv_indev_read_task>:
{
 8003940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    indev_act = task->user_data;
 8003944:	68c4      	ldr	r4, [r0, #12]
 8003946:	4fb1      	ldr	r7, [pc, #708]	; (8003c0c <_lv_indev_read_task+0x2cc>)
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8003948:	68e3      	ldr	r3, [r4, #12]
{
 800394a:	b087      	sub	sp, #28
    indev_act = task->user_data;
 800394c:	603c      	str	r4, [r7, #0]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 800394e:	2b00      	cmp	r3, #0
 8003950:	d060      	beq.n	8003a14 <_lv_indev_read_task+0xd4>
    indev_proc_reset_query_handler(indev_act);
 8003952:	4620      	mov	r0, r4
 8003954:	f7ff f9fa 	bl	8002d4c <indev_proc_reset_query_handler>
    if(indev_act->proc.disabled) return;
 8003958:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800395c:	075c      	lsls	r4, r3, #29
 800395e:	d459      	bmi.n	8003a14 <_lv_indev_read_task+0xd4>
        indev_obj_act = NULL;
 8003960:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8003c10 <_lv_indev_read_task+0x2d0>
 8003964:	464d      	mov	r5, r9
        more_to_read = _lv_indev_read(indev_act, &data);
 8003966:	a902      	add	r1, sp, #8
 8003968:	6838      	ldr	r0, [r7, #0]
 800396a:	f00a fe6f 	bl	800e64c <_lv_indev_read>
        indev_proc_reset_query_handler(indev_act);
 800396e:	683c      	ldr	r4, [r7, #0]
        more_to_read = _lv_indev_read(indev_act, &data);
 8003970:	4680      	mov	r8, r0
        indev_proc_reset_query_handler(indev_act);
 8003972:	4620      	mov	r0, r4
 8003974:	f7ff f9ea 	bl	8002d4c <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	f8c9 3000 	str.w	r3, [r9]
        indev_act->proc.state = data.state;
 800397e:	f89d 3016 	ldrb.w	r3, [sp, #22]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 8003982:	2b01      	cmp	r3, #1
        indev_act->proc.state = data.state;
 8003984:	7723      	strb	r3, [r4, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 8003986:	d105      	bne.n	8003994 <_lv_indev_read_task+0x54>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 8003988:	68e4      	ldr	r4, [r4, #12]
 800398a:	f00a fe8f 	bl	800e6ac <lv_tick_get>
 800398e:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
 8003992:	e006      	b.n	80039a2 <_lv_indev_read_task+0x62>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8003994:	7823      	ldrb	r3, [r4, #0]
 8003996:	2b04      	cmp	r3, #4
 8003998:	d103      	bne.n	80039a2 <_lv_indev_read_task+0x62>
 800399a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f2      	bne.n	8003988 <_lv_indev_read_task+0x48>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
 80039a2:	683c      	ldr	r4, [r7, #0]
 80039a4:	7823      	ldrb	r3, [r4, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d11e      	bne.n	80039e8 <_lv_indev_read_task+0xa8>
    if(i->cursor != NULL &&
 80039aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039ac:	b148      	cbz	r0, 80039c2 <_lv_indev_read_task+0x82>
 80039ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80039b0:	9b02      	ldr	r3, [sp, #8]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d005      	beq.n	80039c2 <_lv_indev_read_task+0x82>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 80039b6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80039ba:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80039be:	f000 ffeb 	bl	8004998 <lv_obj_set_pos>
    i->proc.types.pointer.act_point.x = data->point.x;
 80039c2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80039c6:	f104 001c 	add.w	r0, r4, #28
 80039ca:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
 80039cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80039d0:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
 80039d2:	7f23      	ldrb	r3, [r4, #28]
       i->proc.types.pointer.last_point.y == i->proc.types.pointer.act_point.y && data->state == LV_INDEV_STATE_PR) {
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	f040 8342 	bne.w	800405e <_lv_indev_read_task+0x71e>
        indev_proc_press(&i->proc);
 80039da:	f7ff fbf1 	bl	80031c0 <indev_proc_press>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 80039de:	8c23      	ldrh	r3, [r4, #32]
 80039e0:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 80039e2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80039e4:	84e3      	strh	r3, [r4, #38]	; 0x26
 80039e6:	e00b      	b.n	8003a00 <_lv_indev_read_task+0xc0>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	f040 8143 	bne.w	8003c74 <_lv_indev_read_task+0x334>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 80039ee:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80039f2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80039f6:	2901      	cmp	r1, #1
 80039f8:	f003 0208 	and.w	r2, r3, #8
 80039fc:	d10d      	bne.n	8003a1a <_lv_indev_read_task+0xda>
 80039fe:	b1ba      	cbz	r2, 8003a30 <_lv_indev_read_task+0xf0>
        indev_proc_reset_query_handler(indev_act);
 8003a00:	6838      	ldr	r0, [r7, #0]
 8003a02:	f7ff f9a3 	bl	8002d4c <indev_proc_reset_query_handler>
    } while(more_to_read);
 8003a06:	f1b8 0f00 	cmp.w	r8, #0
 8003a0a:	d1ac      	bne.n	8003966 <_lv_indev_read_task+0x26>
    indev_act     = NULL;
 8003a0c:	f8c7 8000 	str.w	r8, [r7]
    indev_obj_act = NULL;
 8003a10:	f8c5 8000 	str.w	r8, [r5]
}
 8003a14:	b007      	add	sp, #28
 8003a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(i->proc.wait_until_release) {
 8003a1a:	b14a      	cbz	r2, 8003a30 <_lv_indev_read_task+0xf0>
        i->proc.pr_timestamp            = 0;
 8003a1c:	2200      	movs	r2, #0
        i->proc.long_pr_sent            = 0;
 8003a1e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8003a22:	f362 0300 	bfi	r3, r2, #0, #1
        i->proc.pr_timestamp            = 0;
 8003a26:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 8003a28:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 8003a2c:	f884 2020 	strb.w	r2, [r4, #32]
    lv_group_t * g = i->group;
 8003a30:	6da6      	ldr	r6, [r4, #88]	; 0x58
    if(g == NULL) return;
 8003a32:	2e00      	cmp	r6, #0
 8003a34:	d0e4      	beq.n	8003a00 <_lv_indev_read_task+0xc0>
    indev_obj_act = lv_group_get_focused(g);
 8003a36:	4630      	mov	r0, r6
 8003a38:	f7ff f8eb 	bl	8002c12 <lv_group_get_focused>
 8003a3c:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d0de      	beq.n	8003a00 <_lv_indev_read_task+0xc0>
    i->proc.types.keypad.last_state = data->state;
 8003a42:	f89d 2016 	ldrb.w	r2, [sp, #22]
    i->proc.types.keypad.last_key = data->key;
 8003a46:	f8dd c00c 	ldr.w	ip, [sp, #12]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 8003a4a:	2a01      	cmp	r2, #1
    uint32_t prev_key = i->proc.types.keypad.last_key;
 8003a4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8003a4e:	f894 a020 	ldrb.w	sl, [r4, #32]
    i->proc.types.keypad.last_key = data->key;
 8003a52:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
    i->proc.types.keypad.last_state = data->state;
 8003a56:	f884 2020 	strb.w	r2, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 8003a5a:	f040 80c3 	bne.w	8003be4 <_lv_indev_read_task+0x2a4>
 8003a5e:	f1ba 0f00 	cmp.w	sl, #0
 8003a62:	d144      	bne.n	8003aee <_lv_indev_read_task+0x1ae>
        i->proc.pr_timestamp = lv_tick_get();
 8003a64:	f00a fe22 	bl	800e6ac <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 8003a68:	9903      	ldr	r1, [sp, #12]
        i->proc.pr_timestamp = lv_tick_get();
 8003a6a:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
 8003a6c:	290a      	cmp	r1, #10
 8003a6e:	d114      	bne.n	8003a9a <_lv_indev_read_task+0x15a>
            lv_group_send_data(g, LV_KEY_ENTER);
 8003a70:	4630      	mov	r0, r6
 8003a72:	f7ff f8d3 	bl	8002c1c <lv_group_send_data>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 8003a76:	6828      	ldr	r0, [r5, #0]
 8003a78:	4652      	mov	r2, sl
 8003a7a:	69c3      	ldr	r3, [r0, #28]
 8003a7c:	210b      	movs	r1, #11
            if(indev_reset_check(&i->proc)) return;
 8003a7e:	341c      	adds	r4, #28
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 8003a80:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8003a82:	4620      	mov	r0, r4
 8003a84:	f7ff f954 	bl	8002d30 <indev_reset_check>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d1b8      	bne.n	8003a00 <_lv_indev_read_task+0xc0>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8003a8e:	4601      	mov	r1, r0
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8003a90:	6828      	ldr	r0, [r5, #0]
 8003a92:	f000 fca9 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8003a96:	4620      	mov	r0, r4
 8003a98:	e00b      	b.n	8003ab2 <_lv_indev_read_task+0x172>
        else if(data->key == LV_KEY_ESC) {
 8003a9a:	291b      	cmp	r1, #27
 8003a9c:	d10d      	bne.n	8003aba <_lv_indev_read_task+0x17a>
            lv_group_send_data(g, LV_KEY_ESC);
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f7ff f8bc 	bl	8002c1c <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 8003aa4:	4652      	mov	r2, sl
 8003aa6:	2114      	movs	r1, #20
 8003aa8:	6828      	ldr	r0, [r5, #0]
 8003aaa:	f000 fc9d 	bl	80043e8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8003aae:	f104 001c 	add.w	r0, r4, #28
                if(indev_reset_check(&i->proc)) return;
 8003ab2:	f7ff f93d 	bl	8002d30 <indev_reset_check>
 8003ab6:	b1b8      	cbz	r0, 8003ae8 <_lv_indev_read_task+0x1a8>
 8003ab8:	e7a2      	b.n	8003a00 <_lv_indev_read_task+0xc0>
        else if(data->key == LV_KEY_NEXT) {
 8003aba:	2909      	cmp	r1, #9
 8003abc:	d107      	bne.n	8003ace <_lv_indev_read_task+0x18e>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8003abe:	4630      	mov	r0, r6
 8003ac0:	4651      	mov	r1, sl
 8003ac2:	f7ff f8c0 	bl	8002c46 <lv_group_set_editing>
            lv_group_focus_next(g);
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f7ff f802 	bl	8002ad0 <lv_group_focus_next>
 8003acc:	e7ef      	b.n	8003aae <_lv_indev_read_task+0x16e>
        else if(data->key == LV_KEY_PREV) {
 8003ace:	290b      	cmp	r1, #11
 8003ad0:	d107      	bne.n	8003ae2 <_lv_indev_read_task+0x1a2>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	4651      	mov	r1, sl
 8003ad6:	f7ff f8b6 	bl	8002c46 <lv_group_set_editing>
            lv_group_focus_prev(g);
 8003ada:	4630      	mov	r0, r6
 8003adc:	f7ff f804 	bl	8002ae8 <lv_group_focus_prev>
 8003ae0:	e7e5      	b.n	8003aae <_lv_indev_read_task+0x16e>
            lv_group_send_data(g, data->key);
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f7ff f89a 	bl	8002c1c <lv_group_send_data>
    indev_obj_act = NULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	e788      	b.n	8003a00 <_lv_indev_read_task+0xc0>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
 8003aee:	f1ba 0f01 	cmp.w	sl, #1
 8003af2:	d1f9      	bne.n	8003ae8 <_lv_indev_read_task+0x1a8>
        if(data->key == LV_KEY_ENTER) {
 8003af4:	f1bc 0f0a 	cmp.w	ip, #10
 8003af8:	d025      	beq.n	8003b46 <_lv_indev_read_task+0x206>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8003afa:	f894 a050 	ldrb.w	sl, [r4, #80]	; 0x50
 8003afe:	f01a 0a01 	ands.w	sl, sl, #1
 8003b02:	d137      	bne.n	8003b74 <_lv_indev_read_task+0x234>
 8003b04:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003b06:	f00a fddf 	bl	800e6c8 <lv_tick_elaps>
 8003b0a:	8b23      	ldrh	r3, [r4, #24]
 8003b0c:	4298      	cmp	r0, r3
 8003b0e:	d931      	bls.n	8003b74 <_lv_indev_read_task+0x234>
            i->proc.long_pr_sent = 1;
 8003b10:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
 8003b1c:	9b03      	ldr	r3, [sp, #12]
 8003b1e:	2b0a      	cmp	r3, #10
 8003b20:	d1e2      	bne.n	8003ae8 <_lv_indev_read_task+0x1a8>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8003b22:	f00a fdc3 	bl	800e6ac <lv_tick_get>
 8003b26:	64e0      	str	r0, [r4, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8003b28:	6828      	ldr	r0, [r5, #0]
 8003b2a:	4652      	mov	r2, sl
 8003b2c:	69c3      	ldr	r3, [r0, #28]
 8003b2e:	210f      	movs	r1, #15
                if(indev_reset_check(&i->proc)) return;
 8003b30:	341c      	adds	r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8003b32:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8003b34:	4620      	mov	r0, r4
 8003b36:	f7ff f8fb 	bl	8002d30 <indev_reset_check>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	f47f af5f 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8003b42:	2104      	movs	r1, #4
 8003b44:	e7a4      	b.n	8003a90 <_lv_indev_read_task+0x150>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
 8003b46:	2200      	movs	r2, #0
 8003b48:	69c3      	ldr	r3, [r0, #28]
 8003b4a:	210c      	movs	r1, #12
            if(indev_reset_check(&i->proc)) return;
 8003b4c:	f104 0b1c 	add.w	fp, r4, #28
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
 8003b50:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8003b52:	4658      	mov	r0, fp
 8003b54:	f7ff f8ec 	bl	8002d30 <indev_reset_check>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	f47f af50 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 8003b60:	4651      	mov	r1, sl
 8003b62:	6828      	ldr	r0, [r5, #0]
 8003b64:	f000 fc40 	bl	80043e8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8003b68:	4658      	mov	r0, fp
 8003b6a:	f7ff f8e1 	bl	8002d30 <indev_reset_check>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d0c3      	beq.n	8003afa <_lv_indev_read_task+0x1ba>
 8003b72:	e745      	b.n	8003a00 <_lv_indev_read_task+0xc0>
        else if(i->proc.long_pr_sent != 0 &&
 8003b74:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003b78:	07d8      	lsls	r0, r3, #31
 8003b7a:	d5b5      	bpl.n	8003ae8 <_lv_indev_read_task+0x1a8>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 8003b7c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003b7e:	f00a fda3 	bl	800e6c8 <lv_tick_elaps>
 8003b82:	8b63      	ldrh	r3, [r4, #26]
        else if(i->proc.long_pr_sent != 0 &&
 8003b84:	4298      	cmp	r0, r3
 8003b86:	d9af      	bls.n	8003ae8 <_lv_indev_read_task+0x1a8>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8003b88:	f00a fd90 	bl	800e6ac <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8003b8c:	9903      	ldr	r1, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8003b8e:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 8003b90:	290a      	cmp	r1, #10
 8003b92:	f104 041c 	add.w	r4, r4, #28
 8003b96:	d10d      	bne.n	8003bb4 <_lv_indev_read_task+0x274>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 8003b98:	6828      	ldr	r0, [r5, #0]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	69c3      	ldr	r3, [r0, #28]
 8003b9e:	2110      	movs	r1, #16
 8003ba0:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f7ff f8c4 	bl	8002d30 <indev_reset_check>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	2800      	cmp	r0, #0
 8003bac:	f47f af28 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8003bb0:	2105      	movs	r1, #5
 8003bb2:	e76d      	b.n	8003a90 <_lv_indev_read_task+0x150>
            else if(data->key == LV_KEY_NEXT) {
 8003bb4:	2909      	cmp	r1, #9
 8003bb6:	d107      	bne.n	8003bc8 <_lv_indev_read_task+0x288>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8003bb8:	4630      	mov	r0, r6
 8003bba:	2100      	movs	r1, #0
 8003bbc:	f7ff f843 	bl	8002c46 <lv_group_set_editing>
                lv_group_focus_next(g);
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	f7fe ff85 	bl	8002ad0 <lv_group_focus_next>
 8003bc6:	e766      	b.n	8003a96 <_lv_indev_read_task+0x156>
            else if(data->key == LV_KEY_PREV) {
 8003bc8:	290b      	cmp	r1, #11
 8003bca:	d107      	bne.n	8003bdc <_lv_indev_read_task+0x29c>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8003bcc:	4630      	mov	r0, r6
 8003bce:	2100      	movs	r1, #0
 8003bd0:	f7ff f839 	bl	8002c46 <lv_group_set_editing>
                lv_group_focus_prev(g);
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f7fe ff87 	bl	8002ae8 <lv_group_focus_prev>
 8003bda:	e75c      	b.n	8003a96 <_lv_indev_read_task+0x156>
                lv_group_send_data(g, data->key);
 8003bdc:	4630      	mov	r0, r6
 8003bde:	f7ff f81d 	bl	8002c1c <lv_group_send_data>
 8003be2:	e758      	b.n	8003a96 <_lv_indev_read_task+0x156>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
 8003be4:	2a00      	cmp	r2, #0
 8003be6:	f47f af7f 	bne.w	8003ae8 <_lv_indev_read_task+0x1a8>
 8003bea:	f1ba 0f01 	cmp.w	sl, #1
 8003bee:	f47f af7b 	bne.w	8003ae8 <_lv_indev_read_task+0x1a8>
        if(data->key == LV_KEY_ENTER) {
 8003bf2:	290a      	cmp	r1, #10
        data->key = prev_key;
 8003bf4:	9103      	str	r1, [sp, #12]
        if(data->key == LV_KEY_ENTER) {
 8003bf6:	d00d      	beq.n	8003c14 <_lv_indev_read_task+0x2d4>
        i->proc.pr_timestamp = 0;
 8003bf8:	2200      	movs	r2, #0
        i->proc.long_pr_sent = 0;
 8003bfa:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
        i->proc.pr_timestamp = 0;
 8003bfe:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 8003c00:	f362 0300 	bfi	r3, r2, #0, #1
 8003c04:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003c08:	e76e      	b.n	8003ae8 <_lv_indev_read_task+0x1a8>
 8003c0a:	bf00      	nop
 8003c0c:	20000170 	.word	0x20000170
 8003c10:	20000174 	.word	0x20000174
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8003c14:	69c3      	ldr	r3, [r0, #28]
 8003c16:	210e      	movs	r1, #14
            if(indev_reset_check(&i->proc)) return;
 8003c18:	f104 061c 	add.w	r6, r4, #28
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8003c1c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8003c1e:	4630      	mov	r0, r6
 8003c20:	f7ff f886 	bl	8002d30 <indev_reset_check>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	f47f aeeb 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
            if(i->proc.long_pr_sent == 0) {
 8003c2a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8003c2e:	f012 0201 	ands.w	r2, r2, #1
 8003c32:	d015      	beq.n	8003c60 <_lv_indev_read_task+0x320>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8003c34:	2200      	movs	r2, #0
 8003c36:	2106      	movs	r1, #6
 8003c38:	6828      	ldr	r0, [r5, #0]
 8003c3a:	f000 fbd5 	bl	80043e8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f7ff f876 	bl	8002d30 <indev_reset_check>
 8003c44:	4602      	mov	r2, r0
 8003c46:	2800      	cmp	r0, #0
 8003c48:	f47f aeda 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8003c4c:	2107      	movs	r1, #7
 8003c4e:	6828      	ldr	r0, [r5, #0]
 8003c50:	f000 fbca 	bl	80043e8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8003c54:	4630      	mov	r0, r6
 8003c56:	f7ff f86b 	bl	8002d30 <indev_reset_check>
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d0cc      	beq.n	8003bf8 <_lv_indev_read_task+0x2b8>
 8003c5e:	e6cf      	b.n	8003a00 <_lv_indev_read_task+0xc0>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8003c60:	2103      	movs	r1, #3
 8003c62:	6828      	ldr	r0, [r5, #0]
 8003c64:	f000 fbc0 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f7ff f861 	bl	8002d30 <indev_reset_check>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d0e0      	beq.n	8003c34 <_lv_indev_read_task+0x2f4>
 8003c72:	e6c5      	b.n	8003a00 <_lv_indev_read_task+0xc0>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	f040 81d9 	bne.w	800402c <_lv_indev_read_task+0x6ec>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8003c7a:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8003c7e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003c82:	2901      	cmp	r1, #1
 8003c84:	f003 0208 	and.w	r2, r3, #8
 8003c88:	d152      	bne.n	8003d30 <_lv_indev_read_task+0x3f0>
 8003c8a:	2a00      	cmp	r2, #0
 8003c8c:	f47f aeb8 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
    i->proc.types.keypad.last_key   = data->key;
 8003c90:	9b03      	ldr	r3, [sp, #12]
    lv_group_t * g = i->group;
 8003c92:	6da6      	ldr	r6, [r4, #88]	; 0x58
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 8003c94:	f894 a020 	ldrb.w	sl, [r4, #32]
    i->proc.types.keypad.last_key   = data->key;
 8003c98:	6263      	str	r3, [r4, #36]	; 0x24
    i->proc.types.keypad.last_state = data->state;
 8003c9a:	f884 1020 	strb.w	r1, [r4, #32]
    if(g == NULL) return;
 8003c9e:	2e00      	cmp	r6, #0
 8003ca0:	f43f aeae 	beq.w	8003a00 <_lv_indev_read_task+0xc0>
    indev_obj_act = lv_group_get_focused(g);
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	f7fe ffb4 	bl	8002c12 <lv_group_get_focused>
 8003caa:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 8003cac:	2800      	cmp	r0, #0
 8003cae:	f43f aea7 	beq.w	8003a00 <_lv_indev_read_task+0xc0>
    if(data->state != LV_INDEV_STATE_REL) {
 8003cb2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003cb6:	b113      	cbz	r3, 8003cbe <_lv_indev_read_task+0x37e>
        data->enc_diff = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8ad 3014 	strh.w	r3, [sp, #20]
    indev_obj_act = lv_group_get_focused(g);
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	f7fe ffa7 	bl	8002c12 <lv_group_get_focused>
 8003cc4:	6028      	str	r0, [r5, #0]
    if(indev_obj_act == NULL) return;
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	f43f ae9a 	beq.w	8003a00 <_lv_indev_read_task+0xc0>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
 8003ccc:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8003cd0:	2901      	cmp	r1, #1
 8003cd2:	f040 80ef 	bne.w	8003eb4 <_lv_indev_read_task+0x574>
 8003cd6:	f1ba 0f00 	cmp.w	sl, #0
 8003cda:	d171      	bne.n	8003dc0 <_lv_indev_read_task+0x480>
        i->proc.pr_timestamp = lv_tick_get();
 8003cdc:	f00a fce6 	bl	800e6ac <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 8003ce0:	9903      	ldr	r1, [sp, #12]
        i->proc.pr_timestamp = lv_tick_get();
 8003ce2:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
 8003ce4:	290a      	cmp	r1, #10
 8003ce6:	d130      	bne.n	8003d4a <_lv_indev_read_task+0x40a>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8003ce8:	6828      	ldr	r0, [r5, #0]
            bool editable = false;
 8003cea:	aa06      	add	r2, sp, #24
 8003cec:	f802 ad11 	strb.w	sl, [r2, #-17]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8003cf0:	69c3      	ldr	r3, [r0, #28]
 8003cf2:	2119      	movs	r1, #25
 8003cf4:	4798      	blx	r3
            if(lv_group_get_editing(g) == true || editable == false) {
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f7ff f814 	bl	8002d24 <lv_group_get_editing>
 8003cfc:	b910      	cbnz	r0, 8003d04 <_lv_indev_read_task+0x3c4>
 8003cfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003d02:	bb7b      	cbnz	r3, 8003d64 <_lv_indev_read_task+0x424>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 8003d04:	6828      	ldr	r0, [r5, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	69c3      	ldr	r3, [r0, #28]
 8003d0a:	210b      	movs	r1, #11
                if(indev_reset_check(&i->proc)) return;
 8003d0c:	341c      	adds	r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 8003d0e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7ff f80d 	bl	8002d30 <indev_reset_check>
 8003d16:	4602      	mov	r2, r0
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	f47f ae71 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8003d1e:	4601      	mov	r1, r0
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8003d20:	6828      	ldr	r0, [r5, #0]
 8003d22:	f000 fb61 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8003d26:	4620      	mov	r0, r4
                if(indev_reset_check(&i->proc)) return;
 8003d28:	f7ff f802 	bl	8002d30 <indev_reset_check>
 8003d2c:	b1d0      	cbz	r0, 8003d64 <_lv_indev_read_task+0x424>
 8003d2e:	e667      	b.n	8003a00 <_lv_indev_read_task+0xc0>
    if(i->proc.wait_until_release) {
 8003d30:	2a00      	cmp	r2, #0
 8003d32:	d0ad      	beq.n	8003c90 <_lv_indev_read_task+0x350>
        i->proc.pr_timestamp            = 0;
 8003d34:	2200      	movs	r2, #0
        i->proc.long_pr_sent            = 0;
 8003d36:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8003d3a:	f362 0300 	bfi	r3, r2, #0, #1
        i->proc.pr_timestamp            = 0;
 8003d3e:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 8003d40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 8003d44:	f884 2020 	strb.w	r2, [r4, #32]
 8003d48:	e7a2      	b.n	8003c90 <_lv_indev_read_task+0x350>
        else if(data->key == LV_KEY_LEFT) {
 8003d4a:	2914      	cmp	r1, #20
 8003d4c:	d103      	bne.n	8003d56 <_lv_indev_read_task+0x416>
                data->enc_diff--;
 8003d4e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	e004      	b.n	8003d60 <_lv_indev_read_task+0x420>
        else if(data->key == LV_KEY_RIGHT) {
 8003d56:	2913      	cmp	r1, #19
 8003d58:	d122      	bne.n	8003da0 <_lv_indev_read_task+0x460>
            data->enc_diff++;
 8003d5a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f8ad 3014 	strh.w	r3, [sp, #20]
    indev_obj_act = NULL;
 8003d64:	2400      	movs	r4, #0
    if(data->enc_diff != 0) {
 8003d66:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    indev_obj_act = NULL;
 8003d6a:	602c      	str	r4, [r5, #0]
    if(data->enc_diff != 0) {
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f43f ae47 	beq.w	8003a00 <_lv_indev_read_task+0xc0>
        if(lv_group_get_editing(g)) {
 8003d72:	4630      	mov	r0, r6
 8003d74:	f7fe ffd6 	bl	8002d24 <lv_group_get_editing>
 8003d78:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	f000 813a 	beq.w	8003ff6 <_lv_indev_read_task+0x6b6>
            if(data->enc_diff < 0) {
 8003d82:	42a3      	cmp	r3, r4
 8003d84:	f280 812a 	bge.w	8003fdc <_lv_indev_read_task+0x69c>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 8003d88:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8003d8c:	425b      	negs	r3, r3
 8003d8e:	429c      	cmp	r4, r3
 8003d90:	f6bf ae36 	bge.w	8003a00 <_lv_indev_read_task+0xc0>
 8003d94:	2114      	movs	r1, #20
 8003d96:	4630      	mov	r0, r6
 8003d98:	f7fe ff40 	bl	8002c1c <lv_group_send_data>
 8003d9c:	3401      	adds	r4, #1
 8003d9e:	e7f3      	b.n	8003d88 <_lv_indev_read_task+0x448>
        else if(data->key == LV_KEY_ESC) {
 8003da0:	291b      	cmp	r1, #27
            lv_group_send_data(g, LV_KEY_ESC);
 8003da2:	4630      	mov	r0, r6
        else if(data->key == LV_KEY_ESC) {
 8003da4:	d109      	bne.n	8003dba <_lv_indev_read_task+0x47a>
            lv_group_send_data(g, LV_KEY_ESC);
 8003da6:	f7fe ff39 	bl	8002c1c <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 8003daa:	4652      	mov	r2, sl
 8003dac:	2114      	movs	r1, #20
 8003dae:	6828      	ldr	r0, [r5, #0]
 8003db0:	f000 fb1a 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8003db4:	f104 001c 	add.w	r0, r4, #28
 8003db8:	e7b6      	b.n	8003d28 <_lv_indev_read_task+0x3e8>
            lv_group_send_data(g, data->key);
 8003dba:	f7fe ff2f 	bl	8002c1c <lv_group_send_data>
 8003dbe:	e7d1      	b.n	8003d64 <_lv_indev_read_task+0x424>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
 8003dc0:	f1ba 0f01 	cmp.w	sl, #1
 8003dc4:	d1ce      	bne.n	8003d64 <_lv_indev_read_task+0x424>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8003dc6:	f894 a050 	ldrb.w	sl, [r4, #80]	; 0x50
 8003dca:	f01a 0a01 	ands.w	sl, sl, #1
 8003dce:	d146      	bne.n	8003e5e <_lv_indev_read_task+0x51e>
 8003dd0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003dd2:	f00a fc79 	bl	800e6c8 <lv_tick_elaps>
 8003dd6:	8b23      	ldrh	r3, [r4, #24]
 8003dd8:	4298      	cmp	r0, r3
 8003dda:	d940      	bls.n	8003e5e <_lv_indev_read_task+0x51e>
            i->proc.long_pr_sent = 1;
 8003ddc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8003de8:	f00a fc60 	bl	800e6ac <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8003dec:	9b03      	ldr	r3, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8003dee:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 8003df0:	2b0a      	cmp	r3, #10
 8003df2:	d116      	bne.n	8003e22 <_lv_indev_read_task+0x4e2>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8003df4:	6828      	ldr	r0, [r5, #0]
                bool editable = false;
 8003df6:	aa06      	add	r2, sp, #24
 8003df8:	f802 ad11 	strb.w	sl, [r2, #-17]!
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8003dfc:	69c3      	ldr	r3, [r0, #28]
 8003dfe:	2119      	movs	r1, #25
 8003e00:	4798      	blx	r3
                if(editable) {
 8003e02:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003e06:	b19a      	cbz	r2, 8003e30 <_lv_indev_read_task+0x4f0>
                    if(_lv_ll_is_empty(&g->obj_ll) == false) {
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f00b fae5 	bl	800f3d8 <_lv_ll_is_empty>
 8003e0e:	b940      	cbnz	r0, 8003e22 <_lv_indev_read_task+0x4e2>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 8003e10:	4630      	mov	r0, r6
 8003e12:	f7fe ff87 	bl	8002d24 <lv_group_get_editing>
 8003e16:	f080 0101 	eor.w	r1, r0, #1
 8003e1a:	b2c9      	uxtb	r1, r1
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f7fe ff12 	bl	8002c46 <lv_group_set_editing>
            i->proc.long_pr_sent = 1;
 8003e22:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003e26:	f043 0301 	orr.w	r3, r3, #1
        i->proc.long_pr_sent = 0;
 8003e2a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003e2e:	e799      	b.n	8003d64 <_lv_indev_read_task+0x424>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8003e30:	6828      	ldr	r0, [r5, #0]
 8003e32:	210f      	movs	r1, #15
 8003e34:	69c3      	ldr	r3, [r0, #28]
                    if(indev_reset_check(&i->proc)) return;
 8003e36:	f104 0a1c 	add.w	sl, r4, #28
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8003e3a:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
 8003e3c:	4650      	mov	r0, sl
 8003e3e:	f7fe ff77 	bl	8002d30 <indev_reset_check>
 8003e42:	4602      	mov	r2, r0
 8003e44:	2800      	cmp	r0, #0
 8003e46:	f47f addb 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8003e4a:	2104      	movs	r1, #4
 8003e4c:	6828      	ldr	r0, [r5, #0]
 8003e4e:	f000 facb 	bl	80043e8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8003e52:	4650      	mov	r0, sl
 8003e54:	f7fe ff6c 	bl	8002d30 <indev_reset_check>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d0e2      	beq.n	8003e22 <_lv_indev_read_task+0x4e2>
 8003e5c:	e5d0      	b.n	8003a00 <_lv_indev_read_task+0xc0>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 8003e5e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003e62:	07d9      	lsls	r1, r3, #31
 8003e64:	f57f af7e 	bpl.w	8003d64 <_lv_indev_read_task+0x424>
 8003e68:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003e6a:	f00a fc2d 	bl	800e6c8 <lv_tick_elaps>
 8003e6e:	8b63      	ldrh	r3, [r4, #26]
 8003e70:	4298      	cmp	r0, r3
 8003e72:	f67f af77 	bls.w	8003d64 <_lv_indev_read_task+0x424>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8003e76:	f00a fc19 	bl	800e6ac <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8003e7a:	9903      	ldr	r1, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8003e7c:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 8003e7e:	290a      	cmp	r1, #10
 8003e80:	d10e      	bne.n	8003ea0 <_lv_indev_read_task+0x560>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 8003e82:	6828      	ldr	r0, [r5, #0]
 8003e84:	2200      	movs	r2, #0
 8003e86:	69c3      	ldr	r3, [r0, #28]
 8003e88:	2110      	movs	r1, #16
                if(indev_reset_check(&i->proc)) return;
 8003e8a:	341c      	adds	r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 8003e8c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f7fe ff4e 	bl	8002d30 <indev_reset_check>
 8003e94:	4602      	mov	r2, r0
 8003e96:	2800      	cmp	r0, #0
 8003e98:	f47f adb2 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8003e9c:	2105      	movs	r1, #5
 8003e9e:	e73f      	b.n	8003d20 <_lv_indev_read_task+0x3e0>
            else if(data->key == LV_KEY_LEFT) {
 8003ea0:	2914      	cmp	r1, #20
 8003ea2:	f43f af54 	beq.w	8003d4e <_lv_indev_read_task+0x40e>
            else if(data->key == LV_KEY_RIGHT) {
 8003ea6:	2913      	cmp	r1, #19
 8003ea8:	f43f af57 	beq.w	8003d5a <_lv_indev_read_task+0x41a>
                lv_group_send_data(g, data->key);
 8003eac:	4630      	mov	r0, r6
 8003eae:	f7fe feb5 	bl	8002c1c <lv_group_send_data>
 8003eb2:	e77f      	b.n	8003db4 <_lv_indev_read_task+0x474>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
 8003eb4:	2900      	cmp	r1, #0
 8003eb6:	f47f af55 	bne.w	8003d64 <_lv_indev_read_task+0x424>
 8003eba:	f1ba 0f01 	cmp.w	sl, #1
 8003ebe:	f47f af51 	bne.w	8003d64 <_lv_indev_read_task+0x424>
        if(data->key == LV_KEY_ENTER) {
 8003ec2:	9a03      	ldr	r2, [sp, #12]
 8003ec4:	2a0a      	cmp	r2, #10
 8003ec6:	d13a      	bne.n	8003f3e <_lv_indev_read_task+0x5fe>
            bool editable = false;
 8003ec8:	aa06      	add	r2, sp, #24
 8003eca:	f802 1d11 	strb.w	r1, [r2, #-17]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8003ece:	69c3      	ldr	r3, [r0, #28]
 8003ed0:	2119      	movs	r1, #25
 8003ed2:	4798      	blx	r3
            if(editable == false) {
 8003ed4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	d137      	bne.n	8003f4c <_lv_indev_read_task+0x60c>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8003edc:	6828      	ldr	r0, [r5, #0]
 8003ede:	210e      	movs	r1, #14
 8003ee0:	69c3      	ldr	r3, [r0, #28]
                if(indev_reset_check(&i->proc)) return;
 8003ee2:	f104 0a1c 	add.w	sl, r4, #28
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8003ee6:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8003ee8:	4650      	mov	r0, sl
 8003eea:	f7fe ff21 	bl	8002d30 <indev_reset_check>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	f47f ad86 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8003ef4:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8003ef8:	f012 0201 	ands.w	r2, r2, #1
 8003efc:	d103      	bne.n	8003f06 <_lv_indev_read_task+0x5c6>
 8003efe:	2103      	movs	r1, #3
 8003f00:	6828      	ldr	r0, [r5, #0]
 8003f02:	f000 fa71 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8003f06:	4650      	mov	r0, sl
 8003f08:	f7fe ff12 	bl	8002d30 <indev_reset_check>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	f47f ad76 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8003f14:	2106      	movs	r1, #6
 8003f16:	6828      	ldr	r0, [r5, #0]
 8003f18:	f000 fa66 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8003f1c:	4650      	mov	r0, sl
 8003f1e:	f7fe ff07 	bl	8002d30 <indev_reset_check>
 8003f22:	4602      	mov	r2, r0
 8003f24:	2800      	cmp	r0, #0
 8003f26:	f47f ad6b 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8003f2a:	2107      	movs	r1, #7
 8003f2c:	6828      	ldr	r0, [r5, #0]
 8003f2e:	f000 fa5b 	bl	80043e8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8003f32:	4650      	mov	r0, sl
 8003f34:	f7fe fefc 	bl	8002d30 <indev_reset_check>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	f47f ad61 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
        i->proc.pr_timestamp = 0;
 8003f3e:	2200      	movs	r2, #0
        i->proc.long_pr_sent = 0;
 8003f40:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
        i->proc.pr_timestamp = 0;
 8003f44:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 8003f46:	f362 0300 	bfi	r3, r2, #0, #1
 8003f4a:	e76e      	b.n	8003e2a <_lv_indev_read_task+0x4ea>
            else if(g->editing) {
 8003f4c:	7d32      	ldrb	r2, [r6, #20]
 8003f4e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003f52:	0792      	lsls	r2, r2, #30
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	d539      	bpl.n	8003fce <_lv_indev_read_task+0x68e>
                if(!i->proc.long_pr_sent || _lv_ll_is_empty(&g->obj_ll)) {
 8003f5a:	bb93      	cbnz	r3, 8003fc2 <_lv_indev_read_task+0x682>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8003f5c:	6828      	ldr	r0, [r5, #0]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	69c3      	ldr	r3, [r0, #28]
 8003f62:	210e      	movs	r1, #14
                    if(indev_reset_check(&i->proc)) return;
 8003f64:	f104 0a1c 	add.w	sl, r4, #28
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8003f68:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
 8003f6a:	4650      	mov	r0, sl
 8003f6c:	f7fe fee0 	bl	8002d30 <indev_reset_check>
 8003f70:	4602      	mov	r2, r0
 8003f72:	2800      	cmp	r0, #0
 8003f74:	f47f ad44 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8003f78:	2103      	movs	r1, #3
 8003f7a:	6828      	ldr	r0, [r5, #0]
 8003f7c:	f000 fa34 	bl	80043e8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8003f80:	4650      	mov	r0, sl
 8003f82:	f7fe fed5 	bl	8002d30 <indev_reset_check>
 8003f86:	4602      	mov	r2, r0
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f47f ad39 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8003f8e:	2106      	movs	r1, #6
 8003f90:	6828      	ldr	r0, [r5, #0]
 8003f92:	f000 fa29 	bl	80043e8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8003f96:	4650      	mov	r0, sl
 8003f98:	f7fe feca 	bl	8002d30 <indev_reset_check>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	f47f ad2e 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8003fa4:	2107      	movs	r1, #7
 8003fa6:	6828      	ldr	r0, [r5, #0]
 8003fa8:	f000 fa1e 	bl	80043e8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8003fac:	4650      	mov	r0, sl
 8003fae:	f7fe febf 	bl	8002d30 <indev_reset_check>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	f47f ad24 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
                    lv_group_send_data(g, LV_KEY_ENTER);
 8003fb8:	210a      	movs	r1, #10
 8003fba:	4630      	mov	r0, r6
 8003fbc:	f7fe fe2e 	bl	8002c1c <lv_group_send_data>
 8003fc0:	e7bd      	b.n	8003f3e <_lv_indev_read_task+0x5fe>
                if(!i->proc.long_pr_sent || _lv_ll_is_empty(&g->obj_ll)) {
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f00b fa08 	bl	800f3d8 <_lv_ll_is_empty>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d1c7      	bne.n	8003f5c <_lv_indev_read_task+0x61c>
 8003fcc:	e7b7      	b.n	8003f3e <_lv_indev_read_task+0x5fe>
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1b5      	bne.n	8003f3e <_lv_indev_read_task+0x5fe>
                lv_group_set_editing(g, true); /*Set edit mode*/
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f7fe fe36 	bl	8002c46 <lv_group_set_editing>
 8003fda:	e7b0      	b.n	8003f3e <_lv_indev_read_task+0x5fe>
            else if(data->enc_diff > 0) {
 8003fdc:	f43f ad10 	beq.w	8003a00 <_lv_indev_read_task+0xc0>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 8003fe0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8003fe4:	429c      	cmp	r4, r3
 8003fe6:	f6bf ad0b 	bge.w	8003a00 <_lv_indev_read_task+0xc0>
 8003fea:	2113      	movs	r1, #19
 8003fec:	4630      	mov	r0, r6
 8003fee:	f7fe fe15 	bl	8002c1c <lv_group_send_data>
 8003ff2:	3401      	adds	r4, #1
 8003ff4:	e7f4      	b.n	8003fe0 <_lv_indev_read_task+0x6a0>
            if(data->enc_diff < 0) {
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da0b      	bge.n	8004012 <_lv_indev_read_task+0x6d2>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	e003      	b.n	8004006 <_lv_indev_read_task+0x6c6>
 8003ffe:	4630      	mov	r0, r6
 8004000:	f7fe fd72 	bl	8002ae8 <lv_group_focus_prev>
 8004004:	3401      	adds	r4, #1
 8004006:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800400a:	425b      	negs	r3, r3
 800400c:	429c      	cmp	r4, r3
 800400e:	dbf6      	blt.n	8003ffe <_lv_indev_read_task+0x6be>
 8004010:	e4f6      	b.n	8003a00 <_lv_indev_read_task+0xc0>
            else if(data->enc_diff > 0) {
 8004012:	f43f acf5 	beq.w	8003a00 <_lv_indev_read_task+0xc0>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 8004016:	4604      	mov	r4, r0
 8004018:	e003      	b.n	8004022 <_lv_indev_read_task+0x6e2>
 800401a:	4630      	mov	r0, r6
 800401c:	f7fe fd58 	bl	8002ad0 <lv_group_focus_next>
 8004020:	3401      	adds	r4, #1
 8004022:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8004026:	429c      	cmp	r4, r3
 8004028:	dbf7      	blt.n	800401a <_lv_indev_read_task+0x6da>
 800402a:	e4e9      	b.n	8003a00 <_lv_indev_read_task+0xc0>
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
 800402c:	2b03      	cmp	r3, #3
 800402e:	f47f ace7 	bne.w	8003a00 <_lv_indev_read_task+0xc0>
    if(i->btn_points == NULL) {
 8004032:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004034:	2b00      	cmp	r3, #0
 8004036:	f43f ace3 	beq.w	8003a00 <_lv_indev_read_task+0xc0>
    i->proc.types.pointer.act_point.x = i->btn_points[data->btn_id].x;
 800403a:	9a04      	ldr	r2, [sp, #16]
 800403c:	f104 001c 	add.w	r0, r4, #28
 8004040:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8004044:	f933 3022 	ldrsh.w	r3, [r3, r2, lsl #2]
 8004048:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = i->btn_points[data->btn_id].y;
 800404a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800404e:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.types.pointer.last_point.x == i->proc.types.pointer.act_point.x &&
 8004050:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8004054:	429a      	cmp	r2, r3
 8004056:	d102      	bne.n	800405e <_lv_indev_read_task+0x71e>
       i->proc.types.pointer.last_point.y == i->proc.types.pointer.act_point.y && data->state == LV_INDEV_STATE_PR) {
 8004058:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800405c:	e4ba      	b.n	80039d4 <_lv_indev_read_task+0x94>
        indev_proc_release(&i->proc);
 800405e:	f7fe ff75 	bl	8002f4c <indev_proc_release>
 8004062:	e4bc      	b.n	80039de <_lv_indev_read_task+0x9e>

08004064 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
 8004064:	2850      	cmp	r0, #80	; 0x50
 8004066:	d00e      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 8004068:	d81d      	bhi.n	80040a6 <style_prop_is_cacheble+0x42>
 800406a:	2818      	cmp	r0, #24
 800406c:	d80d      	bhi.n	800408a <style_prop_is_cacheble+0x26>
 800406e:	2815      	cmp	r0, #21
 8004070:	d209      	bcs.n	8004086 <style_prop_is_cacheble+0x22>
 8004072:	2807      	cmp	r0, #7
 8004074:	d804      	bhi.n	8004080 <style_prop_is_cacheble+0x1c>
 8004076:	2804      	cmp	r0, #4
 8004078:	d205      	bcs.n	8004086 <style_prop_is_cacheble+0x22>
 800407a:	3801      	subs	r0, #1
 800407c:	2801      	cmp	r0, #1
 800407e:	e001      	b.n	8004084 <style_prop_is_cacheble+0x20>
 8004080:	3810      	subs	r0, #16
 8004082:	2803      	cmp	r0, #3
 8004084:	d809      	bhi.n	800409a <style_prop_is_cacheble+0x36>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
 8004086:	2001      	movs	r0, #1
            break;
        default:
            return false;
    }
}
 8004088:	4770      	bx	lr
    switch(prop) {
 800408a:	2833      	cmp	r0, #51	; 0x33
 800408c:	d807      	bhi.n	800409e <style_prop_is_cacheble+0x3a>
 800408e:	2830      	cmp	r0, #48	; 0x30
 8004090:	d2f9      	bcs.n	8004086 <style_prop_is_cacheble+0x22>
 8004092:	2820      	cmp	r0, #32
 8004094:	d0f7      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 8004096:	282c      	cmp	r0, #44	; 0x2c
 8004098:	d0f5      	beq.n	8004086 <style_prop_is_cacheble+0x22>
            return false;
 800409a:	2000      	movs	r0, #0
 800409c:	4770      	bx	lr
    switch(prop) {
 800409e:	2840      	cmp	r0, #64	; 0x40
 80040a0:	d0f1      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 80040a2:	2842      	cmp	r0, #66	; 0x42
 80040a4:	e7f8      	b.n	8004098 <style_prop_is_cacheble+0x34>
 80040a6:	28ff      	cmp	r0, #255	; 0xff
 80040a8:	d0ed      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 80040aa:	d80c      	bhi.n	80040c6 <style_prop_is_cacheble+0x62>
 80040ac:	286e      	cmp	r0, #110	; 0x6e
 80040ae:	d0ea      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 80040b0:	d803      	bhi.n	80040ba <style_prop_is_cacheble+0x56>
 80040b2:	2854      	cmp	r0, #84	; 0x54
 80040b4:	d0e7      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 80040b6:	2860      	cmp	r0, #96	; 0x60
 80040b8:	e7ee      	b.n	8004098 <style_prop_is_cacheble+0x34>
 80040ba:	287f      	cmp	r0, #127	; 0x7f
 80040bc:	d0e3      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 80040be:	2891      	cmp	r0, #145	; 0x91
 80040c0:	d0e1      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 80040c2:	2872      	cmp	r0, #114	; 0x72
 80040c4:	e7e8      	b.n	8004098 <style_prop_is_cacheble+0x34>
 80040c6:	f248 0383 	movw	r3, #32899	; 0x8083
 80040ca:	4298      	cmp	r0, r3
 80040cc:	d0db      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 80040ce:	d808      	bhi.n	80040e2 <style_prop_is_cacheble+0x7e>
 80040d0:	f248 030c 	movw	r3, #32780	; 0x800c
 80040d4:	4298      	cmp	r0, r3
 80040d6:	d0d6      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 80040d8:	d3df      	bcc.n	800409a <style_prop_is_cacheble+0x36>
 80040da:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80040de:	3880      	subs	r0, #128	; 0x80
 80040e0:	e7cc      	b.n	800407c <style_prop_is_cacheble+0x18>
 80040e2:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80040e6:	4298      	cmp	r0, r3
 80040e8:	d0cd      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 80040ea:	f248 03ad 	movw	r3, #32941	; 0x80ad
 80040ee:	4298      	cmp	r0, r3
 80040f0:	d0c9      	beq.n	8004086 <style_prop_is_cacheble+0x22>
 80040f2:	f248 038e 	movw	r3, #32910	; 0x808e
 80040f6:	4298      	cmp	r0, r3
 80040f8:	e7ce      	b.n	8004098 <style_prop_is_cacheble+0x34>

080040fa <refresh_children_position>:
{
 80040fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _LV_LL_READ(obj->child_ll, i) {
 80040fe:	1d05      	adds	r5, r0, #4
 8004100:	4628      	mov	r0, r5
{
 8004102:	460e      	mov	r6, r1
 8004104:	4617      	mov	r7, r2
    _LV_LL_READ(obj->child_ll, i) {
 8004106:	f00b f881 	bl	800f20c <_lv_ll_get_head>
 800410a:	4604      	mov	r4, r0
        i->coords.x1 += x_diff;
 800410c:	fa1f f886 	uxth.w	r8, r6
        i->coords.y1 += y_diff;
 8004110:	fa1f f987 	uxth.w	r9, r7
    _LV_LL_READ(obj->child_ll, i) {
 8004114:	b90c      	cbnz	r4, 800411a <refresh_children_position+0x20>
}
 8004116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        i->coords.x1 += x_diff;
 800411a:	8a23      	ldrh	r3, [r4, #16]
        refresh_children_position(i, x_diff, y_diff);
 800411c:	4620      	mov	r0, r4
        i->coords.x1 += x_diff;
 800411e:	4443      	add	r3, r8
 8004120:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 8004122:	8a63      	ldrh	r3, [r4, #18]
        refresh_children_position(i, x_diff, y_diff);
 8004124:	463a      	mov	r2, r7
        i->coords.y1 += y_diff;
 8004126:	444b      	add	r3, r9
 8004128:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
 800412a:	8aa3      	ldrh	r3, [r4, #20]
        refresh_children_position(i, x_diff, y_diff);
 800412c:	4631      	mov	r1, r6
        i->coords.x2 += x_diff;
 800412e:	4443      	add	r3, r8
 8004130:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
 8004132:	8ae3      	ldrh	r3, [r4, #22]
 8004134:	444b      	add	r3, r9
 8004136:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8004138:	f7ff ffdf 	bl	80040fa <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
 800413c:	4621      	mov	r1, r4
 800413e:	4628      	mov	r0, r5
 8004140:	f00b f86a 	bl	800f218 <_lv_ll_get_next>
 8004144:	4604      	mov	r4, r0
 8004146:	e7e5      	b.n	8004114 <refresh_children_position+0x1a>

08004148 <lv_obj_add_state.part.35>:
void lv_obj_set_click(lv_obj_t * obj, bool en)
 8004148:	b508      	push	{r3, lr}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800414a:	4602      	mov	r2, r0
 800414c:	2300      	movs	r3, #0
 800414e:	4802      	ldr	r0, [pc, #8]	; (8004158 <lv_obj_add_state.part.35+0x10>)
 8004150:	f00a ff3e 	bl	800efd0 <lv_debug_log_error>
 8004154:	e7fe      	b.n	8004154 <lv_obj_add_state.part.35+0xc>
 8004156:	bf00      	nop
 8004158:	080158e8 	.word	0x080158e8

0800415c <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 800415c:	3901      	subs	r1, #1
 800415e:	f100 0308 	add.w	r3, r0, #8
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 8004162:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004166:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 800416a:	4298      	cmp	r0, r3
 800416c:	d1f9      	bne.n	8004162 <lv_area_copy+0x6>
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
}
 800416e:	4770      	bx	lr

08004170 <lv_init>:
{
 8004170:	b530      	push	{r4, r5, lr}
    if(lv_initialized) {
 8004172:	4c1a      	ldr	r4, [pc, #104]	; (80041dc <lv_init+0x6c>)
{
 8004174:	b085      	sub	sp, #20
    if(lv_initialized) {
 8004176:	7825      	ldrb	r5, [r4, #0]
 8004178:	bb75      	cbnz	r5, 80041d8 <lv_init+0x68>
    _lv_mem_init();
 800417a:	f00b f9a7 	bl	800f4cc <_lv_mem_init>
    _lv_task_core_init();
 800417e:	f00b fff5 	bl	801016c <_lv_task_core_init>
    _lv_fs_init();
 8004182:	f00a ff3f 	bl	800f004 <_lv_fs_init>
    _lv_anim_core_init();
 8004186:	f00a fb79 	bl	800e87c <_lv_anim_core_init>
    _lv_group_init();
 800418a:	f7fe fc79 	bl	8002a80 <_lv_group_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
 800418e:	2110      	movs	r1, #16
 8004190:	4813      	ldr	r0, [pc, #76]	; (80041e0 <lv_init+0x70>)
 8004192:	f00a fffc 	bl	800f18e <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8004196:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800419a:	4812      	ldr	r0, [pc, #72]	; (80041e4 <lv_init+0x74>)
 800419c:	f00a fff7 	bl	800f18e <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 80041a0:	2160      	movs	r1, #96	; 0x60
 80041a2:	4811      	ldr	r0, [pc, #68]	; (80041e8 <lv_init+0x78>)
 80041a4:	f00a fff3 	bl	800f18e <_lv_ll_init>
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <lv_init+0x7c>)
 80041aa:	462a      	mov	r2, r5
 80041ac:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	f24e 0107 	movw	r1, #57351	; 0xe007
 80041b6:	f04f 00f8 	mov.w	r0, #248	; 0xf8
 80041ba:	f7fc fa45 	bl	8000648 <lv_theme_myown_init>
    lv_theme_set_act(th);
 80041be:	f00c fcad 	bl	8010b1c <lv_theme_set_act>
    _lv_refr_init();
 80041c2:	f003 fae7 	bl	8007794 <_lv_refr_init>
    _lv_indev_init();
 80041c6:	f7fe ff6d 	bl	80030a4 <_lv_indev_init>
    _lv_img_decoder_init();
 80041ca:	f009 fd63 	bl	800dc94 <_lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 80041ce:	2001      	movs	r0, #1
 80041d0:	f009 f952 	bl	800d478 <lv_img_cache_set_size>
    lv_initialized = true;
 80041d4:	2301      	movs	r3, #1
 80041d6:	7023      	strb	r3, [r4, #0]
}
 80041d8:	b005      	add	sp, #20
 80041da:	bd30      	pop	{r4, r5, pc}
 80041dc:	20000180 	.word	0x20000180
 80041e0:	200033e0 	.word	0x200033e0
 80041e4:	2000333c 	.word	0x2000333c
 80041e8:	20003330 	.word	0x20003330
 80041ec:	20000038 	.word	0x20000038

080041f0 <lv_obj_set_ext_click_area>:
{
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	4604      	mov	r4, r0
 80041f4:	460f      	mov	r7, r1
 80041f6:	4615      	mov	r5, r2
 80041f8:	461e      	mov	r6, r3
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80041fa:	f00a fee5 	bl	800efc8 <lv_debug_check_null>
 80041fe:	b928      	cbnz	r0, 800420c <lv_obj_set_ext_click_area+0x1c>
 8004200:	4603      	mov	r3, r0
 8004202:	4622      	mov	r2, r4
 8004204:	4808      	ldr	r0, [pc, #32]	; (8004228 <lv_obj_set_ext_click_area+0x38>)
 8004206:	f00a fee3 	bl	800efd0 <lv_debug_log_error>
 800420a:	e7fe      	b.n	800420a <lv_obj_set_ext_click_area+0x1a>
    obj->ext_click_pad_ver = LV_MATH_MAX(top, bottom);
 800420c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    obj->ext_click_pad_hor = LV_MATH_MAX(left, right);
 8004210:	42bd      	cmp	r5, r7
 8004212:	bfb8      	it	lt
 8004214:	463d      	movlt	r5, r7
    obj->ext_click_pad_ver = LV_MATH_MAX(top, bottom);
 8004216:	42b2      	cmp	r2, r6
 8004218:	4613      	mov	r3, r2
 800421a:	bfb8      	it	lt
 800421c:	4633      	movlt	r3, r6
    obj->ext_click_pad_hor = LV_MATH_MAX(left, right);
 800421e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    obj->ext_click_pad_ver = LV_MATH_MAX(top, bottom);
 8004222:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 8004226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004228:	080158e8 	.word	0x080158e8

0800422c <lv_obj_set_click>:
{
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4604      	mov	r4, r0
 8004230:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004232:	f00a fec9 	bl	800efc8 <lv_debug_check_null>
 8004236:	b910      	cbnz	r0, 800423e <lv_obj_set_click+0x12>
 8004238:	4620      	mov	r0, r4
 800423a:	f7ff ff85 	bl	8004148 <lv_obj_add_state.part.35>
    obj->click = (en == true ? 1 : 0);
 800423e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004242:	f365 0300 	bfi	r3, r5, #0, #1
 8004246:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800424a:	bd38      	pop	{r3, r4, r5, pc}

0800424c <lv_obj_set_drag>:
{
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	4604      	mov	r4, r0
 8004250:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004252:	f00a feb9 	bl	800efc8 <lv_debug_check_null>
 8004256:	b910      	cbnz	r0, 800425e <lv_obj_set_drag+0x12>
 8004258:	4620      	mov	r0, r4
 800425a:	f7ff ff75 	bl	8004148 <lv_obj_add_state.part.35>
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
 800425e:	b11d      	cbz	r5, 8004268 <lv_obj_set_drag+0x1c>
 8004260:	2101      	movs	r1, #1
 8004262:	4620      	mov	r0, r4
 8004264:	f7ff ffe2 	bl	800422c <lv_obj_set_click>
    obj->drag = (en == true ? 1 : 0);
 8004268:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800426c:	f365 0341 	bfi	r3, r5, #1, #1
 8004270:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004274:	bd38      	pop	{r3, r4, r5, pc}
	...

08004278 <lv_obj_set_drag_throw>:
{
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	4604      	mov	r4, r0
 800427c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800427e:	f00a fea3 	bl	800efc8 <lv_debug_check_null>
 8004282:	4603      	mov	r3, r0
 8004284:	b920      	cbnz	r0, 8004290 <lv_obj_set_drag_throw+0x18>
 8004286:	4622      	mov	r2, r4
 8004288:	4805      	ldr	r0, [pc, #20]	; (80042a0 <lv_obj_set_drag_throw+0x28>)
 800428a:	f00a fea1 	bl	800efd0 <lv_debug_log_error>
 800428e:	e7fe      	b.n	800428e <lv_obj_set_drag_throw+0x16>
    obj->drag_throw = (en == true ? 1 : 0);
 8004290:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004294:	f365 0382 	bfi	r3, r5, #2, #1
 8004298:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800429c:	bd38      	pop	{r3, r4, r5, pc}
 800429e:	bf00      	nop
 80042a0:	080158e8 	.word	0x080158e8

080042a4 <lv_obj_set_drag_parent>:
{
 80042a4:	b538      	push	{r3, r4, r5, lr}
 80042a6:	4604      	mov	r4, r0
 80042a8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80042aa:	f00a fe8d 	bl	800efc8 <lv_debug_check_null>
 80042ae:	4603      	mov	r3, r0
 80042b0:	b920      	cbnz	r0, 80042bc <lv_obj_set_drag_parent+0x18>
 80042b2:	4622      	mov	r2, r4
 80042b4:	4805      	ldr	r0, [pc, #20]	; (80042cc <lv_obj_set_drag_parent+0x28>)
 80042b6:	f00a fe8b 	bl	800efd0 <lv_debug_log_error>
 80042ba:	e7fe      	b.n	80042ba <lv_obj_set_drag_parent+0x16>
    obj->drag_parent = (en == true ? 1 : 0);
 80042bc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80042c0:	f365 03c3 	bfi	r3, r5, #3, #1
 80042c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
 80042ca:	bf00      	nop
 80042cc:	080158e8 	.word	0x080158e8

080042d0 <lv_obj_add_protect>:
{
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4604      	mov	r4, r0
 80042d4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80042d6:	f00a fe77 	bl	800efc8 <lv_debug_check_null>
 80042da:	4603      	mov	r3, r0
 80042dc:	b920      	cbnz	r0, 80042e8 <lv_obj_add_protect+0x18>
 80042de:	4622      	mov	r2, r4
 80042e0:	4804      	ldr	r0, [pc, #16]	; (80042f4 <lv_obj_add_protect+0x24>)
 80042e2:	f00a fe75 	bl	800efd0 <lv_debug_log_error>
 80042e6:	e7fe      	b.n	80042e6 <lv_obj_add_protect+0x16>
    obj->protect |= prot;
 80042e8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80042ec:	430d      	orrs	r5, r1
 80042ee:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
 80042f4:	080158e8 	.word	0x080158e8

080042f8 <lv_obj_clear_protect>:
{
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4604      	mov	r4, r0
 80042fc:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80042fe:	f00a fe63 	bl	800efc8 <lv_debug_check_null>
 8004302:	4603      	mov	r3, r0
 8004304:	b920      	cbnz	r0, 8004310 <lv_obj_clear_protect+0x18>
 8004306:	4622      	mov	r2, r4
 8004308:	4805      	ldr	r0, [pc, #20]	; (8004320 <lv_obj_clear_protect+0x28>)
 800430a:	f00a fe61 	bl	800efd0 <lv_debug_log_error>
 800430e:	e7fe      	b.n	800430e <lv_obj_clear_protect+0x16>
    obj->protect &= prot;
 8004310:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004314:	ea23 0105 	bic.w	r1, r3, r5
 8004318:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
}
 800431c:	bd38      	pop	{r3, r4, r5, pc}
 800431e:	bf00      	nop
 8004320:	080158e8 	.word	0x080158e8

08004324 <lv_obj_set_event_cb>:
{
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4604      	mov	r4, r0
 8004328:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800432a:	f00a fe4d 	bl	800efc8 <lv_debug_check_null>
 800432e:	4603      	mov	r3, r0
 8004330:	b920      	cbnz	r0, 800433c <lv_obj_set_event_cb+0x18>
 8004332:	4622      	mov	r2, r4
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <lv_obj_set_event_cb+0x1c>)
 8004336:	f00a fe4b 	bl	800efd0 <lv_debug_log_error>
 800433a:	e7fe      	b.n	800433a <lv_obj_set_event_cb+0x16>
    obj->event_cb = event_cb;
 800433c:	61a5      	str	r5, [r4, #24]
}
 800433e:	bd38      	pop	{r3, r4, r5, pc}
 8004340:	080158e8 	.word	0x080158e8

08004344 <lv_event_send_func>:
{
 8004344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	4681      	mov	r9, r0
 800434a:	4617      	mov	r7, r2
 800434c:	4698      	mov	r8, r3
    if(obj != NULL) {
 800434e:	460c      	mov	r4, r1
 8004350:	b149      	cbz	r1, 8004366 <lv_event_send_func+0x22>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004352:	4608      	mov	r0, r1
 8004354:	f00a fe38 	bl	800efc8 <lv_debug_check_null>
 8004358:	4603      	mov	r3, r0
 800435a:	b920      	cbnz	r0, 8004366 <lv_event_send_func+0x22>
 800435c:	4622      	mov	r2, r4
 800435e:	481f      	ldr	r0, [pc, #124]	; (80043dc <lv_event_send_func+0x98>)
 8004360:	f00a fe36 	bl	800efd0 <lv_debug_log_error>
 8004364:	e7fe      	b.n	8004364 <lv_event_send_func+0x20>
    event_temp_data.deleted = false;
 8004366:	2300      	movs	r3, #0
    if(event_temp_data_head) {
 8004368:	4d1d      	ldr	r5, [pc, #116]	; (80043e0 <lv_event_send_func+0x9c>)
    event_temp_data.deleted = false;
 800436a:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
 800436e:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
 8004370:	682b      	ldr	r3, [r5, #0]
    event_temp_data.obj     = obj;
 8004372:	9401      	str	r4, [sp, #4]
    if(event_temp_data_head) {
 8004374:	b103      	cbz	r3, 8004378 <lv_event_send_func+0x34>
        event_temp_data.prev = event_temp_data_head;
 8004376:	9303      	str	r3, [sp, #12]
    const void * event_act_data_save = event_act_data;
 8004378:	4e1a      	ldr	r6, [pc, #104]	; (80043e4 <lv_event_send_func+0xa0>)
    event_temp_data_head = &event_temp_data;
 800437a:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
 800437c:	f8d6 a000 	ldr.w	sl, [r6]
    event_temp_data_head = &event_temp_data;
 8004380:	602b      	str	r3, [r5, #0]
    event_act_data                   = data;
 8004382:	f8c6 8000 	str.w	r8, [r6]
    lv_indev_t * indev_act = lv_indev_get_act();
 8004386:	f7fe fe91 	bl	80030ac <lv_indev_get_act>
    if(indev_act) {
 800438a:	b118      	cbz	r0, 8004394 <lv_event_send_func+0x50>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 800438c:	6883      	ldr	r3, [r0, #8]
 800438e:	b10b      	cbz	r3, 8004394 <lv_event_send_func+0x50>
 8004390:	4639      	mov	r1, r7
 8004392:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 8004394:	f1b9 0f00 	cmp.w	r9, #0
 8004398:	d002      	beq.n	80043a0 <lv_event_send_func+0x5c>
 800439a:	4639      	mov	r1, r7
 800439c:	4620      	mov	r0, r4
 800439e:	47c8      	blx	r9
    event_temp_data_head = event_temp_data_head->prev;
 80043a0:	682b      	ldr	r3, [r5, #0]
    event_act_data = event_act_data_save;
 80043a2:	f8c6 a000 	str.w	sl, [r6]
    event_temp_data_head = event_temp_data_head->prev;
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	602b      	str	r3, [r5, #0]
    if(event_temp_data.deleted) {
 80043aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80043ae:	b983      	cbnz	r3, 80043d2 <lv_event_send_func+0x8e>
    if(obj) {
 80043b0:	b18c      	cbz	r4, 80043d6 <lv_event_send_func+0x92>
        if(obj->parent_event && obj->parent) {
 80043b2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80043b6:	065a      	lsls	r2, r3, #25
 80043b8:	d50d      	bpl.n	80043d6 <lv_event_send_func+0x92>
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	b158      	cbz	r0, 80043d6 <lv_event_send_func+0x92>
            lv_res_t res = lv_event_send(obj->parent, event, data);
 80043be:	4642      	mov	r2, r8
 80043c0:	4639      	mov	r1, r7
 80043c2:	f000 f811 	bl	80043e8 <lv_event_send>
        return LV_RES_INV;
 80043c6:	1e43      	subs	r3, r0, #1
 80043c8:	4258      	negs	r0, r3
 80043ca:	4158      	adcs	r0, r3
}
 80043cc:	b004      	add	sp, #16
 80043ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
 80043d2:	2000      	movs	r0, #0
 80043d4:	e7fa      	b.n	80043cc <lv_event_send_func+0x88>
    return LV_RES_OK;
 80043d6:	2001      	movs	r0, #1
 80043d8:	e7f8      	b.n	80043cc <lv_event_send_func+0x88>
 80043da:	bf00      	nop
 80043dc:	080158e8 	.word	0x080158e8
 80043e0:	2000017c 	.word	0x2000017c
 80043e4:	20000178 	.word	0x20000178

080043e8 <lv_event_send>:
{
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	460d      	mov	r5, r1
 80043ec:	4616      	mov	r6, r2
    if(obj == NULL) return LV_RES_OK;
 80043ee:	4604      	mov	r4, r0
 80043f0:	b180      	cbz	r0, 8004414 <lv_event_send+0x2c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80043f2:	f00a fde9 	bl	800efc8 <lv_debug_check_null>
 80043f6:	b928      	cbnz	r0, 8004404 <lv_event_send+0x1c>
 80043f8:	4603      	mov	r3, r0
 80043fa:	4622      	mov	r2, r4
 80043fc:	4806      	ldr	r0, [pc, #24]	; (8004418 <lv_event_send+0x30>)
 80043fe:	f00a fde7 	bl	800efd0 <lv_debug_log_error>
 8004402:	e7fe      	b.n	8004402 <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8004404:	4633      	mov	r3, r6
 8004406:	462a      	mov	r2, r5
 8004408:	4621      	mov	r1, r4
 800440a:	69a0      	ldr	r0, [r4, #24]
}
 800440c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8004410:	f7ff bf98 	b.w	8004344 <lv_event_send_func>
}
 8004414:	2001      	movs	r0, #1
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	080158e8 	.word	0x080158e8

0800441c <lv_event_get_data>:
}
 800441c:	4b01      	ldr	r3, [pc, #4]	; (8004424 <lv_event_get_data+0x8>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000178 	.word	0x20000178

08004428 <lv_obj_set_signal_cb>:
{
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4604      	mov	r4, r0
 800442c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800442e:	f00a fdcb 	bl	800efc8 <lv_debug_check_null>
 8004432:	4603      	mov	r3, r0
 8004434:	b920      	cbnz	r0, 8004440 <lv_obj_set_signal_cb+0x18>
 8004436:	4622      	mov	r2, r4
 8004438:	4802      	ldr	r0, [pc, #8]	; (8004444 <lv_obj_set_signal_cb+0x1c>)
 800443a:	f00a fdc9 	bl	800efd0 <lv_debug_log_error>
 800443e:	e7fe      	b.n	800443e <lv_obj_set_signal_cb+0x16>
    obj->signal_cb = signal_cb;
 8004440:	61e5      	str	r5, [r4, #28]
}
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	080158e8 	.word	0x080158e8

08004448 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
 8004448:	b110      	cbz	r0, 8004450 <lv_signal_send+0x8>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 800444a:	69c3      	ldr	r3, [r0, #28]
 800444c:	b103      	cbz	r3, 8004450 <lv_signal_send+0x8>
 800444e:	4718      	bx	r3
}
 8004450:	2001      	movs	r0, #1
 8004452:	4770      	bx	lr

08004454 <lv_obj_set_design_cb>:
{
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4604      	mov	r4, r0
 8004458:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800445a:	f00a fdb5 	bl	800efc8 <lv_debug_check_null>
 800445e:	4603      	mov	r3, r0
 8004460:	b920      	cbnz	r0, 800446c <lv_obj_set_design_cb+0x18>
 8004462:	4622      	mov	r2, r4
 8004464:	4802      	ldr	r0, [pc, #8]	; (8004470 <lv_obj_set_design_cb+0x1c>)
 8004466:	f00a fdb3 	bl	800efd0 <lv_debug_log_error>
 800446a:	e7fe      	b.n	800446a <lv_obj_set_design_cb+0x16>
    obj->design_cb = design_cb;
 800446c:	6225      	str	r5, [r4, #32]
}
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	080158e8 	.word	0x080158e8

08004474 <lv_obj_allocate_ext_attr>:
{
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	4604      	mov	r4, r0
 8004478:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800447a:	f00a fda5 	bl	800efc8 <lv_debug_check_null>
 800447e:	4603      	mov	r3, r0
 8004480:	b920      	cbnz	r0, 800448c <lv_obj_allocate_ext_attr+0x18>
 8004482:	4622      	mov	r2, r4
 8004484:	4805      	ldr	r0, [pc, #20]	; (800449c <lv_obj_allocate_ext_attr+0x28>)
 8004486:	f00a fda3 	bl	800efd0 <lv_debug_log_error>
 800448a:	e7fe      	b.n	800448a <lv_obj_allocate_ext_attr+0x16>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
 800448c:	4629      	mov	r1, r5
 800448e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004490:	f00b f9f8 	bl	800f884 <lv_mem_realloc>
    if(new_ext == NULL) return NULL;
 8004494:	b100      	cbz	r0, 8004498 <lv_obj_allocate_ext_attr+0x24>
    obj->ext_attr = new_ext;
 8004496:	6260      	str	r0, [r4, #36]	; 0x24
}
 8004498:	bd38      	pop	{r3, r4, r5, pc}
 800449a:	bf00      	nop
 800449c:	080158e8 	.word	0x080158e8

080044a0 <lv_obj_refresh_ext_draw_pad>:
{
 80044a0:	b510      	push	{r4, lr}
 80044a2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80044a4:	f00a fd90 	bl	800efc8 <lv_debug_check_null>
 80044a8:	b910      	cbnz	r0, 80044b0 <lv_obj_refresh_ext_draw_pad+0x10>
 80044aa:	4620      	mov	r0, r4
 80044ac:	f7ff fe4c 	bl	8004148 <lv_obj_add_state.part.35>
    obj->ext_draw_pad = 0;
 80044b0:	2200      	movs	r2, #0
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 80044b2:	69e3      	ldr	r3, [r4, #28]
    obj->ext_draw_pad = 0;
 80044b4:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 80044b6:	4620      	mov	r0, r4
}
 80044b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 80044bc:	2106      	movs	r1, #6
 80044be:	4718      	bx	r3

080044c0 <lv_obj_get_parent>:
{
 80044c0:	b510      	push	{r4, lr}
 80044c2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80044c4:	f00a fd80 	bl	800efc8 <lv_debug_check_null>
 80044c8:	b910      	cbnz	r0, 80044d0 <lv_obj_get_parent+0x10>
 80044ca:	4620      	mov	r0, r4
 80044cc:	f7ff fe3c 	bl	8004148 <lv_obj_add_state.part.35>
}
 80044d0:	6820      	ldr	r0, [r4, #0]
 80044d2:	bd10      	pop	{r4, pc}

080044d4 <lv_obj_get_screen>:
{
 80044d4:	b510      	push	{r4, lr}
 80044d6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80044d8:	f00a fd76 	bl	800efc8 <lv_debug_check_null>
 80044dc:	b918      	cbnz	r0, 80044e6 <lv_obj_get_screen+0x12>
 80044de:	4620      	mov	r0, r4
 80044e0:	f7ff fe32 	bl	8004148 <lv_obj_add_state.part.35>
 80044e4:	4604      	mov	r4, r0
        par   = lv_obj_get_parent(act_p);
 80044e6:	4620      	mov	r0, r4
 80044e8:	f7ff ffea 	bl	80044c0 <lv_obj_get_parent>
    } while(par != NULL);
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d1f9      	bne.n	80044e4 <lv_obj_get_screen+0x10>
}
 80044f0:	4620      	mov	r0, r4
 80044f2:	bd10      	pop	{r4, pc}

080044f4 <lv_obj_get_disp>:
{
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80044f8:	f00a fd66 	bl	800efc8 <lv_debug_check_null>
 80044fc:	b910      	cbnz	r0, 8004504 <lv_obj_get_disp+0x10>
 80044fe:	4628      	mov	r0, r5
 8004500:	f7ff fe22 	bl	8004148 <lv_obj_add_state.part.35>
    if(obj->parent == NULL)
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	b11b      	cbz	r3, 8004510 <lv_obj_get_disp+0x1c>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
 8004508:	4628      	mov	r0, r5
 800450a:	f7ff ffe3 	bl	80044d4 <lv_obj_get_screen>
 800450e:	4605      	mov	r5, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 8004510:	480d      	ldr	r0, [pc, #52]	; (8004548 <lv_obj_get_disp+0x54>)
 8004512:	f00a fe7b 	bl	800f20c <_lv_ll_get_head>
 8004516:	4604      	mov	r4, r0
 8004518:	4f0b      	ldr	r7, [pc, #44]	; (8004548 <lv_obj_get_disp+0x54>)
 800451a:	b90c      	cbnz	r4, 8004520 <lv_obj_get_disp+0x2c>
}
 800451c:	4620      	mov	r0, r4
 800451e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, s) {
 8004520:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8004524:	4630      	mov	r0, r6
 8004526:	f00a fe71 	bl	800f20c <_lv_ll_get_head>
 800452a:	b928      	cbnz	r0, 8004538 <lv_obj_get_disp+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 800452c:	4621      	mov	r1, r4
 800452e:	4638      	mov	r0, r7
 8004530:	f00a fe72 	bl	800f218 <_lv_ll_get_next>
 8004534:	4604      	mov	r4, r0
 8004536:	e7f0      	b.n	800451a <lv_obj_get_disp+0x26>
            if(s == scr) return d;
 8004538:	4285      	cmp	r5, r0
 800453a:	d0ef      	beq.n	800451c <lv_obj_get_disp+0x28>
        _LV_LL_READ(d->scr_ll, s) {
 800453c:	4601      	mov	r1, r0
 800453e:	4630      	mov	r0, r6
 8004540:	f00a fe6a 	bl	800f218 <_lv_ll_get_next>
 8004544:	e7f1      	b.n	800452a <lv_obj_get_disp+0x36>
 8004546:	bf00      	nop
 8004548:	2000333c 	.word	0x2000333c

0800454c <lv_obj_get_child>:
{
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4604      	mov	r4, r0
 8004550:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004552:	f00a fd39 	bl	800efc8 <lv_debug_check_null>
 8004556:	b910      	cbnz	r0, 800455e <lv_obj_get_child+0x12>
 8004558:	4620      	mov	r0, r4
 800455a:	f7ff fdf5 	bl	8004148 <lv_obj_add_state.part.35>
 800455e:	1d20      	adds	r0, r4, #4
    if(child == NULL) {
 8004560:	b91d      	cbnz	r5, 800456a <lv_obj_get_child+0x1e>
}
 8004562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        result = _lv_ll_get_head(&obj->child_ll);
 8004566:	f00a be51 	b.w	800f20c <_lv_ll_get_head>
        result = _lv_ll_get_next(&obj->child_ll, child);
 800456a:	4629      	mov	r1, r5
}
 800456c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        result = _lv_ll_get_next(&obj->child_ll, child);
 8004570:	f00a be52 	b.w	800f218 <_lv_ll_get_next>

08004574 <lv_obj_get_coords>:
{
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4604      	mov	r4, r0
 8004578:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800457a:	f00a fd25 	bl	800efc8 <lv_debug_check_null>
 800457e:	4603      	mov	r3, r0
 8004580:	b920      	cbnz	r0, 800458c <lv_obj_get_coords+0x18>
 8004582:	4622      	mov	r2, r4
 8004584:	4805      	ldr	r0, [pc, #20]	; (800459c <lv_obj_get_coords+0x28>)
 8004586:	f00a fd23 	bl	800efd0 <lv_debug_log_error>
 800458a:	e7fe      	b.n	800458a <lv_obj_get_coords+0x16>
    lv_area_copy(cords_p, &obj->coords);
 800458c:	f104 0110 	add.w	r1, r4, #16
 8004590:	4628      	mov	r0, r5
}
 8004592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_area_copy(cords_p, &obj->coords);
 8004596:	f7ff bde1 	b.w	800415c <lv_area_copy>
 800459a:	bf00      	nop
 800459c:	080158e8 	.word	0x080158e8

080045a0 <lv_obj_get_x>:
{
 80045a0:	b510      	push	{r4, lr}
 80045a2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80045a4:	f00a fd10 	bl	800efc8 <lv_debug_check_null>
 80045a8:	4603      	mov	r3, r0
 80045aa:	b920      	cbnz	r0, 80045b6 <lv_obj_get_x+0x16>
 80045ac:	4622      	mov	r2, r4
 80045ae:	4808      	ldr	r0, [pc, #32]	; (80045d0 <lv_obj_get_x+0x30>)
 80045b0:	f00a fd0e 	bl	800efd0 <lv_debug_log_error>
 80045b4:	e7fe      	b.n	80045b4 <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80045b6:	4620      	mov	r0, r4
 80045b8:	f7ff ff82 	bl	80044c0 <lv_obj_get_parent>
    if(parent) {
 80045bc:	b120      	cbz	r0, 80045c8 <lv_obj_get_x+0x28>
        rel_x             = obj->coords.x1 - parent->coords.x1;
 80045be:	8a23      	ldrh	r3, [r4, #16]
 80045c0:	8a00      	ldrh	r0, [r0, #16]
 80045c2:	1a18      	subs	r0, r3, r0
 80045c4:	b200      	sxth	r0, r0
}
 80045c6:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
 80045c8:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 80045cc:	e7fb      	b.n	80045c6 <lv_obj_get_x+0x26>
 80045ce:	bf00      	nop
 80045d0:	080158e8 	.word	0x080158e8

080045d4 <lv_obj_get_y>:
{
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80045d8:	f00a fcf6 	bl	800efc8 <lv_debug_check_null>
 80045dc:	4603      	mov	r3, r0
 80045de:	b920      	cbnz	r0, 80045ea <lv_obj_get_y+0x16>
 80045e0:	4622      	mov	r2, r4
 80045e2:	4808      	ldr	r0, [pc, #32]	; (8004604 <lv_obj_get_y+0x30>)
 80045e4:	f00a fcf4 	bl	800efd0 <lv_debug_log_error>
 80045e8:	e7fe      	b.n	80045e8 <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80045ea:	4620      	mov	r0, r4
 80045ec:	f7ff ff68 	bl	80044c0 <lv_obj_get_parent>
    if(parent) {
 80045f0:	b120      	cbz	r0, 80045fc <lv_obj_get_y+0x28>
        rel_y             = obj->coords.y1 - parent->coords.y1;
 80045f2:	8a63      	ldrh	r3, [r4, #18]
 80045f4:	8a40      	ldrh	r0, [r0, #18]
 80045f6:	1a18      	subs	r0, r3, r0
 80045f8:	b200      	sxth	r0, r0
}
 80045fa:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
 80045fc:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 8004600:	e7fb      	b.n	80045fa <lv_obj_get_y+0x26>
 8004602:	bf00      	nop
 8004604:	080158e8 	.word	0x080158e8

08004608 <lv_obj_get_width>:
{
 8004608:	b510      	push	{r4, lr}
 800460a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800460c:	f00a fcdc 	bl	800efc8 <lv_debug_check_null>
 8004610:	b910      	cbnz	r0, 8004618 <lv_obj_get_width+0x10>
 8004612:	4620      	mov	r0, r4
 8004614:	f7ff fd98 	bl	8004148 <lv_obj_add_state.part.35>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004618:	8aa0      	ldrh	r0, [r4, #20]
 800461a:	8a23      	ldrh	r3, [r4, #16]
 800461c:	3001      	adds	r0, #1
 800461e:	1ac0      	subs	r0, r0, r3
}
 8004620:	b200      	sxth	r0, r0
 8004622:	bd10      	pop	{r4, pc}

08004624 <lv_obj_get_height>:
{
 8004624:	b510      	push	{r4, lr}
 8004626:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004628:	f00a fcce 	bl	800efc8 <lv_debug_check_null>
 800462c:	b910      	cbnz	r0, 8004634 <lv_obj_get_height+0x10>
 800462e:	4620      	mov	r0, r4
 8004630:	f7ff fd8a 	bl	8004148 <lv_obj_add_state.part.35>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004634:	8ae0      	ldrh	r0, [r4, #22]
 8004636:	8a63      	ldrh	r3, [r4, #18]
 8004638:	3001      	adds	r0, #1
 800463a:	1ac0      	subs	r0, r0, r3
}
 800463c:	b200      	sxth	r0, r0
 800463e:	bd10      	pop	{r4, pc}

08004640 <lv_obj_get_auto_realign>:
{
 8004640:	b510      	push	{r4, lr}
 8004642:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004644:	f00a fcc0 	bl	800efc8 <lv_debug_check_null>
 8004648:	4603      	mov	r3, r0
 800464a:	b920      	cbnz	r0, 8004656 <lv_obj_get_auto_realign+0x16>
 800464c:	4622      	mov	r2, r4
 800464e:	4804      	ldr	r0, [pc, #16]	; (8004660 <lv_obj_get_auto_realign+0x20>)
 8004650:	f00a fcbe 	bl	800efd0 <lv_debug_log_error>
 8004654:	e7fe      	b.n	8004654 <lv_obj_get_auto_realign+0x14>
    return obj->realign.auto_realign ? true : false;
 8004656:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
}
 800465a:	f000 0001 	and.w	r0, r0, #1
 800465e:	bd10      	pop	{r4, pc}
 8004660:	080158e8 	.word	0x080158e8

08004664 <lv_obj_get_style_list>:
{
 8004664:	b513      	push	{r0, r1, r4, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8004666:	b911      	cbnz	r1, 800466e <lv_obj_get_style_list+0xa>
 8004668:	3028      	adds	r0, #40	; 0x28
}
 800466a:	b002      	add	sp, #8
 800466c:	bd10      	pop	{r4, pc}
    info.result = NULL;
 800466e:	2400      	movs	r4, #0
    info.part = part;
 8004670:	f88d 1000 	strb.w	r1, [sp]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
 8004674:	466a      	mov	r2, sp
 8004676:	2108      	movs	r1, #8
    info.result = NULL;
 8004678:	9401      	str	r4, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
 800467a:	f7ff fee5 	bl	8004448 <lv_signal_send>
    if(res != LV_RES_OK) return NULL;
 800467e:	2801      	cmp	r0, #1
    return info.result;
 8004680:	bf0c      	ite	eq
 8004682:	9801      	ldreq	r0, [sp, #4]
    if(res != LV_RES_OK) return NULL;
 8004684:	4620      	movne	r0, r4
 8004686:	e7f0      	b.n	800466a <lv_obj_get_style_list+0x6>

08004688 <trans_del>:
{
 8004688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800468c:	4680      	mov	r8, r0
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800468e:	4819      	ldr	r0, [pc, #100]	; (80046f4 <trans_del+0x6c>)
{
 8004690:	460d      	mov	r5, r1
 8004692:	4616      	mov	r6, r2
 8004694:	4699      	mov	r9, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8004696:	f00a fdbc 	bl	800f212 <_lv_ll_get_tail>
 800469a:	4604      	mov	r4, r0
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800469c:	4f15      	ldr	r7, [pc, #84]	; (80046f4 <trans_del+0x6c>)
    while(tr != NULL) {
 800469e:	b90c      	cbnz	r4, 80046a4 <trans_del+0x1c>
}
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(tr == tr_limit) break;
 80046a4:	454c      	cmp	r4, r9
 80046a6:	d0fb      	beq.n	80046a0 <trans_del+0x18>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80046a8:	4621      	mov	r1, r4
 80046aa:	4638      	mov	r0, r7
 80046ac:	f00a fdb9 	bl	800f222 <_lv_ll_get_prev>
 80046b0:	4682      	mov	sl, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
 80046b2:	6820      	ldr	r0, [r4, #0]
 80046b4:	4540      	cmp	r0, r8
 80046b6:	d11b      	bne.n	80046f0 <trans_del+0x68>
 80046b8:	79a1      	ldrb	r1, [r4, #6]
 80046ba:	42a9      	cmp	r1, r5
 80046bc:	d001      	beq.n	80046c2 <trans_del+0x3a>
 80046be:	2dff      	cmp	r5, #255	; 0xff
 80046c0:	d116      	bne.n	80046f0 <trans_del+0x68>
 80046c2:	88a3      	ldrh	r3, [r4, #4]
 80046c4:	42b3      	cmp	r3, r6
 80046c6:	d001      	beq.n	80046cc <trans_del+0x44>
 80046c8:	2eff      	cmp	r6, #255	; 0xff
 80046ca:	d111      	bne.n	80046f0 <trans_del+0x68>
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 80046cc:	f7ff ffca 	bl	8004664 <lv_obj_get_style_list>
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 80046d0:	f003 fea7 	bl	8008422 <_lv_style_list_get_transition_style>
            lv_style_remove_prop(style_trans, tr->prop);
 80046d4:	88a1      	ldrh	r1, [r4, #4]
 80046d6:	f003 fcd8 	bl	800808a <lv_style_remove_prop>
            lv_anim_del(tr, NULL);
 80046da:	2100      	movs	r1, #0
 80046dc:	4620      	mov	r0, r4
 80046de:	f00a f90f 	bl	800e900 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80046e2:	4638      	mov	r0, r7
 80046e4:	4621      	mov	r1, r4
 80046e6:	f00a fdce 	bl	800f286 <_lv_ll_remove>
            lv_mem_free(tr);
 80046ea:	4620      	mov	r0, r4
 80046ec:	f00a ff4e 	bl	800f58c <lv_mem_free>
{
 80046f0:	4654      	mov	r4, sl
 80046f2:	e7d4      	b.n	800469e <trans_del+0x16>
 80046f4:	200033e0 	.word	0x200033e0

080046f8 <lv_obj_clean_style_list>:
{
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4604      	mov	r4, r0
 80046fc:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
 80046fe:	f7ff ffb1 	bl	8004664 <lv_obj_get_style_list>
    if(style_dsc == NULL) {
 8004702:	b148      	cbz	r0, 8004718 <lv_obj_clean_style_list+0x20>
    _lv_style_list_reset(style_dsc);
 8004704:	f003 fe95 	bl	8008432 <_lv_style_list_reset>
    trans_del(obj, part, 0xFF, NULL);
 8004708:	4629      	mov	r1, r5
 800470a:	4620      	mov	r0, r4
}
 800470c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    trans_del(obj, part, 0xFF, NULL);
 8004710:	2300      	movs	r3, #0
 8004712:	22ff      	movs	r2, #255	; 0xff
 8004714:	f7ff bfb8 	b.w	8004688 <trans_del>
}
 8004718:	bd70      	pop	{r4, r5, r6, pc}

0800471a <_lv_obj_disable_style_caching>:
{
 800471a:	b570      	push	{r4, r5, r6, lr}
 800471c:	4606      	mov	r6, r0
 800471e:	460d      	mov	r5, r1
 8004720:	2400      	movs	r4, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8004722:	b2e1      	uxtb	r1, r4
 8004724:	4630      	mov	r0, r6
 8004726:	f7ff ff9d 	bl	8004664 <lv_obj_get_style_list>
        if(list == NULL) break;
 800472a:	b970      	cbnz	r0, 800474a <_lv_obj_disable_style_caching+0x30>
{
 800472c:	2440      	movs	r4, #64	; 0x40
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800472e:	4621      	mov	r1, r4
 8004730:	4630      	mov	r0, r6
 8004732:	f7ff ff97 	bl	8004664 <lv_obj_get_style_list>
        if(list == NULL) break;
 8004736:	b138      	cbz	r0, 8004748 <_lv_obj_disable_style_caching+0x2e>
        list->ignore_cache = dis;
 8004738:	7943      	ldrb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 800473a:	3401      	adds	r4, #1
 800473c:	b2e4      	uxtb	r4, r4
        list->ignore_cache = dis;
 800473e:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8004742:	2cff      	cmp	r4, #255	; 0xff
        list->ignore_cache = dis;
 8004744:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8004746:	d1f2      	bne.n	800472e <_lv_obj_disable_style_caching+0x14>
}
 8004748:	bd70      	pop	{r4, r5, r6, pc}
        list->ignore_cache = dis;
 800474a:	7943      	ldrb	r3, [r0, #5]
 800474c:	3401      	adds	r4, #1
 800474e:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8004752:	2c40      	cmp	r4, #64	; 0x40
        list->ignore_cache = dis;
 8004754:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8004756:	d1e4      	bne.n	8004722 <_lv_obj_disable_style_caching+0x8>
 8004758:	e7e8      	b.n	800472c <_lv_obj_disable_style_caching+0x12>
	...

0800475c <trans_anim_ready_cb>:
{
 800475c:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
 800475e:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8004760:	4816      	ldr	r0, [pc, #88]	; (80047bc <trans_anim_ready_cb+0x60>)
 8004762:	f00a fd53 	bl	800f20c <_lv_ll_get_head>
    bool running = false;
 8004766:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8004768:	4e14      	ldr	r6, [pc, #80]	; (80047bc <trans_anim_ready_cb+0x60>)
 800476a:	b990      	cbnz	r0, 8004792 <trans_anim_ready_cb+0x36>
    if(!running) {
 800476c:	b945      	cbnz	r5, 8004780 <trans_anim_ready_cb+0x24>
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 800476e:	79a1      	ldrb	r1, [r4, #6]
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	f7ff ff77 	bl	8004664 <lv_obj_get_style_list>
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 8004776:	f003 fe54 	bl	8008422 <_lv_style_list_get_transition_style>
        lv_style_remove_prop(style_trans, tr->prop);
 800477a:	88a1      	ldrh	r1, [r4, #4]
 800477c:	f003 fc85 	bl	800808a <lv_style_remove_prop>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8004780:	4621      	mov	r1, r4
 8004782:	480e      	ldr	r0, [pc, #56]	; (80047bc <trans_anim_ready_cb+0x60>)
 8004784:	f00a fd7f 	bl	800f286 <_lv_ll_remove>
    lv_mem_free(tr);
 8004788:	4620      	mov	r0, r4
}
 800478a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_mem_free(tr);
 800478e:	f00a befd 	b.w	800f58c <lv_mem_free>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
 8004792:	42a0      	cmp	r0, r4
 8004794:	d00c      	beq.n	80047b0 <trans_anim_ready_cb+0x54>
 8004796:	6802      	ldr	r2, [r0, #0]
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d108      	bne.n	80047b0 <trans_anim_ready_cb+0x54>
 800479e:	6843      	ldr	r3, [r0, #4]
 80047a0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80047a4:	6863      	ldr	r3, [r4, #4]
 80047a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
            running = true;
 80047aa:	429a      	cmp	r2, r3
 80047ac:	bf08      	it	eq
 80047ae:	2501      	moveq	r5, #1
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80047b0:	4601      	mov	r1, r0
 80047b2:	4630      	mov	r0, r6
 80047b4:	f00a fd30 	bl	800f218 <_lv_ll_get_next>
 80047b8:	e7d7      	b.n	800476a <trans_anim_ready_cb+0xe>
 80047ba:	bf00      	nop
 80047bc:	200033e0 	.word	0x200033e0

080047c0 <lv_obj_get_hidden>:
{
 80047c0:	b510      	push	{r4, lr}
 80047c2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80047c4:	f00a fc00 	bl	800efc8 <lv_debug_check_null>
 80047c8:	b910      	cbnz	r0, 80047d0 <lv_obj_get_hidden+0x10>
 80047ca:	4620      	mov	r0, r4
 80047cc:	f7ff fcbc 	bl	8004148 <lv_obj_add_state.part.35>
    return obj->hidden == 0 ? false : true;
 80047d0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 80047d4:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80047d8:	bd10      	pop	{r4, pc}

080047da <lv_obj_area_is_visible>:
{
 80047da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80047de:	4607      	mov	r7, r0
 80047e0:	460e      	mov	r6, r1
    if(lv_obj_get_hidden(obj)) return false;
 80047e2:	f7ff ffed 	bl	80047c0 <lv_obj_get_hidden>
 80047e6:	4605      	mov	r5, r0
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d157      	bne.n	800489c <lv_obj_area_is_visible+0xc2>
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 80047ec:	4638      	mov	r0, r7
 80047ee:	f7ff fe71 	bl	80044d4 <lv_obj_get_screen>
 80047f2:	4604      	mov	r4, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 80047f4:	f7ff fe7e 	bl	80044f4 <lv_obj_get_disp>
 80047f8:	4680      	mov	r8, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 80047fa:	f7fe f89b 	bl	8002934 <lv_disp_get_scr_act>
 80047fe:	4284      	cmp	r4, r0
 8004800:	d129      	bne.n	8004856 <lv_obj_area_is_visible+0x7c>
        lv_coord_t ext_size = obj->ext_draw_pad;
 8004802:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
        lv_area_copy(&obj_coords, &obj->coords);
 8004806:	f107 0110 	add.w	r1, r7, #16
 800480a:	4668      	mov	r0, sp
 800480c:	f7ff fca6 	bl	800415c <lv_area_copy>
        obj_coords.x1 -= ext_size;
 8004810:	f8bd 2000 	ldrh.w	r2, [sp]
 8004814:	b2a3      	uxth	r3, r4
 8004816:	1ad2      	subs	r2, r2, r3
 8004818:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
 800481c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
        is_common = _lv_area_intersect(area, area, &obj_coords);
 8004820:	4631      	mov	r1, r6
        obj_coords.y1 -= ext_size;
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
 8004828:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        is_common = _lv_area_intersect(area, area, &obj_coords);
 800482c:	4630      	mov	r0, r6
        obj_coords.x2 += ext_size;
 800482e:	441a      	add	r2, r3
 8004830:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
 8004834:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004838:	4413      	add	r3, r2
        is_common = _lv_area_intersect(area, area, &obj_coords);
 800483a:	466a      	mov	r2, sp
        obj_coords.y2 += ext_size;
 800483c:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
 8004840:	f00a f935 	bl	800eaae <_lv_area_intersect>
        if(is_common == false) return false;  /*The area is not on the object*/
 8004844:	4680      	mov	r8, r0
 8004846:	b1b0      	cbz	r0, 8004876 <lv_obj_area_is_visible+0x9c>
        lv_obj_t * par = lv_obj_get_parent(obj);
 8004848:	4638      	mov	r0, r7
            par = lv_obj_get_parent(par);
 800484a:	f7ff fe39 	bl	80044c0 <lv_obj_get_parent>
 800484e:	4604      	mov	r4, r0
        while(par != NULL) {
 8004850:	b9a8      	cbnz	r0, 800487e <lv_obj_area_is_visible+0xa4>
    return true;
 8004852:	4645      	mov	r5, r8
 8004854:	e00f      	b.n	8004876 <lv_obj_area_is_visible+0x9c>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 8004856:	4640      	mov	r0, r8
 8004858:	f7fe f873 	bl	8002942 <lv_disp_get_scr_prev>
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 800485c:	4284      	cmp	r4, r0
 800485e:	d0d0      	beq.n	8004802 <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_top(disp) ||
 8004860:	4640      	mov	r0, r8
 8004862:	f7fe f875 	bl	8002950 <lv_disp_get_layer_top>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 8004866:	4284      	cmp	r4, r0
 8004868:	d0cb      	beq.n	8004802 <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 800486a:	4640      	mov	r0, r8
 800486c:	f7fe f877 	bl	800295e <lv_disp_get_layer_sys>
       obj_scr == lv_disp_get_layer_top(disp) ||
 8004870:	4284      	cmp	r4, r0
 8004872:	d0c6      	beq.n	8004802 <lv_obj_area_is_visible+0x28>
    return true;
 8004874:	2501      	movs	r5, #1
}
 8004876:	4628      	mov	r0, r5
 8004878:	b002      	add	sp, #8
 800487a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            is_common = _lv_area_intersect(area, area, &par->coords);
 800487e:	f104 0210 	add.w	r2, r4, #16
 8004882:	4631      	mov	r1, r6
 8004884:	4630      	mov	r0, r6
 8004886:	f00a f912 	bl	800eaae <_lv_area_intersect>
            if(is_common == false) return false;       /*If no common parts with parent break;*/
 800488a:	2800      	cmp	r0, #0
 800488c:	d0f3      	beq.n	8004876 <lv_obj_area_is_visible+0x9c>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
 800488e:	4620      	mov	r0, r4
 8004890:	f7ff ff96 	bl	80047c0 <lv_obj_get_hidden>
 8004894:	2800      	cmp	r0, #0
 8004896:	d1ee      	bne.n	8004876 <lv_obj_area_is_visible+0x9c>
            par = lv_obj_get_parent(par);
 8004898:	4620      	mov	r0, r4
 800489a:	e7d6      	b.n	800484a <lv_obj_area_is_visible+0x70>
    if(lv_obj_get_hidden(obj)) return false;
 800489c:	2500      	movs	r5, #0
 800489e:	e7ea      	b.n	8004876 <lv_obj_area_is_visible+0x9c>

080048a0 <lv_obj_invalidate_area>:
{
 80048a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048a2:	4604      	mov	r4, r0
 80048a4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80048a6:	f00a fb8f 	bl	800efc8 <lv_debug_check_null>
 80048aa:	4603      	mov	r3, r0
 80048ac:	b920      	cbnz	r0, 80048b8 <lv_obj_invalidate_area+0x18>
 80048ae:	4622      	mov	r2, r4
 80048b0:	480a      	ldr	r0, [pc, #40]	; (80048dc <lv_obj_invalidate_area+0x3c>)
 80048b2:	f00a fb8d 	bl	800efd0 <lv_debug_log_error>
 80048b6:	e7fe      	b.n	80048b6 <lv_obj_invalidate_area+0x16>
    lv_area_copy(&area_tmp, area);
 80048b8:	4629      	mov	r1, r5
 80048ba:	4668      	mov	r0, sp
 80048bc:	f7ff fc4e 	bl	800415c <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 80048c0:	4669      	mov	r1, sp
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7ff ff89 	bl	80047da <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 80048c8:	b128      	cbz	r0, 80048d6 <lv_obj_invalidate_area+0x36>
 80048ca:	4620      	mov	r0, r4
 80048cc:	f7ff fe12 	bl	80044f4 <lv_obj_get_disp>
 80048d0:	4669      	mov	r1, sp
 80048d2:	f002 ff60 	bl	8007796 <_lv_inv_area>
}
 80048d6:	b003      	add	sp, #12
 80048d8:	bd30      	pop	{r4, r5, pc}
 80048da:	bf00      	nop
 80048dc:	080158e8 	.word	0x080158e8

080048e0 <lv_obj_invalidate>:
{
 80048e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048e2:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80048e4:	f00a fb70 	bl	800efc8 <lv_debug_check_null>
 80048e8:	4603      	mov	r3, r0
 80048ea:	b920      	cbnz	r0, 80048f6 <lv_obj_invalidate+0x16>
 80048ec:	462a      	mov	r2, r5
 80048ee:	4813      	ldr	r0, [pc, #76]	; (800493c <lv_obj_invalidate+0x5c>)
 80048f0:	f00a fb6e 	bl	800efd0 <lv_debug_log_error>
 80048f4:	e7fe      	b.n	80048f4 <lv_obj_invalidate+0x14>
    lv_coord_t ext_size = obj->ext_draw_pad;
 80048f6:	f9b5 4032 	ldrsh.w	r4, [r5, #50]	; 0x32
    lv_area_copy(&obj_coords, &obj->coords);
 80048fa:	f105 0110 	add.w	r1, r5, #16
 80048fe:	4668      	mov	r0, sp
 8004900:	f7ff fc2c 	bl	800415c <lv_area_copy>
    obj_coords.x1 -= ext_size;
 8004904:	f8bd 2000 	ldrh.w	r2, [sp]
 8004908:	b2a3      	uxth	r3, r4
 800490a:	1ad2      	subs	r2, r2, r3
 800490c:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
 8004910:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    lv_obj_invalidate_area(obj, &obj_coords);
 8004914:	4669      	mov	r1, sp
    obj_coords.y1 -= ext_size;
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
 800491c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    lv_obj_invalidate_area(obj, &obj_coords);
 8004920:	4628      	mov	r0, r5
    obj_coords.x2 += ext_size;
 8004922:	441a      	add	r2, r3
 8004924:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 8004928:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800492c:	4413      	add	r3, r2
 800492e:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 8004932:	f7ff ffb5 	bl	80048a0 <lv_obj_invalidate_area>
}
 8004936:	b003      	add	sp, #12
 8004938:	bd30      	pop	{r4, r5, pc}
 800493a:	bf00      	nop
 800493c:	080158e8 	.word	0x080158e8

08004940 <lv_obj_move_foreground>:
{
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004944:	f00a fb40 	bl	800efc8 <lv_debug_check_null>
 8004948:	4603      	mov	r3, r0
 800494a:	b920      	cbnz	r0, 8004956 <lv_obj_move_foreground+0x16>
 800494c:	462a      	mov	r2, r5
 800494e:	4811      	ldr	r0, [pc, #68]	; (8004994 <lv_obj_move_foreground+0x54>)
 8004950:	f00a fb3e 	bl	800efd0 <lv_debug_log_error>
 8004954:	e7fe      	b.n	8004954 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004956:	4628      	mov	r0, r5
 8004958:	f7ff fdb2 	bl	80044c0 <lv_obj_get_parent>
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 800495c:	1d06      	adds	r6, r0, #4
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800495e:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 8004960:	4630      	mov	r0, r6
 8004962:	f00a fc53 	bl	800f20c <_lv_ll_get_head>
 8004966:	4285      	cmp	r5, r0
 8004968:	d012      	beq.n	8004990 <lv_obj_move_foreground+0x50>
    lv_obj_invalidate(parent);
 800496a:	4620      	mov	r0, r4
 800496c:	f7ff ffb8 	bl	80048e0 <lv_obj_invalidate>
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8004970:	462a      	mov	r2, r5
 8004972:	4631      	mov	r1, r6
 8004974:	4630      	mov	r0, r6
 8004976:	2301      	movs	r3, #1
 8004978:	f00a fcbe 	bl	800f2f8 <_lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 800497c:	69e3      	ldr	r3, [r4, #28]
 800497e:	462a      	mov	r2, r5
 8004980:	4620      	mov	r0, r4
 8004982:	2101      	movs	r1, #1
 8004984:	4798      	blx	r3
    lv_obj_invalidate(parent);
 8004986:	4620      	mov	r0, r4
}
 8004988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(parent);
 800498c:	f7ff bfa8 	b.w	80048e0 <lv_obj_invalidate>
}
 8004990:	bd70      	pop	{r4, r5, r6, pc}
 8004992:	bf00      	nop
 8004994:	080158e8 	.word	0x080158e8

08004998 <lv_obj_set_pos>:
{
 8004998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800499c:	4604      	mov	r4, r0
 800499e:	460d      	mov	r5, r1
 80049a0:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80049a2:	f00a fb11 	bl	800efc8 <lv_debug_check_null>
 80049a6:	4603      	mov	r3, r0
 80049a8:	b920      	cbnz	r0, 80049b4 <lv_obj_set_pos+0x1c>
 80049aa:	4622      	mov	r2, r4
 80049ac:	4822      	ldr	r0, [pc, #136]	; (8004a38 <lv_obj_set_pos+0xa0>)
 80049ae:	f00a fb0f 	bl	800efd0 <lv_debug_log_error>
 80049b2:	e7fe      	b.n	80049b2 <lv_obj_set_pos+0x1a>
    lv_obj_t * par = obj->parent;
 80049b4:	6827      	ldr	r7, [r4, #0]
    if(par) {
 80049b6:	b12f      	cbz	r7, 80049c4 <lv_obj_set_pos+0x2c>
        x = x + par->coords.x1;
 80049b8:	8a39      	ldrh	r1, [r7, #16]
        y = y + par->coords.y1;
 80049ba:	8a7a      	ldrh	r2, [r7, #18]
        x = x + par->coords.x1;
 80049bc:	440d      	add	r5, r1
        y = y + par->coords.y1;
 80049be:	4416      	add	r6, r2
        x = x + par->coords.x1;
 80049c0:	b22d      	sxth	r5, r5
        y = y + par->coords.y1;
 80049c2:	b236      	sxth	r6, r6
    diff.x = x - obj->coords.x1;
 80049c4:	8a21      	ldrh	r1, [r4, #16]
    diff.y = y - obj->coords.y1;
 80049c6:	8a62      	ldrh	r2, [r4, #18]
    diff.x = x - obj->coords.x1;
 80049c8:	1a6d      	subs	r5, r5, r1
 80049ca:	b2ad      	uxth	r5, r5
    diff.y = y - obj->coords.y1;
 80049cc:	1ab6      	subs	r6, r6, r2
 80049ce:	b2b6      	uxth	r6, r6
    diff.x = x - obj->coords.x1;
 80049d0:	fa0f f885 	sxth.w	r8, r5
    diff.y = y - obj->coords.y1;
 80049d4:	fa0f f986 	sxth.w	r9, r6
    if(diff.x == 0 && diff.y == 0) return;
 80049d8:	f1b8 0f00 	cmp.w	r8, #0
 80049dc:	d102      	bne.n	80049e4 <lv_obj_set_pos+0x4c>
 80049de:	f1b9 0f00 	cmp.w	r9, #0
 80049e2:	d025      	beq.n	8004a30 <lv_obj_set_pos+0x98>
    lv_obj_invalidate(obj);
 80049e4:	4620      	mov	r0, r4
 80049e6:	f7ff ff7b 	bl	80048e0 <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 80049ea:	4669      	mov	r1, sp
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7ff fdc1 	bl	8004574 <lv_obj_get_coords>
    obj->coords.x1 += diff.x;
 80049f2:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 80049f4:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 80049f6:	442b      	add	r3, r5
    obj->coords.y2 += diff.y;
 80049f8:	8ae2      	ldrh	r2, [r4, #22]
    obj->coords.x1 += diff.x;
 80049fa:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 80049fc:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 80049fe:	440d      	add	r5, r1
    obj->coords.y1 += diff.y;
 8004a00:	4433      	add	r3, r6
    obj->coords.y2 += diff.y;
 8004a02:	4416      	add	r6, r2
    obj->coords.y1 += diff.y;
 8004a04:	8263      	strh	r3, [r4, #18]
    refresh_children_position(obj, diff.x, diff.y);
 8004a06:	464a      	mov	r2, r9
 8004a08:	4641      	mov	r1, r8
 8004a0a:	4620      	mov	r0, r4
    obj->coords.x2 += diff.x;
 8004a0c:	82a5      	strh	r5, [r4, #20]
    obj->coords.y2 += diff.y;
 8004a0e:	82e6      	strh	r6, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 8004a10:	f7ff fb73 	bl	80040fa <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 8004a14:	69e3      	ldr	r3, [r4, #28]
 8004a16:	466a      	mov	r2, sp
 8004a18:	2102      	movs	r1, #2
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8004a1e:	b127      	cbz	r7, 8004a2a <lv_obj_set_pos+0x92>
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4622      	mov	r2, r4
 8004a24:	2101      	movs	r1, #1
 8004a26:	4638      	mov	r0, r7
 8004a28:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7ff ff58 	bl	80048e0 <lv_obj_invalidate>
}
 8004a30:	b003      	add	sp, #12
 8004a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a36:	bf00      	nop
 8004a38:	080158e8 	.word	0x080158e8

08004a3c <lv_obj_set_x>:
{
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4604      	mov	r4, r0
 8004a40:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004a42:	f00a fac1 	bl	800efc8 <lv_debug_check_null>
 8004a46:	4603      	mov	r3, r0
 8004a48:	b920      	cbnz	r0, 8004a54 <lv_obj_set_x+0x18>
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	4806      	ldr	r0, [pc, #24]	; (8004a68 <lv_obj_set_x+0x2c>)
 8004a4e:	f00a fabf 	bl	800efd0 <lv_debug_log_error>
 8004a52:	e7fe      	b.n	8004a52 <lv_obj_set_x+0x16>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8004a54:	4620      	mov	r0, r4
 8004a56:	f7ff fdbd 	bl	80045d4 <lv_obj_get_y>
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4620      	mov	r0, r4
}
 8004a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8004a64:	f7ff bf98 	b.w	8004998 <lv_obj_set_pos>
 8004a68:	080158e8 	.word	0x080158e8

08004a6c <lv_obj_set_y>:
{
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4604      	mov	r4, r0
 8004a70:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004a72:	f00a faa9 	bl	800efc8 <lv_debug_check_null>
 8004a76:	4603      	mov	r3, r0
 8004a78:	b920      	cbnz	r0, 8004a84 <lv_obj_set_y+0x18>
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	4806      	ldr	r0, [pc, #24]	; (8004a98 <lv_obj_set_y+0x2c>)
 8004a7e:	f00a faa7 	bl	800efd0 <lv_debug_log_error>
 8004a82:	e7fe      	b.n	8004a82 <lv_obj_set_y+0x16>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7ff fd8b 	bl	80045a0 <lv_obj_get_x>
 8004a8a:	462a      	mov	r2, r5
 8004a8c:	4601      	mov	r1, r0
 8004a8e:	4620      	mov	r0, r4
}
 8004a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8004a94:	f7ff bf80 	b.w	8004998 <lv_obj_set_pos>
 8004a98:	080158e8 	.word	0x080158e8

08004a9c <obj_align_core>:
{
 8004a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	461e      	mov	r6, r3
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
 8004aa2:	f101 0010 	add.w	r0, r1, #16
 8004aa6:	ab01      	add	r3, sp, #4
 8004aa8:	f104 0110 	add.w	r1, r4, #16
{
 8004aac:	f89d 5020 	ldrb.w	r5, [sp, #32]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
 8004ab0:	f00a f949 	bl	800ed46 <_lv_area_align>
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f7ff fd03 	bl	80044c0 <lv_obj_get_parent>
    new_pos.y += y_ofs;
 8004aba:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8004abe:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
    new_pos.x += x_ofs;
 8004ac2:	f8bd 7004 	ldrh.w	r7, [sp, #4]
    new_pos.y += y_ofs;
 8004ac6:	440a      	add	r2, r1
    new_pos.x += x_ofs;
 8004ac8:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
    lv_coord_t par_abs_y  = par->coords.y1;
 8004acc:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.x -= par_abs_x;
 8004ad0:	8a00      	ldrh	r0, [r0, #16]
    new_pos.x += x_ofs;
 8004ad2:	4439      	add	r1, r7
    new_pos.x -= par_abs_x;
 8004ad4:	1a09      	subs	r1, r1, r0
    new_pos.y -= par_abs_y;
 8004ad6:	1ad2      	subs	r2, r2, r3
    new_pos.x -= par_abs_x;
 8004ad8:	b209      	sxth	r1, r1
    new_pos.y -= par_abs_y;
 8004ada:	b212      	sxth	r2, r2
    new_pos.x -= par_abs_x;
 8004adc:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
 8004ae0:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
 8004ae4:	b146      	cbz	r6, 8004af8 <obj_align_core+0x5c>
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	b11d      	cbz	r5, 8004af2 <obj_align_core+0x56>
 8004aea:	f7ff ff55 	bl	8004998 <lv_obj_set_pos>
}
 8004aee:	b003      	add	sp, #12
 8004af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
 8004af2:	f7ff ffa3 	bl	8004a3c <lv_obj_set_x>
 8004af6:	e7fa      	b.n	8004aee <obj_align_core+0x52>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	d0f8      	beq.n	8004aee <obj_align_core+0x52>
 8004afc:	4611      	mov	r1, r2
 8004afe:	4620      	mov	r0, r4
 8004b00:	f7ff ffb4 	bl	8004a6c <lv_obj_set_y>
}
 8004b04:	e7f3      	b.n	8004aee <obj_align_core+0x52>
	...

08004b08 <lv_obj_align>:
{
 8004b08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	460d      	mov	r5, r1
 8004b10:	4690      	mov	r8, r2
 8004b12:	461f      	mov	r7, r3
 8004b14:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004b18:	f00a fa56 	bl	800efc8 <lv_debug_check_null>
 8004b1c:	b910      	cbnz	r0, 8004b24 <lv_obj_align+0x1c>
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f7ff fb12 	bl	8004148 <lv_obj_add_state.part.35>
    if(base == NULL) base = lv_obj_get_parent(obj);
 8004b24:	b91d      	cbnz	r5, 8004b2e <lv_obj_align+0x26>
 8004b26:	4620      	mov	r0, r4
 8004b28:	f7ff fcca 	bl	80044c0 <lv_obj_get_parent>
 8004b2c:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f00a fa4a 	bl	800efc8 <lv_debug_check_null>
 8004b34:	4603      	mov	r3, r0
 8004b36:	b920      	cbnz	r0, 8004b42 <lv_obj_align+0x3a>
 8004b38:	462a      	mov	r2, r5
 8004b3a:	480e      	ldr	r0, [pc, #56]	; (8004b74 <lv_obj_align+0x6c>)
 8004b3c:	f00a fa48 	bl	800efd0 <lv_debug_log_error>
 8004b40:	e7fe      	b.n	8004b40 <lv_obj_align+0x38>
    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
 8004b42:	2301      	movs	r3, #1
 8004b44:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	4642      	mov	r2, r8
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7ff ffa4 	bl	8004a9c <obj_align_core>
    obj->realign.mid_align = 0;
 8004b54:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    obj->realign.align       = align;
 8004b58:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.mid_align = 0;
 8004b5c:	f36f 0341 	bfc	r3, #1, #1
    obj->realign.xofs        = x_ofs;
 8004b60:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 8004b64:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
 8004b68:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
 8004b6a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
 8004b6e:	b004      	add	sp, #16
 8004b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b74:	080158e8 	.word	0x080158e8

08004b78 <obj_align_mid_core>:
{
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8004b84:	9203      	str	r2, [sp, #12]
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8004b8c:	4682      	mov	sl, r0
 8004b8e:	460d      	mov	r5, r1
 8004b90:	9302      	str	r3, [sp, #8]
 8004b92:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
    lv_coord_t new_x = lv_obj_get_x(obj);
 8004b96:	f7ff fd03 	bl	80045a0 <lv_obj_get_x>
 8004b9a:	4604      	mov	r4, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
 8004b9c:	4650      	mov	r0, sl
 8004b9e:	f7ff fd19 	bl	80045d4 <lv_obj_get_y>
 8004ba2:	4681      	mov	r9, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8004ba4:	4650      	mov	r0, sl
 8004ba6:	f7ff fd2f 	bl	8004608 <lv_obj_get_width>
 8004baa:	f04f 0802 	mov.w	r8, #2
 8004bae:	fb90 f0f8 	sdiv	r0, r0, r8
 8004bb2:	b207      	sxth	r7, r0
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8004bb4:	4650      	mov	r0, sl
 8004bb6:	f7ff fd35 	bl	8004624 <lv_obj_get_height>
 8004bba:	fb90 f0f8 	sdiv	r0, r0, r8
    switch(align) {
 8004bbe:	9a03      	ldr	r2, [sp, #12]
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8004bc0:	b206      	sxth	r6, r0
    switch(align) {
 8004bc2:	2a14      	cmp	r2, #20
 8004bc4:	d826      	bhi.n	8004c14 <obj_align_mid_core+0x9c>
 8004bc6:	e8df f002 	tbb	[pc, r2]
 8004bca:	4f0b      	.short	0x4f0b
 8004bcc:	445b5d1b 	.word	0x445b5d1b
 8004bd0:	4f635169 	.word	0x4f635169
 8004bd4:	445b5d1b 	.word	0x445b5d1b
 8004bd8:	5b514f69 	.word	0x5b514f69
 8004bdc:	635d      	.short	0x635d
 8004bde:	69          	.byte	0x69
 8004bdf:	00          	.byte	0x00
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8004be0:	4628      	mov	r0, r5
 8004be2:	f7ff fd11 	bl	8004608 <lv_obj_get_width>
 8004be6:	fb90 f4f8 	sdiv	r4, r0, r8
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8004bea:	4628      	mov	r0, r5
 8004bec:	f7ff fd1a 	bl	8004624 <lv_obj_get_height>
 8004bf0:	fb90 f0f8 	sdiv	r0, r0, r8
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8004bf4:	1be4      	subs	r4, r4, r7
 8004bf6:	b224      	sxth	r4, r4
            new_y = lv_obj_get_height(base) - obj_h_half;
 8004bf8:	1b80      	subs	r0, r0, r6
 8004bfa:	fa0f f980 	sxth.w	r9, r0
            break;
 8004bfe:	e009      	b.n	8004c14 <obj_align_mid_core+0x9c>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8004c00:	4628      	mov	r0, r5
 8004c02:	f7ff fd01 	bl	8004608 <lv_obj_get_width>
 8004c06:	fb90 f0f8 	sdiv	r0, r0, r8
 8004c0a:	1bc4      	subs	r4, r0, r7
            new_x = -obj_w_half;
 8004c0c:	b224      	sxth	r4, r4
            new_y = -obj_h_half;
 8004c0e:	4276      	negs	r6, r6
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8004c10:	fa0f f986 	sxth.w	r9, r6
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8004c14:	4650      	mov	r0, sl
 8004c16:	f7ff fc53 	bl	80044c0 <lv_obj_get_parent>
    new_y += y_ofs + base_abs_y;
 8004c1a:	8a6a      	ldrh	r2, [r5, #18]
 8004c1c:	9b02      	ldr	r3, [sp, #8]
 8004c1e:	4413      	add	r3, r2
    new_y -= par_abs_y;
 8004c20:	8a42      	ldrh	r2, [r0, #18]
    new_y += y_ofs + base_abs_y;
 8004c22:	eb03 0609 	add.w	r6, r3, r9
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8004c26:	9b00      	ldr	r3, [sp, #0]
    new_y -= par_abs_y;
 8004c28:	1ab2      	subs	r2, r6, r2
 8004c2a:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d040      	beq.n	8004cb2 <obj_align_mid_core+0x13a>
    new_x += x_ofs + base_abs_x;
 8004c30:	8a29      	ldrh	r1, [r5, #16]
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	440b      	add	r3, r1
 8004c36:	4619      	mov	r1, r3
 8004c38:	4421      	add	r1, r4
    new_x -= par_abs_x;
 8004c3a:	8a04      	ldrh	r4, [r0, #16]
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8004c3c:	4650      	mov	r0, sl
    new_x -= par_abs_x;
 8004c3e:	1b09      	subs	r1, r1, r4
 8004c40:	b209      	sxth	r1, r1
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8004c42:	f1bb 0f00 	cmp.w	fp, #0
 8004c46:	d02f      	beq.n	8004ca8 <obj_align_mid_core+0x130>
}
 8004c48:	b005      	add	sp, #20
 8004c4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8004c4e:	f7ff bea3 	b.w	8004998 <lv_obj_set_pos>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8004c52:	4628      	mov	r0, r5
 8004c54:	f7ff fcd8 	bl	8004608 <lv_obj_get_width>
 8004c58:	fb90 f0f8 	sdiv	r0, r0, r8
 8004c5c:	1bc4      	subs	r4, r0, r7
            new_x = -obj_w_half;
 8004c5e:	b224      	sxth	r4, r4
            new_y = lv_obj_get_height(base) - obj_h_half;
 8004c60:	4628      	mov	r0, r5
 8004c62:	f7ff fcdf 	bl	8004624 <lv_obj_get_height>
 8004c66:	e7c7      	b.n	8004bf8 <obj_align_mid_core+0x80>
            new_x = -obj_w_half;
 8004c68:	427c      	negs	r4, r7
 8004c6a:	e7cf      	b.n	8004c0c <obj_align_mid_core+0x94>
            new_x = -obj_w_half;
 8004c6c:	427c      	negs	r4, r7
 8004c6e:	b224      	sxth	r4, r4
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8004c70:	4628      	mov	r0, r5
 8004c72:	f7ff fcd7 	bl	8004624 <lv_obj_get_height>
 8004c76:	2302      	movs	r3, #2
 8004c78:	fb90 f3f3 	sdiv	r3, r0, r3
 8004c7c:	1b9e      	subs	r6, r3, r6
 8004c7e:	e7c7      	b.n	8004c10 <obj_align_mid_core+0x98>
            new_x = -obj_w_half;
 8004c80:	427c      	negs	r4, r7
 8004c82:	e7ec      	b.n	8004c5e <obj_align_mid_core+0xe6>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8004c84:	4628      	mov	r0, r5
 8004c86:	f7ff fcbf 	bl	8004608 <lv_obj_get_width>
 8004c8a:	1bc0      	subs	r0, r0, r7
 8004c8c:	b204      	sxth	r4, r0
 8004c8e:	e7be      	b.n	8004c0e <obj_align_mid_core+0x96>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8004c90:	4628      	mov	r0, r5
 8004c92:	f7ff fcb9 	bl	8004608 <lv_obj_get_width>
 8004c96:	1bc0      	subs	r0, r0, r7
 8004c98:	b204      	sxth	r4, r0
 8004c9a:	e7e9      	b.n	8004c70 <obj_align_mid_core+0xf8>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f7ff fcb3 	bl	8004608 <lv_obj_get_width>
 8004ca2:	1bc0      	subs	r0, r0, r7
 8004ca4:	b204      	sxth	r4, r0
 8004ca6:	e7db      	b.n	8004c60 <obj_align_mid_core+0xe8>
}
 8004ca8:	b005      	add	sp, #20
 8004caa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    else if(x_set) lv_obj_set_x(obj, new_x);
 8004cae:	f7ff bec5 	b.w	8004a3c <lv_obj_set_x>
    else if(y_set) lv_obj_set_y(obj, new_y);
 8004cb2:	f1bb 0f00 	cmp.w	fp, #0
 8004cb6:	d006      	beq.n	8004cc6 <obj_align_mid_core+0x14e>
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4650      	mov	r0, sl
}
 8004cbc:	b005      	add	sp, #20
 8004cbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    else if(y_set) lv_obj_set_y(obj, new_y);
 8004cc2:	f7ff bed3 	b.w	8004a6c <lv_obj_set_y>
}
 8004cc6:	b005      	add	sp, #20
 8004cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004ccc <lv_obj_align_mid>:
{
 8004ccc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	460d      	mov	r5, r1
 8004cd4:	4690      	mov	r8, r2
 8004cd6:	461f      	mov	r7, r3
 8004cd8:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004cdc:	f00a f974 	bl	800efc8 <lv_debug_check_null>
 8004ce0:	b910      	cbnz	r0, 8004ce8 <lv_obj_align_mid+0x1c>
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f7ff fa30 	bl	8004148 <lv_obj_add_state.part.35>
    if(base == NULL) {
 8004ce8:	b91d      	cbnz	r5, 8004cf2 <lv_obj_align_mid+0x26>
        base = lv_obj_get_parent(obj);
 8004cea:	4620      	mov	r0, r4
 8004cec:	f7ff fbe8 	bl	80044c0 <lv_obj_get_parent>
 8004cf0:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f00a f968 	bl	800efc8 <lv_debug_check_null>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	b920      	cbnz	r0, 8004d06 <lv_obj_align_mid+0x3a>
 8004cfc:	462a      	mov	r2, r5
 8004cfe:	480e      	ldr	r0, [pc, #56]	; (8004d38 <lv_obj_align_mid+0x6c>)
 8004d00:	f00a f966 	bl	800efd0 <lv_debug_log_error>
 8004d04:	e7fe      	b.n	8004d04 <lv_obj_align_mid+0x38>
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
 8004d06:	2301      	movs	r3, #1
 8004d08:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	4642      	mov	r2, r8
 8004d10:	4629      	mov	r1, r5
 8004d12:	4620      	mov	r0, r4
 8004d14:	f7ff ff30 	bl	8004b78 <obj_align_mid_core>
    obj->realign.mid_align = 1;
 8004d18:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    obj->realign.align       = align;
 8004d1c:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.mid_align = 1;
 8004d20:	f043 0302 	orr.w	r3, r3, #2
    obj->realign.xofs        = x_ofs;
 8004d24:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 8004d28:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
 8004d2c:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
 8004d2e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
 8004d32:	b004      	add	sp, #16
 8004d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d38:	080158e8 	.word	0x080158e8

08004d3c <lv_obj_realign>:
{
 8004d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d3e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004d40:	f00a f942 	bl	800efc8 <lv_debug_check_null>
 8004d44:	4603      	mov	r3, r0
 8004d46:	b920      	cbnz	r0, 8004d52 <lv_obj_realign+0x16>
 8004d48:	4622      	mov	r2, r4
 8004d4a:	480c      	ldr	r0, [pc, #48]	; (8004d7c <lv_obj_realign+0x40>)
 8004d4c:	f00a f940 	bl	800efd0 <lv_debug_log_error>
 8004d50:	e7fe      	b.n	8004d50 <lv_obj_realign+0x14>
 8004d52:	f9b4 0046 	ldrsh.w	r0, [r4, #70]	; 0x46
    if(obj->realign.mid_align)
 8004d56:	f894 5049 	ldrb.w	r5, [r4, #73]	; 0x49
 8004d5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004d5c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8004d60:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8004d64:	9000      	str	r0, [sp, #0]
 8004d66:	4620      	mov	r0, r4
    if(obj->realign.mid_align)
 8004d68:	07ac      	lsls	r4, r5, #30
 8004d6a:	d503      	bpl.n	8004d74 <lv_obj_realign+0x38>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8004d6c:	f7ff ffae 	bl	8004ccc <lv_obj_align_mid>
}
 8004d70:	b003      	add	sp, #12
 8004d72:	bd30      	pop	{r4, r5, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8004d74:	f7ff fec8 	bl	8004b08 <lv_obj_align>
}
 8004d78:	e7fa      	b.n	8004d70 <lv_obj_realign+0x34>
 8004d7a:	bf00      	nop
 8004d7c:	080158e8 	.word	0x080158e8

08004d80 <refresh_children_style>:
{
 8004d80:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8004d82:	2100      	movs	r1, #0
{
 8004d84:	4605      	mov	r5, r0
        child = lv_obj_get_child(obj, child);
 8004d86:	f7ff fbe1 	bl	800454c <lv_obj_get_child>
 8004d8a:	4604      	mov	r4, r0
    while(child != NULL) {
 8004d8c:	b900      	cbnz	r0, 8004d90 <refresh_children_style+0x10>
}
 8004d8e:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(child);
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7ff fda5 	bl	80048e0 <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
 8004d96:	2104      	movs	r1, #4
 8004d98:	69e3      	ldr	r3, [r4, #28]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	4798      	blx	r3
        lv_obj_invalidate(child);
 8004da0:	4620      	mov	r0, r4
 8004da2:	f7ff fd9d 	bl	80048e0 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 8004da6:	4620      	mov	r0, r4
 8004da8:	f7ff ffea 	bl	8004d80 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
 8004dac:	4621      	mov	r1, r4
 8004dae:	4628      	mov	r0, r5
 8004db0:	e7e9      	b.n	8004d86 <refresh_children_style+0x6>
	...

08004db4 <lv_obj_get_click>:
{
 8004db4:	b510      	push	{r4, lr}
 8004db6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004db8:	f00a f906 	bl	800efc8 <lv_debug_check_null>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	b920      	cbnz	r0, 8004dca <lv_obj_get_click+0x16>
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	4804      	ldr	r0, [pc, #16]	; (8004dd4 <lv_obj_get_click+0x20>)
 8004dc4:	f00a f904 	bl	800efd0 <lv_debug_log_error>
 8004dc8:	e7fe      	b.n	8004dc8 <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
 8004dca:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 8004dce:	f000 0001 	and.w	r0, r0, #1
 8004dd2:	bd10      	pop	{r4, pc}
 8004dd4:	080158e8 	.word	0x080158e8

08004dd8 <lv_obj_get_drag>:
{
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004ddc:	f00a f8f4 	bl	800efc8 <lv_debug_check_null>
 8004de0:	4603      	mov	r3, r0
 8004de2:	b920      	cbnz	r0, 8004dee <lv_obj_get_drag+0x16>
 8004de4:	4622      	mov	r2, r4
 8004de6:	4804      	ldr	r0, [pc, #16]	; (8004df8 <lv_obj_get_drag+0x20>)
 8004de8:	f00a f8f2 	bl	800efd0 <lv_debug_log_error>
 8004dec:	e7fe      	b.n	8004dec <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
 8004dee:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 8004df2:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004df6:	bd10      	pop	{r4, pc}
 8004df8:	080158e8 	.word	0x080158e8

08004dfc <lv_obj_get_drag_dir>:
{
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004e00:	f00a f8e2 	bl	800efc8 <lv_debug_check_null>
 8004e04:	4603      	mov	r3, r0
 8004e06:	b920      	cbnz	r0, 8004e12 <lv_obj_get_drag_dir+0x16>
 8004e08:	4622      	mov	r2, r4
 8004e0a:	4804      	ldr	r0, [pc, #16]	; (8004e1c <lv_obj_get_drag_dir+0x20>)
 8004e0c:	f00a f8e0 	bl	800efd0 <lv_debug_log_error>
 8004e10:	e7fe      	b.n	8004e10 <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
 8004e12:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
 8004e16:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004e1a:	bd10      	pop	{r4, pc}
 8004e1c:	080158e8 	.word	0x080158e8

08004e20 <lv_obj_get_drag_throw>:
{
 8004e20:	b510      	push	{r4, lr}
 8004e22:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004e24:	f00a f8d0 	bl	800efc8 <lv_debug_check_null>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	b920      	cbnz	r0, 8004e36 <lv_obj_get_drag_throw+0x16>
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	4804      	ldr	r0, [pc, #16]	; (8004e40 <lv_obj_get_drag_throw+0x20>)
 8004e30:	f00a f8ce 	bl	800efd0 <lv_debug_log_error>
 8004e34:	e7fe      	b.n	8004e34 <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
 8004e36:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
 8004e3a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8004e3e:	bd10      	pop	{r4, pc}
 8004e40:	080158e8 	.word	0x080158e8

08004e44 <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
 8004e44:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
 8004e48:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004e4c:	4770      	bx	lr

08004e4e <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
 8004e4e:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8004e52:	f000 0001 	and.w	r0, r0, #1
 8004e56:	4770      	bx	lr

08004e58 <lv_obj_get_base_dir>:
{
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8004e5c:	f00a f8b4 	bl	800efc8 <lv_debug_check_null>
 8004e60:	b910      	cbnz	r0, 8004e68 <lv_obj_get_base_dir+0x10>
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7ff f970 	bl	8004148 <lv_obj_add_state.part.35>
}
 8004e68:	2000      	movs	r0, #0
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <lv_obj_create>:
{
 8004e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e70:	460d      	mov	r5, r1
    if(parent == NULL) {
 8004e72:	4606      	mov	r6, r0
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d16f      	bne.n	8004f58 <lv_obj_create+0xec>
        lv_disp_t * disp = lv_disp_get_default();
 8004e78:	f009 faac 	bl	800e3d4 <lv_disp_get_default>
        if(!disp) {
 8004e7c:	b918      	cbnz	r0, 8004e86 <lv_obj_create+0x1a>
            return NULL;
 8004e7e:	2400      	movs	r4, #0
}
 8004e80:	4620      	mov	r0, r4
 8004e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
 8004e86:	3038      	adds	r0, #56	; 0x38
 8004e88:	f00a f989 	bl	800f19e <_lv_ll_ins_head>
 8004e8c:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
 8004e8e:	f00a f89b 	bl	800efc8 <lv_debug_check_null>
 8004e92:	4603      	mov	r3, r0
 8004e94:	b920      	cbnz	r0, 8004ea0 <lv_obj_create+0x34>
 8004e96:	4622      	mov	r2, r4
 8004e98:	48d1      	ldr	r0, [pc, #836]	; (80051e0 <lv_obj_create+0x374>)
 8004e9a:	f00a f899 	bl	800efd0 <lv_debug_log_error>
 8004e9e:	e7fe      	b.n	8004e9e <lv_obj_create+0x32>
        if(new_obj == NULL) return NULL;
 8004ea0:	2c00      	cmp	r4, #0
 8004ea2:	d0ec      	beq.n	8004e7e <lv_obj_create+0x12>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 8004ea4:	214c      	movs	r1, #76	; 0x4c
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f00a fdb6 	bl	800fa18 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8004eac:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
        new_obj->event_cb = NULL;
 8004eb0:	61a6      	str	r6, [r4, #24]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8004eb2:	f366 1346 	bfi	r3, r6, #5, #2
 8004eb6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
 8004eba:	4bca      	ldr	r3, [pc, #808]	; (80051e4 <lv_obj_create+0x378>)
        new_obj->coords.x1    = 0;
 8004ebc:	6126      	str	r6, [r4, #16]
        new_obj->signal_cb = lv_obj_signal;
 8004ebe:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
 8004ec0:	4bc9      	ldr	r3, [pc, #804]	; (80051e8 <lv_obj_create+0x37c>)
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8004ec2:	4630      	mov	r0, r6
        new_obj->design_cb = lv_obj_design;
 8004ec4:	6223      	str	r3, [r4, #32]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8004ec6:	f009 fa8b 	bl	800e3e0 <lv_disp_get_hor_res>
 8004eca:	3801      	subs	r0, #1
 8004ecc:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f009 fa98 	bl	800e404 <lv_disp_get_ver_res>
 8004ed4:	3801      	subs	r0, #1
 8004ed6:	82e0      	strh	r0, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8004ed8:	214c      	movs	r1, #76	; 0x4c
 8004eda:	1d20      	adds	r0, r4, #4
 8004edc:	f00a f957 	bl	800f18e <_lv_ll_init>
    new_obj->realign.align        = LV_ALIGN_CENTER;
 8004ee0:	2300      	movs	r3, #0
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 8004ee2:	2103      	movs	r1, #3
    new_obj->realign.auto_realign = 0;
 8004ee4:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
    new_obj->ext_draw_pad = 0;
 8004ee8:	f04f 0801 	mov.w	r8, #1
    new_obj->realign.auto_realign = 0;
 8004eec:	f363 0200 	bfi	r2, r3, #0, #1
 8004ef0:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 8004ef4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    lv_style_list_init(&new_obj->style_list);
 8004ef8:	f104 0728 	add.w	r7, r4, #40	; 0x28
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 8004efc:	f361 0284 	bfi	r2, r1, #2, #3
    new_obj->gesture_parent = parent ? 1 : 0;
 8004f00:	1af1      	subs	r1, r6, r3
 8004f02:	bf18      	it	ne
 8004f04:	2101      	movne	r1, #1
 8004f06:	f361 0200 	bfi	r2, r1, #0, #1
    new_obj->focus_parent  = 0;
 8004f0a:	f363 0241 	bfi	r2, r3, #1, #1
    new_obj->realign.align        = LV_ALIGN_CENTER;
 8004f0e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
 8004f12:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
 8004f16:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
 8004f1a:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->ext_click_pad_hor = 0;
 8004f1c:	6323      	str	r3, [r4, #48]	; 0x30
    new_obj->ext_draw_pad = 0;
 8004f1e:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
    new_obj->focus_parent  = 0;
 8004f22:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    new_obj->group_p = NULL;
 8004f26:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f28:	87a3      	strh	r3, [r4, #60]	; 0x3c
    new_obj->ext_attr = NULL;
 8004f2a:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	f002 ffc6 	bl	8007ebe <lv_style_list_init>
    if(copy == NULL) {
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	f040 8095 	bne.w	8005062 <lv_obj_create+0x1f6>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
 8004f38:	2e00      	cmp	r6, #0
 8004f3a:	f000 808d 	beq.w	8005058 <lv_obj_create+0x1ec>
 8004f3e:	2102      	movs	r1, #2
 8004f40:	4620      	mov	r0, r4
 8004f42:	f00b fdf1 	bl	8010b28 <lv_theme_apply>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8004f46:	69f3      	ldr	r3, [r6, #28]
 8004f48:	4622      	mov	r2, r4
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7ff fcc5 	bl	80048e0 <lv_obj_invalidate>
 8004f56:	e793      	b.n	8004e80 <lv_obj_create+0x14>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
 8004f58:	f00a f836 	bl	800efc8 <lv_debug_check_null>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	b920      	cbnz	r0, 8004f6a <lv_obj_create+0xfe>
 8004f60:	4632      	mov	r2, r6
 8004f62:	48a2      	ldr	r0, [pc, #648]	; (80051ec <lv_obj_create+0x380>)
 8004f64:	f00a f834 	bl	800efd0 <lv_debug_log_error>
 8004f68:	e7fe      	b.n	8004f68 <lv_obj_create+0xfc>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
 8004f6a:	1d30      	adds	r0, r6, #4
 8004f6c:	f00a f917 	bl	800f19e <_lv_ll_ins_head>
 8004f70:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
 8004f72:	f00a f829 	bl	800efc8 <lv_debug_check_null>
 8004f76:	4603      	mov	r3, r0
 8004f78:	b920      	cbnz	r0, 8004f84 <lv_obj_create+0x118>
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	4898      	ldr	r0, [pc, #608]	; (80051e0 <lv_obj_create+0x374>)
 8004f7e:	f00a f827 	bl	800efd0 <lv_debug_log_error>
 8004f82:	e7fe      	b.n	8004f82 <lv_obj_create+0x116>
        if(new_obj == NULL) return NULL;
 8004f84:	2c00      	cmp	r4, #0
 8004f86:	f43f af7a 	beq.w	8004e7e <lv_obj_create+0x12>
        new_obj->event_cb = NULL;
 8004f8a:	f04f 0900 	mov.w	r9, #0
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 8004f8e:	214c      	movs	r1, #76	; 0x4c
 8004f90:	4620      	mov	r0, r4
 8004f92:	f00a fd41 	bl	800fa18 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8004f96:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
        new_obj->parent = parent;
 8004f9a:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 8004f9c:	f36f 1346 	bfc	r3, #5, #2
 8004fa0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
 8004fa4:	4b8f      	ldr	r3, [pc, #572]	; (80051e4 <lv_obj_create+0x378>)
        new_obj->event_cb = NULL;
 8004fa6:	f8c4 9018 	str.w	r9, [r4, #24]
        new_obj->signal_cb = lv_obj_signal;
 8004faa:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
 8004fac:	4b8e      	ldr	r3, [pc, #568]	; (80051e8 <lv_obj_create+0x37c>)
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8004fae:	4648      	mov	r0, r9
        new_obj->design_cb = lv_obj_design;
 8004fb0:	6223      	str	r3, [r4, #32]
        new_obj->coords.y1    = parent->coords.y1;
 8004fb2:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8004fb6:	2732      	movs	r7, #50	; 0x32
        new_obj->coords.y1    = parent->coords.y1;
 8004fb8:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8004fba:	f8b6 8012 	ldrh.w	r8, [r6, #18]
 8004fbe:	f009 fa31 	bl	800e424 <lv_disp_get_dpi>
 8004fc2:	4378      	muls	r0, r7
 8004fc4:	28ef      	cmp	r0, #239	; 0xef
 8004fc6:	dd2b      	ble.n	8005020 <lv_obj_create+0x1b4>
 8004fc8:	4648      	mov	r0, r9
 8004fca:	f009 fa2b 	bl	800e424 <lv_disp_get_dpi>
 8004fce:	4378      	muls	r0, r7
 8004fd0:	27a0      	movs	r7, #160	; 0xa0
 8004fd2:	3050      	adds	r0, #80	; 0x50
 8004fd4:	fb90 f0f7 	sdiv	r0, r0, r7
 8004fd8:	b280      	uxth	r0, r0
 8004fda:	4440      	add	r0, r8
 8004fdc:	82e0      	strh	r0, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f7ff ff3a 	bl	8004e58 <lv_obj_get_base_dir>
 8004fe4:	2801      	cmp	r0, #1
 8004fe6:	4681      	mov	r9, r0
 8004fe8:	d11c      	bne.n	8005024 <lv_obj_create+0x1b8>
            new_obj->coords.x2    = parent->coords.x2;
 8004fea:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
 8004fee:	2000      	movs	r0, #0
            new_obj->coords.x2    = parent->coords.x2;
 8004ff0:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
 8004ff2:	f8b6 8014 	ldrh.w	r8, [r6, #20]
 8004ff6:	2764      	movs	r7, #100	; 0x64
 8004ff8:	f009 fa14 	bl	800e424 <lv_disp_get_dpi>
 8004ffc:	4378      	muls	r0, r7
 8004ffe:	28ef      	cmp	r0, #239	; 0xef
 8005000:	dd09      	ble.n	8005016 <lv_obj_create+0x1aa>
 8005002:	2000      	movs	r0, #0
 8005004:	f009 fa0e 	bl	800e424 <lv_disp_get_dpi>
 8005008:	4378      	muls	r0, r7
 800500a:	27a0      	movs	r7, #160	; 0xa0
 800500c:	3050      	adds	r0, #80	; 0x50
 800500e:	fb90 f0f7 	sdiv	r0, r0, r7
 8005012:	fa1f f980 	uxth.w	r9, r0
 8005016:	eba8 0909 	sub.w	r9, r8, r9
 800501a:	f8a4 9010 	strh.w	r9, [r4, #16]
 800501e:	e75b      	b.n	8004ed8 <lv_obj_create+0x6c>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8005020:	2001      	movs	r0, #1
 8005022:	e7da      	b.n	8004fda <lv_obj_create+0x16e>
            new_obj->coords.x1    = parent->coords.x1;
 8005024:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8005028:	2000      	movs	r0, #0
            new_obj->coords.x1    = parent->coords.x1;
 800502a:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800502c:	f8b6 8010 	ldrh.w	r8, [r6, #16]
 8005030:	2764      	movs	r7, #100	; 0x64
 8005032:	f009 f9f7 	bl	800e424 <lv_disp_get_dpi>
 8005036:	4378      	muls	r0, r7
 8005038:	28ef      	cmp	r0, #239	; 0xef
 800503a:	dd0b      	ble.n	8005054 <lv_obj_create+0x1e8>
 800503c:	2000      	movs	r0, #0
 800503e:	f009 f9f1 	bl	800e424 <lv_disp_get_dpi>
 8005042:	4378      	muls	r0, r7
 8005044:	27a0      	movs	r7, #160	; 0xa0
 8005046:	3050      	adds	r0, #80	; 0x50
 8005048:	fb90 f0f7 	sdiv	r0, r0, r7
 800504c:	b280      	uxth	r0, r0
 800504e:	4440      	add	r0, r8
 8005050:	82a0      	strh	r0, [r4, #20]
 8005052:	e741      	b.n	8004ed8 <lv_obj_create+0x6c>
 8005054:	2001      	movs	r0, #1
 8005056:	e7fa      	b.n	800504e <lv_obj_create+0x1e2>
        else  lv_theme_apply(new_obj, LV_THEME_SCR);
 8005058:	4641      	mov	r1, r8
 800505a:	4620      	mov	r0, r4
 800505c:	f00b fd64 	bl	8010b28 <lv_theme_apply>
 8005060:	e70e      	b.n	8004e80 <lv_obj_create+0x14>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
 8005062:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8005066:	4638      	mov	r0, r7
 8005068:	f003 fa13 	bl	8008492 <lv_style_list_copy>
        lv_area_copy(&new_obj->coords, &copy->coords);
 800506c:	f104 0010 	add.w	r0, r4, #16
 8005070:	f105 0110 	add.w	r1, r5, #16
 8005074:	f7ff f872 	bl	800415c <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8005078:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
        new_obj->base_dir = copy->base_dir;
 800507c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8005080:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
 8005082:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8005086:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
 800508a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800508e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
 8005092:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8005096:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800509a:	f363 1246 	bfi	r2, r3, #5, #2
 800509e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->realign.align        = copy->realign.align;
 80050a2:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80050a6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
 80050aa:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80050ae:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
        new_obj->realign.xofs         = copy->realign.xofs;
 80050b2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
 80050b6:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
 80050ba:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
 80050be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80050c0:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80050c2:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80050c6:	f362 0300 	bfi	r3, r2, #0, #1
 80050ca:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
 80050ce:	69ab      	ldr	r3, [r5, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
 80050d0:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
        new_obj->event_cb = copy->event_cb;
 80050d4:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
 80050d6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80050da:	09db      	lsrs	r3, r3, #7
 80050dc:	f363 12c7 	bfi	r2, r3, #7, #1
 80050e0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
 80050e4:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 80050e8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80050ec:	f362 0300 	bfi	r3, r2, #0, #1
 80050f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
 80050f4:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80050f8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80050fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005100:	f363 0241 	bfi	r2, r3, #1, #1
 8005104:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
 8005108:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800510c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005110:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8005114:	f363 0284 	bfi	r2, r3, #2, #3
 8005118:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
 800511c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8005120:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005124:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005128:	f363 0282 	bfi	r2, r3, #2, #1
 800512c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
 8005130:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800513a:	f363 02c3 	bfi	r2, r3, #3, #1
 800513e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
 8005142:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800514c:	f363 1204 	bfi	r2, r3, #4, #1
 8005150:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
 8005154:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800515e:	f363 1245 	bfi	r2, r3, #5, #1
 8005162:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
 8005166:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005170:	f363 1286 	bfi	r2, r3, #6, #1
 8005174:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
 8005178:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800517c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
 8005180:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
 8005184:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005188:	f362 0300 	bfi	r3, r2, #0, #1
 800518c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
 8005190:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8005194:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005198:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800519c:	f363 0241 	bfi	r2, r3, #1, #1
 80051a0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
 80051a4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80051a6:	b110      	cbz	r0, 80051ae <lv_obj_create+0x342>
            lv_group_add_obj(copy->group_p, new_obj);
 80051a8:	4621      	mov	r1, r4
 80051aa:	f7fd fcbd 	bl	8002b28 <lv_group_add_obj>
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 80051ae:	4628      	mov	r0, r5
 80051b0:	f7ff f986 	bl	80044c0 <lv_obj_get_parent>
 80051b4:	b178      	cbz	r0, 80051d6 <lv_obj_create+0x36a>
 80051b6:	2e00      	cmp	r6, #0
 80051b8:	f43f ae62 	beq.w	8004e80 <lv_obj_create+0x14>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 80051bc:	4628      	mov	r0, r5
 80051be:	f7ff f9ef 	bl	80045a0 <lv_obj_get_x>
 80051c2:	4607      	mov	r7, r0
 80051c4:	4628      	mov	r0, r5
 80051c6:	f7ff fa05 	bl	80045d4 <lv_obj_get_y>
 80051ca:	4639      	mov	r1, r7
 80051cc:	4602      	mov	r2, r0
 80051ce:	4620      	mov	r0, r4
 80051d0:	f7ff fbe2 	bl	8004998 <lv_obj_set_pos>
 80051d4:	e6b7      	b.n	8004f46 <lv_obj_create+0xda>
    if(parent != NULL) {
 80051d6:	2e00      	cmp	r6, #0
 80051d8:	f47f aeb5 	bne.w	8004f46 <lv_obj_create+0xda>
 80051dc:	e650      	b.n	8004e80 <lv_obj_create+0x14>
 80051de:	bf00      	nop
 80051e0:	08015994 	.word	0x08015994
 80051e4:	08007325 	.word	0x08007325
 80051e8:	080064d7 	.word	0x080064d7
 80051ec:	080158e8 	.word	0x080158e8

080051f0 <lv_obj_set_parent>:
{
 80051f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051f4:	4604      	mov	r4, r0
 80051f6:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80051f8:	f009 fee6 	bl	800efc8 <lv_debug_check_null>
 80051fc:	4603      	mov	r3, r0
 80051fe:	b920      	cbnz	r0, 800520a <lv_obj_set_parent+0x1a>
 8005200:	4622      	mov	r2, r4
 8005202:	482b      	ldr	r0, [pc, #172]	; (80052b0 <lv_obj_set_parent+0xc0>)
 8005204:	f009 fee4 	bl	800efd0 <lv_debug_log_error>
 8005208:	e7fe      	b.n	8005208 <lv_obj_set_parent+0x18>
    LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
 800520a:	4630      	mov	r0, r6
 800520c:	f009 fedc 	bl	800efc8 <lv_debug_check_null>
 8005210:	4603      	mov	r3, r0
 8005212:	b920      	cbnz	r0, 800521e <lv_obj_set_parent+0x2e>
 8005214:	4632      	mov	r2, r6
 8005216:	4826      	ldr	r0, [pc, #152]	; (80052b0 <lv_obj_set_parent+0xc0>)
 8005218:	f009 feda 	bl	800efd0 <lv_debug_log_error>
 800521c:	e7fe      	b.n	800521c <lv_obj_set_parent+0x2c>
    if(obj->parent == NULL) {
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d043      	beq.n	80052ac <lv_obj_set_parent+0xbc>
    if(parent == NULL) {
 8005224:	2e00      	cmp	r6, #0
 8005226:	d041      	beq.n	80052ac <lv_obj_set_parent+0xbc>
    lv_obj_invalidate(obj);
 8005228:	4620      	mov	r0, r4
 800522a:	f7ff fb59 	bl	80048e0 <lv_obj_invalidate>
    old_pos.y = lv_obj_get_y(obj);
 800522e:	4620      	mov	r0, r4
    lv_obj_t * old_par = obj->parent;
 8005230:	6827      	ldr	r7, [r4, #0]
    old_pos.y = lv_obj_get_y(obj);
 8005232:	f7ff f9cf 	bl	80045d4 <lv_obj_get_y>
 8005236:	4680      	mov	r8, r0
    lv_bidi_dir_t new_base_dir = lv_obj_get_base_dir(parent);
 8005238:	4630      	mov	r0, r6
 800523a:	f7ff fe0d 	bl	8004e58 <lv_obj_get_base_dir>
    if(new_base_dir != LV_BIDI_DIR_RTL) {
 800523e:	2801      	cmp	r0, #1
    lv_bidi_dir_t new_base_dir = lv_obj_get_base_dir(parent);
 8005240:	4681      	mov	r9, r0
    if(new_base_dir != LV_BIDI_DIR_RTL) {
 8005242:	d022      	beq.n	800528a <lv_obj_set_parent+0x9a>
        old_pos.x = lv_obj_get_x(obj);
 8005244:	4620      	mov	r0, r4
 8005246:	f7ff f9ab 	bl	80045a0 <lv_obj_get_x>
 800524a:	4605      	mov	r5, r0
    _lv_ll_chg_list(&obj->parent->child_ll, &parent->child_ll, obj, true);
 800524c:	6820      	ldr	r0, [r4, #0]
 800524e:	2301      	movs	r3, #1
 8005250:	4622      	mov	r2, r4
 8005252:	1d31      	adds	r1, r6, #4
 8005254:	3004      	adds	r0, #4
 8005256:	f00a f84f 	bl	800f2f8 <_lv_ll_chg_list>
    if(new_base_dir != LV_BIDI_DIR_RTL) {
 800525a:	f1b9 0f01 	cmp.w	r9, #1
    obj->parent = parent;
 800525e:	6026      	str	r6, [r4, #0]
    if(new_base_dir != LV_BIDI_DIR_RTL) {
 8005260:	d018      	beq.n	8005294 <lv_obj_set_parent+0xa4>
        lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 8005262:	4642      	mov	r2, r8
 8005264:	4629      	mov	r1, r5
        lv_obj_set_pos(obj, new_x, old_pos.y);
 8005266:	4620      	mov	r0, r4
 8005268:	f7ff fb96 	bl	8004998 <lv_obj_set_pos>
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2200      	movs	r2, #0
 8005270:	2101      	movs	r1, #1
 8005272:	4638      	mov	r0, r7
 8005274:	4798      	blx	r3
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8005276:	69f3      	ldr	r3, [r6, #28]
 8005278:	4622      	mov	r2, r4
 800527a:	4630      	mov	r0, r6
 800527c:	2101      	movs	r1, #1
 800527e:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8005280:	4620      	mov	r0, r4
}
 8005282:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_invalidate(obj);
 8005286:	f7ff bb2b 	b.w	80048e0 <lv_obj_invalidate>
        old_pos.x = old_par->coords.x2 - obj->coords.x2;
 800528a:	8abd      	ldrh	r5, [r7, #20]
 800528c:	8aa0      	ldrh	r0, [r4, #20]
 800528e:	1a2d      	subs	r5, r5, r0
 8005290:	b22d      	sxth	r5, r5
 8005292:	e7db      	b.n	800524c <lv_obj_set_parent+0x5c>
        lv_coord_t new_x = lv_obj_get_width(parent) - old_pos.x - lv_obj_get_width(obj);
 8005294:	4630      	mov	r0, r6
 8005296:	f7ff f9b7 	bl	8004608 <lv_obj_get_width>
 800529a:	1b45      	subs	r5, r0, r5
 800529c:	4620      	mov	r0, r4
 800529e:	f7ff f9b3 	bl	8004608 <lv_obj_get_width>
 80052a2:	b2ad      	uxth	r5, r5
 80052a4:	1a28      	subs	r0, r5, r0
        lv_obj_set_pos(obj, new_x, old_pos.y);
 80052a6:	4642      	mov	r2, r8
 80052a8:	b201      	sxth	r1, r0
 80052aa:	e7dc      	b.n	8005266 <lv_obj_set_parent+0x76>
}
 80052ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052b0:	080158e8 	.word	0x080158e8

080052b4 <lv_obj_set_size>:
{
 80052b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052b6:	4604      	mov	r4, r0
 80052b8:	460d      	mov	r5, r1
 80052ba:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80052bc:	f009 fe84 	bl	800efc8 <lv_debug_check_null>
 80052c0:	4603      	mov	r3, r0
 80052c2:	b920      	cbnz	r0, 80052ce <lv_obj_set_size+0x1a>
 80052c4:	4622      	mov	r2, r4
 80052c6:	4829      	ldr	r0, [pc, #164]	; (800536c <lv_obj_set_size+0xb8>)
 80052c8:	f009 fe82 	bl	800efd0 <lv_debug_log_error>
 80052cc:	e7fe      	b.n	80052cc <lv_obj_set_size+0x18>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7ff f99a 	bl	8004608 <lv_obj_get_width>
 80052d4:	42a8      	cmp	r0, r5
 80052d6:	d033      	beq.n	8005340 <lv_obj_set_size+0x8c>
    lv_obj_invalidate(obj);
 80052d8:	4620      	mov	r0, r4
 80052da:	f7ff fb01 	bl	80048e0 <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 80052de:	4669      	mov	r1, sp
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7ff f947 	bl	8004574 <lv_obj_get_coords>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80052e6:	8a63      	ldrh	r3, [r4, #18]
 80052e8:	3e01      	subs	r6, #1
 80052ea:	441e      	add	r6, r3
 80052ec:	82e6      	strh	r6, [r4, #22]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
 80052ee:	4620      	mov	r0, r4
 80052f0:	f7ff fdb2 	bl	8004e58 <lv_obj_get_base_dir>
 80052f4:	2801      	cmp	r0, #1
 80052f6:	b2ad      	uxth	r5, r5
 80052f8:	d129      	bne.n	800534e <lv_obj_set_size+0x9a>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80052fa:	8aa3      	ldrh	r3, [r4, #20]
 80052fc:	f1c5 0501 	rsb	r5, r5, #1
 8005300:	441d      	add	r5, r3
 8005302:	8225      	strh	r5, [r4, #16]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 8005304:	69e3      	ldr	r3, [r4, #28]
 8005306:	466a      	mov	r2, sp
 8005308:	2102      	movs	r1, #2
 800530a:	4620      	mov	r0, r4
 800530c:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
 800530e:	4620      	mov	r0, r4
 8005310:	f7ff f8d6 	bl	80044c0 <lv_obj_get_parent>
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8005314:	b118      	cbz	r0, 800531e <lv_obj_set_size+0x6a>
 8005316:	69c3      	ldr	r3, [r0, #28]
 8005318:	4622      	mov	r2, r4
 800531a:	2101      	movs	r1, #1
 800531c:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
 800531e:	1d26      	adds	r6, r4, #4
 8005320:	4630      	mov	r0, r6
 8005322:	f009 ff73 	bl	800f20c <_lv_ll_get_head>
 8005326:	4605      	mov	r5, r0
 8005328:	b9b0      	cbnz	r0, 8005358 <lv_obj_set_size+0xa4>
    lv_obj_invalidate(obj);
 800532a:	4620      	mov	r0, r4
 800532c:	f7ff fad8 	bl	80048e0 <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8005330:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8005334:	07db      	lsls	r3, r3, #31
 8005336:	d508      	bpl.n	800534a <lv_obj_set_size+0x96>
 8005338:	4620      	mov	r0, r4
 800533a:	f7ff fcff 	bl	8004d3c <lv_obj_realign>
 800533e:	e004      	b.n	800534a <lv_obj_set_size+0x96>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8005340:	4620      	mov	r0, r4
 8005342:	f7ff f96f 	bl	8004624 <lv_obj_get_height>
 8005346:	42b0      	cmp	r0, r6
 8005348:	d1c6      	bne.n	80052d8 <lv_obj_set_size+0x24>
}
 800534a:	b002      	add	sp, #8
 800534c:	bd70      	pop	{r4, r5, r6, pc}
        obj->coords.x2 = obj->coords.x1 + w - 1;
 800534e:	8a23      	ldrh	r3, [r4, #16]
 8005350:	3d01      	subs	r5, #1
 8005352:	441d      	add	r5, r3
 8005354:	82a5      	strh	r5, [r4, #20]
 8005356:	e7d5      	b.n	8005304 <lv_obj_set_size+0x50>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
 8005358:	69eb      	ldr	r3, [r5, #28]
 800535a:	466a      	mov	r2, sp
 800535c:	2103      	movs	r1, #3
 800535e:	4628      	mov	r0, r5
 8005360:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
 8005362:	4629      	mov	r1, r5
 8005364:	4630      	mov	r0, r6
 8005366:	f009 ff57 	bl	800f218 <_lv_ll_get_next>
 800536a:	e7dc      	b.n	8005326 <lv_obj_set_size+0x72>
 800536c:	080158e8 	.word	0x080158e8

08005370 <lv_obj_set_width>:
{
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4604      	mov	r4, r0
 8005374:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005376:	f009 fe27 	bl	800efc8 <lv_debug_check_null>
 800537a:	4603      	mov	r3, r0
 800537c:	b920      	cbnz	r0, 8005388 <lv_obj_set_width+0x18>
 800537e:	4622      	mov	r2, r4
 8005380:	4806      	ldr	r0, [pc, #24]	; (800539c <lv_obj_set_width+0x2c>)
 8005382:	f009 fe25 	bl	800efd0 <lv_debug_log_error>
 8005386:	e7fe      	b.n	8005386 <lv_obj_set_width+0x16>
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 8005388:	4620      	mov	r0, r4
 800538a:	f7ff f94b 	bl	8004624 <lv_obj_get_height>
 800538e:	4629      	mov	r1, r5
 8005390:	4602      	mov	r2, r0
 8005392:	4620      	mov	r0, r4
}
 8005394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 8005398:	f7ff bf8c 	b.w	80052b4 <lv_obj_set_size>
 800539c:	080158e8 	.word	0x080158e8

080053a0 <lv_obj_set_height>:
{
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4604      	mov	r4, r0
 80053a4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80053a6:	f009 fe0f 	bl	800efc8 <lv_debug_check_null>
 80053aa:	4603      	mov	r3, r0
 80053ac:	b920      	cbnz	r0, 80053b8 <lv_obj_set_height+0x18>
 80053ae:	4622      	mov	r2, r4
 80053b0:	4806      	ldr	r0, [pc, #24]	; (80053cc <lv_obj_set_height+0x2c>)
 80053b2:	f009 fe0d 	bl	800efd0 <lv_debug_log_error>
 80053b6:	e7fe      	b.n	80053b6 <lv_obj_set_height+0x16>
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 80053b8:	4620      	mov	r0, r4
 80053ba:	f7ff f925 	bl	8004608 <lv_obj_get_width>
 80053be:	462a      	mov	r2, r5
 80053c0:	4601      	mov	r1, r0
 80053c2:	4620      	mov	r0, r4
}
 80053c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 80053c8:	f7ff bf74 	b.w	80052b4 <lv_obj_set_size>
 80053cc:	080158e8 	.word	0x080158e8

080053d0 <lv_obj_is_protected>:
{
 80053d0:	b538      	push	{r3, r4, r5, lr}
 80053d2:	4604      	mov	r4, r0
 80053d4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80053d6:	f009 fdf7 	bl	800efc8 <lv_debug_check_null>
 80053da:	b910      	cbnz	r0, 80053e2 <lv_obj_is_protected+0x12>
 80053dc:	4620      	mov	r0, r4
 80053de:	f7fe feb3 	bl	8004148 <lv_obj_add_state.part.35>
    return (obj->protect & prot) == 0 ? false : true;
 80053e2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80053e6:	421d      	tst	r5, r3
}
 80053e8:	bf14      	ite	ne
 80053ea:	2001      	movne	r0, #1
 80053ec:	2000      	moveq	r0, #0
 80053ee:	bd38      	pop	{r3, r4, r5, pc}

080053f0 <lv_obj_get_state>:
{
 80053f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053f2:	4604      	mov	r4, r0
 80053f4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80053f6:	f009 fde7 	bl	800efc8 <lv_debug_check_null>
 80053fa:	4603      	mov	r3, r0
 80053fc:	b920      	cbnz	r0, 8005408 <lv_obj_get_state+0x18>
 80053fe:	4622      	mov	r2, r4
 8005400:	480b      	ldr	r0, [pc, #44]	; (8005430 <lv_obj_get_state+0x40>)
 8005402:	f009 fde5 	bl	800efd0 <lv_debug_log_error>
 8005406:	e7fe      	b.n	8005406 <lv_obj_get_state+0x16>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 8005408:	2d3f      	cmp	r5, #63	; 0x3f
 800540a:	d803      	bhi.n	8005414 <lv_obj_get_state+0x24>
 800540c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
 8005410:	b003      	add	sp, #12
 8005412:	bd30      	pop	{r4, r5, pc}
    info.result = LV_STATE_DEFAULT;
 8005414:	2300      	movs	r3, #0
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
 8005416:	aa01      	add	r2, sp, #4
 8005418:	2109      	movs	r1, #9
 800541a:	4620      	mov	r0, r4
    info.part = part;
 800541c:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
 8005420:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
 8005424:	f7ff f810 	bl	8004448 <lv_signal_send>
    return info.result;
 8005428:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800542c:	e7f0      	b.n	8005410 <lv_obj_get_state+0x20>
 800542e:	bf00      	nop
 8005430:	080158e8 	.word	0x080158e8

08005434 <_lv_obj_get_style_color>:
{
 8005434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005438:	4605      	mov	r5, r0
 800543a:	460e      	mov	r6, r1
 800543c:	4617      	mov	r7, r2
    while(parent) {
 800543e:	4614      	mov	r4, r2
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8005440:	f342 2807 	sbfx	r8, r2, #8, #8
    while(parent) {
 8005444:	b945      	cbnz	r5, 8005458 <_lv_obj_get_style_color+0x24>
    prop = prop & (~LV_STYLE_STATE_MASK);
 8005446:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
 800544a:	3c29      	subs	r4, #41	; 0x29
 800544c:	2c01      	cmp	r4, #1
            return LV_COLOR_WHITE;
 800544e:	bf96      	itet	ls
 8005450:	4b12      	ldrls	r3, [pc, #72]	; (800549c <_lv_obj_get_style_color+0x68>)
    return LV_COLOR_BLACK;
 8005452:	2000      	movhi	r0, #0
            return LV_COLOR_WHITE;
 8005454:	8818      	ldrhls	r0, [r3, #0]
    return LV_COLOR_BLACK;
 8005456:	e014      	b.n	8005482 <_lv_obj_get_style_color+0x4e>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	f7ff f902 	bl	8004664 <lv_obj_get_style_list>
        lv_state_t state = lv_obj_get_state(parent, part);
 8005460:	4631      	mov	r1, r6
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8005462:	4681      	mov	r9, r0
        lv_state_t state = lv_obj_get_state(parent, part);
 8005464:	4628      	mov	r0, r5
 8005466:	f7ff ffc3 	bl	80053f0 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 800546a:	eb07 2000 	add.w	r0, r7, r0, lsl #8
 800546e:	b284      	uxth	r4, r0
        res = _lv_style_list_get_color(list, prop, &value_act);
 8005470:	aa01      	add	r2, sp, #4
 8005472:	4621      	mov	r1, r4
 8005474:	4648      	mov	r0, r9
 8005476:	f003 f90c 	bl	8008692 <_lv_style_list_get_color>
        if(res == LV_RES_OK) return value_act;
 800547a:	2801      	cmp	r0, #1
 800547c:	d104      	bne.n	8005488 <_lv_obj_get_style_color+0x54>
 800547e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 8005482:	b003      	add	sp, #12
 8005484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8005488:	f1b8 0f00 	cmp.w	r8, #0
 800548c:	dadb      	bge.n	8005446 <_lv_obj_get_style_color+0x12>
        if(part != LV_OBJ_PART_MAIN) {
 800548e:	b91e      	cbnz	r6, 8005498 <_lv_obj_get_style_color+0x64>
        parent = lv_obj_get_parent(parent);
 8005490:	4628      	mov	r0, r5
 8005492:	f7ff f815 	bl	80044c0 <lv_obj_get_parent>
 8005496:	4605      	mov	r5, r0
 8005498:	2600      	movs	r6, #0
 800549a:	e7d3      	b.n	8005444 <_lv_obj_get_style_color+0x10>
 800549c:	080158ae 	.word	0x080158ae

080054a0 <_lv_obj_get_style_int>:
{
 80054a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a4:	4607      	mov	r7, r0
 80054a6:	4689      	mov	r9, r1
 80054a8:	4690      	mov	r8, r2
    while(parent) {
 80054aa:	4616      	mov	r6, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80054ac:	f248 0a83 	movw	sl, #32899	; 0x8083
 80054b0:	f248 0ba0 	movw	fp, #32928	; 0x80a0
{
 80054b4:	b085      	sub	sp, #20
    attr = prop_ori >> 8;
 80054b6:	0a13      	lsrs	r3, r2, #8
 80054b8:	9301      	str	r3, [sp, #4]
    while(parent) {
 80054ba:	2f00      	cmp	r7, #0
 80054bc:	d03b      	beq.n	8005536 <_lv_obj_get_style_int+0x96>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 80054be:	4649      	mov	r1, r9
 80054c0:	4638      	mov	r0, r7
 80054c2:	f7ff f8cf 	bl	8004664 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 80054c6:	7942      	ldrb	r2, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 80054c8:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 80054ca:	0710      	lsls	r0, r2, #28
 80054cc:	d418      	bmi.n	8005500 <_lv_obj_get_style_int+0x60>
 80054ce:	7929      	ldrb	r1, [r5, #4]
 80054d0:	0689      	lsls	r1, r1, #26
 80054d2:	d015      	beq.n	8005500 <_lv_obj_get_style_int+0x60>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 80054d4:	f012 0f04 	tst.w	r2, #4
 80054d8:	f426 44fe 	bic.w	r4, r6, #32512	; 0x7f00
 80054dc:	d104      	bne.n	80054e8 <_lv_obj_get_style_int+0x48>
 80054de:	4622      	mov	r2, r4
 80054e0:	4649      	mov	r1, r9
 80054e2:	4638      	mov	r0, r7
 80054e4:	f000 f8c6 	bl	8005674 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80054e8:	2c33      	cmp	r4, #51	; 0x33
 80054ea:	d06b      	beq.n	80055c4 <_lv_obj_get_style_int+0x124>
 80054ec:	dc40      	bgt.n	8005570 <_lv_obj_get_style_int+0xd0>
 80054ee:	2c13      	cmp	r4, #19
 80054f0:	dc2d      	bgt.n	800554e <_lv_obj_get_style_int+0xae>
 80054f2:	2c10      	cmp	r4, #16
 80054f4:	da75      	bge.n	80055e2 <_lv_obj_get_style_int+0x142>
 80054f6:	2c02      	cmp	r4, #2
 80054f8:	d059      	beq.n	80055ae <_lv_obj_get_style_int+0x10e>
 80054fa:	dc15      	bgt.n	8005528 <_lv_obj_get_style_int+0x88>
 80054fc:	2c01      	cmp	r4, #1
 80054fe:	d068      	beq.n	80055d2 <_lv_obj_get_style_int+0x132>
        lv_state_t state = lv_obj_get_state(parent, part);
 8005500:	4649      	mov	r1, r9
 8005502:	4638      	mov	r0, r7
 8005504:	f7ff ff74 	bl	80053f0 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8005508:	eb08 2000 	add.w	r0, r8, r0, lsl #8
 800550c:	b286      	uxth	r6, r0
        res = _lv_style_list_get_int(list, prop, &value_act);
 800550e:	f10d 020e 	add.w	r2, sp, #14
 8005512:	4631      	mov	r1, r6
 8005514:	4628      	mov	r0, r5
 8005516:	f003 f87a 	bl	800860e <_lv_style_list_get_int>
        if(res == LV_RES_OK) return value_act;
 800551a:	2801      	cmp	r0, #1
 800551c:	d165      	bne.n	80055ea <_lv_obj_get_style_int+0x14a>
 800551e:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
}
 8005522:	b005      	add	sp, #20
 8005524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8005528:	3c04      	subs	r4, #4
 800552a:	2c03      	cmp	r4, #3
 800552c:	d8e8      	bhi.n	8005500 <_lv_obj_get_style_int+0x60>
                    if(list->transform_all_zero) def = true;
 800552e:	f995 2005 	ldrsb.w	r2, [r5, #5]
                    if(list->border_post_off) def = true;
 8005532:	2a00      	cmp	r2, #0
 8005534:	dae4      	bge.n	8005500 <_lv_obj_get_style_int+0x60>
    prop = prop & (~LV_STYLE_STATE_MASK);
 8005536:	f426 46fe 	bic.w	r6, r6, #32512	; 0x7f00
    switch(prop) {
 800553a:	b2b6      	uxth	r6, r6
 800553c:	2e22      	cmp	r6, #34	; 0x22
 800553e:	d069      	beq.n	8005614 <_lv_obj_get_style_int+0x174>
 8005540:	d860      	bhi.n	8005604 <_lv_obj_get_style_int+0x164>
 8005542:	2e03      	cmp	r6, #3
 8005544:	d064      	beq.n	8005610 <_lv_obj_get_style_int+0x170>
 8005546:	2e07      	cmp	r6, #7
 8005548:	d066      	beq.n	8005618 <_lv_obj_get_style_int+0x178>
    return 0;
 800554a:	2000      	movs	r0, #0
 800554c:	e7e9      	b.n	8005522 <_lv_obj_get_style_int+0x82>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 800554e:	2c20      	cmp	r4, #32
 8005550:	d018      	beq.n	8005584 <_lv_obj_get_style_int+0xe4>
 8005552:	dc06      	bgt.n	8005562 <_lv_obj_get_style_int+0xc2>
 8005554:	3c15      	subs	r4, #21
 8005556:	2c03      	cmp	r4, #3
 8005558:	d8d2      	bhi.n	8005500 <_lv_obj_get_style_int+0x60>
                    if(list->margin_all_zero) def = true;
 800555a:	79aa      	ldrb	r2, [r5, #6]
 800555c:	f012 0f02 	tst.w	r2, #2
 8005560:	e02c      	b.n	80055bc <_lv_obj_get_style_int+0x11c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8005562:	2c31      	cmp	r4, #49	; 0x31
 8005564:	d02c      	beq.n	80055c0 <_lv_obj_get_style_int+0x120>
 8005566:	dc0d      	bgt.n	8005584 <_lv_obj_get_style_int+0xe4>
 8005568:	2c30      	cmp	r4, #48	; 0x30
 800556a:	d1c9      	bne.n	8005500 <_lv_obj_get_style_int+0x60>
                    if(list->border_width_zero) def = true;
 800556c:	79aa      	ldrb	r2, [r5, #6]
 800556e:	e023      	b.n	80055b8 <_lv_obj_get_style_int+0x118>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8005570:	2c72      	cmp	r4, #114	; 0x72
 8005572:	d007      	beq.n	8005584 <_lv_obj_get_style_int+0xe4>
 8005574:	dc0c      	bgt.n	8005590 <_lv_obj_get_style_int+0xf0>
 8005576:	2c50      	cmp	r4, #80	; 0x50
 8005578:	d02f      	beq.n	80055da <_lv_obj_get_style_int+0x13a>
 800557a:	dc05      	bgt.n	8005588 <_lv_obj_get_style_int+0xe8>
 800557c:	2c40      	cmp	r4, #64	; 0x40
 800557e:	d024      	beq.n	80055ca <_lv_obj_get_style_int+0x12a>
 8005580:	2c42      	cmp	r4, #66	; 0x42
 8005582:	d1bd      	bne.n	8005500 <_lv_obj_get_style_int+0x60>
                    if(list->blend_mode_all_normal) def = true;
 8005584:	79aa      	ldrb	r2, [r5, #6]
 8005586:	e029      	b.n	80055dc <_lv_obj_get_style_int+0x13c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8005588:	2c54      	cmp	r4, #84	; 0x54
 800558a:	d0fb      	beq.n	8005584 <_lv_obj_get_style_int+0xe4>
 800558c:	2c60      	cmp	r4, #96	; 0x60
 800558e:	e7f8      	b.n	8005582 <_lv_obj_get_style_int+0xe2>
 8005590:	f248 0381 	movw	r3, #32897	; 0x8081
 8005594:	429c      	cmp	r4, r3
 8005596:	dc05      	bgt.n	80055a4 <_lv_obj_get_style_int+0x104>
 8005598:	f248 0280 	movw	r2, #32896	; 0x8080
 800559c:	4294      	cmp	r4, r2
 800559e:	da0a      	bge.n	80055b6 <_lv_obj_get_style_int+0x116>
 80055a0:	2c91      	cmp	r4, #145	; 0x91
 80055a2:	e7ee      	b.n	8005582 <_lv_obj_get_style_int+0xe2>
 80055a4:	4554      	cmp	r4, sl
 80055a6:	d0ed      	beq.n	8005584 <_lv_obj_get_style_int+0xe4>
 80055a8:	db1d      	blt.n	80055e6 <_lv_obj_get_style_int+0x146>
 80055aa:	455c      	cmp	r4, fp
 80055ac:	e7e9      	b.n	8005582 <_lv_obj_get_style_int+0xe2>
                    if(list->clip_corner_off) def = true;
 80055ae:	796a      	ldrb	r2, [r5, #5]
                    if(list->text_decor_none) def = true;
 80055b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80055b4:	e002      	b.n	80055bc <_lv_obj_get_style_int+0x11c>
                    if(list->text_space_zero) def = true;
 80055b6:	79ea      	ldrb	r2, [r5, #7]
                    if(list->border_width_zero) def = true;
 80055b8:	f012 0f20 	tst.w	r2, #32
                    if(list->text_decor_none) def = true;
 80055bc:	d0a0      	beq.n	8005500 <_lv_obj_get_style_int+0x60>
 80055be:	e7ba      	b.n	8005536 <_lv_obj_get_style_int+0x96>
                    if(list->border_side_full) def = true;
 80055c0:	79aa      	ldrb	r2, [r5, #6]
 80055c2:	e7f5      	b.n	80055b0 <_lv_obj_get_style_int+0x110>
                    if(list->border_post_off) def = true;
 80055c4:	f995 2006 	ldrsb.w	r2, [r5, #6]
 80055c8:	e7b3      	b.n	8005532 <_lv_obj_get_style_int+0x92>
                    if(list->outline_width_zero) def = true;
 80055ca:	79ea      	ldrb	r2, [r5, #7]
                    if(list->pad_all_zero) def = true;
 80055cc:	f012 0f01 	tst.w	r2, #1
 80055d0:	e7f4      	b.n	80055bc <_lv_obj_get_style_int+0x11c>
                    if(list->radius_zero) def = true;
 80055d2:	796a      	ldrb	r2, [r5, #5]
 80055d4:	f012 0f10 	tst.w	r2, #16
 80055d8:	e7f0      	b.n	80055bc <_lv_obj_get_style_int+0x11c>
                    if(list->shadow_width_zero) def = true;
 80055da:	79ea      	ldrb	r2, [r5, #7]
                    if(list->blend_mode_all_normal) def = true;
 80055dc:	f012 0f04 	tst.w	r2, #4
 80055e0:	e7ec      	b.n	80055bc <_lv_obj_get_style_int+0x11c>
                    if(list->pad_all_zero) def = true;
 80055e2:	79aa      	ldrb	r2, [r5, #6]
 80055e4:	e7f2      	b.n	80055cc <_lv_obj_get_style_int+0x12c>
                    if(list->text_decor_none) def = true;
 80055e6:	79ea      	ldrb	r2, [r5, #7]
 80055e8:	e7e2      	b.n	80055b0 <_lv_obj_get_style_int+0x110>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 80055ea:	9b01      	ldr	r3, [sp, #4]
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	d5a2      	bpl.n	8005536 <_lv_obj_get_style_int+0x96>
        if(part != LV_OBJ_PART_MAIN) {
 80055f0:	f1b9 0f00 	cmp.w	r9, #0
 80055f4:	d103      	bne.n	80055fe <_lv_obj_get_style_int+0x15e>
        parent = lv_obj_get_parent(parent);
 80055f6:	4638      	mov	r0, r7
 80055f8:	f7fe ff62 	bl	80044c0 <lv_obj_get_parent>
 80055fc:	4607      	mov	r7, r0
 80055fe:	f04f 0900 	mov.w	r9, #0
 8005602:	e75a      	b.n	80054ba <_lv_obj_get_style_int+0x1a>
    switch(prop) {
 8005604:	2e31      	cmp	r6, #49	; 0x31
 8005606:	d00a      	beq.n	800561e <_lv_obj_get_style_int+0x17e>
 8005608:	2ec0      	cmp	r6, #192	; 0xc0
 800560a:	d19e      	bne.n	800554a <_lv_obj_get_style_int+0xaa>
            return LV_DPI / 8;
 800560c:	2014      	movs	r0, #20
 800560e:	e788      	b.n	8005522 <_lv_obj_get_style_int+0x82>
            return LV_DPI / 20;
 8005610:	2008      	movs	r0, #8
 8005612:	e786      	b.n	8005522 <_lv_obj_get_style_int+0x82>
            return 255;
 8005614:	20ff      	movs	r0, #255	; 0xff
 8005616:	e784      	b.n	8005522 <_lv_obj_get_style_int+0x82>
            return LV_IMG_ZOOM_NONE;
 8005618:	f44f 7080 	mov.w	r0, #256	; 0x100
 800561c:	e781      	b.n	8005522 <_lv_obj_get_style_int+0x82>
            return LV_BORDER_SIDE_FULL;
 800561e:	200f      	movs	r0, #15
 8005620:	e77f      	b.n	8005522 <_lv_obj_get_style_int+0x82>

08005622 <lv_obj_get_style_clip_corner>:
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 8005622:	b508      	push	{r3, lr}
 8005624:	2202      	movs	r2, #2
 8005626:	f7ff ff3b 	bl	80054a0 <_lv_obj_get_style_int>
 800562a:	3000      	adds	r0, #0
 800562c:	bf18      	it	ne
 800562e:	2001      	movne	r0, #1
 8005630:	bd08      	pop	{r3, pc}
	...

08005634 <lv_obj_get_width_fit>:
{
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005638:	f009 fcc6 	bl	800efc8 <lv_debug_check_null>
 800563c:	4603      	mov	r3, r0
 800563e:	b920      	cbnz	r0, 800564a <lv_obj_get_width_fit+0x16>
 8005640:	462a      	mov	r2, r5
 8005642:	480b      	ldr	r0, [pc, #44]	; (8005670 <lv_obj_get_width_fit+0x3c>)
 8005644:	f009 fcc4 	bl	800efd0 <lv_debug_log_error>
 8005648:	e7fe      	b.n	8005648 <lv_obj_get_width_fit+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 800564a:	2212      	movs	r2, #18
 800564c:	2100      	movs	r1, #0
 800564e:	4628      	mov	r0, r5
 8005650:	f7ff ff26 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8005654:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8005656:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8005658:	2100      	movs	r1, #0
 800565a:	4628      	mov	r0, r5
 800565c:	f7ff ff20 	bl	80054a0 <_lv_obj_get_style_int>
 8005660:	4606      	mov	r6, r0
    return lv_obj_get_width(obj) - left - right;
 8005662:	4628      	mov	r0, r5
 8005664:	f7fe ffd0 	bl	8004608 <lv_obj_get_width>
 8005668:	1b00      	subs	r0, r0, r4
 800566a:	1b80      	subs	r0, r0, r6
}
 800566c:	b200      	sxth	r0, r0
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	080158e8 	.word	0x080158e8

08005674 <update_style_cache>:
 * @param obj pointer to an object
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
 8005678:	4610      	mov	r0, r2
{
 800567a:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
 800567c:	f7fe fcf2 	bl	8004064 <style_prop_is_cacheble>
 8005680:	2800      	cmp	r0, #0
 8005682:	f000 8118 	beq.w	80058b6 <update_style_cache+0x242>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8005686:	4628      	mov	r0, r5
 8005688:	f7fe ffec 	bl	8004664 <lv_obj_get_style_list>

    bool ignore_cache_ori = list->ignore_cache;
 800568c:	7943      	ldrb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800568e:	4604      	mov	r4, r0
    bool ignore_cache_ori = list->ignore_cache;
 8005690:	f3c3 07c0 	ubfx	r7, r3, #3, #1
    list->ignore_cache = 1;
 8005694:	f043 0308 	orr.w	r3, r3, #8
 8005698:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 800569a:	f248 020c 	movw	r2, #32780	; 0x800c
 800569e:	4631      	mov	r1, r6
 80056a0:	4628      	mov	r0, r5
 80056a2:	f000 f99f 	bl	80059e4 <_lv_obj_get_style_opa>

#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 80056a6:	f1a0 0cff 	sub.w	ip, r0, #255	; 0xff
 80056aa:	f1dc 0000 	rsbs	r0, ip, #0
 80056ae:	7963      	ldrb	r3, [r4, #5]
 80056b0:	eb40 000c 	adc.w	r0, r0, ip
 80056b4:	f360 1345 	bfi	r3, r0, #5, #1
 80056b8:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
 80056ba:	f248 0282 	movw	r2, #32898	; 0x8082
 80056be:	4631      	mov	r1, r6
 80056c0:	4628      	mov	r0, r5
 80056c2:	f7ff feed 	bl	80054a0 <_lv_obj_get_style_int>
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 80056c6:	b2c0      	uxtb	r0, r0
 80056c8:	fab0 f080 	clz	r0, r0
 80056cc:	79e3      	ldrb	r3, [r4, #7]
 80056ce:	0940      	lsrs	r0, r0, #5
 80056d0:	f360 1386 	bfi	r3, r0, #6, #1
 80056d4:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 80056d6:	f248 028e 	movw	r2, #32910	; 0x808e
 80056da:	4631      	mov	r1, r6
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 f9e7 	bl	8005ab0 <_lv_obj_get_style_ptr>
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
 80056e2:	4bbf      	ldr	r3, [pc, #764]	; (80059e0 <update_style_cache+0x36c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 80056e4:	f248 0280 	movw	r2, #32896	; 0x8080
 80056e8:	eba3 0e00 	sub.w	lr, r3, r0
 80056ec:	f1de 0000 	rsbs	r0, lr, #0
 80056f0:	79e3      	ldrb	r3, [r4, #7]
 80056f2:	eb40 000e 	adc.w	r0, r0, lr
 80056f6:	f360 13c7 	bfi	r3, r0, #7, #1

    list->text_space_zero = 1;
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f043 0320 	orr.w	r3, r3, #32
 8005700:	71e3      	strb	r3, [r4, #7]
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	f7ff fecb 	bl	80054a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 800570a:	2800      	cmp	r0, #0
 800570c:	f000 80d4 	beq.w	80058b8 <update_style_cache+0x244>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
        list->text_space_zero = 0;
 8005710:	79e3      	ldrb	r3, [r4, #7]
 8005712:	f36f 1345 	bfc	r3, #5, #1
 8005716:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8005718:	222c      	movs	r2, #44	; 0x2c
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	f000 f961 	bl	80059e4 <_lv_obj_get_style_opa>
    }


    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
 8005722:	fab0 f280 	clz	r2, r0
 8005726:	79a3      	ldrb	r3, [r4, #6]
 8005728:	0952      	lsrs	r2, r2, #5
 800572a:	f362 03c3 	bfi	r3, r2, #3, #1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
 800572e:	f1a0 02ff 	sub.w	r2, r0, #255	; 0xff
 8005732:	4250      	negs	r0, r2
 8005734:	4150      	adcs	r0, r2
 8005736:	f360 1304 	bfi	r3, r0, #4, #1
 800573a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 800573c:	2230      	movs	r2, #48	; 0x30
 800573e:	4631      	mov	r1, r6
 8005740:	4628      	mov	r0, r5
 8005742:	f7ff fead 	bl	80054a0 <_lv_obj_get_style_int>

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
 8005746:	fab0 f080 	clz	r0, r0
 800574a:	79a3      	ldrb	r3, [r4, #6]
 800574c:	0940      	lsrs	r0, r0, #5
 800574e:	f360 1345 	bfi	r3, r0, #5, #1
 8005752:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 8005754:	2231      	movs	r2, #49	; 0x31
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	f7ff fea1 	bl	80054a0 <_lv_obj_get_style_int>
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
 800575e:	b2c0      	uxtb	r0, r0
 8005760:	f1a0 010f 	sub.w	r1, r0, #15
 8005764:	4248      	negs	r0, r1
 8005766:	79a3      	ldrb	r3, [r4, #6]
 8005768:	4148      	adcs	r0, r1
 800576a:	f360 1386 	bfi	r3, r0, #6, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 800576e:	2233      	movs	r2, #51	; 0x33
 8005770:	71a3      	strb	r3, [r4, #6]
 8005772:	4631      	mov	r1, r6
 8005774:	4628      	mov	r0, r5
 8005776:	f7ff fe93 	bl	80054a0 <_lv_obj_get_style_int>
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 800577a:	fab0 f080 	clz	r0, r0
 800577e:	79a3      	ldrb	r3, [r4, #6]
 8005780:	0940      	lsrs	r0, r0, #5
 8005782:	f360 13c7 	bfi	r3, r0, #7, #1
 8005786:	71a3      	strb	r3, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 8005788:	4631      	mov	r1, r6
 800578a:	4628      	mov	r0, r5
 800578c:	f7ff ff49 	bl	8005622 <lv_obj_get_style_clip_corner>
 8005790:	7963      	ldrb	r3, [r4, #5]
 8005792:	f080 0001 	eor.w	r0, r0, #1
 8005796:	f360 1386 	bfi	r3, r0, #6, #1
 800579a:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
 800579c:	f248 02ad 	movw	r2, #32941	; 0x80ad
 80057a0:	4631      	mov	r1, r6
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f91e 	bl	80059e4 <_lv_obj_get_style_opa>
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 80057a8:	fab0 f080 	clz	r0, r0
 80057ac:	79e3      	ldrb	r3, [r4, #7]
 80057ae:	0940      	lsrs	r0, r0, #5
 80057b0:	f360 1304 	bfi	r3, r0, #4, #1
 80057b4:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 80057b6:	2240      	movs	r2, #64	; 0x40
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	f7ff fe70 	bl	80054a0 <_lv_obj_get_style_int>
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
 80057c0:	fab0 f080 	clz	r0, r0
 80057c4:	79e3      	ldrb	r3, [r4, #7]
 80057c6:	0940      	lsrs	r0, r0, #5
 80057c8:	f360 0300 	bfi	r3, r0, #0, #1
 80057cc:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
 80057ce:	226e      	movs	r2, #110	; 0x6e
 80057d0:	4631      	mov	r1, r6
 80057d2:	4628      	mov	r0, r5
 80057d4:	f000 f96c 	bl	8005ab0 <_lv_obj_get_style_ptr>
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
 80057d8:	fab0 f080 	clz	r0, r0
 80057dc:	79e3      	ldrb	r3, [r4, #7]
 80057de:	0940      	lsrs	r0, r0, #5
 80057e0:	f360 0341 	bfi	r3, r0, #1, #1
 80057e4:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 80057e6:	2201      	movs	r2, #1
 80057e8:	4631      	mov	r1, r6
 80057ea:	4628      	mov	r0, r5
 80057ec:	f7ff fe58 	bl	80054a0 <_lv_obj_get_style_int>
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
 80057f0:	fab0 f080 	clz	r0, r0
 80057f4:	7963      	ldrb	r3, [r4, #5]
 80057f6:	0940      	lsrs	r0, r0, #5
 80057f8:	f360 1304 	bfi	r3, r0, #4, #1
 80057fc:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 80057fe:	2250      	movs	r2, #80	; 0x50
 8005800:	4631      	mov	r1, r6
 8005802:	4628      	mov	r0, r5
 8005804:	f7ff fe4c 	bl	80054a0 <_lv_obj_get_style_int>
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
 8005808:	fab0 f080 	clz	r0, r0
 800580c:	79e3      	ldrb	r3, [r4, #7]
 800580e:	0940      	lsrs	r0, r0, #5
 8005810:	f360 0382 	bfi	r3, r0, #2, #1
 8005814:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
 8005816:	227f      	movs	r2, #127	; 0x7f
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	f000 f948 	bl	8005ab0 <_lv_obj_get_style_ptr>
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 8005820:	fab0 f080 	clz	r0, r0
 8005824:	79e3      	ldrb	r3, [r4, #7]
 8005826:	0940      	lsrs	r0, r0, #5
 8005828:	f360 03c3 	bfi	r3, r0, #3, #1
 800582c:	71e3      	strb	r3, [r4, #7]


    list->transform_all_zero  = 1;
 800582e:	7963      	ldrb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
 8005830:	2206      	movs	r2, #6
 8005832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005836:	7163      	strb	r3, [r4, #5]
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	f7ff fe30 	bl	80054a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 8005840:	2800      	cmp	r0, #0
 8005842:	d043      	beq.n	80058cc <update_style_cache+0x258>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
       lv_obj_get_style_transform_height(obj, part) != 0 ||
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
        list->transform_all_zero  = 0;
 8005844:	7963      	ldrb	r3, [r4, #5]
 8005846:	f36f 13c7 	bfc	r3, #7, #1
 800584a:	7163      	strb	r3, [r4, #5]
    }

    list->pad_all_zero  = 1;
 800584c:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 800584e:	2210      	movs	r2, #16
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	71a3      	strb	r3, [r4, #6]
 8005856:	4631      	mov	r1, r6
 8005858:	4628      	mov	r0, r5
 800585a:	f7ff fe21 	bl	80054a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 800585e:	2800      	cmp	r0, #0
 8005860:	d04b      	beq.n	80058fa <update_style_cache+0x286>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
       lv_obj_get_style_pad_left(obj, part) != 0 ||
       lv_obj_get_style_pad_right(obj, part) != 0) {
        list->pad_all_zero  = 0;
 8005862:	79a3      	ldrb	r3, [r4, #6]
 8005864:	f36f 0300 	bfc	r3, #0, #1
 8005868:	71a3      	strb	r3, [r4, #6]
    }

    list->margin_all_zero  = 1;
 800586a:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 800586c:	2215      	movs	r2, #21
 800586e:	f043 0302 	orr.w	r3, r3, #2
 8005872:	71a3      	strb	r3, [r4, #6]
 8005874:	4631      	mov	r1, r6
 8005876:	4628      	mov	r0, r5
 8005878:	f7ff fe12 	bl	80054a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 800587c:	2800      	cmp	r0, #0
 800587e:	d052      	beq.n	8005926 <update_style_cache+0x2b2>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
       lv_obj_get_style_margin_left(obj, part) != 0 ||
       lv_obj_get_style_margin_right(obj, part) != 0) {
        list->margin_all_zero  = 0;
 8005880:	79a3      	ldrb	r3, [r4, #6]
 8005882:	f36f 0341 	bfc	r3, #1, #1
 8005886:	71a3      	strb	r3, [r4, #6]
    }

    list->blend_mode_all_normal = 1;
 8005888:	79a3      	ldrb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
 800588a:	2220      	movs	r2, #32
 800588c:	f043 0304 	orr.w	r3, r3, #4
 8005890:	71a3      	strb	r3, [r4, #6]
 8005892:	4631      	mov	r1, r6
 8005894:	4628      	mov	r0, r5
 8005896:	f7ff fe03 	bl	80054a0 <_lv_obj_get_style_int>
#if LV_USE_BLEND_MODES
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 800589a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800589e:	d058      	beq.n	8005952 <update_style_cache+0x2de>
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
        list->blend_mode_all_normal = 0;
 80058a0:	79a3      	ldrb	r3, [r4, #6]
 80058a2:	f36f 0382 	bfc	r3, #2, #1
 80058a6:	71a3      	strb	r3, [r4, #6]
    }
#endif
    list->ignore_cache = ignore_cache_ori;
 80058a8:	7963      	ldrb	r3, [r4, #5]
 80058aa:	f367 03c3 	bfi	r3, r7, #3, #1
    list->valid_cache = 1;
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f043 0304 	orr.w	r3, r3, #4
 80058b4:	7163      	strb	r3, [r4, #5]
}
 80058b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 80058b8:	f248 0281 	movw	r2, #32897	; 0x8081
 80058bc:	4631      	mov	r1, r6
 80058be:	4628      	mov	r0, r5
 80058c0:	f7ff fdee 	bl	80054a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80058c4:	2800      	cmp	r0, #0
 80058c6:	f47f af23 	bne.w	8005710 <update_style_cache+0x9c>
 80058ca:	e725      	b.n	8005718 <update_style_cache+0xa4>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80058cc:	2204      	movs	r2, #4
 80058ce:	4631      	mov	r1, r6
 80058d0:	4628      	mov	r0, r5
 80058d2:	f7ff fde5 	bl	80054a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d1b4      	bne.n	8005844 <update_style_cache+0x1d0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 80058da:	2205      	movs	r2, #5
 80058dc:	4631      	mov	r1, r6
 80058de:	4628      	mov	r0, r5
 80058e0:	f7ff fdde 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
 80058e4:	2800      	cmp	r0, #0
 80058e6:	d1ad      	bne.n	8005844 <update_style_cache+0x1d0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
 80058e8:	2207      	movs	r2, #7
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	f7ff fdd7 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
 80058f2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80058f6:	d1a5      	bne.n	8005844 <update_style_cache+0x1d0>
 80058f8:	e7a8      	b.n	800584c <update_style_cache+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80058fa:	2211      	movs	r2, #17
 80058fc:	4631      	mov	r1, r6
 80058fe:	4628      	mov	r0, r5
 8005900:	f7ff fdce 	bl	80054a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 8005904:	2800      	cmp	r0, #0
 8005906:	d1ac      	bne.n	8005862 <update_style_cache+0x1ee>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8005908:	2212      	movs	r2, #18
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	f7ff fdc7 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
 8005912:	2800      	cmp	r0, #0
 8005914:	d1a5      	bne.n	8005862 <update_style_cache+0x1ee>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8005916:	2213      	movs	r2, #19
 8005918:	4631      	mov	r1, r6
 800591a:	4628      	mov	r0, r5
 800591c:	f7ff fdc0 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
 8005920:	2800      	cmp	r0, #0
 8005922:	d19e      	bne.n	8005862 <update_style_cache+0x1ee>
 8005924:	e7a1      	b.n	800586a <update_style_cache+0x1f6>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8005926:	2216      	movs	r2, #22
 8005928:	4631      	mov	r1, r6
 800592a:	4628      	mov	r0, r5
 800592c:	f7ff fdb8 	bl	80054a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 8005930:	2800      	cmp	r0, #0
 8005932:	d1a5      	bne.n	8005880 <update_style_cache+0x20c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8005934:	2217      	movs	r2, #23
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	f7ff fdb1 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
 800593e:	2800      	cmp	r0, #0
 8005940:	d19e      	bne.n	8005880 <update_style_cache+0x20c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 8005942:	2218      	movs	r2, #24
 8005944:	4631      	mov	r1, r6
 8005946:	4628      	mov	r0, r5
 8005948:	f7ff fdaa 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
 800594c:	2800      	cmp	r0, #0
 800594e:	d197      	bne.n	8005880 <update_style_cache+0x20c>
 8005950:	e79a      	b.n	8005888 <update_style_cache+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
 8005952:	2232      	movs	r2, #50	; 0x32
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	f7ff fda2 	bl	80054a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 800595c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005960:	d19e      	bne.n	80058a0 <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
 8005962:	2260      	movs	r2, #96	; 0x60
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	f7ff fd9a 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 800596c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005970:	d196      	bne.n	80058a0 <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
 8005972:	2242      	movs	r2, #66	; 0x42
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	f7ff fd92 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 800597c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005980:	d18e      	bne.n	80058a0 <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
 8005982:	2272      	movs	r2, #114	; 0x72
 8005984:	4631      	mov	r1, r6
 8005986:	4628      	mov	r0, r5
 8005988:	f7ff fd8a 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 800598c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005990:	d186      	bne.n	80058a0 <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
 8005992:	f248 0283 	movw	r2, #32899	; 0x8083
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	f7ff fd81 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 800599e:	f010 0fff 	tst.w	r0, #255	; 0xff
 80059a2:	f47f af7d 	bne.w	80058a0 <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
 80059a6:	2291      	movs	r2, #145	; 0x91
 80059a8:	4631      	mov	r1, r6
 80059aa:	4628      	mov	r0, r5
 80059ac:	f7ff fd78 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80059b0:	f010 0fff 	tst.w	r0, #255	; 0xff
 80059b4:	f47f af74 	bne.w	80058a0 <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
 80059b8:	f248 02a0 	movw	r2, #32928	; 0x80a0
 80059bc:	4631      	mov	r1, r6
 80059be:	4628      	mov	r0, r5
 80059c0:	f7ff fd6e 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80059c4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80059c8:	f47f af6a 	bne.w	80058a0 <update_style_cache+0x22c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
 80059cc:	2254      	movs	r2, #84	; 0x54
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7ff fd65 	bl	80054a0 <_lv_obj_get_style_int>
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80059d6:	f010 0fff 	tst.w	r0, #255	; 0xff
 80059da:	f47f af61 	bne.w	80058a0 <update_style_cache+0x22c>
 80059de:	e763      	b.n	80058a8 <update_style_cache+0x234>
 80059e0:	20000038 	.word	0x20000038

080059e4 <_lv_obj_get_style_opa>:
{
 80059e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e8:	4605      	mov	r5, r0
 80059ea:	460f      	mov	r7, r1
 80059ec:	4690      	mov	r8, r2
    while(parent) {
 80059ee:	4614      	mov	r4, r2
            switch(prop & (~LV_STYLE_STATE_MASK)) {
 80059f0:	f248 0a0c 	movw	sl, #32780	; 0x800c
 80059f4:	f248 0bad 	movw	fp, #32941	; 0x80ad
{
 80059f8:	b085      	sub	sp, #20
    attr = prop_ori >> 8;
 80059fa:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
 80059fe:	b965      	cbnz	r5, 8005a1a <_lv_obj_get_style_opa+0x36>
    prop = prop & (~LV_STYLE_STATE_MASK);
 8005a00:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
 8005a04:	b2a4      	uxth	r4, r4
 8005a06:	2c6d      	cmp	r4, #109	; 0x6d
 8005a08:	d050      	beq.n	8005aac <_lv_obj_get_style_opa+0xc8>
 8005a0a:	f248 03ad 	movw	r3, #32941	; 0x80ad
 8005a0e:	429c      	cmp	r4, r3
 8005a10:	d04c      	beq.n	8005aac <_lv_obj_get_style_opa+0xc8>
 8005a12:	2c2c      	cmp	r4, #44	; 0x2c
 8005a14:	d04a      	beq.n	8005aac <_lv_obj_get_style_opa+0xc8>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 8005a16:	20ff      	movs	r0, #255	; 0xff
 8005a18:	e037      	b.n	8005a8a <_lv_obj_get_style_opa+0xa6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	f7fe fe21 	bl	8004664 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 8005a22:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8005a24:	4606      	mov	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 8005a26:	0718      	lsls	r0, r3, #28
 8005a28:	d41e      	bmi.n	8005a68 <_lv_obj_get_style_opa+0x84>
 8005a2a:	7932      	ldrb	r2, [r6, #4]
 8005a2c:	0691      	lsls	r1, r2, #26
 8005a2e:	d01b      	beq.n	8005a68 <_lv_obj_get_style_opa+0x84>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8005a30:	f013 0f04 	tst.w	r3, #4
 8005a34:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
 8005a38:	d106      	bne.n	8005a48 <_lv_obj_get_style_opa+0x64>
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	4628      	mov	r0, r5
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	f7ff fe17 	bl	8005674 <update_style_cache>
 8005a46:	9b01      	ldr	r3, [sp, #4]
            switch(prop & (~LV_STYLE_STATE_MASK)) {
 8005a48:	4553      	cmp	r3, sl
 8005a4a:	d009      	beq.n	8005a60 <_lv_obj_get_style_opa+0x7c>
 8005a4c:	455b      	cmp	r3, fp
 8005a4e:	d01f      	beq.n	8005a90 <_lv_obj_get_style_opa+0xac>
 8005a50:	2b2c      	cmp	r3, #44	; 0x2c
 8005a52:	d109      	bne.n	8005a68 <_lv_obj_get_style_opa+0x84>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 8005a54:	79b3      	ldrb	r3, [r6, #6]
 8005a56:	06da      	lsls	r2, r3, #27
 8005a58:	d4dd      	bmi.n	8005a16 <_lv_obj_get_style_opa+0x32>
                    if(list->bg_opa_transp) def = true;
 8005a5a:	f013 0f08 	tst.w	r3, #8
 8005a5e:	e002      	b.n	8005a66 <_lv_obj_get_style_opa+0x82>
                    if(list->opa_scale_cover) def = true;
 8005a60:	7973      	ldrb	r3, [r6, #5]
 8005a62:	f013 0f20 	tst.w	r3, #32
                    if(list->img_recolor_opa_transp) def = true;
 8005a66:	d1cb      	bne.n	8005a00 <_lv_obj_get_style_opa+0x1c>
        lv_state_t state = lv_obj_get_state(parent, part);
 8005a68:	4639      	mov	r1, r7
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f7ff fcc0 	bl	80053f0 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8005a70:	eb08 2000 	add.w	r0, r8, r0, lsl #8
 8005a74:	b284      	uxth	r4, r0
        res = _lv_style_list_get_opa(list, prop, &value_act);
 8005a76:	f10d 020f 	add.w	r2, sp, #15
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f002 fe4a 	bl	8008716 <_lv_style_list_get_opa>
        if(res == LV_RES_OK) return value_act;
 8005a82:	2801      	cmp	r0, #1
 8005a84:	d108      	bne.n	8005a98 <_lv_obj_get_style_opa+0xb4>
 8005a86:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 8005a8a:	b005      	add	sp, #20
 8005a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if(list->img_recolor_opa_transp) def = true;
 8005a90:	79f3      	ldrb	r3, [r6, #7]
 8005a92:	f013 0f10 	tst.w	r3, #16
 8005a96:	e7e6      	b.n	8005a66 <_lv_obj_get_style_opa+0x82>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8005a98:	f019 0f80 	tst.w	r9, #128	; 0x80
 8005a9c:	d0b0      	beq.n	8005a00 <_lv_obj_get_style_opa+0x1c>
        if(part != LV_OBJ_PART_MAIN) {
 8005a9e:	b91f      	cbnz	r7, 8005aa8 <_lv_obj_get_style_opa+0xc4>
        parent = lv_obj_get_parent(parent);
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f7fe fd0d 	bl	80044c0 <lv_obj_get_parent>
 8005aa6:	4605      	mov	r5, r0
 8005aa8:	2700      	movs	r7, #0
 8005aaa:	e7a8      	b.n	80059fe <_lv_obj_get_style_opa+0x1a>
            return LV_OPA_TRANSP;
 8005aac:	2000      	movs	r0, #0
 8005aae:	e7ec      	b.n	8005a8a <_lv_obj_get_style_opa+0xa6>

08005ab0 <_lv_obj_get_style_ptr>:
{
 8005ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	460f      	mov	r7, r1
 8005ab8:	4691      	mov	r9, r2
    while(parent) {
 8005aba:	4614      	mov	r4, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8005abc:	f248 0a8e 	movw	sl, #32910	; 0x808e
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8005ac0:	f342 2b07 	sbfx	fp, r2, #8, #8
    while(parent) {
 8005ac4:	b325      	cbz	r5, 8005b10 <_lv_obj_get_style_ptr+0x60>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f7fe fdcb 	bl	8004664 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
 8005ace:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8005ad0:	4606      	mov	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
 8005ad2:	0719      	lsls	r1, r3, #28
 8005ad4:	d42d      	bmi.n	8005b32 <_lv_obj_get_style_ptr+0x82>
 8005ad6:	7902      	ldrb	r2, [r0, #4]
 8005ad8:	0692      	lsls	r2, r2, #26
 8005ada:	d02a      	beq.n	8005b32 <_lv_obj_get_style_ptr+0x82>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8005adc:	f013 0f04 	tst.w	r3, #4
 8005ae0:	f424 48fe 	bic.w	r8, r4, #32512	; 0x7f00
 8005ae4:	d104      	bne.n	8005af0 <_lv_obj_get_style_ptr+0x40>
 8005ae6:	4642      	mov	r2, r8
 8005ae8:	4639      	mov	r1, r7
 8005aea:	4628      	mov	r0, r5
 8005aec:	f7ff fdc2 	bl	8005674 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8005af0:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8005af4:	d008      	beq.n	8005b08 <_lv_obj_get_style_ptr+0x58>
 8005af6:	45d0      	cmp	r8, sl
 8005af8:	d017      	beq.n	8005b2a <_lv_obj_get_style_ptr+0x7a>
 8005afa:	f1b8 0f6e 	cmp.w	r8, #110	; 0x6e
 8005afe:	d118      	bne.n	8005b32 <_lv_obj_get_style_ptr+0x82>
                    if(list->pattern_img_null) def = true;
 8005b00:	79f3      	ldrb	r3, [r6, #7]
 8005b02:	f013 0f02 	tst.w	r3, #2
 8005b06:	e002      	b.n	8005b0e <_lv_obj_get_style_ptr+0x5e>
                    if(list->value_txt_str) def = true;
 8005b08:	79f3      	ldrb	r3, [r6, #7]
 8005b0a:	f013 0f08 	tst.w	r3, #8
                    if(list->pattern_img_null) def = true;
 8005b0e:	d010      	beq.n	8005b32 <_lv_obj_get_style_ptr+0x82>
    prop = prop & (~LV_STYLE_STATE_MASK);
 8005b10:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
 8005b14:	b2a4      	uxth	r4, r4
 8005b16:	2cbe      	cmp	r4, #190	; 0xbe
 8005b18:	d02a      	beq.n	8005b70 <_lv_obj_get_style_ptr+0xc0>
 8005b1a:	f248 038e 	movw	r3, #32910	; 0x808e
 8005b1e:	429c      	cmp	r4, r3
 8005b20:	d023      	beq.n	8005b6a <_lv_obj_get_style_ptr+0xba>
 8005b22:	2c7e      	cmp	r4, #126	; 0x7e
 8005b24:	d021      	beq.n	8005b6a <_lv_obj_get_style_ptr+0xba>
    return NULL;
 8005b26:	2000      	movs	r0, #0
 8005b28:	e012      	b.n	8005b50 <_lv_obj_get_style_ptr+0xa0>
                    if(list->text_font_normal) def = true;
 8005b2a:	f996 3007 	ldrsb.w	r3, [r6, #7]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	dbee      	blt.n	8005b10 <_lv_obj_get_style_ptr+0x60>
        lv_state_t state = lv_obj_get_state(parent, part);
 8005b32:	4639      	mov	r1, r7
 8005b34:	4628      	mov	r0, r5
 8005b36:	f7ff fc5b 	bl	80053f0 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8005b3a:	eb09 2000 	add.w	r0, r9, r0, lsl #8
 8005b3e:	b284      	uxth	r4, r0
        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8005b40:	aa01      	add	r2, sp, #4
 8005b42:	4621      	mov	r1, r4
 8005b44:	4630      	mov	r0, r6
 8005b46:	f002 fe28 	bl	800879a <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
 8005b4a:	2801      	cmp	r0, #1
 8005b4c:	d103      	bne.n	8005b56 <_lv_obj_get_style_ptr+0xa6>
 8005b4e:	9801      	ldr	r0, [sp, #4]
}
 8005b50:	b003      	add	sp, #12
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8005b56:	f1bb 0f00 	cmp.w	fp, #0
 8005b5a:	dad9      	bge.n	8005b10 <_lv_obj_get_style_ptr+0x60>
        if(part != LV_OBJ_PART_MAIN) {
 8005b5c:	b91f      	cbnz	r7, 8005b66 <_lv_obj_get_style_ptr+0xb6>
        parent = lv_obj_get_parent(parent);
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f7fe fcae 	bl	80044c0 <lv_obj_get_parent>
 8005b64:	4605      	mov	r5, r0
 8005b66:	2700      	movs	r7, #0
 8005b68:	e7ac      	b.n	8005ac4 <_lv_obj_get_style_ptr+0x14>
            return lv_theme_get_font_normal();
 8005b6a:	f00b f81b 	bl	8010ba4 <lv_theme_get_font_normal>
 8005b6e:	e7ef      	b.n	8005b50 <_lv_obj_get_style_ptr+0xa0>
            return &lv_anim_path_def;
 8005b70:	4800      	ldr	r0, [pc, #0]	; (8005b74 <_lv_obj_get_style_ptr+0xc4>)
 8005b72:	e7ed      	b.n	8005b50 <_lv_obj_get_style_ptr+0xa0>
 8005b74:	080197b4 	.word	0x080197b4

08005b78 <trans_anim_start_cb>:
{
 8005b78:	b538      	push	{r3, r4, r5, lr}
    lv_style_trans_t * tr = a->var;
 8005b7a:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
 8005b7c:	88a5      	ldrh	r5, [r4, #4]
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	f005 030f 	and.w	r3, r5, #15
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	79a1      	ldrb	r1, [r4, #6]
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
 8005b88:	462a      	mov	r2, r5
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 8005b8a:	d80c      	bhi.n	8005ba6 <trans_anim_start_cb+0x2e>
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
 8005b8c:	f7ff fc88 	bl	80054a0 <_lv_obj_get_style_int>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
 8005b90:	8120      	strh	r0, [r4, #8]
    tr->prop = 0;
 8005b92:	2300      	movs	r3, #0
    trans_del(tr->obj, tr->part, prop_tmp, tr);
 8005b94:	462a      	mov	r2, r5
    tr->prop = 0;
 8005b96:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
 8005b98:	79a1      	ldrb	r1, [r4, #6]
 8005b9a:	4623      	mov	r3, r4
 8005b9c:	6820      	ldr	r0, [r4, #0]
 8005b9e:	f7fe fd73 	bl	8004688 <trans_del>
    tr->prop = prop_tmp;
 8005ba2:	80a5      	strh	r5, [r4, #4]
}
 8005ba4:	bd38      	pop	{r3, r4, r5, pc}
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8005ba6:	2b0b      	cmp	r3, #11
 8005ba8:	d802      	bhi.n	8005bb0 <trans_anim_start_cb+0x38>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
 8005baa:	f7ff fc43 	bl	8005434 <_lv_obj_get_style_color>
 8005bae:	e7ef      	b.n	8005b90 <trans_anim_start_cb+0x18>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8005bb0:	2b0d      	cmp	r3, #13
 8005bb2:	d803      	bhi.n	8005bbc <trans_anim_start_cb+0x44>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
 8005bb4:	f7ff ff16 	bl	80059e4 <_lv_obj_get_style_opa>
 8005bb8:	7220      	strb	r0, [r4, #8]
 8005bba:	e7ea      	b.n	8005b92 <trans_anim_start_cb+0x1a>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
 8005bbc:	f7ff ff78 	bl	8005ab0 <_lv_obj_get_style_ptr>
 8005bc0:	60a0      	str	r0, [r4, #8]
 8005bc2:	e7e6      	b.n	8005b92 <trans_anim_start_cb+0x1a>

08005bc4 <update_style_cache_children>:
 * Update the cache of style list
 * @param obj pointer to an object
 * @param part the part of the object
 */
static void update_style_cache_children(lv_obj_t * obj)
{
 8005bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc8:	4605      	mov	r5, r0
 8005bca:	2700      	movs	r7, #0
 8005bcc:	b2fe      	uxtb	r6, r7
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	f7fe fd47 	bl	8004664 <lv_obj_get_style_list>
        if(list == NULL) break;
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d054      	beq.n	8005c86 <update_style_cache_children+0xc2>

        bool ignore_cache_ori = list->ignore_cache;
 8005bdc:	7943      	ldrb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8005bde:	f248 020c 	movw	r2, #32780	; 0x800c
 8005be2:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
 8005be6:	f043 0308 	orr.w	r3, r3, #8
 8005bea:	7143      	strb	r3, [r0, #5]
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f7ff fef8 	bl	80059e4 <_lv_obj_get_style_opa>

        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 8005bf4:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 8005bf8:	4258      	negs	r0, r3
 8005bfa:	4158      	adcs	r0, r3
 8005bfc:	7963      	ldrb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
 8005bfe:	f248 0282 	movw	r2, #32898	; 0x8082
 8005c02:	f360 1345 	bfi	r3, r0, #5, #1
 8005c06:	7163      	strb	r3, [r4, #5]
 8005c08:	4631      	mov	r1, r6
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f7ff fc48 	bl	80054a0 <_lv_obj_get_style_int>
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8005c10:	b2c0      	uxtb	r0, r0
 8005c12:	fab0 f080 	clz	r0, r0
 8005c16:	79e3      	ldrb	r3, [r4, #7]
 8005c18:	0940      	lsrs	r0, r0, #5
 8005c1a:	f360 1386 	bfi	r3, r0, #6, #1
 8005c1e:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 8005c20:	f248 028e 	movw	r2, #32910	; 0x808e
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	f7ff ff42 	bl	8005ab0 <_lv_obj_get_style_ptr>
 8005c2c:	4681      	mov	r9, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
 8005c2e:	f00a ffb9 	bl	8010ba4 <lv_theme_get_font_normal>
 8005c32:	eba9 0200 	sub.w	r2, r9, r0
 8005c36:	4250      	negs	r0, r2
 8005c38:	79e3      	ldrb	r3, [r4, #7]
 8005c3a:	4150      	adcs	r0, r2
 8005c3c:	f360 13c7 	bfi	r3, r0, #7, #1
 8005c40:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
 8005c42:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f7ff fecb 	bl	80059e4 <_lv_obj_get_style_opa>
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 8005c4e:	fab0 f080 	clz	r0, r0
 8005c52:	79e3      	ldrb	r3, [r4, #7]
 8005c54:	0940      	lsrs	r0, r0, #5
 8005c56:	f360 1304 	bfi	r3, r0, #4, #1

        list->text_space_zero = 1;
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	f043 0320 	orr.w	r3, r3, #32
 8005c60:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 8005c62:	f248 0280 	movw	r2, #32896	; 0x8080
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	f7ff fc19 	bl	80054a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8005c6e:	b190      	cbz	r0, 8005c96 <update_style_cache_children+0xd2>
           lv_obj_get_style_text_line_space(obj, part) != 0) {
            list->text_space_zero = 0;
 8005c70:	79e3      	ldrb	r3, [r4, #7]
 8005c72:	f36f 1345 	bfc	r3, #5, #1
 8005c76:	71e3      	strb	r3, [r4, #7]
        }

        list->ignore_cache = ignore_cache_ori;
 8005c78:	7963      	ldrb	r3, [r4, #5]
 8005c7a:	3701      	adds	r7, #1
 8005c7c:	f368 03c3 	bfi	r3, r8, #3, #1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8005c80:	2f40      	cmp	r7, #64	; 0x40
        list->ignore_cache = ignore_cache_ori;
 8005c82:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8005c84:	d1a2      	bne.n	8005bcc <update_style_cache_children+0x8>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8005c86:	2100      	movs	r1, #0
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f7fe fc5f 	bl	800454c <lv_obj_get_child>
 8005c8e:	4604      	mov	r4, r0
    while(child) {
 8005c90:	b950      	cbnz	r0, 8005ca8 <update_style_cache_children+0xe4>
    }

}
 8005c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8005c96:	f248 0281 	movw	r2, #32897	; 0x8081
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f7ff fbff 	bl	80054a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d1e4      	bne.n	8005c70 <update_style_cache_children+0xac>
 8005ca6:	e7e7      	b.n	8005c78 <update_style_cache_children+0xb4>
        update_style_cache_children(child);
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f7ff ff8b 	bl	8005bc4 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 8005cae:	4621      	mov	r1, r4
 8005cb0:	e7ea      	b.n	8005c88 <update_style_cache_children+0xc4>

08005cb2 <invalidate_style_cache>:
 * Mark the object and all of it's children's style lists as invalid.
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8005cb2:	b538      	push	{r3, r4, r5, lr}
 8005cb4:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f7fe f9d4 	bl	8004064 <style_prop_is_cacheble>
 8005cbc:	b178      	cbz	r0, 8005cde <invalidate_style_cache+0x2c>

    if(part != LV_OBJ_PART_ALL) {
 8005cbe:	29ff      	cmp	r1, #255	; 0xff
 8005cc0:	d00e      	beq.n	8005ce0 <invalidate_style_cache+0x2e>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f7fe fcce 	bl	8004664 <lv_obj_get_style_list>
        if(list == NULL) return;
 8005cc8:	b148      	cbz	r0, 8005cde <invalidate_style_cache+0x2c>
        list->valid_cache = 0;
 8005cca:	7943      	ldrb	r3, [r0, #5]
 8005ccc:	f36f 0382 	bfc	r3, #2, #1
 8005cd0:	7143      	strb	r3, [r0, #5]
            if(list == NULL) break;
            list->valid_cache = 0;
        }
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8005cd2:	2100      	movs	r1, #0
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f7fe fc39 	bl	800454c <lv_obj_get_child>
 8005cda:	4604      	mov	r4, r0
    while(child) {
 8005cdc:	b9e8      	cbnz	r0, 8005d1a <invalidate_style_cache+0x68>
    }
}
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	2400      	movs	r4, #0
            lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8005ce2:	b2e1      	uxtb	r1, r4
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f7fe fcbd 	bl	8004664 <lv_obj_get_style_list>
            if(list == NULL) break;
 8005cea:	b130      	cbz	r0, 8005cfa <invalidate_style_cache+0x48>
            list->valid_cache = 0;
 8005cec:	7943      	ldrb	r3, [r0, #5]
 8005cee:	3401      	adds	r4, #1
 8005cf0:	f36f 0382 	bfc	r3, #2, #1
        for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8005cf4:	2c40      	cmp	r4, #64	; 0x40
            list->valid_cache = 0;
 8005cf6:	7143      	strb	r3, [r0, #5]
        for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8005cf8:	d1f3      	bne.n	8005ce2 <invalidate_style_cache+0x30>
 8005cfa:	2440      	movs	r4, #64	; 0x40
            lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f7fe fcb0 	bl	8004664 <lv_obj_get_style_list>
            if(list == NULL) break;
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d0e4      	beq.n	8005cd2 <invalidate_style_cache+0x20>
            list->valid_cache = 0;
 8005d08:	7943      	ldrb	r3, [r0, #5]
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8005d0a:	3401      	adds	r4, #1
 8005d0c:	b2e4      	uxtb	r4, r4
            list->valid_cache = 0;
 8005d0e:	f36f 0382 	bfc	r3, #2, #1
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8005d12:	2cff      	cmp	r4, #255	; 0xff
            list->valid_cache = 0;
 8005d14:	7143      	strb	r3, [r0, #5]
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8005d16:	d1f1      	bne.n	8005cfc <invalidate_style_cache+0x4a>
 8005d18:	e7db      	b.n	8005cd2 <invalidate_style_cache+0x20>
        update_style_cache_children(child);
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7ff ff52 	bl	8005bc4 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 8005d20:	4621      	mov	r1, r4
 8005d22:	e7d7      	b.n	8005cd4 <invalidate_style_cache+0x22>

08005d24 <lv_obj_refresh_style>:
{
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4605      	mov	r5, r0
 8005d28:	460e      	mov	r6, r1
 8005d2a:	4614      	mov	r4, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005d2c:	f009 f94c 	bl	800efc8 <lv_debug_check_null>
 8005d30:	4603      	mov	r3, r0
 8005d32:	b920      	cbnz	r0, 8005d3e <lv_obj_refresh_style+0x1a>
 8005d34:	462a      	mov	r2, r5
 8005d36:	4831      	ldr	r0, [pc, #196]	; (8005dfc <lv_obj_refresh_style+0xd8>)
 8005d38:	f009 f94a 	bl	800efd0 <lv_debug_log_error>
 8005d3c:	e7fe      	b.n	8005d3c <lv_obj_refresh_style+0x18>
    invalidate_style_cache(obj, part, prop);
 8005d3e:	4622      	mov	r2, r4
 8005d40:	4631      	mov	r1, r6
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7ff ffb5 	bl	8005cb2 <invalidate_style_cache>
    switch(prop) {
 8005d48:	2c71      	cmp	r4, #113	; 0x71
 8005d4a:	d834      	bhi.n	8005db6 <lv_obj_refresh_style+0x92>
 8005d4c:	2c70      	cmp	r4, #112	; 0x70
 8005d4e:	d20b      	bcs.n	8005d68 <lv_obj_refresh_style+0x44>
 8005d50:	2c41      	cmp	r4, #65	; 0x41
 8005d52:	d823      	bhi.n	8005d9c <lv_obj_refresh_style+0x78>
 8005d54:	2c40      	cmp	r4, #64	; 0x40
 8005d56:	d207      	bcs.n	8005d68 <lv_obj_refresh_style+0x44>
 8005d58:	2c02      	cmp	r4, #2
 8005d5a:	d325      	bcc.n	8005da8 <lv_obj_refresh_style+0x84>
 8005d5c:	2c07      	cmp	r4, #7
 8005d5e:	d903      	bls.n	8005d68 <lv_obj_refresh_style+0x44>
 8005d60:	f1a4 0310 	sub.w	r3, r4, #16
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d81f      	bhi.n	8005da8 <lv_obj_refresh_style+0x84>
        lv_obj_invalidate(obj);
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f7fe fdb9 	bl	80048e0 <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8005d6e:	69eb      	ldr	r3, [r5, #28]
 8005d70:	2200      	movs	r2, #0
 8005d72:	2104      	movs	r1, #4
 8005d74:	4628      	mov	r0, r5
 8005d76:	4798      	blx	r3
        switch(prop) {
 8005d78:	2c15      	cmp	r4, #21
 8005d7a:	d303      	bcc.n	8005d84 <lv_obj_refresh_style+0x60>
 8005d7c:	2c18      	cmp	r4, #24
 8005d7e:	d934      	bls.n	8005dea <lv_obj_refresh_style+0xc6>
 8005d80:	2cff      	cmp	r4, #255	; 0xff
 8005d82:	d032      	beq.n	8005dea <lv_obj_refresh_style+0xc6>
        lv_obj_invalidate(obj);
 8005d84:	4628      	mov	r0, r5
 8005d86:	f7fe fdab 	bl	80048e0 <lv_obj_invalidate>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 8005d8a:	2cff      	cmp	r4, #255	; 0xff
 8005d8c:	d001      	beq.n	8005d92 <lv_obj_refresh_style+0x6e>
 8005d8e:	0423      	lsls	r3, r4, #16
 8005d90:	d533      	bpl.n	8005dfa <lv_obj_refresh_style+0xd6>
 8005d92:	4628      	mov	r0, r5
}
 8005d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 8005d98:	f7fe bff2 	b.w	8004d80 <refresh_children_style>
    switch(prop) {
 8005d9c:	2c53      	cmp	r4, #83	; 0x53
 8005d9e:	d808      	bhi.n	8005db2 <lv_obj_refresh_style+0x8e>
 8005da0:	2c50      	cmp	r4, #80	; 0x50
 8005da2:	d2e1      	bcs.n	8005d68 <lv_obj_refresh_style+0x44>
 8005da4:	2c4c      	cmp	r4, #76	; 0x4c
 8005da6:	d0df      	beq.n	8005d68 <lv_obj_refresh_style+0x44>
        lv_obj_invalidate(obj);
 8005da8:	4628      	mov	r0, r5
}
 8005daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_invalidate(obj);
 8005dae:	f7fe bd97 	b.w	80048e0 <lv_obj_invalidate>
    switch(prop) {
 8005db2:	2c5c      	cmp	r4, #92	; 0x5c
 8005db4:	e7f7      	b.n	8005da6 <lv_obj_refresh_style+0x82>
 8005db6:	2c7f      	cmp	r4, #127	; 0x7f
 8005db8:	d807      	bhi.n	8005dca <lv_obj_refresh_style+0xa6>
 8005dba:	2c7e      	cmp	r4, #126	; 0x7e
 8005dbc:	d2d4      	bcs.n	8005d68 <lv_obj_refresh_style+0x44>
 8005dbe:	2c73      	cmp	r4, #115	; 0x73
 8005dc0:	d3f2      	bcc.n	8005da8 <lv_obj_refresh_style+0x84>
 8005dc2:	2c75      	cmp	r4, #117	; 0x75
 8005dc4:	d9d0      	bls.n	8005d68 <lv_obj_refresh_style+0x44>
 8005dc6:	2c7c      	cmp	r4, #124	; 0x7c
 8005dc8:	e7ed      	b.n	8005da6 <lv_obj_refresh_style+0x82>
 8005dca:	f248 0381 	movw	r3, #32897	; 0x8081
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	d807      	bhi.n	8005de2 <lv_obj_refresh_style+0xbe>
 8005dd2:	f248 0380 	movw	r3, #32896	; 0x8080
 8005dd6:	429c      	cmp	r4, r3
 8005dd8:	d2c6      	bcs.n	8005d68 <lv_obj_refresh_style+0x44>
 8005dda:	2c90      	cmp	r4, #144	; 0x90
 8005ddc:	d0c4      	beq.n	8005d68 <lv_obj_refresh_style+0x44>
 8005dde:	2cff      	cmp	r4, #255	; 0xff
 8005de0:	e7e1      	b.n	8005da6 <lv_obj_refresh_style+0x82>
 8005de2:	f248 038e 	movw	r3, #32910	; 0x808e
 8005de6:	429c      	cmp	r4, r3
 8005de8:	e7dd      	b.n	8005da6 <lv_obj_refresh_style+0x82>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
 8005dea:	6828      	ldr	r0, [r5, #0]
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d0c9      	beq.n	8005d84 <lv_obj_refresh_style+0x60>
 8005df0:	69c3      	ldr	r3, [r0, #28]
 8005df2:	2200      	movs	r2, #0
 8005df4:	2101      	movs	r1, #1
 8005df6:	4798      	blx	r3
 8005df8:	e7c4      	b.n	8005d84 <lv_obj_refresh_style+0x60>
}
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	080158e8 	.word	0x080158e8

08005e00 <lv_obj_add_style>:
{
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	4604      	mov	r4, r0
 8005e04:	460d      	mov	r5, r1
    if(style == NULL) return;
 8005e06:	4616      	mov	r6, r2
 8005e08:	b192      	cbz	r2, 8005e30 <lv_obj_add_style+0x30>
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
 8005e0a:	f7fe fc2b 	bl	8004664 <lv_obj_get_style_list>
    if(style_dsc == NULL) {
 8005e0e:	b178      	cbz	r0, 8005e30 <lv_obj_add_style+0x30>
    _lv_style_list_add_style(style_dsc, style);
 8005e10:	4631      	mov	r1, r6
 8005e12:	f002 f8a5 	bl	8007f60 <_lv_style_list_add_style>
    trans_del(obj, part, 0xFF, NULL);
 8005e16:	4629      	mov	r1, r5
 8005e18:	4620      	mov	r0, r4
 8005e1a:	22ff      	movs	r2, #255	; 0xff
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f7fe fc33 	bl	8004688 <trans_del>
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8005e22:	4629      	mov	r1, r5
 8005e24:	4620      	mov	r0, r4
}
 8005e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8005e2a:	22ff      	movs	r2, #255	; 0xff
 8005e2c:	f7ff bf7a 	b.w	8005d24 <lv_obj_refresh_style>
}
 8005e30:	bd70      	pop	{r4, r5, r6, pc}

08005e32 <lv_obj_reset_style_list>:
{
 8005e32:	b538      	push	{r3, r4, r5, lr}
 8005e34:	4604      	mov	r4, r0
 8005e36:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
 8005e38:	f7fe fc5e 	bl	80046f8 <lv_obj_clean_style_list>
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	4620      	mov	r0, r4
}
 8005e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8005e44:	22ff      	movs	r2, #255	; 0xff
 8005e46:	f7ff bf6d 	b.w	8005d24 <lv_obj_refresh_style>

08005e4a <_lv_obj_set_style_local_int>:
{
 8005e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	461f      	mov	r7, r3
 8005e50:	460e      	mov	r6, r1
 8005e52:	4605      	mov	r5, r0
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
 8005e54:	f7fe fc06 	bl	8004664 <lv_obj_get_style_list>
    _lv_style_list_set_local_int(style_dsc, prop, value);
 8005e58:	463a      	mov	r2, r7
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	f002 fbb6 	bl	80085cc <_lv_style_list_set_local_int>
    trans_del(obj, part, prop, NULL);
 8005e60:	4622      	mov	r2, r4
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	2300      	movs	r3, #0
 8005e68:	f7fe fc0e 	bl	8004688 <trans_del>
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
 8005e6c:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
 8005e70:	4631      	mov	r1, r6
 8005e72:	4628      	mov	r0, r5
}
 8005e74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
 8005e78:	f7ff bf54 	b.w	8005d24 <lv_obj_refresh_style>

08005e7c <_lv_obj_set_style_local_color>:
{
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	4614      	mov	r4, r2
 8005e80:	461f      	mov	r7, r3
 8005e82:	460e      	mov	r6, r1
 8005e84:	4605      	mov	r5, r0
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
 8005e86:	f7fe fbed 	bl	8004664 <lv_obj_get_style_list>
    _lv_style_list_set_local_color(style_dsc, prop, color);
 8005e8a:	463a      	mov	r2, r7
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	f002 fbb3 	bl	80085f8 <_lv_style_list_set_local_color>
    trans_del(obj, part, prop, NULL);
 8005e92:	4622      	mov	r2, r4
 8005e94:	4631      	mov	r1, r6
 8005e96:	4628      	mov	r0, r5
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f7fe fbf5 	bl	8004688 <trans_del>
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
 8005e9e:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4628      	mov	r0, r5
}
 8005ea6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
 8005eaa:	f7ff bf3b 	b.w	8005d24 <lv_obj_refresh_style>

08005eae <_lv_obj_set_style_local_opa>:
{
 8005eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	461f      	mov	r7, r3
 8005eb4:	460e      	mov	r6, r1
 8005eb6:	4605      	mov	r5, r0
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
 8005eb8:	f7fe fbd4 	bl	8004664 <lv_obj_get_style_list>
    _lv_style_list_set_local_opa(style_dsc, prop, opa);
 8005ebc:	463a      	mov	r2, r7
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	f002 fb8f 	bl	80085e2 <_lv_style_list_set_local_opa>
    trans_del(obj, part, prop, NULL);
 8005ec4:	4622      	mov	r2, r4
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f7fe fbdc 	bl	8004688 <trans_del>
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
 8005ed0:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
}
 8005ed8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
 8005edc:	f7ff bf22 	b.w	8005d24 <lv_obj_refresh_style>

08005ee0 <trans_anim_cb>:
{
 8005ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8005ee8:	7981      	ldrb	r1, [r0, #6]
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	f7fe fbba 	bl	8004664 <lv_obj_get_style_list>
    lv_style_t * style = _lv_style_list_get_transition_style(list);
 8005ef0:	f002 fa97 	bl	8008422 <_lv_style_list_get_transition_style>
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
 8005ef4:	88a1      	ldrh	r1, [r4, #4]
 8005ef6:	f001 030f 	and.w	r3, r1, #15
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d817      	bhi.n	8005f2e <trans_anim_cb+0x4e>
        if(v == 0) x = tr->start_value._int;
 8005efe:	b955      	cbnz	r5, 8005f16 <trans_anim_cb+0x36>
 8005f00:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
 8005f04:	f002 f8ea 	bl	80080dc <_lv_style_set_int>
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
 8005f08:	88a2      	ldrh	r2, [r4, #4]
 8005f0a:	79a1      	ldrb	r1, [r4, #6]
 8005f0c:	6820      	ldr	r0, [r4, #0]
}
 8005f0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
 8005f12:	f7ff bf07 	b.w	8005d24 <lv_obj_refresh_style>
        else if(v == 255) x = tr->end_value._int;
 8005f16:	2dff      	cmp	r5, #255	; 0xff
 8005f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f1c:	d0f2      	beq.n	8005f04 <trans_anim_cb+0x24>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
 8005f1e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8005f22:	1ad2      	subs	r2, r2, r3
 8005f24:	4355      	muls	r5, r2
 8005f26:	eb03 2525 	add.w	r5, r3, r5, asr #8
 8005f2a:	b22a      	sxth	r2, r5
 8005f2c:	e7ea      	b.n	8005f04 <trans_anim_cb+0x24>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8005f2e:	2b0b      	cmp	r3, #11
 8005f30:	d849      	bhi.n	8005fc6 <trans_anim_cb+0xe6>
        if(v <= 0) x = tr->start_value._color;
 8005f32:	2d00      	cmp	r5, #0
 8005f34:	dc03      	bgt.n	8005f3e <trans_anim_cb+0x5e>
 8005f36:	8922      	ldrh	r2, [r4, #8]
        _lv_style_set_color(style, tr->prop, x);
 8005f38:	f002 f91e 	bl	8008178 <_lv_style_set_color>
 8005f3c:	e7e4      	b.n	8005f08 <trans_anim_cb+0x28>
        else if(v >= 255) x = tr->end_value._color;
 8005f3e:	2dfe      	cmp	r5, #254	; 0xfe
 8005f40:	dd01      	ble.n	8005f46 <trans_anim_cb+0x66>
 8005f42:	89a2      	ldrh	r2, [r4, #12]
 8005f44:	e7f8      	b.n	8005f38 <trans_anim_cb+0x58>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005f46:	f894 8008 	ldrb.w	r8, [r4, #8]
 8005f4a:	f1c5 0cff 	rsb	ip, r5, #255	; 0xff
 8005f4e:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8005f52:	fb0c f202 	mul.w	r2, ip, r2
 8005f56:	7b23      	ldrb	r3, [r4, #12]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005f58:	f008 0907 	and.w	r9, r8, #7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005f5c:	08de      	lsrs	r6, r3, #3
 8005f5e:	fb05 2606 	mla	r6, r5, r6, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005f62:	7b62      	ldrb	r2, [r4, #13]
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8005f6c:	eb0e 03c3 	add.w	r3, lr, r3, lsl #3
 8005f70:	f894 e009 	ldrb.w	lr, [r4, #9]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005f74:	f248 0781 	movw	r7, #32897	; 0x8081
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005f78:	ea4f 185e 	mov.w	r8, lr, lsr #5
 8005f7c:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8005f80:	f00e 0e1f 	and.w	lr, lr, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005f84:	fb0c f808 	mul.w	r8, ip, r8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8005f88:	fb0c fc0e 	mul.w	ip, ip, lr
 8005f8c:	f002 021f 	and.w	r2, r2, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005f90:	fb05 8303 	mla	r3, r5, r3, r8
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8005f94:	fb05 c502 	mla	r5, r5, r2, ip
 8005f98:	f04f 0200 	mov.w	r2, #0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005f9c:	3380      	adds	r3, #128	; 0x80
 8005f9e:	437b      	muls	r3, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005fa0:	3680      	adds	r6, #128	; 0x80
 8005fa2:	437e      	muls	r6, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8005fa4:	3580      	adds	r5, #128	; 0x80
 8005fa6:	437d      	muls	r5, r7
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005fa8:	0e9f      	lsrs	r7, r3, #26
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8005faa:	f3c6 56c4 	ubfx	r6, r6, #23, #5
 8005fae:	f367 0202 	bfi	r2, r7, #0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8005fb2:	f3c5 55c4 	ubfx	r5, r5, #23, #5
 8005fb6:	f366 02c7 	bfi	r2, r6, #3, #5
 8005fba:	f365 220c 	bfi	r2, r5, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8005fbe:	0ddb      	lsrs	r3, r3, #23
 8005fc0:	f363 324f 	bfi	r2, r3, #13, #3
 8005fc4:	e7b8      	b.n	8005f38 <trans_anim_cb+0x58>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8005fc6:	2b0d      	cmp	r3, #13
 8005fc8:	d80f      	bhi.n	8005fea <trans_anim_cb+0x10a>
        if(v <= 0) x = tr->start_value._opa;
 8005fca:	2d00      	cmp	r5, #0
 8005fcc:	dc03      	bgt.n	8005fd6 <trans_anim_cb+0xf6>
 8005fce:	7a22      	ldrb	r2, [r4, #8]
        _lv_style_set_opa(style, tr->prop, x);
 8005fd0:	f002 f920 	bl	8008214 <_lv_style_set_opa>
 8005fd4:	e798      	b.n	8005f08 <trans_anim_cb+0x28>
        else if(v >= 255) x = tr->end_value._opa;
 8005fd6:	2dfe      	cmp	r5, #254	; 0xfe
 8005fd8:	7b22      	ldrb	r2, [r4, #12]
 8005fda:	dcf9      	bgt.n	8005fd0 <trans_anim_cb+0xf0>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
 8005fdc:	7a23      	ldrb	r3, [r4, #8]
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	4355      	muls	r5, r2
 8005fe2:	eb03 2525 	add.w	r5, r3, r5, asr #8
 8005fe6:	b2ea      	uxtb	r2, r5
 8005fe8:	e7f2      	b.n	8005fd0 <trans_anim_cb+0xf0>
        if(v < 128) x = tr->start_value._ptr;
 8005fea:	2d7f      	cmp	r5, #127	; 0x7f
 8005fec:	bfd4      	ite	le
 8005fee:	68a2      	ldrle	r2, [r4, #8]
        else x = tr->end_value._ptr;
 8005ff0:	68e2      	ldrgt	r2, [r4, #12]
        _lv_style_set_ptr(style, tr->prop, x);
 8005ff2:	f002 f95f 	bl	80082b4 <_lv_style_set_ptr>
 8005ff6:	e787      	b.n	8005f08 <trans_anim_cb+0x28>

08005ff8 <lv_obj_get_signal_cb>:
{
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005ffc:	f008 ffe4 	bl	800efc8 <lv_debug_check_null>
 8006000:	4603      	mov	r3, r0
 8006002:	b920      	cbnz	r0, 800600e <lv_obj_get_signal_cb+0x16>
 8006004:	4622      	mov	r2, r4
 8006006:	4803      	ldr	r0, [pc, #12]	; (8006014 <lv_obj_get_signal_cb+0x1c>)
 8006008:	f008 ffe2 	bl	800efd0 <lv_debug_log_error>
 800600c:	e7fe      	b.n	800600c <lv_obj_get_signal_cb+0x14>
}
 800600e:	69e0      	ldr	r0, [r4, #28]
 8006010:	bd10      	pop	{r4, pc}
 8006012:	bf00      	nop
 8006014:	080158e8 	.word	0x080158e8

08006018 <lv_obj_get_design_cb>:
{
 8006018:	b510      	push	{r4, lr}
 800601a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800601c:	f008 ffd4 	bl	800efc8 <lv_debug_check_null>
 8006020:	4603      	mov	r3, r0
 8006022:	b920      	cbnz	r0, 800602e <lv_obj_get_design_cb+0x16>
 8006024:	4622      	mov	r2, r4
 8006026:	4803      	ldr	r0, [pc, #12]	; (8006034 <lv_obj_get_design_cb+0x1c>)
 8006028:	f008 ffd2 	bl	800efd0 <lv_debug_log_error>
 800602c:	e7fe      	b.n	800602c <lv_obj_get_design_cb+0x14>
}
 800602e:	6a20      	ldr	r0, [r4, #32]
 8006030:	bd10      	pop	{r4, pc}
 8006032:	bf00      	nop
 8006034:	080158e8 	.word	0x080158e8

08006038 <lv_obj_get_ext_attr>:
{
 8006038:	b510      	push	{r4, lr}
 800603a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800603c:	f008 ffc4 	bl	800efc8 <lv_debug_check_null>
 8006040:	4603      	mov	r3, r0
 8006042:	b920      	cbnz	r0, 800604e <lv_obj_get_ext_attr+0x16>
 8006044:	4622      	mov	r2, r4
 8006046:	4803      	ldr	r0, [pc, #12]	; (8006054 <lv_obj_get_ext_attr+0x1c>)
 8006048:	f008 ffc2 	bl	800efd0 <lv_debug_log_error>
 800604c:	e7fe      	b.n	800604c <lv_obj_get_ext_attr+0x14>
}
 800604e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006050:	bd10      	pop	{r4, pc}
 8006052:	bf00      	nop
 8006054:	080158e8 	.word	0x080158e8

08006058 <lv_obj_get_group>:
{
 8006058:	b510      	push	{r4, lr}
 800605a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800605c:	f008 ffb4 	bl	800efc8 <lv_debug_check_null>
 8006060:	b910      	cbnz	r0, 8006068 <lv_obj_get_group+0x10>
 8006062:	4620      	mov	r0, r4
 8006064:	f7fe f870 	bl	8004148 <lv_obj_add_state.part.35>
}
 8006068:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800606a:	bd10      	pop	{r4, pc}

0800606c <obj_del_core>:
{
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	4604      	mov	r4, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8006070:	2200      	movs	r2, #0
 8006072:	2115      	movs	r1, #21
 8006074:	f7fe f9b8 	bl	80043e8 <lv_event_send>
    lv_group_t * group = lv_obj_get_group(obj);
 8006078:	4620      	mov	r0, r4
 800607a:	f7ff ffed 	bl	8006058 <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 800607e:	4607      	mov	r7, r0
 8006080:	b110      	cbz	r0, 8006088 <obj_del_core+0x1c>
 8006082:	4620      	mov	r0, r4
 8006084:	f7fc fd86 	bl	8002b94 <lv_group_remove_obj>
    lv_anim_del(obj, NULL);
 8006088:	2100      	movs	r1, #0
 800608a:	4620      	mov	r0, r4
 800608c:	f008 fc38 	bl	800e900 <lv_anim_del>
    trans_del(obj, 0xFF, 0xFF, NULL);
 8006090:	22ff      	movs	r2, #255	; 0xff
 8006092:	2300      	movs	r3, #0
 8006094:	4611      	mov	r1, r2
 8006096:	4620      	mov	r0, r4
 8006098:	f7fe faf6 	bl	8004688 <trans_del>
    i = _lv_ll_get_head(&(obj->child_ll));
 800609c:	1d25      	adds	r5, r4, #4
        i = _lv_ll_get_head(&(obj->child_ll));
 800609e:	4628      	mov	r0, r5
 80060a0:	f009 f8b4 	bl	800f20c <_lv_ll_get_head>
    while(i != NULL) {
 80060a4:	bb08      	cbnz	r0, 80060ea <obj_del_core+0x7e>
    lv_event_temp_data_t * t = event_temp_data_head;
 80060a6:	4b24      	ldr	r3, [pc, #144]	; (8006138 <obj_del_core+0xcc>)
 80060a8:	681e      	ldr	r6, [r3, #0]
        if(t->obj == obj) t->deleted = true;
 80060aa:	2301      	movs	r3, #1
    while(t) {
 80060ac:	bb06      	cbnz	r6, 80060f0 <obj_del_core+0x84>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80060ae:	4630      	mov	r0, r6
        indev = lv_indev_get_next(indev);
 80060b0:	f008 fac2 	bl	800e638 <lv_indev_get_next>
 80060b4:	4605      	mov	r5, r0
    while(indev) {
 80060b6:	bb08      	cbnz	r0, 80060fc <obj_del_core+0x90>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 80060b8:	4602      	mov	r2, r0
 80060ba:	4601      	mov	r1, r0
 80060bc:	69e3      	ldr	r3, [r4, #28]
 80060be:	4620      	mov	r0, r4
 80060c0:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
 80060c2:	4620      	mov	r0, r4
 80060c4:	f7fe f9fc 	bl	80044c0 <lv_obj_get_parent>
    if(par == NULL) { /*It is a screen*/
 80060c8:	bb98      	cbnz	r0, 8006132 <obj_del_core+0xc6>
        lv_disp_t * d = lv_obj_get_disp(obj);
 80060ca:	4620      	mov	r0, r4
 80060cc:	f7fe fa12 	bl	80044f4 <lv_obj_get_disp>
        _lv_ll_remove(&d->scr_ll, obj);
 80060d0:	4621      	mov	r1, r4
 80060d2:	3038      	adds	r0, #56	; 0x38
        _lv_ll_remove(&(par->child_ll), obj);
 80060d4:	f009 f8d7 	bl	800f286 <_lv_ll_remove>
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 80060d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80060da:	b108      	cbz	r0, 80060e0 <obj_del_core+0x74>
 80060dc:	f009 fa56 	bl	800f58c <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 80060e0:	4620      	mov	r0, r4
}
 80060e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_mem_free(obj); /*Free the object itself*/
 80060e6:	f009 ba51 	b.w	800f58c <lv_mem_free>
        obj_del_core(i);
 80060ea:	f7ff ffbf 	bl	800606c <obj_del_core>
 80060ee:	e7d6      	b.n	800609e <obj_del_core+0x32>
        if(t->obj == obj) t->deleted = true;
 80060f0:	6832      	ldr	r2, [r6, #0]
 80060f2:	4294      	cmp	r4, r2
 80060f4:	bf08      	it	eq
 80060f6:	7133      	strbeq	r3, [r6, #4]
        t = t->prev;
 80060f8:	68b6      	ldr	r6, [r6, #8]
 80060fa:	e7d7      	b.n	80060ac <obj_del_core+0x40>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 80060fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80060fe:	42a3      	cmp	r3, r4
 8006100:	d002      	beq.n	8006108 <obj_del_core+0x9c>
 8006102:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006104:	42a3      	cmp	r3, r4
 8006106:	d103      	bne.n	8006110 <obj_del_core+0xa4>
            lv_indev_reset(indev, obj);
 8006108:	4621      	mov	r1, r4
 800610a:	4628      	mov	r0, r5
 800610c:	f7fc ffd8 	bl	80030c0 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 8006110:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006112:	42a3      	cmp	r3, r4
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8006114:	6dab      	ldr	r3, [r5, #88]	; 0x58
            indev->proc.types.pointer.last_pressed = NULL;
 8006116:	bf08      	it	eq
 8006118:	63ee      	streq	r6, [r5, #60]	; 0x3c
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800611a:	42bb      	cmp	r3, r7
 800611c:	d107      	bne.n	800612e <obj_del_core+0xc2>
 800611e:	f7fd f815 	bl	800314c <lv_indev_get_obj_act>
 8006122:	4284      	cmp	r4, r0
 8006124:	d103      	bne.n	800612e <obj_del_core+0xc2>
            lv_indev_reset(indev, obj);
 8006126:	4621      	mov	r1, r4
 8006128:	4628      	mov	r0, r5
 800612a:	f7fc ffc9 	bl	80030c0 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 800612e:	4628      	mov	r0, r5
 8006130:	e7be      	b.n	80060b0 <obj_del_core+0x44>
        _lv_ll_remove(&(par->child_ll), obj);
 8006132:	4621      	mov	r1, r4
 8006134:	3004      	adds	r0, #4
 8006136:	e7cd      	b.n	80060d4 <obj_del_core+0x68>
 8006138:	2000017c 	.word	0x2000017c

0800613c <lv_obj_del>:
{
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006140:	f008 ff42 	bl	800efc8 <lv_debug_check_null>
 8006144:	4603      	mov	r3, r0
 8006146:	b920      	cbnz	r0, 8006152 <lv_obj_del+0x16>
 8006148:	4622      	mov	r2, r4
 800614a:	4813      	ldr	r0, [pc, #76]	; (8006198 <lv_obj_del+0x5c>)
 800614c:	f008 ff40 	bl	800efd0 <lv_debug_log_error>
 8006150:	e7fe      	b.n	8006150 <lv_obj_del+0x14>
    lv_obj_invalidate(obj);
 8006152:	4620      	mov	r0, r4
 8006154:	f7fe fbc4 	bl	80048e0 <lv_obj_invalidate>
    lv_obj_t * par = lv_obj_get_parent(obj);
 8006158:	4620      	mov	r0, r4
 800615a:	f7fe f9b1 	bl	80044c0 <lv_obj_get_parent>
    if(par == NULL) {
 800615e:	4607      	mov	r7, r0
 8006160:	b9b0      	cbnz	r0, 8006190 <lv_obj_del+0x54>
        disp = lv_obj_get_disp(obj);
 8006162:	4620      	mov	r0, r4
 8006164:	f7fe f9c6 	bl	80044f4 <lv_obj_get_disp>
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
 8006168:	4606      	mov	r6, r0
 800616a:	b178      	cbz	r0, 800618c <lv_obj_del+0x50>
        if(disp->act_scr == obj) act_scr_del = true;
 800616c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800616e:	1b2b      	subs	r3, r5, r4
 8006170:	425d      	negs	r5, r3
 8006172:	415d      	adcs	r5, r3
    obj_del_core(obj);
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff ff79 	bl	800606c <obj_del_core>
    if(par) {
 800617a:	b127      	cbz	r7, 8006186 <lv_obj_del+0x4a>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2200      	movs	r2, #0
 8006180:	2101      	movs	r1, #1
 8006182:	4638      	mov	r0, r7
 8006184:	4798      	blx	r3
    if(act_scr_del)  {
 8006186:	b10d      	cbz	r5, 800618c <lv_obj_del+0x50>
        disp->act_scr = NULL;
 8006188:	2300      	movs	r3, #0
 800618a:	6473      	str	r3, [r6, #68]	; 0x44
}
 800618c:	2000      	movs	r0, #0
 800618e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool act_scr_del = false;
 8006190:	2500      	movs	r5, #0
    lv_disp_t * disp = NULL;
 8006192:	462e      	mov	r6, r5
 8006194:	e7ee      	b.n	8006174 <lv_obj_del+0x38>
 8006196:	bf00      	nop
 8006198:	080158e8 	.word	0x080158e8

0800619c <lv_obj_is_focused>:
{
 800619c:	b510      	push	{r4, lr}
 800619e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80061a0:	f008 ff12 	bl	800efc8 <lv_debug_check_null>
 80061a4:	b910      	cbnz	r0, 80061ac <lv_obj_is_focused+0x10>
 80061a6:	4620      	mov	r0, r4
 80061a8:	f7fd ffce 	bl	8004148 <lv_obj_add_state.part.35>
    if(obj->group_p) {
 80061ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80061ae:	b120      	cbz	r0, 80061ba <lv_obj_is_focused+0x1e>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 80061b0:	f7fc fd2f 	bl	8002c12 <lv_group_get_focused>
 80061b4:	1a23      	subs	r3, r4, r0
 80061b6:	4258      	negs	r0, r3
 80061b8:	4158      	adcs	r0, r3
}
 80061ba:	bd10      	pop	{r4, pc}

080061bc <lv_obj_is_point_on_coords>:
{
 80061bc:	b507      	push	{r0, r1, r2, lr}
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
 80061be:	8a02      	ldrh	r2, [r0, #16]
 80061c0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80061c4:	1ad2      	subs	r2, r2, r3
 80061c6:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
 80061ca:	8a82      	ldrh	r2, [r0, #20]
 80061cc:	4413      	add	r3, r2
 80061ce:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
 80061d2:	8a42      	ldrh	r2, [r0, #18]
 80061d4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80061d8:	1ad2      	subs	r2, r2, r3
 80061da:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 80061de:	8ac2      	ldrh	r2, [r0, #22]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 80061e0:	4668      	mov	r0, sp
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 80061e2:	4413      	add	r3, r2
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 80061e4:	2200      	movs	r2, #0
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 80061e6:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 80061ea:	f008 fcac 	bl	800eb46 <_lv_area_is_point_on>
}
 80061ee:	b003      	add	sp, #12
 80061f0:	f85d fb04 	ldr.w	pc, [sp], #4

080061f4 <lv_obj_hittest>:
{
 80061f4:	b513      	push	{r0, r1, r4, lr}
    if(obj->adv_hittest) {
 80061f6:	f990 4034 	ldrsb.w	r4, [r0, #52]	; 0x34
 80061fa:	2c00      	cmp	r4, #0
 80061fc:	da0b      	bge.n	8006216 <lv_obj_hittest+0x22>
        hit_info.result = true;
 80061fe:	2201      	movs	r2, #1
        hit_info.point = point;
 8006200:	9100      	str	r1, [sp, #0]
        hit_info.result = true;
 8006202:	f88d 2004 	strb.w	r2, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
 8006206:	69c3      	ldr	r3, [r0, #28]
 8006208:	466a      	mov	r2, sp
 800620a:	210a      	movs	r1, #10
 800620c:	4798      	blx	r3
        return hit_info.result;
 800620e:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 8006212:	b002      	add	sp, #8
 8006214:	bd10      	pop	{r4, pc}
        return lv_obj_is_point_on_coords(obj, point);
 8006216:	f7ff ffd1 	bl	80061bc <lv_obj_is_point_on_coords>
 800621a:	e7fa      	b.n	8006212 <lv_obj_hittest+0x1e>

0800621c <lv_obj_handle_get_type_signal>:
{
 800621c:	2300      	movs	r3, #0
 800621e:	b510      	push	{r4, lr}
        if(buf->type[i] == NULL) break;
 8006220:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8006224:	b2da      	uxtb	r2, r3
 8006226:	b11c      	cbz	r4, 8006230 <lv_obj_handle_get_type_signal+0x14>
 8006228:	3301      	adds	r3, #1
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800622a:	2b07      	cmp	r3, #7
 800622c:	d1f8      	bne.n	8006220 <lv_obj_handle_get_type_signal+0x4>
 800622e:	461a      	mov	r2, r3
    buf->type[i] = name;
 8006230:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
 8006234:	2001      	movs	r0, #1
 8006236:	bd10      	pop	{r4, pc}

08006238 <lv_obj_init_draw_rect_dsc>:
{
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 800623c:	2201      	movs	r2, #1
 800623e:	4605      	mov	r5, r0
 8006240:	460e      	mov	r6, r1
 8006242:	f7ff f92d 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8006246:	f248 020c 	movw	r2, #32780	; 0x800c
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 800624a:	8020      	strh	r0, [r4, #0]
 800624c:	4631      	mov	r1, r6
 800624e:	4628      	mov	r0, r5
 8006250:	f7ff fbc8 	bl	80059e4 <_lv_obj_get_style_opa>
    if(opa_scale <= LV_OPA_MIN) {
 8006254:	2802      	cmp	r0, #2
 8006256:	4607      	mov	r7, r0
 8006258:	d809      	bhi.n	800626e <lv_obj_init_draw_rect_dsc+0x36>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
 800625a:	2300      	movs	r3, #0
 800625c:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
 800625e:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8006260:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
 8006264:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
 8006268:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800626c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 800626e:	7b23      	ldrb	r3, [r4, #12]
 8006270:	b36b      	cbz	r3, 80062ce <lv_obj_init_draw_rect_dsc+0x96>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8006272:	222c      	movs	r2, #44	; 0x2c
 8006274:	4631      	mov	r1, r6
 8006276:	4628      	mov	r0, r5
 8006278:	f7ff fbb4 	bl	80059e4 <_lv_obj_get_style_opa>
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 800627c:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 800627e:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8006280:	d925      	bls.n	80062ce <lv_obj_init_draw_rect_dsc+0x96>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8006282:	2229      	movs	r2, #41	; 0x29
 8006284:	4631      	mov	r1, r6
 8006286:	4628      	mov	r0, r5
 8006288:	f7ff f8d4 	bl	8005434 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
 800628c:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
 800628e:	8060      	strh	r0, [r4, #2]
 8006290:	4631      	mov	r1, r6
 8006292:	4628      	mov	r0, r5
 8006294:	f7ff f904 	bl	80054a0 <_lv_obj_get_style_int>
 8006298:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 800629a:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 800629c:	b188      	cbz	r0, 80062c2 <lv_obj_init_draw_rect_dsc+0x8a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
 800629e:	222a      	movs	r2, #42	; 0x2a
 80062a0:	4631      	mov	r1, r6
 80062a2:	4628      	mov	r0, r5
 80062a4:	f7ff f8c6 	bl	8005434 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
 80062a8:	2221      	movs	r2, #33	; 0x21
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
 80062aa:	80a0      	strh	r0, [r4, #4]
 80062ac:	4631      	mov	r1, r6
 80062ae:	4628      	mov	r0, r5
 80062b0:	f7ff f8f6 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
 80062b4:	2222      	movs	r2, #34	; 0x22
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 80062b6:	8120      	strh	r0, [r4, #8]
 80062b8:	4631      	mov	r1, r6
 80062ba:	4628      	mov	r0, r5
 80062bc:	f7ff f8f0 	bl	80054a0 <_lv_obj_get_style_int>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 80062c0:	8160      	strh	r0, [r4, #10]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
 80062c2:	2220      	movs	r2, #32
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	f7ff f8ea 	bl	80054a0 <_lv_obj_get_style_int>
 80062cc:	7360      	strb	r0, [r4, #13]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 80062ce:	2230      	movs	r2, #48	; 0x30
 80062d0:	4631      	mov	r1, r6
 80062d2:	4628      	mov	r0, r5
 80062d4:	f7ff f8e4 	bl	80054a0 <_lv_obj_get_style_int>
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 80062d8:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
 80062da:	b1e0      	cbz	r0, 8006316 <lv_obj_init_draw_rect_dsc+0xde>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 80062dc:	7d23      	ldrb	r3, [r4, #20]
 80062de:	b1d3      	cbz	r3, 8006316 <lv_obj_init_draw_rect_dsc+0xde>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
 80062e0:	223c      	movs	r2, #60	; 0x3c
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	f7ff fb7d 	bl	80059e4 <_lv_obj_get_style_opa>
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80062ea:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 80062ec:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80062ee:	d90c      	bls.n	800630a <lv_obj_init_draw_rect_dsc+0xd2>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 80062f0:	2231      	movs	r2, #49	; 0x31
 80062f2:	4631      	mov	r1, r6
 80062f4:	4628      	mov	r0, r5
 80062f6:	f7ff f8d3 	bl	80054a0 <_lv_obj_get_style_int>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80062fa:	b2c0      	uxtb	r0, r0
 80062fc:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 80062fe:	2239      	movs	r2, #57	; 0x39
 8006300:	4631      	mov	r1, r6
 8006302:	4628      	mov	r0, r5
 8006304:	f7ff f896 	bl	8005434 <_lv_obj_get_style_color>
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
 8006308:	81e0      	strh	r0, [r4, #14]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
 800630a:	2232      	movs	r2, #50	; 0x32
 800630c:	4631      	mov	r1, r6
 800630e:	4628      	mov	r0, r5
 8006310:	f7ff f8c6 	bl	80054a0 <_lv_obj_get_style_int>
 8006314:	7560      	strb	r0, [r4, #21]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 8006316:	2240      	movs	r2, #64	; 0x40
 8006318:	4631      	mov	r1, r6
 800631a:	4628      	mov	r0, r5
 800631c:	f7ff f8c0 	bl	80054a0 <_lv_obj_get_style_int>
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8006320:	8360      	strh	r0, [r4, #26]
    if(draw_dsc->outline_width) {
 8006322:	b1d8      	cbz	r0, 800635c <lv_obj_init_draw_rect_dsc+0x124>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8006324:	7fa3      	ldrb	r3, [r4, #30]
 8006326:	b1cb      	cbz	r3, 800635c <lv_obj_init_draw_rect_dsc+0x124>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 8006328:	224c      	movs	r2, #76	; 0x4c
 800632a:	4631      	mov	r1, r6
 800632c:	4628      	mov	r0, r5
 800632e:	f7ff fb59 	bl	80059e4 <_lv_obj_get_style_opa>
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8006332:	2802      	cmp	r0, #2
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8006334:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8006336:	d90b      	bls.n	8006350 <lv_obj_init_draw_rect_dsc+0x118>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 8006338:	2241      	movs	r2, #65	; 0x41
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	f7ff f8af 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 8006342:	2249      	movs	r2, #73	; 0x49
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8006344:	83a0      	strh	r0, [r4, #28]
 8006346:	4631      	mov	r1, r6
 8006348:	4628      	mov	r0, r5
 800634a:	f7ff f873 	bl	8005434 <_lv_obj_get_style_color>
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
 800634e:	8320      	strh	r0, [r4, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
 8006350:	2242      	movs	r2, #66	; 0x42
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	f7ff f8a3 	bl	80054a0 <_lv_obj_get_style_int>
 800635a:	77e0      	strb	r0, [r4, #31]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
 800635c:	226e      	movs	r2, #110	; 0x6e
 800635e:	4631      	mov	r1, r6
 8006360:	4628      	mov	r0, r5
 8006362:	f7ff fba5 	bl	8005ab0 <_lv_obj_get_style_ptr>
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
 8006366:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(draw_dsc->pattern_image) {
 8006368:	b3d0      	cbz	r0, 80063e0 <lv_obj_init_draw_rect_dsc+0x1a8>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
 800636a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800636e:	b3bb      	cbz	r3, 80063e0 <lv_obj_init_draw_rect_dsc+0x1a8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
 8006370:	226c      	movs	r2, #108	; 0x6c
 8006372:	4631      	mov	r1, r6
 8006374:	4628      	mov	r0, r5
 8006376:	f7ff fb35 	bl	80059e4 <_lv_obj_get_style_opa>
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
 800637a:	2802      	cmp	r0, #2
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
 800637c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
 8006380:	d92e      	bls.n	80063e0 <lv_obj_init_draw_rect_dsc+0x1a8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
 8006382:	226d      	movs	r2, #109	; 0x6d
 8006384:	4631      	mov	r1, r6
 8006386:	4628      	mov	r0, r5
 8006388:	f7ff fb2c 	bl	80059e4 <_lv_obj_get_style_opa>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
 800638c:	2261      	movs	r2, #97	; 0x61
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
 800638e:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	f7ff f883 	bl	80054a0 <_lv_obj_get_style_int>
 800639a:	3000      	adds	r0, #0
 800639c:	bf18      	it	ne
 800639e:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
 80063a0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80063a4:	f360 0300 	bfi	r3, r0, #0, #1
 80063a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
 80063ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80063ae:	f003 fd89 	bl	8009ec4 <lv_img_src_get_type>
 80063b2:	2802      	cmp	r0, #2
 80063b4:	f040 8084 	bne.w	80064c0 <lv_obj_init_draw_rect_dsc+0x288>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
 80063b8:	2269      	movs	r2, #105	; 0x69
 80063ba:	4631      	mov	r1, r6
 80063bc:	4628      	mov	r0, r5
 80063be:	f7ff f839 	bl	8005434 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 80063c2:	f248 028e 	movw	r2, #32910	; 0x808e
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 80063c6:	86a0      	strh	r0, [r4, #52]	; 0x34
 80063c8:	4631      	mov	r1, r6
 80063ca:	4628      	mov	r0, r5
 80063cc:	f7ff fb70 	bl	8005ab0 <_lv_obj_get_style_ptr>
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
 80063d0:	6320      	str	r0, [r4, #48]	; 0x30
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
 80063d2:	2260      	movs	r2, #96	; 0x60
 80063d4:	4631      	mov	r1, r6
 80063d6:	4628      	mov	r0, r5
 80063d8:	f7ff f862 	bl	80054a0 <_lv_obj_get_style_int>
 80063dc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
 80063e0:	227f      	movs	r2, #127	; 0x7f
 80063e2:	4631      	mov	r1, r6
 80063e4:	4628      	mov	r0, r5
 80063e6:	f7ff fb63 	bl	8005ab0 <_lv_obj_get_style_ptr>
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
 80063ea:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(draw_dsc->value_str) {
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d043      	beq.n	8006478 <lv_obj_init_draw_rect_dsc+0x240>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
 80063f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d93f      	bls.n	8006478 <lv_obj_init_draw_rect_dsc+0x240>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
 80063f8:	227c      	movs	r2, #124	; 0x7c
 80063fa:	4631      	mov	r1, r6
 80063fc:	4628      	mov	r0, r5
 80063fe:	f7ff faf1 	bl	80059e4 <_lv_obj_get_style_opa>
            if(draw_dsc->value_opa > LV_OPA_MIN) {
 8006402:	2802      	cmp	r0, #2
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
 8006404:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
 8006408:	d936      	bls.n	8006478 <lv_obj_init_draw_rect_dsc+0x240>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
 800640a:	2273      	movs	r2, #115	; 0x73
 800640c:	4631      	mov	r1, r6
 800640e:	4628      	mov	r0, r5
 8006410:	f7ff f846 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
 8006414:	2274      	movs	r2, #116	; 0x74
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
 8006416:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
 800641a:	4631      	mov	r1, r6
 800641c:	4628      	mov	r0, r5
 800641e:	f7ff f83f 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 8006422:	2279      	movs	r2, #121	; 0x79
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
 8006424:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
 8006428:	4631      	mov	r1, r6
 800642a:	4628      	mov	r0, r5
 800642c:	f7ff f802 	bl	8005434 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 8006430:	227e      	movs	r2, #126	; 0x7e
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
 8006432:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	f7ff fb39 	bl	8005ab0 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
 800643e:	2270      	movs	r2, #112	; 0x70
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
 8006440:	6420      	str	r0, [r4, #64]	; 0x40
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	f7ff f82b 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
 800644a:	2271      	movs	r2, #113	; 0x71
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
 800644c:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
 8006450:	4631      	mov	r1, r6
 8006452:	4628      	mov	r0, r5
 8006454:	f7ff f824 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
 8006458:	2275      	movs	r2, #117	; 0x75
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
 800645a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 800645e:	4631      	mov	r1, r6
 8006460:	4628      	mov	r0, r5
 8006462:	f7ff f81d 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
 8006466:	2272      	movs	r2, #114	; 0x72
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
 8006468:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
 800646c:	4631      	mov	r1, r6
 800646e:	4628      	mov	r0, r5
 8006470:	f7ff f816 	bl	80054a0 <_lv_obj_get_style_int>
 8006474:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    if(opa_scale < LV_OPA_MAX) {
 8006478:	2ffc      	cmp	r7, #252	; 0xfc
 800647a:	f63f aef7 	bhi.w	800626c <lv_obj_init_draw_rect_dsc+0x34>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
 800647e:	7b23      	ldrb	r3, [r4, #12]
 8006480:	b2b8      	uxth	r0, r7
 8006482:	4343      	muls	r3, r0
 8006484:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006488:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
 800648a:	7d23      	ldrb	r3, [r4, #20]
 800648c:	4343      	muls	r3, r0
 800648e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006492:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
 8006494:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006498:	4343      	muls	r3, r0
 800649a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800649e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
 80064a2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80064a6:	4343      	muls	r3, r0
 80064a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80064ac:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
 80064b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80064b4:	4358      	muls	r0, r3
 80064b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80064ba:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 80064be:	e6d5      	b.n	800626c <lv_obj_init_draw_rect_dsc+0x34>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
 80064c0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d984      	bls.n	80063d2 <lv_obj_init_draw_rect_dsc+0x19a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
 80064c8:	2269      	movs	r2, #105	; 0x69
 80064ca:	4631      	mov	r1, r6
 80064cc:	4628      	mov	r0, r5
 80064ce:	f7fe ffb1 	bl	8005434 <_lv_obj_get_style_color>
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 80064d2:	86a0      	strh	r0, [r4, #52]	; 0x34
 80064d4:	e77d      	b.n	80063d2 <lv_obj_init_draw_rect_dsc+0x19a>

080064d6 <lv_obj_design>:
{
 80064d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 80064da:	2a02      	cmp	r2, #2
{
 80064dc:	b09b      	sub	sp, #108	; 0x6c
 80064de:	4604      	mov	r4, r0
 80064e0:	4688      	mov	r8, r1
 80064e2:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 80064e4:	d15d      	bne.n	80065a2 <lv_obj_design+0xcc>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 80064e6:	2100      	movs	r1, #0
 80064e8:	f7ff f89b 	bl	8005622 <lv_obj_get_style_clip_corner>
 80064ec:	4605      	mov	r5, r0
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d155      	bne.n	800659e <lv_obj_design+0xc8>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 80064f2:	4601      	mov	r1, r0
 80064f4:	2201      	movs	r2, #1
 80064f6:	4620      	mov	r0, r4
 80064f8:	f7fe ffd2 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80064fc:	2204      	movs	r2, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 80064fe:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8006500:	4629      	mov	r1, r5
 8006502:	4620      	mov	r0, r4
 8006504:	f7fe ffcc 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8006508:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 800650a:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 800650c:	4629      	mov	r1, r5
 800650e:	4620      	mov	r0, r4
 8006510:	f7fe ffc6 	bl	80054a0 <_lv_obj_get_style_int>
 8006514:	4606      	mov	r6, r0
        lv_area_copy(&coords, &obj->coords);
 8006516:	f104 0110 	add.w	r1, r4, #16
 800651a:	a805      	add	r0, sp, #20
 800651c:	f7fd fe1e 	bl	800415c <lv_area_copy>
        coords.x1 -= w;
 8006520:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8006524:	b2b8      	uxth	r0, r7
 8006526:	1a1b      	subs	r3, r3, r0
 8006528:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
 800652c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8006530:	464a      	mov	r2, r9
        coords.x2 += w;
 8006532:	4418      	add	r0, r3
        coords.y1 -= h;
 8006534:	f8bd 3016 	ldrh.w	r3, [sp, #22]
        coords.x2 += w;
 8006538:	f8ad 0018 	strh.w	r0, [sp, #24]
        coords.y1 -= h;
 800653c:	b2b0      	uxth	r0, r6
 800653e:	1a1b      	subs	r3, r3, r0
 8006540:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
 8006544:	f8bd 301a 	ldrh.w	r3, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8006548:	a905      	add	r1, sp, #20
        coords.y2 += h;
 800654a:	4418      	add	r0, r3
 800654c:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8006550:	4640      	mov	r0, r8
 8006552:	f008 fba8 	bl	800eca6 <_lv_area_is_in>
 8006556:	b918      	cbnz	r0, 8006560 <lv_obj_design+0x8a>
 8006558:	2002      	movs	r0, #2
}
 800655a:	b01b      	add	sp, #108	; 0x6c
 800655c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8006560:	222c      	movs	r2, #44	; 0x2c
 8006562:	4629      	mov	r1, r5
 8006564:	4620      	mov	r0, r4
 8006566:	f7ff fa3d 	bl	80059e4 <_lv_obj_get_style_opa>
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 800656a:	28fc      	cmp	r0, #252	; 0xfc
 800656c:	d9f4      	bls.n	8006558 <lv_obj_design+0x82>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
 800656e:	4629      	mov	r1, r5
 8006570:	2220      	movs	r2, #32
 8006572:	4620      	mov	r0, r4
 8006574:	f7fe ff94 	bl	80054a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8006578:	b2c1      	uxtb	r1, r0
 800657a:	2900      	cmp	r1, #0
 800657c:	d1ec      	bne.n	8006558 <lv_obj_design+0x82>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
 800657e:	2232      	movs	r2, #50	; 0x32
 8006580:	4620      	mov	r0, r4
 8006582:	f7fe ff8d 	bl	80054a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8006586:	b2c1      	uxtb	r1, r0
 8006588:	2900      	cmp	r1, #0
 800658a:	d1e5      	bne.n	8006558 <lv_obj_design+0x82>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 800658c:	f248 020c 	movw	r2, #32780	; 0x800c
 8006590:	4620      	mov	r0, r4
 8006592:	f7ff fa27 	bl	80059e4 <_lv_obj_get_style_opa>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8006596:	28fc      	cmp	r0, #252	; 0xfc
 8006598:	d9de      	bls.n	8006558 <lv_obj_design+0x82>
        return  LV_DESIGN_RES_COVER;
 800659a:	2001      	movs	r0, #1
 800659c:	e7dd      	b.n	800655a <lv_obj_design+0x84>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 800659e:	2003      	movs	r0, #3
 80065a0:	e7db      	b.n	800655a <lv_obj_design+0x84>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	d17a      	bne.n	800669c <lv_obj_design+0x1c6>
        lv_draw_rect_dsc_init(&draw_dsc);
 80065a6:	a805      	add	r0, sp, #20
 80065a8:	f005 fd02 	bl	800bfb0 <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 80065ac:	2233      	movs	r2, #51	; 0x33
 80065ae:	4629      	mov	r1, r5
 80065b0:	4620      	mov	r0, r4
 80065b2:	f7fe ff75 	bl	80054a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 80065b6:	b128      	cbz	r0, 80065c4 <lv_obj_design+0xee>
            draw_dsc.border_post = 1;
 80065b8:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 80065c4:	aa05      	add	r2, sp, #20
 80065c6:	2100      	movs	r1, #0
 80065c8:	4620      	mov	r0, r4
 80065ca:	f7ff fe35 	bl	8006238 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80065ce:	2204      	movs	r2, #4
 80065d0:	2100      	movs	r1, #0
 80065d2:	4620      	mov	r0, r4
 80065d4:	f7fe ff64 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 80065d8:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80065da:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 80065dc:	2100      	movs	r1, #0
 80065de:	4620      	mov	r0, r4
 80065e0:	f7fe ff5e 	bl	80054a0 <_lv_obj_get_style_int>
 80065e4:	4605      	mov	r5, r0
        lv_area_copy(&coords, &obj->coords);
 80065e6:	f104 0710 	add.w	r7, r4, #16
 80065ea:	4639      	mov	r1, r7
 80065ec:	a801      	add	r0, sp, #4
 80065ee:	f7fd fdb5 	bl	800415c <lv_area_copy>
        coords.x1 -= w;
 80065f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80065f6:	b2b0      	uxth	r0, r6
 80065f8:	1a1b      	subs	r3, r3, r0
 80065fa:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
 80065fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8006602:	4641      	mov	r1, r8
        coords.x2 += w;
 8006604:	4418      	add	r0, r3
        coords.y1 -= h;
 8006606:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        coords.x2 += w;
 800660a:	f8ad 0008 	strh.w	r0, [sp, #8]
        coords.y1 -= h;
 800660e:	b2a8      	uxth	r0, r5
 8006610:	1a1b      	subs	r3, r3, r0
 8006612:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
 8006616:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 800661a:	aa05      	add	r2, sp, #20
        coords.y2 += h;
 800661c:	4418      	add	r0, r3
 800661e:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8006622:	a801      	add	r0, sp, #4
 8006624:	f005 fce8 	bl	800bff8 <lv_draw_rect>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 8006628:	2100      	movs	r1, #0
 800662a:	4620      	mov	r0, r4
 800662c:	f7fe fff9 	bl	8005622 <lv_obj_get_style_clip_corner>
 8006630:	b378      	cbz	r0, 8006692 <lv_obj_design+0x1bc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8006632:	201c      	movs	r0, #28
 8006634:	f009 f952 	bl	800f8dc <_lv_mem_buf_get>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8006638:	2201      	movs	r2, #1
 800663a:	4605      	mov	r5, r0
 800663c:	2100      	movs	r1, #0
 800663e:	4620      	mov	r0, r4
 8006640:	f7fe ff2e 	bl	80054a0 <_lv_obj_get_style_int>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 8006644:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8006648:	4602      	mov	r2, r0
 800664a:	07db      	lsls	r3, r3, #31
 800664c:	d523      	bpl.n	8006696 <lv_obj_design+0x1c0>
 800664e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8006652:	2b01      	cmp	r3, #1
 8006654:	d91f      	bls.n	8006696 <lv_obj_design+0x1c0>
 8006656:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	dd1b      	ble.n	8006696 <lv_obj_design+0x1c0>
                cc_area.x1 = obj->coords.x1 + 1;
 800665e:	8a23      	ldrh	r3, [r4, #16]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 8006660:	a903      	add	r1, sp, #12
                cc_area.x1 = obj->coords.x1 + 1;
 8006662:	3301      	adds	r3, #1
 8006664:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
 8006668:	8a63      	ldrh	r3, [r4, #18]
 800666a:	3301      	adds	r3, #1
 800666c:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
 8006670:	8aa3      	ldrh	r3, [r4, #20]
 8006672:	3b01      	subs	r3, #1
 8006674:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
 8006678:	8ae3      	ldrh	r3, [r4, #22]
 800667a:	3b01      	subs	r3, #1
 800667c:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 8006680:	2300      	movs	r3, #0
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8006682:	4628      	mov	r0, r5
 8006684:	f005 f9c0 	bl	800ba08 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8006688:	f504 7118 	add.w	r1, r4, #608	; 0x260
 800668c:	4628      	mov	r0, r5
 800668e:	f005 f8c7 	bl	800b820 <lv_draw_mask_add>
    return LV_DESIGN_RES_OK;
 8006692:	2000      	movs	r0, #0
 8006694:	e761      	b.n	800655a <lv_obj_design+0x84>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8006696:	2300      	movs	r3, #0
 8006698:	4639      	mov	r1, r7
 800669a:	e7f2      	b.n	8006682 <lv_obj_design+0x1ac>
    else if(mode == LV_DESIGN_DRAW_POST) {
 800669c:	2a01      	cmp	r2, #1
 800669e:	d1f8      	bne.n	8006692 <lv_obj_design+0x1bc>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 80066a0:	2100      	movs	r1, #0
 80066a2:	f7fe ffbe 	bl	8005622 <lv_obj_get_style_clip_corner>
 80066a6:	b128      	cbz	r0, 80066b4 <lv_obj_design+0x1de>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 80066a8:	f504 7018 	add.w	r0, r4, #608	; 0x260
 80066ac:	f005 f904 	bl	800b8b8 <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
 80066b0:	f008 ffac 	bl	800f60c <_lv_mem_buf_release>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 80066b4:	2233      	movs	r2, #51	; 0x33
 80066b6:	2100      	movs	r1, #0
 80066b8:	4620      	mov	r0, r4
 80066ba:	f7fe fef1 	bl	80054a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 80066be:	2800      	cmp	r0, #0
 80066c0:	d0e7      	beq.n	8006692 <lv_obj_design+0x1bc>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 80066c2:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 80066c4:	a805      	add	r0, sp, #20
 80066c6:	f005 fc73 	bl	800bfb0 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 80066ca:	aa05      	add	r2, sp, #20
 80066cc:	4629      	mov	r1, r5
 80066ce:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 80066d0:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 80066d4:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 80066d8:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
 80066dc:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 80066e0:	f7ff fdaa 	bl	8006238 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80066e4:	2204      	movs	r2, #4
 80066e6:	4629      	mov	r1, r5
 80066e8:	4620      	mov	r0, r4
 80066ea:	f7fe fed9 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 80066ee:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80066f0:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 80066f2:	4629      	mov	r1, r5
 80066f4:	4620      	mov	r0, r4
 80066f6:	f7fe fed3 	bl	80054a0 <_lv_obj_get_style_int>
 80066fa:	4606      	mov	r6, r0
            lv_area_copy(&coords, &obj->coords);
 80066fc:	f104 0110 	add.w	r1, r4, #16
 8006700:	a803      	add	r0, sp, #12
 8006702:	f7fd fd2b 	bl	800415c <lv_area_copy>
            coords.x1 -= w;
 8006706:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800670a:	b2b8      	uxth	r0, r7
 800670c:	1a1b      	subs	r3, r3, r0
 800670e:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
 8006712:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8006716:	aa05      	add	r2, sp, #20
            coords.x2 += w;
 8006718:	4418      	add	r0, r3
            coords.y1 -= h;
 800671a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
            coords.x2 += w;
 800671e:	f8ad 0010 	strh.w	r0, [sp, #16]
            coords.y1 -= h;
 8006722:	b2b0      	uxth	r0, r6
 8006724:	1a1b      	subs	r3, r3, r0
 8006726:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
 800672a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 800672e:	4641      	mov	r1, r8
            coords.y2 += h;
 8006730:	4418      	add	r0, r3
 8006732:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8006736:	a803      	add	r0, sp, #12
 8006738:	f005 fc5e 	bl	800bff8 <lv_draw_rect>
    return LV_DESIGN_RES_OK;
 800673c:	4628      	mov	r0, r5
 800673e:	e70c      	b.n	800655a <lv_obj_design+0x84>

08006740 <lv_obj_init_draw_label_dsc>:
{
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
 8006744:	f248 028c 	movw	r2, #32908	; 0x808c
 8006748:	4605      	mov	r5, r0
 800674a:	460e      	mov	r6, r1
 800674c:	f7ff f94a 	bl	80059e4 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8006750:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8006752:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8006754:	d951      	bls.n	80067fa <lv_obj_init_draw_label_dsc+0xba>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8006756:	f248 020c 	movw	r2, #32780	; 0x800c
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	f7ff f941 	bl	80059e4 <_lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 8006762:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8006764:	bf9f      	itttt	ls
 8006766:	7b23      	ldrbls	r3, [r4, #12]
 8006768:	4358      	mulls	r0, r3
 800676a:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 800676e:	7320      	strbls	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8006770:	7b23      	ldrb	r3, [r4, #12]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d941      	bls.n	80067fa <lv_obj_init_draw_label_dsc+0xba>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8006776:	f248 0289 	movw	r2, #32905	; 0x8089
 800677a:	4631      	mov	r1, r6
 800677c:	4628      	mov	r0, r5
 800677e:	f7fe fe59 	bl	8005434 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 8006782:	f248 0280 	movw	r2, #32896	; 0x8080
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
 8006786:	8020      	strh	r0, [r4, #0]
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	f7fe fe88 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8006790:	f248 0281 	movw	r2, #32897	; 0x8081
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8006794:	8220      	strh	r0, [r4, #16]
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	f7fe fe81 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
 800679e:	f248 0282 	movw	r2, #32898	; 0x8082
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 80067a2:	81e0      	strh	r0, [r4, #14]
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	f7fe fe7a 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
 80067ac:	f248 0283 	movw	r2, #32899	; 0x8083
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
 80067b0:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
 80067b4:	4631      	mov	r1, r6
 80067b6:	4628      	mov	r0, r5
 80067b8:	f7fe fe72 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 80067bc:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
 80067c0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 80067c4:	4631      	mov	r1, r6
 80067c6:	4628      	mov	r0, r5
 80067c8:	f7ff f972 	bl	8005ab0 <_lv_obj_get_style_ptr>
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 80067cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067d0:	6962      	ldr	r2, [r4, #20]
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 80067d2:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d010      	beq.n	80067fa <lv_obj_init_draw_label_dsc+0xba>
 80067d8:	69a2      	ldr	r2, [r4, #24]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d00d      	beq.n	80067fa <lv_obj_init_draw_label_dsc+0xba>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
 80067de:	f248 028a 	movw	r2, #32906	; 0x808a
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	f7fe fe25 	bl	8005434 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
 80067ea:	f248 028b 	movw	r2, #32907	; 0x808b
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
 80067ee:	8060      	strh	r0, [r4, #2]
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	f7fe fe1e 	bl	8005434 <_lv_obj_get_style_color>
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
 80067f8:	80a0      	strh	r0, [r4, #4]
}
 80067fa:	bd70      	pop	{r4, r5, r6, pc}

080067fc <lv_obj_init_draw_img_dsc>:
{
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
 8006800:	f248 02ac 	movw	r2, #32940	; 0x80ac
 8006804:	4606      	mov	r6, r0
 8006806:	460d      	mov	r5, r1
 8006808:	f7ff f8ec 	bl	80059e4 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 800680c:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
 800680e:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8006810:	d93b      	bls.n	800688a <lv_obj_init_draw_img_dsc+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8006812:	f248 020c 	movw	r2, #32780	; 0x800c
 8006816:	4629      	mov	r1, r5
 8006818:	4630      	mov	r0, r6
 800681a:	f7ff f8e3 	bl	80059e4 <_lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 800681e:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8006820:	bf9f      	itttt	ls
 8006822:	7823      	ldrbls	r3, [r4, #0]
 8006824:	4358      	mulls	r0, r3
 8006826:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 800682a:	7020      	strbls	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 800682c:	7823      	ldrb	r3, [r4, #0]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d92b      	bls.n	800688a <lv_obj_init_draw_img_dsc+0x8e>
    draw_dsc->angle = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8006836:	f44f 7380 	mov.w	r3, #256	; 0x100
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 800683a:	2102      	movs	r1, #2
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 800683c:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800683e:	8ab2      	ldrh	r2, [r6, #20]
 8006840:	8a33      	ldrh	r3, [r6, #16]
 8006842:	3201      	adds	r2, #1
 8006844:	1ad2      	subs	r2, r2, r3
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8006846:	b212      	sxth	r2, r2
 8006848:	fb92 f2f1 	sdiv	r2, r2, r1
 800684c:	80a2      	strh	r2, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800684e:	8af3      	ldrh	r3, [r6, #22]
 8006850:	8a72      	ldrh	r2, [r6, #18]
 8006852:	3301      	adds	r3, #1
 8006854:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8006856:	b21b      	sxth	r3, r3
 8006858:	fb93 f3f1 	sdiv	r3, r3, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
 800685c:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8006860:	80e3      	strh	r3, [r4, #6]
 8006862:	4629      	mov	r1, r5
 8006864:	4630      	mov	r0, r6
 8006866:	f7ff f8bd 	bl	80059e4 <_lv_obj_get_style_opa>
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
 800686a:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 800686c:	b130      	cbz	r0, 800687c <lv_obj_init_draw_img_dsc+0x80>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 800686e:	f248 02a9 	movw	r2, #32937	; 0x80a9
 8006872:	4629      	mov	r1, r5
 8006874:	4630      	mov	r0, r6
 8006876:	f7fe fddd 	bl	8005434 <_lv_obj_get_style_color>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
 800687a:	81a0      	strh	r0, [r4, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
 800687c:	f248 02a0 	movw	r2, #32928	; 0x80a0
 8006880:	4629      	mov	r1, r5
 8006882:	4630      	mov	r0, r6
 8006884:	f7fe fe0c 	bl	80054a0 <_lv_obj_get_style_int>
 8006888:	73a0      	strb	r0, [r4, #14]
}
 800688a:	bd70      	pop	{r4, r5, r6, pc}

0800688c <lv_obj_init_draw_line_dsc>:
{
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 8006890:	2290      	movs	r2, #144	; 0x90
 8006892:	4605      	mov	r5, r0
 8006894:	460e      	mov	r6, r1
 8006896:	f7fe fe03 	bl	80054a0 <_lv_obj_get_style_int>
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 800689a:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 800689c:	2800      	cmp	r0, #0
 800689e:	d041      	beq.n	8006924 <lv_obj_init_draw_line_dsc+0x98>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
 80068a0:	229c      	movs	r2, #156	; 0x9c
 80068a2:	4631      	mov	r1, r6
 80068a4:	4628      	mov	r0, r5
 80068a6:	f7ff f89d 	bl	80059e4 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80068aa:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 80068ac:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80068ae:	d939      	bls.n	8006924 <lv_obj_init_draw_line_dsc+0x98>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 80068b0:	f248 020c 	movw	r2, #32780	; 0x800c
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	f7ff f894 	bl	80059e4 <_lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 80068bc:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 80068be:	bf9f      	itttt	ls
 80068c0:	7a23      	ldrbls	r3, [r4, #8]
 80068c2:	4358      	mulls	r0, r3
 80068c4:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 80068c8:	7220      	strbls	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80068ca:	7a23      	ldrb	r3, [r4, #8]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d929      	bls.n	8006924 <lv_obj_init_draw_line_dsc+0x98>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 80068d0:	2299      	movs	r2, #153	; 0x99
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	f7fe fdad 	bl	8005434 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
 80068da:	2292      	movs	r2, #146	; 0x92
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
 80068dc:	8020      	strh	r0, [r4, #0]
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	f7fe fddd 	bl	80054a0 <_lv_obj_get_style_int>
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 80068e6:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 80068e8:	b128      	cbz	r0, 80068f6 <lv_obj_init_draw_line_dsc+0x6a>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
 80068ea:	2293      	movs	r2, #147	; 0x93
 80068ec:	4631      	mov	r1, r6
 80068ee:	4628      	mov	r0, r5
 80068f0:	f7fe fdd6 	bl	80054a0 <_lv_obj_get_style_int>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 80068f4:	80e0      	strh	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 80068f6:	2294      	movs	r2, #148	; 0x94
 80068f8:	4631      	mov	r1, r6
 80068fa:	4628      	mov	r0, r5
 80068fc:	f7fe fdd0 	bl	80054a0 <_lv_obj_get_style_int>
 8006900:	3000      	adds	r0, #0
 8006902:	bf18      	it	ne
 8006904:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8006906:	7a63      	ldrb	r3, [r4, #9]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
 8006908:	2291      	movs	r2, #145	; 0x91
 800690a:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
 800690e:	f360 03c3 	bfi	r3, r0, #3, #1
 8006912:	7263      	strb	r3, [r4, #9]
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	f7fe fdc2 	bl	80054a0 <_lv_obj_get_style_int>
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
 800691c:	7a63      	ldrb	r3, [r4, #9]
 800691e:	f360 0301 	bfi	r3, r0, #0, #2
 8006922:	7263      	strb	r3, [r4, #9]
}
 8006924:	bd70      	pop	{r4, r5, r6, pc}

08006926 <style_snapshot>:

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
 8006926:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	4614      	mov	r4, r2
 800692c:	4605      	mov	r5, r0
 800692e:	460e      	mov	r6, r1
    _lv_obj_disable_style_caching(obj, true);
 8006930:	2101      	movs	r1, #1
 8006932:	f7fd fef2 	bl	800471a <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
 8006936:	21bc      	movs	r1, #188	; 0xbc
 8006938:	4620      	mov	r0, r4
 800693a:	f009 f86d 	bl	800fa18 <_lv_memset_00>
    lv_draw_rect_dsc_init(&shot->rect);
    lv_draw_label_dsc_init(&shot->label);
 800693e:	f104 0a54 	add.w	sl, r4, #84	; 0x54
    lv_draw_rect_dsc_init(&shot->rect);
 8006942:	4620      	mov	r0, r4
 8006944:	f005 fb34 	bl	800bfb0 <lv_draw_rect_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
 8006948:	f104 0982 	add.w	r9, r4, #130	; 0x82
    lv_draw_label_dsc_init(&shot->label);
 800694c:	4650      	mov	r0, sl
 800694e:	f003 fadd 	bl	8009f0c <lv_draw_label_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
 8006952:	f104 0878 	add.w	r8, r4, #120	; 0x78
    lv_draw_img_dsc_init(&shot->img);
 8006956:	4648      	mov	r0, r9
 8006958:	f003 f9a9 	bl	8009cae <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
 800695c:	4640      	mov	r0, r8
 800695e:	f003 ff3d 	bl	800a7dc <lv_draw_line_dsc_init>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	f7fd fe7d 	bl	8004664 <lv_obj_get_style_list>
    bool trans_ori = list->skip_trans;
 800696a:	7943      	ldrb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800696c:	4607      	mov	r7, r0
    bool trans_ori = list->skip_trans;
 800696e:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
 8006972:	f043 0301 	orr.w	r3, r3, #1
 8006976:	7143      	strb	r3, [r0, #5]

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
 8006978:	4622      	mov	r2, r4
 800697a:	4631      	mov	r1, r6
 800697c:	4628      	mov	r0, r5
 800697e:	f7ff fc5b 	bl	8006238 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
 8006982:	4652      	mov	r2, sl
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	f7ff feda 	bl	8006740 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
 800698c:	464a      	mov	r2, r9
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	f7ff ff33 	bl	80067fc <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
 8006996:	4642      	mov	r2, r8
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	f7ff ff76 	bl	800688c <lv_obj_init_draw_line_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 80069a0:	2210      	movs	r2, #16
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	f7fe fd7b 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80069aa:	2211      	movs	r2, #17


    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
 80069ac:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
 80069b0:	4631      	mov	r1, r6
 80069b2:	4628      	mov	r0, r5
 80069b4:	f7fe fd74 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 80069b8:	2213      	movs	r2, #19
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
 80069ba:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	f7fe fd6d 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80069c6:	2212      	movs	r2, #18
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
 80069c8:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
 80069cc:	4631      	mov	r1, r6
 80069ce:	4628      	mov	r0, r5
 80069d0:	f7fe fd66 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 80069d4:	2214      	movs	r2, #20
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
 80069d6:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	f7fe fd5f 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 80069e2:	2215      	movs	r2, #21
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
 80069e4:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	f7fe fd58 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 80069f0:	2216      	movs	r2, #22
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
 80069f2:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	f7fe fd51 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 80069fe:	2217      	movs	r2, #23
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
 8006a00:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
 8006a04:	4631      	mov	r1, r6
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7fe fd4a 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 8006a0c:	2218      	movs	r2, #24
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
 8006a0e:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	f7fe fd43 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 8006a1a:	2203      	movs	r2, #3
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
 8006a1c:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
 8006a20:	4631      	mov	r1, r6
 8006a22:	4628      	mov	r0, r5
 8006a24:	f7fe fd3c 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8006a28:	2204      	movs	r2, #4
    shot->size = lv_obj_get_style_size(obj, part);
 8006a2a:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	f7fe fd35 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8006a36:	2205      	movs	r2, #5
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
 8006a38:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f7fe fd2e 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
 8006a44:	2206      	movs	r2, #6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
 8006a46:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f7fe fd27 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
 8006a52:	2207      	movs	r2, #7
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
 8006a54:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f7fe fd20 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 8006a60:	22c0      	movs	r2, #192	; 0xc0
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
 8006a62:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f7fe fd19 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
 8006a6e:	22c1      	movs	r2, #193	; 0xc1
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
 8006a70:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 8006a74:	4631      	mov	r1, r6
 8006a76:	4628      	mov	r0, r5
 8006a78:	f7fe fd12 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
 8006a7c:	22c2      	movs	r2, #194	; 0xc2
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
 8006a7e:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	f7fe fd0b 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 8006a8a:	22c3      	movs	r2, #195	; 0xc3
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
 8006a8c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	f7fe fd04 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
 8006a98:	22c9      	movs	r2, #201	; 0xc9
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
 8006a9a:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f7fe fcc7 	bl	8005434 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 8006aa6:	22ca      	movs	r2, #202	; 0xca
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
 8006aa8:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
 8006aac:	4631      	mov	r1, r6
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f7fe fcc0 	bl	8005434 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8006ab4:	f248 020c 	movw	r2, #32780	; 0x800c
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
 8006ab8:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f7fe ff90 	bl	80059e4 <_lv_obj_get_style_opa>
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
    shot->clip_corder = lv_obj_get_style_clip_corner(obj, part);
 8006ac4:	4631      	mov	r1, r6
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8006ac6:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    shot->clip_corder = lv_obj_get_style_clip_corner(obj, part);
 8006aca:	4628      	mov	r0, r5
 8006acc:	f7fe fda9 	bl	8005622 <lv_obj_get_style_clip_corner>
 8006ad0:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 8006ad4:	2233      	movs	r2, #51	; 0x33
 8006ad6:	f360 0300 	bfi	r3, r0, #0, #1
 8006ada:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f7fe fcdd 	bl	80054a0 <_lv_obj_get_style_int>
 8006ae6:	3000      	adds	r0, #0
 8006ae8:	bf18      	it	ne
 8006aea:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 8006aec:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb

    _lv_obj_disable_style_caching(obj, false);
 8006af0:	2100      	movs	r1, #0
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 8006af2:	f360 0341 	bfi	r3, r0, #1, #1
 8006af6:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    _lv_obj_disable_style_caching(obj, false);
 8006afa:	4628      	mov	r0, r5
 8006afc:	f7fd fe0d 	bl	800471a <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
 8006b00:	797b      	ldrb	r3, [r7, #5]
 8006b02:	f36b 0300 	bfi	r3, fp, #0, #1
 8006b06:	717b      	strb	r3, [r7, #5]
}
 8006b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b0c <lv_obj_set_state.part.34>:
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
 8006b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_state_t prev_state = obj->state;
 8006b10:	2500      	movs	r5, #0
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
 8006b12:	4604      	mov	r4, r0
 8006b14:	468b      	mov	fp, r1
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
 8006b16:	462e      	mov	r6, r5
    lv_state_t prev_state = obj->state;
 8006b18:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
 8006b1c:	b0eb      	sub	sp, #428	; 0x1ac
    lv_state_t prev_state = obj->state;
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	b2ef      	uxtb	r7, r5
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 8006b22:	4639      	mov	r1, r7
 8006b24:	4620      	mov	r0, r4
 8006b26:	f7fd fd9d 	bl	8004664 <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	f000 8097 	beq.w	8006c5e <lv_obj_set_state.part.34+0x152>
        obj->state = prev_state;
 8006b30:	9b01      	ldr	r3, [sp, #4]
        style_snapshot(obj, part, &shot_pre);
 8006b32:	aa0c      	add	r2, sp, #48	; 0x30
        obj->state = prev_state;
 8006b34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
 8006b38:	4639      	mov	r1, r7
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f7ff fef3 	bl	8006926 <style_snapshot>
        style_snapshot(obj, part, &shot_post);
 8006b40:	aa3b      	add	r2, sp, #236	; 0xec
 8006b42:	4639      	mov	r1, r7
 8006b44:	4620      	mov	r0, r4
        obj->state = new_state;
 8006b46:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
 8006b4a:	f7ff feec 	bl	8006926 <style_snapshot>

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
 8006b4e:	22bc      	movs	r2, #188	; 0xbc
 8006b50:	a93b      	add	r1, sp, #236	; 0xec
 8006b52:	a80c      	add	r0, sp, #48	; 0x30
 8006b54:	f00e fa4e 	bl	8014ff4 <memcmp>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d07c      	beq.n	8006c56 <lv_obj_set_state.part.34+0x14a>


    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 8006b5c:	f9bd 20c2 	ldrsh.w	r2, [sp, #194]	; 0xc2
 8006b60:	f9bd 317e 	ldrsh.w	r3, [sp, #382]	; 0x17e
 8006b64:	429a      	cmp	r2, r3
 8006b66:	f040 8098 	bne.w	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
 8006b6a:	f9bd 20c4 	ldrsh.w	r2, [sp, #196]	; 0xc4
 8006b6e:	f9bd 3180 	ldrsh.w	r3, [sp, #384]	; 0x180
 8006b72:	429a      	cmp	r2, r3
 8006b74:	f040 8091 	bne.w	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
 8006b78:	f9bd 20c8 	ldrsh.w	r2, [sp, #200]	; 0xc8
 8006b7c:	f9bd 3182 	ldrsh.w	r3, [sp, #386]	; 0x182
 8006b80:	4293      	cmp	r3, r2
 8006b82:	f040 808a 	bne.w	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
 8006b86:	f9bd 20c6 	ldrsh.w	r2, [sp, #198]	; 0xc6
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	f040 8085 	bne.w	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
 8006b90:	f9bd 20ca 	ldrsh.w	r2, [sp, #202]	; 0xca
 8006b94:	f9bd 3186 	ldrsh.w	r3, [sp, #390]	; 0x186
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d17e      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
 8006b9c:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
 8006ba0:	f9bd 3188 	ldrsh.w	r3, [sp, #392]	; 0x188
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d178      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
 8006ba8:	f9bd 20ce 	ldrsh.w	r2, [sp, #206]	; 0xce
 8006bac:	f9bd 318a 	ldrsh.w	r3, [sp, #394]	; 0x18a
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d172      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
 8006bb4:	f9bd 30d0 	ldrsh.w	r3, [sp, #208]	; 0xd0
 8006bb8:	f9bd 218e 	ldrsh.w	r2, [sp, #398]	; 0x18e
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d16c      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
 8006bc0:	f9bd 20d2 	ldrsh.w	r2, [sp, #210]	; 0xd2
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d168      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
 8006bc8:	f9bd 20d6 	ldrsh.w	r2, [sp, #214]	; 0xd6
 8006bcc:	f9bd 3192 	ldrsh.w	r3, [sp, #402]	; 0x192
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d162      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
 8006bd4:	f9bd 20d8 	ldrsh.w	r2, [sp, #216]	; 0xd8
 8006bd8:	f9bd 3194 	ldrsh.w	r3, [sp, #404]	; 0x194
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d15c      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
 8006be0:	f9bd 20da 	ldrsh.w	r2, [sp, #218]	; 0xda
 8006be4:	f9bd 3196 	ldrsh.w	r3, [sp, #406]	; 0x196
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d156      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
 8006bec:	f9bd 20dc 	ldrsh.w	r2, [sp, #220]	; 0xdc
 8006bf0:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	; 0x198
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d150      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
 8006bf8:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 8006bfc:	f9bd 3106 	ldrsh.w	r3, [sp, #262]	; 0x106
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d14a      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
 8006c04:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8006c08:	f9bd 3108 	ldrsh.w	r3, [sp, #264]	; 0x108
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d144      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
 8006c10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c12:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d140      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
 8006c18:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8006c1c:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d13a      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
 8006c24:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
 8006c28:	f9bd 3114 	ldrsh.w	r3, [sp, #276]	; 0x114
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d134      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
 8006c30:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 8006c34:	f9bd 310e 	ldrsh.w	r3, [sp, #270]	; 0x10e
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d12e      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
 8006c3c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8006c40:	f9bd 3110 	ldrsh.w	r3, [sp, #272]	; 0x110
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d128      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
 8006c48:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 8006c4c:	f9bd 3112 	ldrsh.w	r3, [sp, #274]	; 0x112
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d122      	bne.n	8006c9a <lv_obj_set_state.part.34+0x18e>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
 8006c54:	2601      	movs	r6, #1
 8006c56:	3501      	adds	r5, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8006c58:	2d40      	cmp	r5, #64	; 0x40
 8006c5a:	f47f af61 	bne.w	8006b20 <lv_obj_set_state.part.34+0x14>
    obj->state = new_state;
 8006c5e:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
    if(cmp_res == STYLE_COMPARE_SAME) {
 8006c62:	b1be      	cbz	r6, 8006c94 <lv_obj_set_state.part.34+0x188>
 8006c64:	2300      	movs	r3, #0
 8006c66:	9303      	str	r3, [sp, #12]
 8006c68:	f89d 500c 	ldrb.w	r5, [sp, #12]
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	4629      	mov	r1, r5
 8006c70:	f7fd fcf8 	bl	8004664 <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
 8006c74:	9005      	str	r0, [sp, #20]
 8006c76:	b140      	cbz	r0, 8006c8a <lv_obj_set_state.part.34+0x17e>
        if(style_list->ignore_trans) continue;
 8006c78:	7943      	ldrb	r3, [r0, #5]
 8006c7a:	f013 0702 	ands.w	r7, r3, #2
 8006c7e:	d00e      	beq.n	8006c9e <lv_obj_set_state.part.34+0x192>
 8006c80:	9b03      	ldr	r3, [sp, #12]
 8006c82:	3301      	adds	r3, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	9303      	str	r3, [sp, #12]
 8006c88:	d1ee      	bne.n	8006c68 <lv_obj_set_state.part.34+0x15c>
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
 8006c8a:	2e01      	cmp	r6, #1
 8006c8c:	d102      	bne.n	8006c94 <lv_obj_set_state.part.34+0x188>
        lv_obj_invalidate(obj);
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f7fd fe26 	bl	80048e0 <lv_obj_invalidate>
}
 8006c94:	b06b      	add	sp, #428	; 0x1ac
 8006c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            cmp_res = STYLE_COMPARE_DIFF;
 8006c9a:	2602      	movs	r6, #2
 8006c9c:	e7df      	b.n	8006c5e <lv_obj_set_state.part.34+0x152>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8006c9e:	22b0      	movs	r2, #176	; 0xb0
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f7fe fbfc 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 8006ca8:	22b1      	movs	r2, #177	; 0xb1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8006caa:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 8006cac:	4629      	mov	r1, r5
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f7fe fbf6 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
 8006cb4:	22be      	movs	r2, #190	; 0xbe
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 8006cb6:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7fe fef8 	bl	8005ab0 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
 8006cc0:	22b2      	movs	r2, #178	; 0xb2
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
 8006cc2:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7fe fbea 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
 8006ccc:	22b3      	movs	r2, #179	; 0xb3
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
 8006cce:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f7fe fbe3 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
 8006cda:	22b4      	movs	r2, #180	; 0xb4
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
 8006cdc:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f7fe fbdc 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
 8006ce8:	22b5      	movs	r2, #181	; 0xb5
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
 8006cea:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f7fe fbd5 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
 8006cf6:	22b6      	movs	r2, #182	; 0xb6
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
 8006cf8:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f7fe fbce 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 8006d04:	22b7      	movs	r2, #183	; 0xb7
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
 8006d06:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f7fe fbc7 	bl	80054a0 <_lv_obj_get_style_int>
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
 8006d12:	9704      	str	r7, [sp, #16]
 8006d14:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
            if(props[i] != 0) {
 8006d18:	9a04      	ldr	r2, [sp, #16]
 8006d1a:	ab0c      	add	r3, sp, #48	; 0x30
 8006d1c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8006d20:	2f00      	cmp	r7, #0
 8006d22:	f000 80c1 	beq.w	8006ea8 <lv_obj_set_state.part.34+0x39c>
                _lv_style_list_add_trans_style(style_list);
 8006d26:	9805      	ldr	r0, [sp, #20]
 8006d28:	f001 fc22 	bl	8008570 <_lv_style_list_add_trans_style>
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7fd fc98 	bl	8004664 <lv_obj_get_style_list>
 8006d34:	4680      	mov	r8, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
 8006d36:	f001 fb74 	bl	8008422 <_lv_style_list_get_transition_style>
    bool cahche_ori = style_list->ignore_cache;
 8006d3a:	f898 3005 	ldrb.w	r3, [r8, #5]
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
 8006d3e:	4682      	mov	sl, r0
    bool cahche_ori = style_list->ignore_cache;
 8006d40:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8006d44:	9202      	str	r2, [sp, #8]
 8006d46:	f007 020f 	and.w	r2, r7, #15
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 8006d4a:	2a08      	cmp	r2, #8
 8006d4c:	f200 80bc 	bhi.w	8006ec8 <lv_obj_set_state.part.34+0x3bc>
        style_list->ignore_cache = 1;
 8006d50:	f043 0309 	orr.w	r3, r3, #9
 8006d54:	f888 3005 	strb.w	r3, [r8, #5]
        obj->state = prev_state;
 8006d58:	9b01      	ldr	r3, [sp, #4]
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 8006d5a:	463a      	mov	r2, r7
        obj->state = prev_state;
 8006d5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 8006d60:	4629      	mov	r1, r5
 8006d62:	4620      	mov	r0, r4
 8006d64:	f7fe fb9c 	bl	80054a0 <_lv_obj_get_style_int>
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 8006d68:	463a      	mov	r2, r7
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 8006d6a:	9009      	str	r0, [sp, #36]	; 0x24
        obj->state = new_state;
 8006d6c:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 8006d70:	4629      	mov	r1, r5
 8006d72:	4620      	mov	r0, r4
 8006d74:	f7fe fb94 	bl	80054a0 <_lv_obj_get_style_int>
        style_list->skip_trans = 0;
 8006d78:	f898 2005 	ldrb.w	r2, [r8, #5]
        style_list->ignore_cache = cahche_ori;
 8006d7c:	9b02      	ldr	r3, [sp, #8]
 8006d7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d82:	f363 02c3 	bfi	r2, r3, #3, #1
 8006d86:	f888 2005 	strb.w	r2, [r8, #5]
        if(int1 == int2)  return NULL;
 8006d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 8006d8c:	4681      	mov	r9, r0
        if(int1 == int2)  return NULL;
 8006d8e:	4283      	cmp	r3, r0
 8006d90:	f000 808a 	beq.w	8006ea8 <lv_obj_set_state.part.34+0x39c>
        obj->state = prev_state;
 8006d94:	9b01      	ldr	r3, [sp, #4]
        int1 = _lv_obj_get_style_int(obj, part, prop);
 8006d96:	463a      	mov	r2, r7
        obj->state = prev_state;
 8006d98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f7fe fb7e 	bl	80054a0 <_lv_obj_get_style_int>
        obj->state = new_state;
 8006da4:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
 8006da8:	4602      	mov	r2, r0
        int1 = _lv_obj_get_style_int(obj, part, prop);
 8006daa:	4680      	mov	r8, r0
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
 8006dac:	4639      	mov	r1, r7
 8006dae:	4650      	mov	r0, sl
 8006db0:	f001 f994 	bl	80080dc <_lv_style_set_int>
        if(prop == LV_STYLE_RADIUS) {
 8006db4:	2f01      	cmp	r7, #1
 8006db6:	d125      	bne.n	8006e04 <lv_obj_set_state.part.34+0x2f8>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
 8006db8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006dbc:	4598      	cmp	r8, r3
 8006dbe:	d001      	beq.n	8006dc4 <lv_obj_set_state.part.34+0x2b8>
 8006dc0:	4599      	cmp	r9, r3
 8006dc2:	d11f      	bne.n	8006e04 <lv_obj_set_state.part.34+0x2f8>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f7fd fc1f 	bl	8004608 <lv_obj_get_width>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	fb90 f0f3 	sdiv	r0, r0, r3
 8006dd0:	fa0f fa80 	sxth.w	sl, r0
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8006dd4:	4620      	mov	r0, r4
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 8006dd6:	9302      	str	r3, [sp, #8]
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8006dd8:	f7fd fc16 	bl	8004608 <lv_obj_get_width>
 8006ddc:	9b02      	ldr	r3, [sp, #8]
 8006dde:	fb90 f0f3 	sdiv	r0, r0, r3
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8006de2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006de6:	4598      	cmp	r8, r3
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8006de8:	b200      	sxth	r0, r0
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8006dea:	d122      	bne.n	8006e32 <lv_obj_set_state.part.34+0x326>
 8006dec:	4582      	cmp	sl, r0
 8006dee:	da16      	bge.n	8006e1e <lv_obj_set_state.part.34+0x312>
 8006df0:	f10a 0801 	add.w	r8, sl, #1
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8006df4:	4599      	cmp	r9, r3
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8006df6:	fa0f f888 	sxth.w	r8, r8
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8006dfa:	d103      	bne.n	8006e04 <lv_obj_set_state.part.34+0x2f8>
 8006dfc:	f10a 0901 	add.w	r9, sl, #1
 8006e00:	fa0f f989 	sxth.w	r9, r9
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006e04:	48a4      	ldr	r0, [pc, #656]	; (8007098 <lv_obj_set_state.part.34+0x58c>)
 8006e06:	f008 f9ca 	bl	800f19e <_lv_ll_ins_head>
 8006e0a:	4682      	mov	sl, r0
        LV_ASSERT_MEM(tr);
 8006e0c:	f008 f8dc 	bl	800efc8 <lv_debug_check_null>
 8006e10:	4603      	mov	r3, r0
 8006e12:	b998      	cbnz	r0, 8006e3c <lv_obj_set_state.part.34+0x330>
 8006e14:	4652      	mov	r2, sl
 8006e16:	48a1      	ldr	r0, [pc, #644]	; (800709c <lv_obj_set_state.part.34+0x590>)
 8006e18:	f008 f8da 	bl	800efd0 <lv_debug_log_error>
 8006e1c:	e7fe      	b.n	8006e1c <lv_obj_set_state.part.34+0x310>
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8006e1e:	f100 0801 	add.w	r8, r0, #1
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8006e22:	4599      	cmp	r9, r3
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8006e24:	fa0f f888 	sxth.w	r8, r8
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8006e28:	d1ec      	bne.n	8006e04 <lv_obj_set_state.part.34+0x2f8>
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	fa0f f980 	sxth.w	r9, r0
 8006e30:	e7e8      	b.n	8006e04 <lv_obj_set_state.part.34+0x2f8>
 8006e32:	4599      	cmp	r9, r3
 8006e34:	d1e6      	bne.n	8006e04 <lv_obj_set_state.part.34+0x2f8>
 8006e36:	4582      	cmp	sl, r0
 8006e38:	daf7      	bge.n	8006e2a <lv_obj_set_state.part.34+0x31e>
 8006e3a:	e7df      	b.n	8006dfc <lv_obj_set_state.part.34+0x2f0>
        if(tr == NULL) return NULL;
 8006e3c:	f1ba 0f00 	cmp.w	sl, #0
 8006e40:	d032      	beq.n	8006ea8 <lv_obj_set_state.part.34+0x39c>
        tr->start_value._int = int1;
 8006e42:	f8aa 8008 	strh.w	r8, [sl, #8]
        tr->end_value._int = int2;
 8006e46:	f8aa 900c 	strh.w	r9, [sl, #12]
                    tr->obj = obj;
 8006e4a:	f8ca 4000 	str.w	r4, [sl]
                    tr->prop = props[i];
 8006e4e:	f8aa 7004 	strh.w	r7, [sl, #4]
                    tr->part = part;
 8006e52:	f88a 5006 	strb.w	r5, [sl, #6]
                    lv_anim_init(&a);
 8006e56:	a83b      	add	r0, sp, #236	; 0xec
 8006e58:	f007 fd32 	bl	800e8c0 <lv_anim_init>
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 8006e5c:	4b90      	ldr	r3, [pc, #576]	; (80070a0 <lv_obj_set_state.part.34+0x594>)
 8006e5e:	9a06      	ldr	r2, [sp, #24]
 8006e60:	933c      	str	r3, [sp, #240]	; 0xf0
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
 8006e62:	4b90      	ldr	r3, [pc, #576]	; (80070a4 <lv_obj_set_state.part.34+0x598>)
 8006e64:	1dd1      	adds	r1, r2, #7
 8006e66:	933d      	str	r3, [sp, #244]	; 0xf4
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8006e68:	4b8f      	ldr	r3, [pc, #572]	; (80070a8 <lv_obj_set_state.part.34+0x59c>)
    a->var     = var;
 8006e6a:	f8cd a0ec 	str.w	sl, [sp, #236]	; 0xec
    a->ready_cb = ready_cb;
 8006e6e:	933e      	str	r3, [sp, #248]	; 0xf8
    a->start = start;
 8006e70:	2300      	movs	r3, #0
 8006e72:	9341      	str	r3, [sp, #260]	; 0x104
    a->current = start;
 8006e74:	9342      	str	r3, [sp, #264]	; 0x108
    a->end   = end;
 8006e76:	23ff      	movs	r3, #255	; 0xff
 8006e78:	9343      	str	r3, [sp, #268]	; 0x10c
    a->time     = duration;
 8006e7a:	9b08      	ldr	r3, [sp, #32]
    uint8_t * d8 = (uint8_t *)dst;
 8006e7c:	aa3f      	add	r2, sp, #252	; 0xfc
 8006e7e:	9344      	str	r3, [sp, #272]	; 0x110
    a->act_time = -(int32_t)(delay);
 8006e80:	9b07      	ldr	r3, [sp, #28]
 8006e82:	425b      	negs	r3, r3
 8006e84:	9345      	str	r3, [sp, #276]	; 0x114
 8006e86:	9b06      	ldr	r3, [sp, #24]
 8006e88:	3b01      	subs	r3, #1
        *d8 = *s8;
 8006e8a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    while(len) {
 8006e8e:	4299      	cmp	r1, r3
        *d8 = *s8;
 8006e90:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
 8006e94:	d1f9      	bne.n	8006e8a <lv_obj_set_state.part.34+0x37e>
                    a.early_apply = 0;
 8006e96:	f89d 3126 	ldrb.w	r3, [sp, #294]	; 0x126
                    lv_anim_start(&a);
 8006e9a:	a83b      	add	r0, sp, #236	; 0xec
                    a.early_apply = 0;
 8006e9c:	f36f 0300 	bfc	r3, #0, #1
 8006ea0:	f88d 3126 	strb.w	r3, [sp, #294]	; 0x126
                    lv_anim_start(&a);
 8006ea4:	f007 fd54 	bl	800e950 <lv_anim_start>
 8006ea8:	9b04      	ldr	r3, [sp, #16]
 8006eaa:	3301      	adds	r3, #1
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
 8006eac:	2b06      	cmp	r3, #6
 8006eae:	9304      	str	r3, [sp, #16]
 8006eb0:	f47f af32 	bne.w	8006d18 <lv_obj_set_state.part.34+0x20c>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8006eb4:	2e02      	cmp	r6, #2
 8006eb6:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f040 80e7 	bne.w	8007090 <lv_obj_set_state.part.34+0x584>
 8006ec2:	f7fe ff2f 	bl	8005d24 <lv_obj_refresh_style>
 8006ec6:	e6db      	b.n	8006c80 <lv_obj_set_state.part.34+0x174>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8006ec8:	2a0b      	cmp	r2, #11
 8006eca:	d849      	bhi.n	8006f60 <lv_obj_set_state.part.34+0x454>
        style_list->ignore_cache = 1;
 8006ecc:	f043 0309 	orr.w	r3, r3, #9
 8006ed0:	f888 3005 	strb.w	r3, [r8, #5]
        obj->state = prev_state;
 8006ed4:	9b01      	ldr	r3, [sp, #4]
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 8006ed6:	463a      	mov	r2, r7
        obj->state = prev_state;
 8006ed8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 8006edc:	4629      	mov	r1, r5
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f7fe faa8 	bl	8005434 <_lv_obj_get_style_color>
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 8006ee4:	463a      	mov	r2, r7
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 8006ee6:	4681      	mov	r9, r0
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 8006ee8:	4629      	mov	r1, r5
        obj->state = new_state;
 8006eea:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7fe faa0 	bl	8005434 <_lv_obj_get_style_color>
 8006ef4:	4603      	mov	r3, r0
        style_list->skip_trans = 0;
 8006ef6:	f898 2005 	ldrb.w	r2, [r8, #5]
        style_list->ignore_cache = cahche_ori;
 8006efa:	9902      	ldr	r1, [sp, #8]
 8006efc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f00:	f361 02c3 	bfi	r2, r1, #3, #1
 8006f04:	f888 2005 	strb.w	r2, [r8, #5]
        if(c1.full == c2.full) return NULL;
 8006f08:	fa1f f989 	uxth.w	r9, r9
 8006f0c:	b282      	uxth	r2, r0
 8006f0e:	4591      	cmp	r9, r2
 8006f10:	9302      	str	r3, [sp, #8]
 8006f12:	d0c9      	beq.n	8006ea8 <lv_obj_set_state.part.34+0x39c>
        obj->state = prev_state;
 8006f14:	9b01      	ldr	r3, [sp, #4]
        c1 = _lv_obj_get_style_color(obj, part, prop);
 8006f16:	463a      	mov	r2, r7
        obj->state = prev_state;
 8006f18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f7fe fa88 	bl	8005434 <_lv_obj_get_style_color>
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
 8006f24:	4639      	mov	r1, r7
 8006f26:	4602      	mov	r2, r0
        c1 = _lv_obj_get_style_color(obj, part, prop);
 8006f28:	4681      	mov	r9, r0
        obj->state = new_state;
 8006f2a:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
 8006f2e:	4650      	mov	r0, sl
 8006f30:	f001 f922 	bl	8008178 <_lv_style_set_color>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006f34:	4858      	ldr	r0, [pc, #352]	; (8007098 <lv_obj_set_state.part.34+0x58c>)
 8006f36:	f008 f932 	bl	800f19e <_lv_ll_ins_head>
 8006f3a:	4682      	mov	sl, r0
        LV_ASSERT_MEM(tr);
 8006f3c:	f008 f844 	bl	800efc8 <lv_debug_check_null>
 8006f40:	9b02      	ldr	r3, [sp, #8]
 8006f42:	b928      	cbnz	r0, 8006f50 <lv_obj_set_state.part.34+0x444>
 8006f44:	4603      	mov	r3, r0
 8006f46:	4652      	mov	r2, sl
 8006f48:	4854      	ldr	r0, [pc, #336]	; (800709c <lv_obj_set_state.part.34+0x590>)
 8006f4a:	f008 f841 	bl	800efd0 <lv_debug_log_error>
 8006f4e:	e7fe      	b.n	8006f4e <lv_obj_set_state.part.34+0x442>
        if(tr == NULL) return NULL;
 8006f50:	f1ba 0f00 	cmp.w	sl, #0
 8006f54:	d0a8      	beq.n	8006ea8 <lv_obj_set_state.part.34+0x39c>
        tr->start_value._color = c1;
 8006f56:	f8aa 9008 	strh.w	r9, [sl, #8]
        tr->end_value._color = c2;
 8006f5a:	f8aa 300c 	strh.w	r3, [sl, #12]
 8006f5e:	e774      	b.n	8006e4a <lv_obj_set_state.part.34+0x33e>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8006f60:	2a0d      	cmp	r2, #13
 8006f62:	d846      	bhi.n	8006ff2 <lv_obj_set_state.part.34+0x4e6>
        style_list->ignore_cache = 1;
 8006f64:	f043 0309 	orr.w	r3, r3, #9
 8006f68:	f888 3005 	strb.w	r3, [r8, #5]
        obj->state = prev_state;
 8006f6c:	9b01      	ldr	r3, [sp, #4]
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 8006f6e:	463a      	mov	r2, r7
        obj->state = prev_state;
 8006f70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 8006f74:	4629      	mov	r1, r5
 8006f76:	4620      	mov	r0, r4
 8006f78:	f7fe fd34 	bl	80059e4 <_lv_obj_get_style_opa>
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 8006f7c:	463a      	mov	r2, r7
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 8006f7e:	9009      	str	r0, [sp, #36]	; 0x24
        obj->state = new_state;
 8006f80:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 8006f84:	4629      	mov	r1, r5
 8006f86:	4620      	mov	r0, r4
 8006f88:	f7fe fd2c 	bl	80059e4 <_lv_obj_get_style_opa>
        style_list->skip_trans = 0;
 8006f8c:	f898 2005 	ldrb.w	r2, [r8, #5]
        style_list->ignore_cache = cahche_ori;
 8006f90:	9b02      	ldr	r3, [sp, #8]
 8006f92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f96:	f363 02c3 	bfi	r2, r3, #3, #1
 8006f9a:	f888 2005 	strb.w	r2, [r8, #5]
        if(o1 == o2) return NULL;
 8006f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 8006fa0:	4681      	mov	r9, r0
        if(o1 == o2) return NULL;
 8006fa2:	4283      	cmp	r3, r0
 8006fa4:	d080      	beq.n	8006ea8 <lv_obj_set_state.part.34+0x39c>
        obj->state = prev_state;
 8006fa6:	9b01      	ldr	r3, [sp, #4]
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 8006fa8:	463a      	mov	r2, r7
        obj->state = prev_state;
 8006faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 8006fae:	4629      	mov	r1, r5
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f7fe fd17 	bl	80059e4 <_lv_obj_get_style_opa>
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4602      	mov	r2, r0
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 8006fba:	4680      	mov	r8, r0
        obj->state = new_state;
 8006fbc:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
 8006fc0:	4650      	mov	r0, sl
 8006fc2:	f001 f927 	bl	8008214 <_lv_style_set_opa>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006fc6:	4834      	ldr	r0, [pc, #208]	; (8007098 <lv_obj_set_state.part.34+0x58c>)
 8006fc8:	f008 f8e9 	bl	800f19e <_lv_ll_ins_head>
 8006fcc:	4682      	mov	sl, r0
        LV_ASSERT_MEM(tr);
 8006fce:	f007 fffb 	bl	800efc8 <lv_debug_check_null>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	b920      	cbnz	r0, 8006fe0 <lv_obj_set_state.part.34+0x4d4>
 8006fd6:	4652      	mov	r2, sl
 8006fd8:	4830      	ldr	r0, [pc, #192]	; (800709c <lv_obj_set_state.part.34+0x590>)
 8006fda:	f007 fff9 	bl	800efd0 <lv_debug_log_error>
 8006fde:	e7fe      	b.n	8006fde <lv_obj_set_state.part.34+0x4d2>
        if(tr == NULL) return NULL;
 8006fe0:	f1ba 0f00 	cmp.w	sl, #0
 8006fe4:	f43f af60 	beq.w	8006ea8 <lv_obj_set_state.part.34+0x39c>
        tr->start_value._opa = o1;
 8006fe8:	f88a 8008 	strb.w	r8, [sl, #8]
        tr->end_value._opa = o2;
 8006fec:	f88a 900c 	strb.w	r9, [sl, #12]
 8006ff0:	e72b      	b.n	8006e4a <lv_obj_set_state.part.34+0x33e>
        obj->state = prev_state;
 8006ff2:	9b01      	ldr	r3, [sp, #4]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8006ff4:	463a      	mov	r2, r7
        obj->state = prev_state;
 8006ff6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        style_list->skip_trans = 1;
 8006ffa:	f898 3005 	ldrb.w	r3, [r8, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8006ffe:	4629      	mov	r1, r5
        style_list->ignore_cache = 1;
 8007000:	f043 0309 	orr.w	r3, r3, #9
 8007004:	f888 3005 	strb.w	r3, [r8, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8007008:	4620      	mov	r0, r4
 800700a:	f7fe fd51 	bl	8005ab0 <_lv_obj_get_style_ptr>
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 800700e:	463a      	mov	r2, r7
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8007010:	900b      	str	r0, [sp, #44]	; 0x2c
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 8007012:	4629      	mov	r1, r5
        obj->state = new_state;
 8007014:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 8007018:	4620      	mov	r0, r4
 800701a:	f7fe fd49 	bl	8005ab0 <_lv_obj_get_style_ptr>
 800701e:	a96a      	add	r1, sp, #424	; 0x1a8
 8007020:	f841 0dbc 	str.w	r0, [r1, #-188]!
        style_list->skip_trans = 0;
 8007024:	f898 3005 	ldrb.w	r3, [r8, #5]
        style_list->ignore_cache = cahche_ori;
 8007028:	9a02      	ldr	r2, [sp, #8]
 800702a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800702e:	f362 03c3 	bfi	r3, r2, #3, #1
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 8007032:	4681      	mov	r9, r0
        style_list->ignore_cache = cahche_ori;
 8007034:	f888 3005 	strb.w	r3, [r8, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
 8007038:	2204      	movs	r2, #4
 800703a:	a80b      	add	r0, sp, #44	; 0x2c
 800703c:	f00d ffda 	bl	8014ff4 <memcmp>
 8007040:	2800      	cmp	r0, #0
 8007042:	f43f af31 	beq.w	8006ea8 <lv_obj_set_state.part.34+0x39c>
        obj->state = prev_state;
 8007046:	9b01      	ldr	r3, [sp, #4]
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8007048:	463a      	mov	r2, r7
        obj->state = prev_state;
 800704a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800704e:	4629      	mov	r1, r5
 8007050:	4620      	mov	r0, r4
 8007052:	f7fe fd2d 	bl	8005ab0 <_lv_obj_get_style_ptr>
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
 8007056:	4639      	mov	r1, r7
 8007058:	4602      	mov	r2, r0
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 800705a:	900b      	str	r0, [sp, #44]	; 0x2c
 800705c:	4680      	mov	r8, r0
        obj->state = new_state;
 800705e:	f884 b03d 	strb.w	fp, [r4, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
 8007062:	4650      	mov	r0, sl
 8007064:	f001 f926 	bl	80082b4 <_lv_style_set_ptr>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8007068:	480b      	ldr	r0, [pc, #44]	; (8007098 <lv_obj_set_state.part.34+0x58c>)
 800706a:	f008 f898 	bl	800f19e <_lv_ll_ins_head>
 800706e:	4682      	mov	sl, r0
        LV_ASSERT_MEM(tr);
 8007070:	f007 ffaa 	bl	800efc8 <lv_debug_check_null>
 8007074:	4603      	mov	r3, r0
 8007076:	b920      	cbnz	r0, 8007082 <lv_obj_set_state.part.34+0x576>
 8007078:	4652      	mov	r2, sl
 800707a:	4808      	ldr	r0, [pc, #32]	; (800709c <lv_obj_set_state.part.34+0x590>)
 800707c:	f007 ffa8 	bl	800efd0 <lv_debug_log_error>
 8007080:	e7fe      	b.n	8007080 <lv_obj_set_state.part.34+0x574>
        if(tr == NULL) return NULL;
 8007082:	f1ba 0f00 	cmp.w	sl, #0
 8007086:	f43f af0f 	beq.w	8006ea8 <lv_obj_set_state.part.34+0x39c>
        tr->end_value._ptr = p2;
 800708a:	e9ca 8902 	strd	r8, r9, [sl, #8]
 800708e:	e6dc      	b.n	8006e4a <lv_obj_set_state.part.34+0x33e>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
 8007090:	f7fe fe0f 	bl	8005cb2 <invalidate_style_cache>
 8007094:	e5f4      	b.n	8006c80 <lv_obj_set_state.part.34+0x174>
 8007096:	bf00      	nop
 8007098:	200033e0 	.word	0x200033e0
 800709c:	08015994 	.word	0x08015994
 80070a0:	08005ee1 	.word	0x08005ee1
 80070a4:	08005b79 	.word	0x08005b79
 80070a8:	0800475d 	.word	0x0800475d

080070ac <lv_obj_set_state>:
{
 80070ac:	b538      	push	{r3, r4, r5, lr}
    if(obj->state == new_state) return;
 80070ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80070b2:	4604      	mov	r4, r0
    if(obj->state == new_state) return;
 80070b4:	428b      	cmp	r3, r1
{
 80070b6:	460d      	mov	r5, r1
    if(obj->state == new_state) return;
 80070b8:	d00e      	beq.n	80070d8 <lv_obj_set_state+0x2c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80070ba:	f007 ff85 	bl	800efc8 <lv_debug_check_null>
 80070be:	4603      	mov	r3, r0
 80070c0:	b920      	cbnz	r0, 80070cc <lv_obj_set_state+0x20>
 80070c2:	4622      	mov	r2, r4
 80070c4:	4805      	ldr	r0, [pc, #20]	; (80070dc <lv_obj_set_state+0x30>)
 80070c6:	f007 ff83 	bl	800efd0 <lv_debug_log_error>
 80070ca:	e7fe      	b.n	80070ca <lv_obj_set_state+0x1e>
 80070cc:	4629      	mov	r1, r5
 80070ce:	4620      	mov	r0, r4
}
 80070d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070d4:	f7ff bd1a 	b.w	8006b0c <lv_obj_set_state.part.34>
 80070d8:	bd38      	pop	{r3, r4, r5, pc}
 80070da:	bf00      	nop
 80070dc:	080158e8 	.word	0x080158e8

080070e0 <lv_obj_add_state>:
{
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4605      	mov	r5, r0
 80070e4:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80070e6:	f007 ff6f 	bl	800efc8 <lv_debug_check_null>
 80070ea:	b910      	cbnz	r0, 80070f2 <lv_obj_add_state+0x12>
 80070ec:	4628      	mov	r0, r5
 80070ee:	f7fd f82b 	bl	8004148 <lv_obj_add_state.part.35>
    lv_state_t new_state = obj->state | state;
 80070f2:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80070f6:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
 80070fa:	428b      	cmp	r3, r1
 80070fc:	d004      	beq.n	8007108 <lv_obj_add_state+0x28>
        lv_obj_set_state(obj, new_state);
 80070fe:	4628      	mov	r0, r5
}
 8007100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_state(obj, new_state);
 8007104:	f7ff bfd2 	b.w	80070ac <lv_obj_set_state>
}
 8007108:	bd38      	pop	{r3, r4, r5, pc}

0800710a <lv_obj_clear_state>:
{
 800710a:	b538      	push	{r3, r4, r5, lr}
 800710c:	4605      	mov	r5, r0
 800710e:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007110:	f007 ff5a 	bl	800efc8 <lv_debug_check_null>
 8007114:	b910      	cbnz	r0, 800711c <lv_obj_clear_state+0x12>
 8007116:	4628      	mov	r0, r5
 8007118:	f7fd f816 	bl	8004148 <lv_obj_add_state.part.35>
    lv_state_t new_state = obj->state & (~state);
 800711c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8007120:	ea23 0104 	bic.w	r1, r3, r4
    if(obj->state != new_state) {
 8007124:	428b      	cmp	r3, r1
 8007126:	d004      	beq.n	8007132 <lv_obj_clear_state+0x28>
        lv_obj_set_state(obj, new_state);
 8007128:	4628      	mov	r0, r5
}
 800712a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_set_state(obj, new_state);
 800712e:	f7ff bfbd 	b.w	80070ac <lv_obj_set_state>
}
 8007132:	bd38      	pop	{r3, r4, r5, pc}

08007134 <lv_obj_get_draw_rect_ext_pad_size>:
{
 8007134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 8007138:	2250      	movs	r2, #80	; 0x50
 800713a:	b088      	sub	sp, #32
 800713c:	4605      	mov	r5, r0
 800713e:	460e      	mov	r6, r1
 8007140:	f7fe f9ae 	bl	80054a0 <_lv_obj_get_style_int>
    if(sh_width) {
 8007144:	4604      	mov	r4, r0
 8007146:	2800      	cmp	r0, #0
 8007148:	f040 80b6 	bne.w	80072b8 <lv_obj_get_draw_rect_ext_pad_size+0x184>
    lv_coord_t s = 0;
 800714c:	2400      	movs	r4, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
 800714e:	227f      	movs	r2, #127	; 0x7f
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	f7fe fcac 	bl	8005ab0 <_lv_obj_get_style_ptr>
    if(value_str) {
 8007158:	4680      	mov	r8, r0
 800715a:	2800      	cmp	r0, #0
 800715c:	d07d      	beq.n	800725a <lv_obj_get_draw_rect_ext_pad_size+0x126>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
 800715e:	227c      	movs	r2, #124	; 0x7c
 8007160:	4631      	mov	r1, r6
 8007162:	4628      	mov	r0, r5
 8007164:	f7fe fc3e 	bl	80059e4 <_lv_obj_get_style_opa>
        if(value_opa > LV_OPA_MIN) {
 8007168:	2802      	cmp	r0, #2
 800716a:	d976      	bls.n	800725a <lv_obj_get_draw_rect_ext_pad_size+0x126>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
 800716c:	2270      	movs	r2, #112	; 0x70
 800716e:	4631      	mov	r1, r6
 8007170:	4628      	mov	r0, r5
 8007172:	f7fe f995 	bl	80054a0 <_lv_obj_get_style_int>
 8007176:	2270      	movs	r2, #112	; 0x70
 8007178:	4681      	mov	r9, r0
 800717a:	4631      	mov	r1, r6
 800717c:	4628      	mov	r0, r5
 800717e:	f7fe f98f 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 8007182:	227e      	movs	r2, #126	; 0x7e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
 8007184:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	f7fe fc91 	bl	8005ab0 <_lv_obj_get_style_ptr>
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
 800718e:	2700      	movs	r7, #0
 8007190:	f647 4318 	movw	r3, #31768	; 0x7c18
 8007194:	4602      	mov	r2, r0
 8007196:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800719a:	4641      	mov	r1, r8
 800719c:	464b      	mov	r3, r9
 800719e:	a804      	add	r0, sp, #16
 80071a0:	f8cd a000 	str.w	sl, [sp]
 80071a4:	f009 fbfa 	bl	801099c <_lv_txt_get_size>
            value_area.x2 = txt_size.x - 1;
 80071a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
 80071ac:	2275      	movs	r2, #117	; 0x75
 80071ae:	3b01      	subs	r3, #1
 80071b0:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
 80071b4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80071b8:	4631      	mov	r1, r6
 80071ba:	3b01      	subs	r3, #1
 80071bc:	4628      	mov	r0, r5
 80071be:	f8ad 301e 	strh.w	r3, [sp, #30]
            value_area.x1 = 0;
 80071c2:	9706      	str	r7, [sp, #24]
 80071c4:	f7fe f96c 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
 80071c8:	2273      	movs	r2, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
 80071ca:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
 80071cc:	4631      	mov	r1, r6
 80071ce:	4628      	mov	r0, r5
 80071d0:	f7fe f966 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
 80071d4:	2274      	movs	r2, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
 80071d6:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
 80071d8:	4631      	mov	r1, r6
 80071da:	4628      	mov	r0, r5
 80071dc:	f7fe f960 	bl	80054a0 <_lv_obj_get_style_int>
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
 80071e0:	ab05      	add	r3, sp, #20
 80071e2:	4607      	mov	r7, r0
 80071e4:	fa5f f289 	uxtb.w	r2, r9
 80071e8:	a906      	add	r1, sp, #24
 80071ea:	f105 0010 	add.w	r0, r5, #16
 80071ee:	f007 fdaa 	bl	800ed46 <_lv_area_align>
            value_area.x1 += p_align.x + xofs;
 80071f2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80071f6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80071fa:	4443      	add	r3, r8
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	4418      	add	r0, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 8007200:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 8007204:	b200      	sxth	r0, r0
 8007206:	1a09      	subs	r1, r1, r0
 8007208:	428c      	cmp	r4, r1
 800720a:	bfb8      	it	lt
 800720c:	460c      	movlt	r4, r1
            value_area.y1 += p_align.y + yofs;
 800720e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8007212:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8007216:	443a      	add	r2, r7
 8007218:	b292      	uxth	r2, r2
 800721a:	4410      	add	r0, r2
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 800721c:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 8007220:	b200      	sxth	r0, r0
 8007222:	1a09      	subs	r1, r1, r0
 8007224:	b224      	sxth	r4, r4
 8007226:	42a1      	cmp	r1, r4
 8007228:	bfb8      	it	lt
 800722a:	4621      	movlt	r1, r4
            value_area.x2 += p_align.x + xofs;
 800722c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8007230:	4423      	add	r3, r4
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 8007232:	f9b5 4014 	ldrsh.w	r4, [r5, #20]
 8007236:	b21b      	sxth	r3, r3
 8007238:	1b1c      	subs	r4, r3, r4
 800723a:	b20b      	sxth	r3, r1
 800723c:	42a3      	cmp	r3, r4
 800723e:	bfb8      	it	lt
 8007240:	4623      	movlt	r3, r4
            value_area.y2 += p_align.y + yofs;
 8007242:	f8bd 401e 	ldrh.w	r4, [sp, #30]
 8007246:	4422      	add	r2, r4
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 8007248:	b214      	sxth	r4, r2
 800724a:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 800724e:	1aa2      	subs	r2, r4, r2
 8007250:	b21c      	sxth	r4, r3
 8007252:	4294      	cmp	r4, r2
 8007254:	bfb8      	it	lt
 8007256:	4614      	movlt	r4, r2
 8007258:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 800725a:	2240      	movs	r2, #64	; 0x40
 800725c:	4631      	mov	r1, r6
 800725e:	4628      	mov	r0, r5
 8007260:	f7fe f91e 	bl	80054a0 <_lv_obj_get_style_int>
    if(outline_width) {
 8007264:	4607      	mov	r7, r0
 8007266:	b180      	cbz	r0, 800728a <lv_obj_get_draw_rect_ext_pad_size+0x156>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 8007268:	224c      	movs	r2, #76	; 0x4c
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	f7fe fbb9 	bl	80059e4 <_lv_obj_get_style_opa>
        if(outline_opa > LV_OPA_MIN) {
 8007272:	2802      	cmp	r0, #2
 8007274:	d909      	bls.n	800728a <lv_obj_get_draw_rect_ext_pad_size+0x156>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 8007276:	2241      	movs	r2, #65	; 0x41
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	f7fe f910 	bl	80054a0 <_lv_obj_get_style_int>
            s = LV_MATH_MAX(s, outline_pad + outline_width);
 8007280:	4438      	add	r0, r7
 8007282:	4284      	cmp	r4, r0
 8007284:	bfb8      	it	lt
 8007286:	4604      	movlt	r4, r0
 8007288:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 800728a:	4631      	mov	r1, r6
 800728c:	2204      	movs	r2, #4
 800728e:	4628      	mov	r0, r5
 8007290:	f7fe f906 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8007294:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 8007296:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	f7fe f900 	bl	80054a0 <_lv_obj_get_style_int>
    lv_coord_t wh = LV_MATH_MAX(w, h);
 80072a0:	42b8      	cmp	r0, r7
 80072a2:	bfb8      	it	lt
 80072a4:	4638      	movlt	r0, r7
 80072a6:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
 80072a8:	2800      	cmp	r0, #0
 80072aa:	bfc4      	itt	gt
 80072ac:	1824      	addgt	r4, r4, r0
 80072ae:	b224      	sxthgt	r4, r4
}
 80072b0:	4620      	mov	r0, r4
 80072b2:	b008      	add	sp, #32
 80072b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
 80072b8:	225c      	movs	r2, #92	; 0x5c
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	f7fe fb91 	bl	80059e4 <_lv_obj_get_style_opa>
        if(sh_opa > LV_OPA_MIN) {
 80072c2:	2802      	cmp	r0, #2
 80072c4:	f67f af42 	bls.w	800714c <lv_obj_get_draw_rect_ext_pad_size+0x18>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
 80072c8:	2253      	movs	r2, #83	; 0x53
 80072ca:	4631      	mov	r1, r6
 80072cc:	4628      	mov	r0, r5
 80072ce:	f7fe f8e7 	bl	80054a0 <_lv_obj_get_style_int>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
 80072d2:	2302      	movs	r3, #2
 80072d4:	fb94 f4f3 	sdiv	r4, r4, r3
            sh_width++;
 80072d8:	3401      	adds	r4, #1
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 80072da:	4404      	add	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
 80072dc:	2251      	movs	r2, #81	; 0x51
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	f7fe f8dd 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
 80072e6:	2252      	movs	r2, #82	; 0x52
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
 80072e8:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
 80072ea:	4631      	mov	r1, r6
 80072ec:	4628      	mov	r0, r5
 80072ee:	f7fe f8d7 	bl	80054a0 <_lv_obj_get_style_int>
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 80072f2:	2800      	cmp	r0, #0
 80072f4:	bfb8      	it	lt
 80072f6:	4240      	neglt	r0, r0
 80072f8:	2f00      	cmp	r7, #0
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 80072fa:	b2a4      	uxth	r4, r4
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 80072fc:	bfb8      	it	lt
 80072fe:	427f      	neglt	r7, r7
 8007300:	42b8      	cmp	r0, r7
 8007302:	bfac      	ite	ge
 8007304:	1824      	addge	r4, r4, r0
 8007306:	19e4      	addlt	r4, r4, r7
            s = LV_MATH_MAX(s, sh_width);
 8007308:	b224      	sxth	r4, r4
 800730a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800730e:	e71e      	b.n	800714e <lv_obj_get_draw_rect_ext_pad_size+0x1a>

08007310 <lv_obj_get_focused_obj>:
{
 8007310:	b508      	push	{r3, lr}
    if(obj == NULL) return NULL;
 8007312:	b910      	cbnz	r0, 800731a <lv_obj_get_focused_obj+0xa>
}
 8007314:	bd08      	pop	{r3, pc}
        focus_obj = lv_obj_get_parent(focus_obj);
 8007316:	f7fd f8d3 	bl	80044c0 <lv_obj_get_parent>
    return obj->focus_parent == 0 ? false : true;
 800731a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 800731e:	079b      	lsls	r3, r3, #30
 8007320:	d4f9      	bmi.n	8007316 <lv_obj_get_focused_obj+0x6>
 8007322:	e7f7      	b.n	8007314 <lv_obj_get_focused_obj+0x4>

08007324 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 8007324:	2908      	cmp	r1, #8
{
 8007326:	b510      	push	{r4, lr}
 8007328:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_GET_STYLE) {
 800732a:	d108      	bne.n	800733e <lv_obj_signal+0x1a>
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
 800732c:	7813      	ldrb	r3, [r2, #0]
 800732e:	b91b      	cbnz	r3, 8007338 <lv_obj_signal+0x14>
 8007330:	3428      	adds	r4, #40	; 0x28
 8007332:	6054      	str	r4, [r2, #4]
    else if(sign == LV_SIGNAL_CLEANUP) {
 8007334:	2001      	movs	r0, #1
 8007336:	e011      	b.n	800735c <lv_obj_signal+0x38>
        else info->result = NULL;
 8007338:	2300      	movs	r3, #0
 800733a:	6053      	str	r3, [r2, #4]
 800733c:	e7fa      	b.n	8007334 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 800733e:	2907      	cmp	r1, #7
 8007340:	d105      	bne.n	800734e <lv_obj_signal+0x2a>
}
 8007342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8007346:	492a      	ldr	r1, [pc, #168]	; (80073f0 <lv_obj_signal+0xcc>)
 8007348:	4610      	mov	r0, r2
 800734a:	f7fe bf67 	b.w	800621c <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 800734e:	2901      	cmp	r1, #1
 8007350:	d105      	bne.n	800735e <lv_obj_signal+0x3a>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8007352:	f7fe f83d 	bl	80053d0 <lv_obj_is_protected>
 8007356:	f080 0001 	eor.w	r0, r0, #1
        return LV_RES_OK;
 800735a:	b2c0      	uxtb	r0, r0
}
 800735c:	bd10      	pop	{r4, pc}
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800735e:	2906      	cmp	r1, #6
 8007360:	d109      	bne.n	8007376 <lv_obj_signal+0x52>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
 8007362:	2100      	movs	r1, #0
 8007364:	f7ff fee6 	bl	8007134 <lv_obj_get_draw_rect_ext_pad_size>
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
 8007368:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 800736c:	4298      	cmp	r0, r3
 800736e:	bfb8      	it	lt
 8007370:	4618      	movlt	r0, r3
 8007372:	8660      	strh	r0, [r4, #50]	; 0x32
 8007374:	e7de      	b.n	8007334 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 8007376:	2903      	cmp	r1, #3
 8007378:	d106      	bne.n	8007388 <lv_obj_signal+0x64>
        if(obj->realign.auto_realign) {
 800737a:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800737e:	07db      	lsls	r3, r3, #31
 8007380:	d5d8      	bpl.n	8007334 <lv_obj_signal+0x10>
            lv_obj_realign(obj);
 8007382:	f7fd fcdb 	bl	8004d3c <lv_obj_realign>
 8007386:	e7d5      	b.n	8007334 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 8007388:	2904      	cmp	r1, #4
 800738a:	d102      	bne.n	8007392 <lv_obj_signal+0x6e>
        lv_obj_refresh_ext_draw_pad(obj);
 800738c:	f7fd f888 	bl	80044a0 <lv_obj_refresh_ext_draw_pad>
 8007390:	e7d0      	b.n	8007334 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_PRESSED) {
 8007392:	290b      	cmp	r1, #11
 8007394:	d103      	bne.n	800739e <lv_obj_signal+0x7a>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8007396:	2110      	movs	r1, #16
            lv_obj_add_state(obj, state);
 8007398:	f7ff fea2 	bl	80070e0 <lv_obj_add_state>
 800739c:	e7ca      	b.n	8007334 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 800739e:	f1a1 020d 	sub.w	r2, r1, #13
 80073a2:	2a01      	cmp	r2, #1
 80073a4:	d803      	bhi.n	80073ae <lv_obj_signal+0x8a>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 80073a6:	2110      	movs	r1, #16
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 80073a8:	f7ff feaf 	bl	800710a <lv_obj_clear_state>
 80073ac:	e7c2      	b.n	8007334 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_FOCUS) {
 80073ae:	2916      	cmp	r1, #22
 80073b0:	d113      	bne.n	80073da <lv_obj_signal+0xb6>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 80073b2:	f7fe fe51 	bl	8006058 <lv_obj_get_group>
 80073b6:	f7fb fcb5 	bl	8002d24 <lv_group_get_editing>
        if(editing) {
 80073ba:	b120      	cbz	r0, 80073c6 <lv_obj_signal+0xa2>
            obj = lv_obj_get_focused_obj(obj);
 80073bc:	4620      	mov	r0, r4
 80073be:	f7ff ffa7 	bl	8007310 <lv_obj_get_focused_obj>
            lv_obj_add_state(obj, state);
 80073c2:	2106      	movs	r1, #6
 80073c4:	e7e8      	b.n	8007398 <lv_obj_signal+0x74>
            obj = lv_obj_get_focused_obj(obj);
 80073c6:	4620      	mov	r0, r4
 80073c8:	f7ff ffa2 	bl	8007310 <lv_obj_get_focused_obj>
 80073cc:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
 80073ce:	2102      	movs	r1, #2
 80073d0:	f7ff fe86 	bl	80070e0 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 80073d4:	2104      	movs	r1, #4
 80073d6:	4620      	mov	r0, r4
 80073d8:	e7e6      	b.n	80073a8 <lv_obj_signal+0x84>
    else if(sign == LV_SIGNAL_DEFOCUS) {
 80073da:	2917      	cmp	r1, #23
 80073dc:	d103      	bne.n	80073e6 <lv_obj_signal+0xc2>
        obj = lv_obj_get_focused_obj(obj);
 80073de:	f7ff ff97 	bl	8007310 <lv_obj_get_focused_obj>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
 80073e2:	2106      	movs	r1, #6
 80073e4:	e7e0      	b.n	80073a8 <lv_obj_signal+0x84>
    else if(sign == LV_SIGNAL_CLEANUP) {
 80073e6:	2900      	cmp	r1, #0
 80073e8:	d1a4      	bne.n	8007334 <lv_obj_signal+0x10>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 80073ea:	f7fd f985 	bl	80046f8 <lv_obj_clean_style_list>
 80073ee:	e7a1      	b.n	8007334 <lv_obj_signal+0x10>
 80073f0:	080159a2 	.word	0x080159a2

080073f4 <lv_obj_set_focus_parent>:
{
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4604      	mov	r4, r0
 80073f8:	460d      	mov	r5, r1
    if(lv_obj_is_focused(obj)) {
 80073fa:	f7fe fecf 	bl	800619c <lv_obj_is_focused>
 80073fe:	b1e0      	cbz	r0, 800743a <lv_obj_set_focus_parent+0x46>
        if(en) {
 8007400:	b18d      	cbz	r5, 8007426 <lv_obj_set_focus_parent+0x32>
            obj->focus_parent = 1;
 8007402:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
            lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
 8007406:	2106      	movs	r1, #6
            obj->focus_parent = 1;
 8007408:	f043 0302 	orr.w	r3, r3, #2
 800740c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
 8007410:	4620      	mov	r0, r4
 8007412:	f7ff fe7a 	bl	800710a <lv_obj_clear_state>
            lv_obj_set_state(lv_obj_get_focused_obj(obj), LV_STATE_FOCUSED);
 8007416:	4620      	mov	r0, r4
 8007418:	f7ff ff7a 	bl	8007310 <lv_obj_get_focused_obj>
}
 800741c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lv_obj_set_state(lv_obj_get_focused_obj(obj), LV_STATE_FOCUSED);
 8007420:	2102      	movs	r1, #2
 8007422:	f7ff be43 	b.w	80070ac <lv_obj_set_state>
            lv_obj_clear_state(lv_obj_get_focused_obj(obj), LV_STATE_FOCUSED | LV_STATE_EDITED);
 8007426:	4620      	mov	r0, r4
 8007428:	f7ff ff72 	bl	8007310 <lv_obj_get_focused_obj>
 800742c:	2106      	movs	r1, #6
 800742e:	f7ff fe6c 	bl	800710a <lv_obj_clear_state>
            lv_obj_set_state(obj, LV_STATE_FOCUSED);
 8007432:	2102      	movs	r1, #2
 8007434:	4620      	mov	r0, r4
 8007436:	f7ff fe39 	bl	80070ac <lv_obj_set_state>
        obj->focus_parent = (en == true ? 1 : 0);
 800743a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800743e:	f365 0341 	bfi	r3, r5, #1, #1
 8007442:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007446:	bd38      	pop	{r3, r4, r5, pc}

08007448 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 8007448:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800744a:	4d19      	ldr	r5, [pc, #100]	; (80074b0 <lv_refr_vdb_flush+0x68>)
 800744c:	6828      	ldr	r0, [r5, #0]
 800744e:	f006 fffa 	bl	800e446 <lv_disp_get_buf>
 8007452:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 8007454:	6828      	ldr	r0, [r5, #0]
 8007456:	f007 f80b 	bl	800e470 <lv_disp_is_double_buf>
 800745a:	b958      	cbnz	r0, 8007474 <lv_refr_vdb_flush+0x2c>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
 800745c:	2301      	movs	r3, #1

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 800745e:	682d      	ldr	r5, [r5, #0]
    vdb->flushing = 1;
 8007460:	61a3      	str	r3, [r4, #24]
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 8007462:	686a      	ldr	r2, [r5, #4]
 8007464:	6a11      	ldr	r1, [r2, #32]
 8007466:	07c9      	lsls	r1, r1, #31
 8007468:	d409      	bmi.n	800747e <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	e00a      	b.n	8007484 <lv_refr_vdb_flush+0x3c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 800746e:	69c3      	ldr	r3, [r0, #28]
 8007470:	b10b      	cbz	r3, 8007476 <lv_refr_vdb_flush+0x2e>
 8007472:	4798      	blx	r3
 8007474:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
 8007476:	69a3      	ldr	r3, [r4, #24]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1f8      	bne.n	800746e <lv_refr_vdb_flush+0x26>
 800747c:	e7ee      	b.n	800745c <lv_refr_vdb_flush+0x14>
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 800747e:	6a12      	ldr	r2, [r2, #32]
 8007480:	0792      	lsls	r2, r2, #30
 8007482:	d5f2      	bpl.n	800746a <lv_refr_vdb_flush+0x22>
    else vdb->flushing_last = 0;
 8007484:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 8007486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007488:	b10b      	cbz	r3, 800748e <lv_refr_vdb_flush+0x46>
 800748a:	4628      	mov	r0, r5
 800748c:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 800748e:	68eb      	ldr	r3, [r5, #12]
 8007490:	b123      	cbz	r3, 800749c <lv_refr_vdb_flush+0x54>
 8007492:	68a2      	ldr	r2, [r4, #8]
 8007494:	f104 0110 	add.w	r1, r4, #16
 8007498:	4628      	mov	r0, r5
 800749a:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	b133      	cbz	r3, 80074ae <lv_refr_vdb_flush+0x66>
 80074a0:	6862      	ldr	r2, [r4, #4]
 80074a2:	b122      	cbz	r2, 80074ae <lv_refr_vdb_flush+0x66>
        if(vdb->buf_act == vdb->buf1)
 80074a4:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
 80074a6:	428b      	cmp	r3, r1
 80074a8:	bf08      	it	eq
 80074aa:	4613      	moveq	r3, r2
 80074ac:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	20000184 	.word	0x20000184

080074b4 <lv_refr_obj>:
{
 80074b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 80074b6:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
{
 80074ba:	b08b      	sub	sp, #44	; 0x2c
    if(obj->hidden != 0) return;
 80074bc:	f016 0610 	ands.w	r6, r6, #16
{
 80074c0:	4604      	mov	r4, r0
 80074c2:	460f      	mov	r7, r1
    if(obj->hidden != 0) return;
 80074c4:	d13b      	bne.n	800753e <lv_refr_obj+0x8a>
    lv_coord_t ext_size = obj->ext_draw_pad;
 80074c6:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
 80074ca:	a904      	add	r1, sp, #16
 80074cc:	f7fd f852 	bl	8004574 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 80074d0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80074d4:	b2ab      	uxth	r3, r5
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 80074dc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80074e0:	4639      	mov	r1, r7
    obj_area.y1 -= ext_size;
 80074e2:	1ad2      	subs	r2, r2, r3
 80074e4:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 80074e8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80074ec:	a802      	add	r0, sp, #8
    obj_area.x2 += ext_size;
 80074ee:	441a      	add	r2, r3
 80074f0:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
 80074f4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80074f8:	4413      	add	r3, r2
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80074fa:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 80074fc:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007500:	f007 fad5 	bl	800eaae <_lv_area_intersect>
    if(union_ok != false) {
 8007504:	b1d8      	cbz	r0, 800753e <lv_refr_obj+0x8a>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 8007506:	6a23      	ldr	r3, [r4, #32]
 8007508:	b11b      	cbz	r3, 8007512 <lv_refr_obj+0x5e>
 800750a:	4632      	mov	r2, r6
 800750c:	a902      	add	r1, sp, #8
 800750e:	4620      	mov	r0, r4
 8007510:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 8007512:	a904      	add	r1, sp, #16
 8007514:	4620      	mov	r0, r4
 8007516:	f7fd f82d 	bl	8004574 <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800751a:	aa04      	add	r2, sp, #16
 800751c:	4639      	mov	r1, r7
 800751e:	4668      	mov	r0, sp
 8007520:	f007 fac5 	bl	800eaae <_lv_area_intersect>
        if(union_ok != false) {
 8007524:	b128      	cbz	r0, 8007532 <lv_refr_obj+0x7e>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 8007526:	1d26      	adds	r6, r4, #4
 8007528:	4630      	mov	r0, r6
 800752a:	f007 fe72 	bl	800f212 <_lv_ll_get_tail>
 800752e:	4605      	mov	r5, r0
 8007530:	b938      	cbnz	r0, 8007542 <lv_refr_obj+0x8e>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 8007532:	6a23      	ldr	r3, [r4, #32]
 8007534:	b11b      	cbz	r3, 800753e <lv_refr_obj+0x8a>
 8007536:	2201      	movs	r2, #1
 8007538:	a902      	add	r1, sp, #8
 800753a:	4620      	mov	r0, r4
 800753c:	4798      	blx	r3
}
 800753e:	b00b      	add	sp, #44	; 0x2c
 8007540:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 8007542:	a908      	add	r1, sp, #32
 8007544:	4628      	mov	r0, r5
 8007546:	f7fd f815 	bl	8004574 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 800754a:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800754c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007550:	4669      	mov	r1, sp
                child_area.x1 -= ext_size;
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 8007558:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800755c:	a806      	add	r0, sp, #24
                child_area.y1 -= ext_size;
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 8007564:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007568:	441a      	add	r2, r3
 800756a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
 800756e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8007572:	4413      	add	r3, r2
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007574:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 8007576:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800757a:	f007 fa98 	bl	800eaae <_lv_area_intersect>
                if(union_ok) {
 800757e:	b118      	cbz	r0, 8007588 <lv_refr_obj+0xd4>
                    lv_refr_obj(child_p, &mask_child);
 8007580:	a906      	add	r1, sp, #24
 8007582:	4628      	mov	r0, r5
 8007584:	f7ff ff96 	bl	80074b4 <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 8007588:	4629      	mov	r1, r5
 800758a:	4630      	mov	r0, r6
 800758c:	f007 fe49 	bl	800f222 <_lv_ll_get_prev>
 8007590:	e7cd      	b.n	800752e <lv_refr_obj+0x7a>
	...

08007594 <lv_refr_obj_and_children>:
{
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007598:	4605      	mov	r5, r0
 800759a:	b928      	cbnz	r0, 80075a8 <lv_refr_obj_and_children+0x14>
 800759c:	4b13      	ldr	r3, [pc, #76]	; (80075ec <lv_refr_obj_and_children+0x58>)
 800759e:	6818      	ldr	r0, [r3, #0]
 80075a0:	f7fb f9c8 	bl	8002934 <lv_disp_get_scr_act>
    if(top_p == NULL) return;  /*Shouldn't happen*/
 80075a4:	4605      	mov	r5, r0
 80075a6:	b140      	cbz	r0, 80075ba <lv_refr_obj_and_children+0x26>
    lv_refr_obj(top_p, mask_p);
 80075a8:	4628      	mov	r0, r5
 80075aa:	4631      	mov	r1, r6
 80075ac:	f7ff ff82 	bl	80074b4 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 80075b0:	4628      	mov	r0, r5
 80075b2:	f7fc ff85 	bl	80044c0 <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 80075b6:	4604      	mov	r4, r0
    while(par != NULL) {
 80075b8:	b900      	cbnz	r0, 80075bc <lv_refr_obj_and_children+0x28>
}
 80075ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
 80075bc:	1d27      	adds	r7, r4, #4
            i = _lv_ll_get_prev(&(par->child_ll), i);
 80075be:	4629      	mov	r1, r5
 80075c0:	4638      	mov	r0, r7
 80075c2:	f007 fe2e 	bl	800f222 <_lv_ll_get_prev>
 80075c6:	4605      	mov	r5, r0
        while(i != NULL) {
 80075c8:	b950      	cbnz	r0, 80075e0 <lv_refr_obj_and_children+0x4c>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 80075ca:	6a23      	ldr	r3, [r4, #32]
 80075cc:	b11b      	cbz	r3, 80075d6 <lv_refr_obj_and_children+0x42>
 80075ce:	2201      	movs	r2, #1
 80075d0:	4631      	mov	r1, r6
 80075d2:	4620      	mov	r0, r4
 80075d4:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7fc ff72 	bl	80044c0 <lv_obj_get_parent>
 80075dc:	4625      	mov	r5, r4
 80075de:	e7ea      	b.n	80075b6 <lv_refr_obj_and_children+0x22>
            lv_refr_obj(i, mask_p);
 80075e0:	4631      	mov	r1, r6
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7ff ff66 	bl	80074b4 <lv_refr_obj>
 80075e8:	e7e9      	b.n	80075be <lv_refr_obj_and_children+0x2a>
 80075ea:	bf00      	nop
 80075ec:	20000184 	.word	0x20000184

080075f0 <lv_refr_get_top_obj>:
{
 80075f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 80075f4:	2200      	movs	r2, #0
{
 80075f6:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 80075f8:	3110      	adds	r1, #16
{
 80075fa:	4680      	mov	r8, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 80075fc:	f007 fb53 	bl	800eca6 <_lv_area_is_in>
 8007600:	b910      	cbnz	r0, 8007608 <lv_refr_get_top_obj+0x18>
    lv_obj_t * found_p = NULL;
 8007602:	2000      	movs	r0, #0
}
 8007604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 8007608:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800760c:	f011 0610 	ands.w	r6, r1, #16
 8007610:	d1f7      	bne.n	8007602 <lv_refr_get_top_obj+0x12>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
 8007612:	6a23      	ldr	r3, [r4, #32]
 8007614:	2202      	movs	r2, #2
 8007616:	4641      	mov	r1, r8
 8007618:	4620      	mov	r0, r4
 800761a:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 800761c:	2803      	cmp	r0, #3
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
 800761e:	4605      	mov	r5, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 8007620:	d0ef      	beq.n	8007602 <lv_refr_get_top_obj+0x12>
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
 8007622:	2801      	cmp	r0, #1
 8007624:	d108      	bne.n	8007638 <lv_refr_get_top_obj+0x48>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8007626:	f248 020c 	movw	r2, #32780	; 0x800c
 800762a:	4631      	mov	r1, r6
 800762c:	4620      	mov	r0, r4
 800762e:	f7fe f9d9 	bl	80059e4 <_lv_obj_get_style_opa>
            design_res = LV_DESIGN_RES_NOT_COVER;
 8007632:	28ff      	cmp	r0, #255	; 0xff
 8007634:	bf18      	it	ne
 8007636:	2502      	movne	r5, #2
        _LV_LL_READ(obj->child_ll, i) {
 8007638:	1d27      	adds	r7, r4, #4
 800763a:	4638      	mov	r0, r7
 800763c:	f007 fde6 	bl	800f20c <_lv_ll_get_head>
 8007640:	4606      	mov	r6, r0
 8007642:	b918      	cbnz	r0, 800764c <lv_refr_get_top_obj+0x5c>
            if(design_res == LV_DESIGN_RES_COVER) {
 8007644:	2d01      	cmp	r5, #1
 8007646:	d1dc      	bne.n	8007602 <lv_refr_get_top_obj+0x12>
 8007648:	4620      	mov	r0, r4
 800764a:	e7db      	b.n	8007604 <lv_refr_get_top_obj+0x14>
            found_p = lv_refr_get_top_obj(area_p, i);
 800764c:	4631      	mov	r1, r6
 800764e:	4640      	mov	r0, r8
 8007650:	f7ff ffce 	bl	80075f0 <lv_refr_get_top_obj>
            if(found_p != NULL) {
 8007654:	2800      	cmp	r0, #0
 8007656:	d1d5      	bne.n	8007604 <lv_refr_get_top_obj+0x14>
        _LV_LL_READ(obj->child_ll, i) {
 8007658:	4631      	mov	r1, r6
 800765a:	4638      	mov	r0, r7
 800765c:	f007 fddc 	bl	800f218 <_lv_ll_get_next>
 8007660:	e7ee      	b.n	8007640 <lv_refr_get_top_obj+0x50>
	...

08007664 <lv_refr_area_part>:
{
 8007664:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007666:	4c45      	ldr	r4, [pc, #276]	; (800777c <lv_refr_area_part+0x118>)
{
 8007668:	b09c      	sub	sp, #112	; 0x70
 800766a:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800766c:	6820      	ldr	r0, [r4, #0]
 800766e:	f006 feea 	bl	800e446 <lv_disp_get_buf>
 8007672:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 8007674:	6820      	ldr	r0, [r4, #0]
 8007676:	f006 fefb 	bl	800e470 <lv_disp_is_double_buf>
 800767a:	b1b0      	cbz	r0, 80076aa <lv_refr_area_part+0x46>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
 800767c:	4631      	mov	r1, r6
 800767e:	f105 0210 	add.w	r2, r5, #16
 8007682:	a803      	add	r0, sp, #12
 8007684:	f007 fa13 	bl	800eaae <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	f7fb f953 	bl	8002934 <lv_disp_get_scr_act>
 800768e:	4601      	mov	r1, r0
 8007690:	a803      	add	r0, sp, #12
 8007692:	f7ff ffad 	bl	80075f0 <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
 8007696:	6823      	ldr	r3, [r4, #0]
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8007698:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
 800769a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800769c:	b951      	cbnz	r1, 80076b4 <lv_refr_area_part+0x50>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800769e:	2800      	cmp	r0, #0
 80076a0:	d135      	bne.n	800770e <lv_refr_area_part+0xaa>
 80076a2:	e00c      	b.n	80076be <lv_refr_area_part+0x5a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 80076a4:	69c3      	ldr	r3, [r0, #28]
 80076a6:	b10b      	cbz	r3, 80076ac <lv_refr_area_part+0x48>
 80076a8:	4798      	blx	r3
 80076aa:	6820      	ldr	r0, [r4, #0]
        while(vdb->flushing) {
 80076ac:	69ab      	ldr	r3, [r5, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f8      	bne.n	80076a4 <lv_refr_area_part+0x40>
 80076b2:	e7e3      	b.n	800767c <lv_refr_area_part+0x18>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
 80076b4:	a803      	add	r0, sp, #12
 80076b6:	f7ff ff9b 	bl	80075f0 <lv_refr_get_top_obj>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 80076ba:	bb4e      	cbnz	r6, 8007710 <lv_refr_area_part+0xac>
 80076bc:	bb40      	cbnz	r0, 8007710 <lv_refr_area_part+0xac>
        if(disp_refr->bg_img) {
 80076be:	6823      	ldr	r3, [r4, #0]
            lv_draw_img_dsc_init(&dsc);
 80076c0:	a807      	add	r0, sp, #28
        if(disp_refr->bg_img) {
 80076c2:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	d047      	beq.n	8007758 <lv_refr_area_part+0xf4>
            lv_draw_img_dsc_init(&dsc);
 80076c8:	f002 faf1 	bl	8009cae <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
 80076cc:	6823      	ldr	r3, [r4, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 80076ce:	a902      	add	r1, sp, #8
            dsc.opa = disp_refr->bg_opa;
 80076d0:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80076d4:	f88d 201c 	strb.w	r2, [sp, #28]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 80076d8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80076da:	f006 fa2f 	bl	800db3c <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 80076de:	2801      	cmp	r0, #1
 80076e0:	d115      	bne.n	800770e <lv_refr_area_part+0xaa>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 80076e2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80076e6:	9b02      	ldr	r3, [sp, #8]
 80076e8:	f3c2 124a 	ubfx	r2, r2, #5, #11
 80076ec:	3a01      	subs	r2, #1
 80076ee:	9200      	str	r2, [sp, #0]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80076f6:	4611      	mov	r1, r2
 80076f8:	3b01      	subs	r3, #1
 80076fa:	a805      	add	r0, sp, #20
 80076fc:	f007 f9aa 	bl	800ea54 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
 8007700:	6822      	ldr	r2, [r4, #0]
 8007702:	ab07      	add	r3, sp, #28
 8007704:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007706:	a903      	add	r1, sp, #12
 8007708:	a805      	add	r0, sp, #20
 800770a:	f002 fb07 	bl	8009d1c <lv_draw_img>
 800770e:	2000      	movs	r0, #0
    if(disp_refr->prev_scr) {
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007714:	b12b      	cbz	r3, 8007722 <lv_refr_area_part+0xbe>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 8007716:	a903      	add	r1, sp, #12
 8007718:	2800      	cmp	r0, #0
 800771a:	bf08      	it	eq
 800771c:	4618      	moveq	r0, r3
 800771e:	f7ff ff39 	bl	8007594 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
 8007722:	b90e      	cbnz	r6, 8007728 <lv_refr_area_part+0xc4>
        top_act_scr = disp_refr->act_scr;
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    lv_refr_obj_and_children(top_act_scr, &start_mask);
 8007728:	a903      	add	r1, sp, #12
 800772a:	4630      	mov	r0, r6
 800772c:	f7ff ff32 	bl	8007594 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8007730:	6820      	ldr	r0, [r4, #0]
 8007732:	f7fb f90d 	bl	8002950 <lv_disp_get_layer_top>
 8007736:	a903      	add	r1, sp, #12
 8007738:	f7ff ff2c 	bl	8007594 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 800773c:	6820      	ldr	r0, [r4, #0]
 800773e:	f7fb f90e 	bl	800295e <lv_disp_get_layer_sys>
 8007742:	a903      	add	r1, sp, #12
 8007744:	f7ff ff26 	bl	8007594 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	f006 fe99 	bl	800e480 <lv_disp_is_true_double_buf>
 800774e:	b908      	cbnz	r0, 8007754 <lv_refr_area_part+0xf0>
        lv_refr_vdb_flush();
 8007750:	f7ff fe7a 	bl	8007448 <lv_refr_vdb_flush>
}
 8007754:	b01c      	add	sp, #112	; 0x70
 8007756:	bd70      	pop	{r4, r5, r6, pc}
            lv_draw_rect_dsc_init(&dsc);
 8007758:	f004 fc2a 	bl	800bfb0 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800775c:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800775e:	a903      	add	r1, sp, #12
            dsc.bg_color = disp_refr->bg_color;
 8007760:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8007764:	4608      	mov	r0, r1
            dsc.bg_color = disp_refr->bg_color;
 8007766:	f8ad 201e 	strh.w	r2, [sp, #30]
            dsc.bg_opa = disp_refr->bg_opa;
 800776a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800776e:	aa07      	add	r2, sp, #28
            dsc.bg_opa = disp_refr->bg_opa;
 8007770:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8007774:	f004 fc40 	bl	800bff8 <lv_draw_rect>
 8007778:	4628      	mov	r0, r5
 800777a:	e7c9      	b.n	8007710 <lv_refr_area_part+0xac>
 800777c:	20000184 	.word	0x20000184

08007780 <lv_area_copy>:
{
 8007780:	3901      	subs	r1, #1
 8007782:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
 8007786:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800778a:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 800778e:	4298      	cmp	r0, r3
 8007790:	d1f9      	bne.n	8007786 <lv_area_copy+0x6>
}
 8007792:	4770      	bx	lr

08007794 <_lv_refr_init>:
}
 8007794:	4770      	bx	lr

08007796 <_lv_inv_area>:
{
 8007796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007798:	460d      	mov	r5, r1
 800779a:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
 800779c:	4604      	mov	r4, r0
 800779e:	b918      	cbnz	r0, 80077a8 <_lv_inv_area+0x12>
 80077a0:	f006 fe18 	bl	800e3d4 <lv_disp_get_default>
    if(!disp) return;
 80077a4:	4604      	mov	r4, r0
 80077a6:	b130      	cbz	r0, 80077b6 <_lv_inv_area+0x20>
    if(area_p == NULL) {
 80077a8:	b93d      	cbnz	r5, 80077ba <_lv_inv_area+0x24>
        disp->inv_p = 0;
 80077aa:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
 80077ae:	f365 0309 	bfi	r3, r5, #0, #10
 80077b2:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
}
 80077b6:	b005      	add	sp, #20
 80077b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scr_area.x1 = 0;
 80077ba:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 80077bc:	4620      	mov	r0, r4
    scr_area.x1 = 0;
 80077be:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 80077c0:	f006 fe0e 	bl	800e3e0 <lv_disp_get_hor_res>
 80077c4:	3801      	subs	r0, #1
 80077c6:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 80077ca:	4620      	mov	r0, r4
 80077cc:	f006 fe1a 	bl	800e404 <lv_disp_get_ver_res>
 80077d0:	3801      	subs	r0, #1
 80077d2:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 80077d6:	466a      	mov	r2, sp
 80077d8:	4629      	mov	r1, r5
 80077da:	a802      	add	r0, sp, #8
 80077dc:	f007 f967 	bl	800eaae <_lv_area_intersect>
    if(suc != false) {
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d0e8      	beq.n	80077b6 <_lv_inv_area+0x20>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	b113      	cbz	r3, 80077ee <_lv_inv_area+0x58>
 80077e8:	a902      	add	r1, sp, #8
 80077ea:	4620      	mov	r0, r4
 80077ec:	4798      	blx	r3
 80077ee:	f104 055e 	add.w	r5, r4, #94	; 0x5e
{
 80077f2:	2600      	movs	r6, #0
 80077f4:	462f      	mov	r7, r5
        for(i = 0; i < disp->inv_p; i++) {
 80077f6:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
 80077fa:	b2b2      	uxth	r2, r6
 80077fc:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8007800:	4290      	cmp	r0, r2
 8007802:	d81a      	bhi.n	800783a <_lv_inv_area+0xa4>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 8007804:	281f      	cmp	r0, #31
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8007806:	bf97      	itett	ls
 8007808:	eb04 00c0 	addls.w	r0, r4, r0, lsl #3
            disp->inv_p = 0;
 800780c:	f36f 0309 	bfchi	r3, #0, #10
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8007810:	a902      	addls	r1, sp, #8
 8007812:	305e      	addls	r0, #94	; 0x5e
            disp->inv_p = 0;
 8007814:	bf82      	ittt	hi
 8007816:	f8a4 317e 	strhhi.w	r3, [r4, #382]	; 0x17e
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800781a:	4669      	movhi	r1, sp
 800781c:	4638      	movhi	r0, r7
 800781e:	f7ff ffaf 	bl	8007780 <lv_area_copy>
        disp->inv_p++;
 8007822:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
 8007826:	2103      	movs	r1, #3
        disp->inv_p++;
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	f362 0309 	bfi	r3, r2, #0, #10
 800782e:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
 8007832:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007834:	f008 fe12 	bl	801045c <lv_task_set_prio>
 8007838:	e7bd      	b.n	80077b6 <_lv_inv_area+0x20>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800783a:	4629      	mov	r1, r5
 800783c:	2200      	movs	r2, #0
 800783e:	a802      	add	r0, sp, #8
 8007840:	f007 fa31 	bl	800eca6 <_lv_area_is_in>
 8007844:	3601      	adds	r6, #1
 8007846:	3508      	adds	r5, #8
 8007848:	2800      	cmp	r0, #0
 800784a:	d0d4      	beq.n	80077f6 <_lv_inv_area+0x60>
 800784c:	e7b3      	b.n	80077b6 <_lv_inv_area+0x20>
	...

08007850 <_lv_refr_get_disp_refreshing>:
}
 8007850:	4b01      	ldr	r3, [pc, #4]	; (8007858 <_lv_refr_get_disp_refreshing+0x8>)
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	20000184 	.word	0x20000184

0800785c <_lv_disp_refr_task>:
{
 800785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	4604      	mov	r4, r0
 8007862:	b08d      	sub	sp, #52	; 0x34
    uint32_t start = lv_tick_get();
 8007864:	f006 ff22 	bl	800e6ac <lv_tick_get>
    disp_refr = task->user_data;
 8007868:	68e3      	ldr	r3, [r4, #12]
 800786a:	4c97      	ldr	r4, [pc, #604]	; (8007ac8 <_lv_disp_refr_task+0x26c>)
    if(disp_refr->act_scr == NULL) {
 800786c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    uint32_t start = lv_tick_get();
 800786e:	9006      	str	r0, [sp, #24]
    disp_refr = task->user_data;
 8007870:	6023      	str	r3, [r4, #0]
    if(disp_refr->act_scr == NULL) {
 8007872:	2900      	cmp	r1, #0
 8007874:	f040 80bc 	bne.w	80079f0 <_lv_disp_refr_task+0x194>
        disp_refr->inv_p = 0;
 8007878:	f8b3 217e 	ldrh.w	r2, [r3, #382]	; 0x17e
 800787c:	f361 0209 	bfi	r2, r1, #0, #10
 8007880:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
}
 8007884:	b00d      	add	sp, #52	; 0x34
 8007886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800788a:	4433      	add	r3, r6
 800788c:	f893 515e 	ldrb.w	r5, [r3, #350]	; 0x15e
 8007890:	2d00      	cmp	r5, #0
 8007892:	d071      	beq.n	8007978 <_lv_disp_refr_task+0x11c>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007894:	3601      	adds	r6, #1
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	f8b3 217e 	ldrh.w	r2, [r3, #382]	; 0x17e
 800789c:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80078a0:	428e      	cmp	r6, r1
 80078a2:	d3f2      	bcc.n	800788a <_lv_disp_refr_task+0x2e>
    px_num = 0;
 80078a4:	2500      	movs	r5, #0
 80078a6:	4889      	ldr	r0, [pc, #548]	; (8007acc <_lv_disp_refr_task+0x270>)
 80078a8:	6005      	str	r5, [r0, #0]
    if(disp_refr->inv_p == 0) return;
 80078aa:	2900      	cmp	r1, #0
 80078ac:	f040 80a4 	bne.w	80079f8 <_lv_disp_refr_task+0x19c>
    if(disp_refr->inv_p != 0) {
 80078b0:	4e85      	ldr	r6, [pc, #532]	; (8007ac8 <_lv_disp_refr_task+0x26c>)
 80078b2:	6830      	ldr	r0, [r6, #0]
 80078b4:	f8b0 717e 	ldrh.w	r7, [r0, #382]	; 0x17e
 80078b8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80078bc:	2f00      	cmp	r7, #0
 80078be:	f040 81c1 	bne.w	8007c44 <_lv_disp_refr_task+0x3e8>
    if(perf_label == NULL) {
 80078c2:	4d83      	ldr	r5, [pc, #524]	; (8007ad0 <_lv_disp_refr_task+0x274>)
    _lv_mem_buf_free_all();
 80078c4:	f007 feca 	bl	800f65c <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 80078c8:	f006 fd4a 	bl	800e360 <_lv_font_clean_up_fmt_txt>
    if(perf_label == NULL) {
 80078cc:	682e      	ldr	r6, [r5, #0]
 80078ce:	2e00      	cmp	r6, #0
 80078d0:	d141      	bne.n	8007956 <_lv_disp_refr_task+0xfa>
 * Get the active screen of the default display
 * @return  pointer to the sys layer
 */
static inline lv_obj_t * lv_layer_sys(void)
{
    return lv_disp_get_layer_sys(lv_disp_get_default());
 80078d2:	f006 fd7f 	bl	800e3d4 <lv_disp_get_default>
 80078d6:	f7fb f842 	bl	800295e <lv_disp_get_layer_sys>
        perf_label = lv_label_create(lv_layer_sys(), NULL);
 80078da:	4631      	mov	r1, r6
 80078dc:	f00b fcfc 	bl	80132d8 <lv_label_create>
        lv_label_set_align(perf_label, LV_LABEL_ALIGN_RIGHT);
 80078e0:	2102      	movs	r1, #2
        perf_label = lv_label_create(lv_layer_sys(), NULL);
 80078e2:	6028      	str	r0, [r5, #0]
        lv_label_set_align(perf_label, LV_LABEL_ALIGN_RIGHT);
 80078e4:	f00a fe3e 	bl	8012564 <lv_label_set_align>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 80078e8:	23ff      	movs	r3, #255	; 0xff
 80078ea:	222c      	movs	r2, #44	; 0x2c
 80078ec:	4631      	mov	r1, r6
 80078ee:	6828      	ldr	r0, [r5, #0]
 80078f0:	f7fe fadd 	bl	8005eae <_lv_obj_set_style_local_opa>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 80078f4:	4633      	mov	r3, r6
 80078f6:	2229      	movs	r2, #41	; 0x29
 80078f8:	4631      	mov	r1, r6
 80078fa:	6828      	ldr	r0, [r5, #0]
 80078fc:	f7fe fabe 	bl	8005e7c <_lv_obj_set_style_local_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8007900:	4b74      	ldr	r3, [pc, #464]	; (8007ad4 <_lv_disp_refr_task+0x278>)
 8007902:	f248 0289 	movw	r2, #32905	; 0x8089
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	4631      	mov	r1, r6
 800790a:	6828      	ldr	r0, [r5, #0]
 800790c:	f7fe fab6 	bl	8005e7c <_lv_obj_set_style_local_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8007910:	2303      	movs	r3, #3
 8007912:	2210      	movs	r2, #16
 8007914:	4631      	mov	r1, r6
 8007916:	6828      	ldr	r0, [r5, #0]
 8007918:	f7fe fa97 	bl	8005e4a <_lv_obj_set_style_local_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 800791c:	2303      	movs	r3, #3
 800791e:	2211      	movs	r2, #17
 8007920:	4631      	mov	r1, r6
 8007922:	6828      	ldr	r0, [r5, #0]
 8007924:	f7fe fa91 	bl	8005e4a <_lv_obj_set_style_local_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8007928:	2303      	movs	r3, #3
 800792a:	2212      	movs	r2, #18
 800792c:	4631      	mov	r1, r6
 800792e:	6828      	ldr	r0, [r5, #0]
 8007930:	f7fe fa8b 	bl	8005e4a <_lv_obj_set_style_local_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8007934:	2303      	movs	r3, #3
 8007936:	2213      	movs	r2, #19
 8007938:	4631      	mov	r1, r6
 800793a:	6828      	ldr	r0, [r5, #0]
 800793c:	f7fe fa85 	bl	8005e4a <_lv_obj_set_style_local_int>
        lv_label_set_text(perf_label, "?");
 8007940:	4965      	ldr	r1, [pc, #404]	; (8007ad8 <_lv_disp_refr_task+0x27c>)
 8007942:	6828      	ldr	r0, [r5, #0]
 8007944:	f00b fb94 	bl	8013070 <lv_label_set_text>
        lv_obj_align(perf_label, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, 0, 0);
 8007948:	9600      	str	r6, [sp, #0]
 800794a:	4633      	mov	r3, r6
 800794c:	2206      	movs	r2, #6
 800794e:	4631      	mov	r1, r6
 8007950:	6828      	ldr	r0, [r5, #0]
 8007952:	f7fd f8d9 	bl	8004b08 <lv_obj_align>
    if(lv_tick_elaps(perf_last_time) < 300) {
 8007956:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8007ae0 <_lv_disp_refr_task+0x284>
 800795a:	4e60      	ldr	r6, [pc, #384]	; (8007adc <_lv_disp_refr_task+0x280>)
 800795c:	f8d8 0000 	ldr.w	r0, [r8]
 8007960:	f006 feb2 	bl	800e6c8 <lv_tick_elaps>
 8007964:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8007968:	f080 81fb 	bcs.w	8007d62 <_lv_disp_refr_task+0x506>
        elaps_max = LV_MATH_MAX(elaps, elaps_max);
 800796c:	6833      	ldr	r3, [r6, #0]
 800796e:	42bb      	cmp	r3, r7
 8007970:	bf2c      	ite	cs
 8007972:	6033      	strcs	r3, [r6, #0]
 8007974:	6037      	strcc	r7, [r6, #0]
 8007976:	e785      	b.n	8007884 <_lv_disp_refr_task+0x28>
 8007978:	00f7      	lsls	r7, r6, #3
 800797a:	375e      	adds	r7, #94	; 0x5e
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	f8b0 317e 	ldrh.w	r3, [r0, #382]	; 0x17e
 8007982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007986:	429d      	cmp	r5, r3
 8007988:	d284      	bcs.n	8007894 <_lv_disp_refr_task+0x38>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800798a:	1943      	adds	r3, r0, r5
 800798c:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
 8007990:	bb63      	cbnz	r3, 80079ec <_lv_disp_refr_task+0x190>
 8007992:	42ae      	cmp	r6, r5
 8007994:	d02a      	beq.n	80079ec <_lv_disp_refr_task+0x190>
 8007996:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 800799a:	f109 095e 	add.w	r9, r9, #94	; 0x5e
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800799e:	eb00 0109 	add.w	r1, r0, r9
 80079a2:	4438      	add	r0, r7
 80079a4:	f007 f962 	bl	800ec6c <_lv_area_is_on>
 80079a8:	b300      	cbz	r0, 80079ec <_lv_disp_refr_task+0x190>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 80079aa:	6821      	ldr	r1, [r4, #0]
 80079ac:	a80a      	add	r0, sp, #40	; 0x28
 80079ae:	eb01 0209 	add.w	r2, r1, r9
 80079b2:	4439      	add	r1, r7
 80079b4:	f007 f8a5 	bl	800eb02 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80079b8:	a80a      	add	r0, sp, #40	; 0x28
 80079ba:	f007 f86a 	bl	800ea92 <lv_area_get_size>
 80079be:	4683      	mov	fp, r0
 80079c0:	6820      	ldr	r0, [r4, #0]
 80079c2:	4438      	add	r0, r7
 80079c4:	f007 f865 	bl	800ea92 <lv_area_get_size>
 80079c8:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 80079ca:	6820      	ldr	r0, [r4, #0]
 80079cc:	4448      	add	r0, r9
 80079ce:	f007 f860 	bl	800ea92 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80079d2:	4450      	add	r0, sl
 80079d4:	4583      	cmp	fp, r0
 80079d6:	d209      	bcs.n	80079ec <_lv_disp_refr_task+0x190>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 80079d8:	f8d4 9000 	ldr.w	r9, [r4]
 80079dc:	a90a      	add	r1, sp, #40	; 0x28
 80079de:	eb09 0007 	add.w	r0, r9, r7
                disp_refr->inv_area_joined[join_from] = 1;
 80079e2:	44a9      	add	r9, r5
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 80079e4:	f7ff fecc 	bl	8007780 <lv_area_copy>
                disp_refr->inv_area_joined[join_from] = 1;
 80079e8:	f889 815e 	strb.w	r8, [r9, #350]	; 0x15e
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80079ec:	3501      	adds	r5, #1
 80079ee:	e7c5      	b.n	800797c <_lv_disp_refr_task+0x120>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80079f0:	2600      	movs	r6, #0
                disp_refr->inv_area_joined[join_from] = 1;
 80079f2:	f04f 0801 	mov.w	r8, #1
 80079f6:	e74e      	b.n	8007896 <_lv_disp_refr_task+0x3a>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 80079f8:	1e4a      	subs	r2, r1, #1
 80079fa:	9203      	str	r2, [sp, #12]
 80079fc:	9a03      	ldr	r2, [sp, #12]
 80079fe:	3201      	adds	r2, #1
 8007a00:	d159      	bne.n	8007ab6 <_lv_disp_refr_task+0x25a>
    int32_t last_i = 0;
 8007a02:	2200      	movs	r2, #0
 8007a04:	9203      	str	r2, [sp, #12]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007a06:	2700      	movs	r7, #0
    disp_refr->driver.buffer->last_area = 0;
 8007a08:	685b      	ldr	r3, [r3, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007a0a:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007ac8 <_lv_disp_refr_task+0x26c>
    disp_refr->driver.buffer->last_area = 0;
 8007a0e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007a12:	f36f 0200 	bfc	r2, #0, #1
 8007a16:	f883 2020 	strb.w	r2, [r3, #32]
    disp_refr->driver.buffer->last_part = 0;
 8007a1a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007a1e:	f36f 0241 	bfc	r2, #1, #1
 8007a22:	f883 2020 	strb.w	r2, [r3, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007a26:	f8da 6000 	ldr.w	r6, [sl]
 8007a2a:	f8b6 317e 	ldrh.w	r3, [r6, #382]	; 0x17e
 8007a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a32:	429f      	cmp	r7, r3
 8007a34:	f6bf af3c 	bge.w	80078b0 <_lv_disp_refr_task+0x54>
        if(disp_refr->inv_area_joined[i] == 0) {
 8007a38:	19f3      	adds	r3, r6, r7
 8007a3a:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f040 80ad 	bne.w	8007b9e <_lv_disp_refr_task+0x342>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
 8007a44:	9a03      	ldr	r2, [sp, #12]
 8007a46:	6873      	ldr	r3, [r6, #4]
 8007a48:	4297      	cmp	r7, r2
 8007a4a:	bf08      	it	eq
 8007a4c:	f893 2020 	ldrbeq.w	r2, [r3, #32]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8007a50:	4630      	mov	r0, r6
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
 8007a52:	bf04      	itt	eq
 8007a54:	f042 0201 	orreq.w	r2, r2, #1
 8007a58:	f883 2020 	strbeq.w	r2, [r3, #32]
            disp_refr->driver.buffer->last_part = 0;
 8007a5c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007a60:	f36f 0241 	bfc	r2, #1, #1
 8007a64:	f883 2020 	strb.w	r2, [r3, #32]
 8007a68:	00fb      	lsls	r3, r7, #3
 8007a6a:	9307      	str	r3, [sp, #28]
 8007a6c:	335e      	adds	r3, #94	; 0x5e
 8007a6e:	9305      	str	r3, [sp, #20]
            lv_refr_area(&disp_refr->inv_areas[i]);
 8007a70:	eb06 0903 	add.w	r9, r6, r3
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8007a74:	f006 fd04 	bl	800e480 <lv_disp_is_true_double_buf>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d033      	beq.n	8007ae4 <_lv_disp_refr_task+0x288>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007a7c:	6820      	ldr	r0, [r4, #0]
 8007a7e:	f006 fce2 	bl	800e446 <lv_disp_get_buf>
        vdb->area.x1        = 0;
 8007a82:	2600      	movs	r6, #0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007a84:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
 8007a86:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8007a88:	6820      	ldr	r0, [r4, #0]
 8007a8a:	f006 fca9 	bl	800e3e0 <lv_disp_get_hor_res>
 8007a8e:	3801      	subs	r0, #1
 8007a90:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
 8007a92:	826e      	strh	r6, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8007a94:	6820      	ldr	r0, [r4, #0]
 8007a96:	f006 fcb5 	bl	800e404 <lv_disp_get_ver_res>
        disp_refr->driver.buffer->last_part = 1;
 8007a9a:	6823      	ldr	r3, [r4, #0]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8007a9c:	3801      	subs	r0, #1
        disp_refr->driver.buffer->last_part = 1;
 8007a9e:	685a      	ldr	r2, [r3, #4]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8007aa0:	82e8      	strh	r0, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
 8007aa2:	f892 3020 	ldrb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 8007aa6:	4648      	mov	r0, r9
            disp_refr->driver.buffer->last_part = 1;
 8007aa8:	f043 0302 	orr.w	r3, r3, #2
 8007aac:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 8007ab0:	f7ff fdd8 	bl	8007664 <lv_refr_area_part>
 8007ab4:	e067      	b.n	8007b86 <_lv_disp_refr_task+0x32a>
        if(disp_refr->inv_area_joined[i] == 0) {
 8007ab6:	9a03      	ldr	r2, [sp, #12]
 8007ab8:	189a      	adds	r2, r3, r2
 8007aba:	f892 215e 	ldrb.w	r2, [r2, #350]	; 0x15e
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	d0a1      	beq.n	8007a06 <_lv_disp_refr_task+0x1aa>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8007ac2:	9a03      	ldr	r2, [sp, #12]
 8007ac4:	3a01      	subs	r2, #1
 8007ac6:	e798      	b.n	80079fa <_lv_disp_refr_task+0x19e>
 8007ac8:	20000184 	.word	0x20000184
 8007acc:	20000190 	.word	0x20000190
 8007ad0:	20000188 	.word	0x20000188
 8007ad4:	080158b0 	.word	0x080158b0
 8007ad8:	080159a9 	.word	0x080159a9
 8007adc:	20000014 	.word	0x20000014
 8007ae0:	2000018c 	.word	0x2000018c
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007ae4:	6820      	ldr	r0, [r4, #0]
 8007ae6:	f006 fcae 	bl	800e446 <lv_disp_get_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007aea:	9b05      	ldr	r3, [sp, #20]
 8007aec:	f8b9 8004 	ldrh.w	r8, [r9, #4]
 8007af0:	5af3      	ldrh	r3, [r6, r3]
 8007af2:	f108 0801 	add.w	r8, r8, #1
 8007af6:	eba8 0803 	sub.w	r8, r8, r3
        lv_coord_t h = lv_area_get_height(area_p);
 8007afa:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007afe:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8007b02:	f103 0b01 	add.w	fp, r3, #1
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007b06:	4605      	mov	r5, r0
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007b08:	6820      	ldr	r0, [r4, #0]
 8007b0a:	9304      	str	r3, [sp, #16]
 8007b0c:	ebab 0b02 	sub.w	fp, fp, r2
 8007b10:	f006 fc78 	bl	800e404 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 8007b14:	9b04      	ldr	r3, [sp, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007b16:	fa0f f888 	sxth.w	r8, r8
 8007b1a:	4283      	cmp	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007b1c:	fa0f fb8b 	sxth.w	fp, fp
 8007b20:	db3f      	blt.n	8007ba2 <_lv_disp_refr_task+0x346>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007b22:	6820      	ldr	r0, [r4, #0]
 8007b24:	f006 fc6e 	bl	800e404 <lv_disp_get_ver_res>
 8007b28:	3801      	subs	r0, #1
        lv_coord_t y2 =
 8007b2a:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 8007b2c:	68ea      	ldr	r2, [r5, #12]
 8007b2e:	fbb2 f8f8 	udiv	r8, r2, r8
 8007b32:	45c3      	cmp	fp, r8
 8007b34:	465a      	mov	r2, fp
 8007b36:	bfa8      	it	ge
 8007b38:	4642      	movge	r2, r8
 8007b3a:	9204      	str	r2, [sp, #16]
        if(disp_refr->driver.rounder_cb) {
 8007b3c:	f8da 2000 	ldr.w	r2, [sl]
 8007b40:	6912      	ldr	r2, [r2, #16]
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	d036      	beq.n	8007bb4 <_lv_disp_refr_task+0x358>
            tmp.x1 = 0;
 8007b46:	2200      	movs	r2, #0
            lv_coord_t h_tmp = max_row;
 8007b48:	f9bd b010 	ldrsh.w	fp, [sp, #16]
            tmp.x1 = 0;
 8007b4c:	920a      	str	r2, [sp, #40]	; 0x28
            tmp.y1 = 0;
 8007b4e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8007b52:	f8da 0000 	ldr.w	r0, [sl]
 8007b56:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007b5a:	fa0f f888 	sxth.w	r8, r8
 8007b5e:	6902      	ldr	r2, [r0, #16]
 8007b60:	a90a      	add	r1, sp, #40	; 0x28
                tmp.y2 = h_tmp - 1;
 8007b62:	f8ad 802e 	strh.w	r8, [sp, #46]	; 0x2e
 8007b66:	9308      	str	r3, [sp, #32]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8007b68:	4790      	blx	r2
                if(lv_area_get_height(&tmp) <= max_row) break;
 8007b6a:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
 8007b6e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8007b72:	3101      	adds	r1, #1
 8007b74:	9b04      	ldr	r3, [sp, #16]
 8007b76:	1a8a      	subs	r2, r1, r2
 8007b78:	b212      	sxth	r2, r2
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	9b08      	ldr	r3, [sp, #32]
 8007b7e:	da15      	bge.n	8007bac <_lv_disp_refr_task+0x350>
            } while(h_tmp > 0);
 8007b80:	f1b8 0b00 	subs.w	fp, r8, #0
 8007b84:	dce5      	bgt.n	8007b52 <_lv_disp_refr_task+0x2f6>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8007b86:	f8da 0000 	ldr.w	r0, [sl]
 8007b8a:	6983      	ldr	r3, [r0, #24]
 8007b8c:	b13b      	cbz	r3, 8007b9e <_lv_disp_refr_task+0x342>
 8007b8e:	9b05      	ldr	r3, [sp, #20]
 8007b90:	4418      	add	r0, r3
 8007b92:	f006 ff7e 	bl	800ea92 <lv_area_get_size>
 8007b96:	4a86      	ldr	r2, [pc, #536]	; (8007db0 <_lv_disp_refr_task+0x554>)
 8007b98:	6813      	ldr	r3, [r2, #0]
 8007b9a:	4418      	add	r0, r3
 8007b9c:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007b9e:	3701      	adds	r7, #1
 8007ba0:	e741      	b.n	8007a26 <_lv_disp_refr_task+0x1ca>
        lv_coord_t y2 =
 8007ba2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007ba6:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8007baa:	e7bf      	b.n	8007b2c <_lv_disp_refr_task+0x2d0>
            if(h_tmp <= 0) {
 8007bac:	f1bb 0f00 	cmp.w	fp, #0
 8007bb0:	dde9      	ble.n	8007b86 <_lv_disp_refr_task+0x32a>
                max_row = tmp.y2 + 1;
 8007bb2:	9104      	str	r1, [sp, #16]
        lv_coord_t row_last = 0;
 8007bb4:	f04f 0b00 	mov.w	fp, #0
 8007bb8:	9a07      	ldr	r2, [sp, #28]
 8007bba:	4416      	add	r6, r2
            vdb->area.y2 = row + max_row - 1;
 8007bbc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007bc0:	f9b6 8060 	ldrsh.w	r8, [r6, #96]	; 0x60
 8007bc4:	1e51      	subs	r1, r2, #1
 8007bc6:	9107      	str	r1, [sp, #28]
 8007bc8:	9904      	ldr	r1, [sp, #16]
 8007bca:	eb08 0001 	add.w	r0, r8, r1
 8007bce:	3801      	subs	r0, #1
 8007bd0:	4298      	cmp	r0, r3
 8007bd2:	dd0d      	ble.n	8007bf0 <_lv_disp_refr_task+0x394>
        if(y2 != row_last) {
 8007bd4:	455b      	cmp	r3, fp
 8007bd6:	d0d6      	beq.n	8007b86 <_lv_disp_refr_task+0x32a>
            vdb->area.x1 = area_p->x1;
 8007bd8:	f9b6 105e 	ldrsh.w	r1, [r6, #94]	; 0x5e
 8007bdc:	6822      	ldr	r2, [r4, #0]
 8007bde:	8229      	strh	r1, [r5, #16]
            vdb->area.x2 = area_p->x2;
 8007be0:	f9b6 1062 	ldrsh.w	r1, [r6, #98]	; 0x62
            disp_refr->driver.buffer->last_part = 1;
 8007be4:	6852      	ldr	r2, [r2, #4]
            vdb->area.x2 = area_p->x2;
 8007be6:	82a9      	strh	r1, [r5, #20]
            vdb->area.y1 = row;
 8007be8:	f8a5 8012 	strh.w	r8, [r5, #18]
            vdb->area.y2 = y2;
 8007bec:	82eb      	strh	r3, [r5, #22]
 8007bee:	e758      	b.n	8007aa2 <_lv_disp_refr_task+0x246>
            vdb->area.x1 = area_p->x1;
 8007bf0:	f9b6 005e 	ldrsh.w	r0, [r6, #94]	; 0x5e
 8007bf4:	9907      	ldr	r1, [sp, #28]
 8007bf6:	8228      	strh	r0, [r5, #16]
            vdb->area.x2 = area_p->x2;
 8007bf8:	f9b6 0062 	ldrsh.w	r0, [r6, #98]	; 0x62
            vdb->area.y1 = row;
 8007bfc:	f8a5 8012 	strh.w	r8, [r5, #18]
 8007c00:	fa1f f888 	uxth.w	r8, r8
 8007c04:	eb08 0b01 	add.w	fp, r8, r1
 8007c08:	fa0f fb8b 	sxth.w	fp, fp
            vdb->area.y2 = row + max_row - 1;
 8007c0c:	459b      	cmp	fp, r3
 8007c0e:	bfa8      	it	ge
 8007c10:	469b      	movge	fp, r3
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 8007c12:	455b      	cmp	r3, fp
            vdb->area.x2 = area_p->x2;
 8007c14:	82a8      	strh	r0, [r5, #20]
            vdb->area.y2 = row + max_row - 1;
 8007c16:	f8a5 b016 	strh.w	fp, [r5, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 8007c1a:	d108      	bne.n	8007c2e <_lv_disp_refr_task+0x3d2>
 8007c1c:	f8da 0000 	ldr.w	r0, [sl]
 8007c20:	6841      	ldr	r1, [r0, #4]
 8007c22:	f891 0020 	ldrb.w	r0, [r1, #32]
 8007c26:	f040 0002 	orr.w	r0, r0, #2
 8007c2a:	f881 0020 	strb.w	r0, [r1, #32]
            lv_refr_area_part(area_p);
 8007c2e:	4648      	mov	r0, r9
 8007c30:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007c34:	f7ff fd16 	bl	8007664 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c3a:	9b08      	ldr	r3, [sp, #32]
 8007c3c:	4490      	add	r8, r2
 8007c3e:	fa0f f888 	sxth.w	r8, r8
 8007c42:	e7c1      	b.n	8007bc8 <_lv_disp_refr_task+0x36c>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 8007c44:	f006 fc1c 	bl	800e480 <lv_disp_is_true_double_buf>
 8007c48:	b388      	cbz	r0, 8007cae <_lv_disp_refr_task+0x452>
            if(disp_refr->driver.set_px_cb) {
 8007c4a:	6830      	ldr	r0, [r6, #0]
 8007c4c:	6943      	ldr	r3, [r0, #20]
 8007c4e:	bb73      	cbnz	r3, 8007cae <_lv_disp_refr_task+0x452>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007c50:	f006 fbf9 	bl	800e446 <lv_disp_get_buf>
 8007c54:	4605      	mov	r5, r0
                lv_refr_vdb_flush();
 8007c56:	f7ff fbf7 	bl	8007448 <lv_refr_vdb_flush>
                while(vdb->flushing);
 8007c5a:	69ab      	ldr	r3, [r5, #24]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1fc      	bne.n	8007c5a <_lv_disp_refr_task+0x3fe>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 8007c60:	6823      	ldr	r3, [r4, #0]
                for(a = 0; a < disp_refr->inv_p; a++) {
 8007c62:	f8df b154 	ldr.w	fp, [pc, #340]	; 8007db8 <_lv_disp_refr_task+0x55c>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 8007c66:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007c6a:	0040      	lsls	r0, r0, #1
 8007c6c:	f007 fe36 	bl	800f8dc <_lv_mem_buf_get>
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8007c70:	68ab      	ldr	r3, [r5, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8007c72:	f8d5 9000 	ldr.w	r9, [r5]
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 8007c76:	4680      	mov	r8, r0
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8007c78:	4599      	cmp	r9, r3
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8007c7a:	6830      	ldr	r0, [r6, #0]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8007c7c:	9304      	str	r3, [sp, #16]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8007c7e:	bf08      	it	eq
 8007c80:	f8d5 9004 	ldreq.w	r9, [r5, #4]
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8007c84:	f006 fbac 	bl	800e3e0 <lv_disp_get_hor_res>
                for(a = 0; a < disp_refr->inv_p; a++) {
 8007c88:	2600      	movs	r6, #0
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8007c8a:	4603      	mov	r3, r0
                            start_offs += hres * sizeof(lv_color_t);
 8007c8c:	0042      	lsls	r2, r0, #1
 8007c8e:	9203      	str	r2, [sp, #12]
                for(a = 0; a < disp_refr->inv_p; a++) {
 8007c90:	f8db 2000 	ldr.w	r2, [fp]
 8007c94:	b2b0      	uxth	r0, r6
 8007c96:	f8b2 117e 	ldrh.w	r1, [r2, #382]	; 0x17e
 8007c9a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007c9e:	4281      	cmp	r1, r0
 8007ca0:	d826      	bhi.n	8007cf0 <_lv_disp_refr_task+0x494>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
 8007ca2:	f1b8 0f00 	cmp.w	r8, #0
 8007ca6:	d002      	beq.n	8007cae <_lv_disp_refr_task+0x452>
 8007ca8:	4640      	mov	r0, r8
 8007caa:	f007 fcaf 	bl	800f60c <_lv_mem_buf_release>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 8007cae:	6820      	ldr	r0, [r4, #0]
 8007cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cb4:	305e      	adds	r0, #94	; 0x5e
 8007cb6:	f007 feaf 	bl	800fa18 <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 8007cba:	6820      	ldr	r0, [r4, #0]
 8007cbc:	2120      	movs	r1, #32
 8007cbe:	f500 70af 	add.w	r0, r0, #350	; 0x15e
 8007cc2:	f007 fea9 	bl	800fa18 <_lv_memset_00>
        disp_refr->inv_p = 0;
 8007cc6:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
 8007cc8:	9806      	ldr	r0, [sp, #24]
        disp_refr->inv_p = 0;
 8007cca:	f8b3 217e 	ldrh.w	r2, [r3, #382]	; 0x17e
 8007cce:	f36f 0209 	bfc	r2, #0, #10
 8007cd2:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
        elaps = lv_tick_elaps(start);
 8007cd6:	f006 fcf7 	bl	800e6c8 <lv_tick_elaps>
 8007cda:	4607      	mov	r7, r0
        if(disp_refr->driver.monitor_cb) {
 8007cdc:	6820      	ldr	r0, [r4, #0]
 8007cde:	6983      	ldr	r3, [r0, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f43f adee 	beq.w	80078c2 <_lv_disp_refr_task+0x66>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
 8007ce6:	4a32      	ldr	r2, [pc, #200]	; (8007db0 <_lv_disp_refr_task+0x554>)
 8007ce8:	4639      	mov	r1, r7
 8007cea:	6812      	ldr	r2, [r2, #0]
 8007cec:	4798      	blx	r3
 8007cee:	e5e8      	b.n	80078c2 <_lv_disp_refr_task+0x66>
                    if(disp_refr->inv_area_joined[a] == 0) {
 8007cf0:	1991      	adds	r1, r2, r6
 8007cf2:	f891 115e 	ldrb.w	r1, [r1, #350]	; 0x15e
 8007cf6:	b109      	cbz	r1, 8007cfc <_lv_disp_refr_task+0x4a0>
 8007cf8:	3601      	adds	r6, #1
 8007cfa:	e7c9      	b.n	8007c90 <_lv_disp_refr_task+0x434>
 8007cfc:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8007d00:	f9b1 205e 	ldrsh.w	r2, [r1, #94]	; 0x5e
 8007d04:	f9b1 7060 	ldrsh.w	r7, [r1, #96]	; 0x60
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007d08:	f8b1 1062 	ldrh.w	r1, [r1, #98]	; 0x62
 8007d0c:	fb07 2503 	mla	r5, r7, r3, r2
 8007d10:	f1c2 0201 	rsb	r2, r2, #1
 8007d14:	440a      	add	r2, r1
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 8007d16:	b212      	sxth	r2, r2
 8007d18:	0052      	lsls	r2, r2, #1
 8007d1a:	9205      	str	r2, [sp, #20]
 8007d1c:	9a04      	ldr	r2, [sp, #16]
                        uint32_t start_offs =
 8007d1e:	006d      	lsls	r5, r5, #1
 8007d20:	eb09 0a05 	add.w	sl, r9, r5
 8007d24:	4415      	add	r5, r2
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8007d26:	f106 020b 	add.w	r2, r6, #11
 8007d2a:	00d2      	lsls	r2, r2, #3
 8007d2c:	9207      	str	r2, [sp, #28]
 8007d2e:	f8db 2000 	ldr.w	r2, [fp]
 8007d32:	9907      	ldr	r1, [sp, #28]
 8007d34:	440a      	add	r2, r1
 8007d36:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8007d3a:	42ba      	cmp	r2, r7
 8007d3c:	dbdc      	blt.n	8007cf8 <_lv_disp_refr_task+0x49c>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
 8007d3e:	4651      	mov	r1, sl
 8007d40:	9a05      	ldr	r2, [sp, #20]
 8007d42:	4640      	mov	r0, r8
 8007d44:	9308      	str	r3, [sp, #32]
 8007d46:	f007 fcad 	bl	800f6a4 <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	9a05      	ldr	r2, [sp, #20]
 8007d4e:	4641      	mov	r1, r8
 8007d50:	f007 fca8 	bl	800f6a4 <_lv_memcpy>
 8007d54:	9b03      	ldr	r3, [sp, #12]
 8007d56:	3701      	adds	r7, #1
 8007d58:	449a      	add	sl, r3
 8007d5a:	441d      	add	r5, r3
 8007d5c:	b23f      	sxth	r7, r7
 8007d5e:	9b08      	ldr	r3, [sp, #32]
 8007d60:	e7e5      	b.n	8007d2e <_lv_disp_refr_task+0x4d2>
        perf_last_time = lv_tick_get();
 8007d62:	f006 fca3 	bl	800e6ac <lv_tick_get>
        uint32_t fps = 1000 / (elaps_max == 0 ? 1 : elaps_max);
 8007d66:	6833      	ldr	r3, [r6, #0]
        perf_last_time = lv_tick_get();
 8007d68:	f8c8 0000 	str.w	r0, [r8]
 8007d6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
        uint32_t fps = 1000 / (elaps_max == 0 ? 1 : elaps_max);
 8007d70:	b10b      	cbz	r3, 8007d76 <_lv_disp_refr_task+0x51a>
 8007d72:	fbb2 f2f3 	udiv	r2, r2, r3
        elaps_max = 1;
 8007d76:	2301      	movs	r3, #1
 8007d78:	6033      	str	r3, [r6, #0]
        uint32_t fps_limit = 1000 / disp_refr->refr_task->period;
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7e:	681c      	ldr	r4, [r3, #0]
 8007d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d84:	fbb3 f4f4 	udiv	r4, r3, r4
 8007d88:	4294      	cmp	r4, r2
 8007d8a:	bf28      	it	cs
 8007d8c:	4614      	movcs	r4, r2
        uint32_t cpu = 100 - lv_task_get_idle();
 8007d8e:	f008 fbbb 	bl	8010508 <lv_task_get_idle>
        lv_label_set_text_fmt(perf_label, "%d FPS\n%d%% CPU", fps, cpu);
 8007d92:	4622      	mov	r2, r4
 8007d94:	f1c0 0364 	rsb	r3, r0, #100	; 0x64
 8007d98:	4906      	ldr	r1, [pc, #24]	; (8007db4 <_lv_disp_refr_task+0x558>)
 8007d9a:	6828      	ldr	r0, [r5, #0]
 8007d9c:	f00b f9cc 	bl	8013138 <lv_label_set_text_fmt>
        lv_obj_align(perf_label, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, 0, 0);
 8007da0:	2300      	movs	r3, #0
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	2206      	movs	r2, #6
 8007da6:	4619      	mov	r1, r3
 8007da8:	6828      	ldr	r0, [r5, #0]
 8007daa:	f7fc fead 	bl	8004b08 <lv_obj_align>
 8007dae:	e569      	b.n	8007884 <_lv_disp_refr_task+0x28>
 8007db0:	20000190 	.word	0x20000190
 8007db4:	080159ab 	.word	0x080159ab
 8007db8:	20000184 	.word	0x20000184

08007dbc <_lv_memcpy_small>:
    uint8_t * d8 = (uint8_t *)dst;
 8007dbc:	4603      	mov	r3, r0
{
 8007dbe:	b510      	push	{r4, lr}
 8007dc0:	3901      	subs	r1, #1
 8007dc2:	4402      	add	r2, r0
        *d8 = *s8;
 8007dc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007dc8:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d1f9      	bne.n	8007dc4 <_lv_memcpy_small+0x8>
        s8++;
        len--;
    }

    return dst;
}
 8007dd0:	bd10      	pop	{r4, pc}

08007dd2 <lv_style_list_get_style>:
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
 8007dd2:	8883      	ldrh	r3, [r0, #4]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8007dd4:	7902      	ldrb	r2, [r0, #4]
    if(list->has_trans && list->skip_trans) id++;
 8007dd6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007dda:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007dde:	bf04      	itt	eq
 8007de0:	3101      	addeq	r1, #1
 8007de2:	b2c9      	uxtbeq	r1, r1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8007de4:	f012 033f 	ands.w	r3, r2, #63	; 0x3f
 8007de8:	d005      	beq.n	8007df6 <lv_style_list_get_style+0x24>
 8007dea:	428b      	cmp	r3, r1
 8007dec:	d903      	bls.n	8007df6 <lv_style_list_get_style+0x24>
    return list->style_list[id];
 8007dee:	6803      	ldr	r3, [r0, #0]
 8007df0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007df4:	4770      	bx	lr
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 8007df6:	2000      	movs	r0, #0
}
 8007df8:	4770      	bx	lr

08007dfa <get_style_prop>:
 */
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)
{
    lv_style_property_t prop;
    uint8_t * prop_p = (uint8_t *)&prop;
    prop_p[0] = style->map[idx];
 8007dfa:	6803      	ldr	r3, [r0, #0]
{
 8007dfc:	b082      	sub	sp, #8
    prop_p[0] = style->map[idx];
 8007dfe:	5c5a      	ldrb	r2, [r3, r1]
    prop_p[1] = style->map[idx + 1];
 8007e00:	440b      	add	r3, r1
 8007e02:	785b      	ldrb	r3, [r3, #1]
    prop_p[0] = style->map[idx];
 8007e04:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
 8007e08:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
}
 8007e0c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007e10:	b002      	add	sp, #8
 8007e12:	4770      	bx	lr

08007e14 <get_style_prop_attr>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline uint8_t get_style_prop_attr(const lv_style_t * style, size_t idx)
{
 8007e14:	b508      	push	{r3, lr}
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 8007e16:	f7ff fff0 	bl	8007dfa <get_style_prop>
}
 8007e1a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007e1e:	bd08      	pop	{r3, pc}

08007e20 <get_prop_size>:
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
 8007e20:	f000 000f 	and.w	r0, r0, #15
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
 8007e24:	280b      	cmp	r0, #11
 8007e26:	d904      	bls.n	8007e32 <get_prop_size+0x12>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
    else size += sizeof(const void *);
 8007e28:	280e      	cmp	r0, #14
 8007e2a:	bf34      	ite	cc
 8007e2c:	2003      	movcc	r0, #3
 8007e2e:	2006      	movcs	r0, #6
 8007e30:	4770      	bx	lr
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
 8007e32:	2004      	movs	r0, #4
    return size;
}
 8007e34:	4770      	bx	lr

08007e36 <get_property_index>:
{
 8007e36:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(style->map == NULL) return -1;
 8007e3a:	6803      	ldr	r3, [r0, #0]
{
 8007e3c:	4607      	mov	r7, r0
    if(style->map == NULL) return -1;
 8007e3e:	b38b      	cbz	r3, 8007ea4 <get_property_index+0x6e>
    int16_t id_guess = -1;
 8007e40:	f04f 34ff 	mov.w	r4, #4294967295
    attr = (prop >> 8) & 0xFF;
 8007e44:	0a0e      	lsrs	r6, r1, #8
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8007e46:	f006 087f 	and.w	r8, r6, #127	; 0x7f
    size_t i = 0;
 8007e4a:	2500      	movs	r5, #0
    int16_t weight = -1;
 8007e4c:	46a1      	mov	r9, r4
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8007e4e:	ea6f 0808 	mvn.w	r8, r8
    uint8_t id_to_find = prop & 0xFF;
 8007e52:	fa5f fa81 	uxtb.w	sl, r1
    return get_style_prop(style, idx) & 0xFF;
 8007e56:	4629      	mov	r1, r5
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f7ff ffce 	bl	8007dfa <get_style_prop>
 8007e5e:	fa5f fb80 	uxtb.w	fp, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSEING_PROP) {
 8007e62:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8007e66:	d101      	bne.n	8007e6c <get_property_index+0x36>
    return id_guess;
 8007e68:	4620      	mov	r0, r4
 8007e6a:	e00a      	b.n	8007e82 <get_property_index+0x4c>
        if(prop_id == id_to_find) {
 8007e6c:	45da      	cmp	sl, fp
 8007e6e:	d114      	bne.n	8007e9a <get_property_index+0x64>
            attr_i = get_style_prop_attr(style, i);
 8007e70:	4629      	mov	r1, r5
 8007e72:	4638      	mov	r0, r7
 8007e74:	f7ff ffce 	bl	8007e14 <get_style_prop_attr>
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 8007e78:	ea86 0300 	eor.w	r3, r6, r0
 8007e7c:	065b      	lsls	r3, r3, #25
 8007e7e:	d102      	bne.n	8007e86 <get_property_index+0x50>
                return i;
 8007e80:	4628      	mov	r0, r5
}
 8007e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e86:	f000 007f 	and.w	r0, r0, #127	; 0x7f
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 8007e8a:	ea18 0f00 	tst.w	r8, r0
 8007e8e:	d104      	bne.n	8007e9a <get_property_index+0x64>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 8007e90:	4548      	cmp	r0, r9
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 8007e92:	bfc4      	itt	gt
 8007e94:	fa0f f980 	sxthgt.w	r9, r0
                    id_guess = i;
 8007e98:	b22c      	sxthgt	r4, r5
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
 8007e9a:	4658      	mov	r0, fp
 8007e9c:	f7ff ffc0 	bl	8007e20 <get_prop_size>
 8007ea0:	4405      	add	r5, r0
 8007ea2:	e7d8      	b.n	8007e56 <get_property_index+0x20>
    if(style->map == NULL) return -1;
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	e7eb      	b.n	8007e82 <get_property_index+0x4c>

08007eaa <style_resize>:
{
 8007eaa:	b510      	push	{r4, lr}
 8007eac:	4604      	mov	r4, r0
    style->map = lv_mem_realloc(style->map, sz);
 8007eae:	6800      	ldr	r0, [r0, #0]
 8007eb0:	f007 fce8 	bl	800f884 <lv_mem_realloc>
 8007eb4:	6020      	str	r0, [r4, #0]
}
 8007eb6:	bd10      	pop	{r4, pc}

08007eb8 <lv_style_init>:
    _lv_memset_00(style, sizeof(lv_style_t));
 8007eb8:	2104      	movs	r1, #4
 8007eba:	f007 bdad 	b.w	800fa18 <_lv_memset_00>

08007ebe <lv_style_list_init>:
    _lv_memset_00(list, sizeof(lv_style_list_t));
 8007ebe:	2108      	movs	r1, #8
 8007ec0:	f007 bdaa 	b.w	800fa18 <_lv_memset_00>

08007ec4 <_lv_style_list_remove_style>:
{
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec6:	4604      	mov	r4, r0
    if(list->style_cnt == 0) return;
 8007ec8:	7900      	ldrb	r0, [r0, #4]
 8007eca:	f010 053f 	ands.w	r5, r0, #63	; 0x3f
 8007ece:	d004      	beq.n	8007eda <_lv_style_list_remove_style+0x16>
    for(i = 0; i < list->style_cnt; i++) {
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	b2d0      	uxtb	r0, r2
 8007ed6:	4283      	cmp	r3, r0
 8007ed8:	d800      	bhi.n	8007edc <_lv_style_list_remove_style+0x18>
}
 8007eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(list->style_list[i] == style) {
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 8007ee2:	3201      	adds	r2, #1
 8007ee4:	428e      	cmp	r6, r1
 8007ee6:	d1f5      	bne.n	8007ed4 <_lv_style_list_remove_style+0x10>
    if(list->style_cnt == 1) {
 8007ee8:	2d01      	cmp	r5, #1
 8007eea:	d10a      	bne.n	8007f02 <_lv_style_list_remove_style+0x3e>
        lv_mem_free(list->style_list);
 8007eec:	f007 fb4e 	bl	800f58c <lv_mem_free>
        list->style_list = NULL;
 8007ef0:	2200      	movs	r2, #0
        list->style_cnt = 0;
 8007ef2:	7923      	ldrb	r3, [r4, #4]
        list->style_list = NULL;
 8007ef4:	6022      	str	r2, [r4, #0]
        list->has_local = 0;
 8007ef6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007efa:	f362 1386 	bfi	r3, r2, #6, #1
 8007efe:	7123      	strb	r3, [r4, #4]
        return;
 8007f00:	e7eb      	b.n	8007eda <_lv_style_list_remove_style+0x16>
    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
 8007f02:	1e58      	subs	r0, r3, #1
 8007f04:	0080      	lsls	r0, r0, #2
 8007f06:	f007 faf1 	bl	800f4ec <lv_mem_alloc>
 8007f0a:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
 8007f0c:	f007 f85c 	bl	800efc8 <lv_debug_check_null>
 8007f10:	4603      	mov	r3, r0
 8007f12:	b920      	cbnz	r0, 8007f1e <_lv_style_list_remove_style+0x5a>
 8007f14:	462a      	mov	r2, r5
 8007f16:	4811      	ldr	r0, [pc, #68]	; (8007f5c <_lv_style_list_remove_style+0x98>)
 8007f18:	f007 f85a 	bl	800efd0 <lv_debug_log_error>
 8007f1c:	e7fe      	b.n	8007f1c <_lv_style_list_remove_style+0x58>
    if(new_classes == NULL) {
 8007f1e:	2d00      	cmp	r5, #0
 8007f20:	d0db      	beq.n	8007eda <_lv_style_list_remove_style+0x16>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 8007f22:	2300      	movs	r3, #0
 8007f24:	4619      	mov	r1, r3
 8007f26:	7922      	ldrb	r2, [r4, #4]
 8007f28:	6820      	ldr	r0, [r4, #0]
 8007f2a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007f2e:	b2df      	uxtb	r7, r3
 8007f30:	42ba      	cmp	r2, r7
 8007f32:	d809      	bhi.n	8007f48 <_lv_style_list_remove_style+0x84>
    lv_mem_free(list->style_list);
 8007f34:	f007 fb2a 	bl	800f58c <lv_mem_free>
    list->style_cnt--;
 8007f38:	7923      	ldrb	r3, [r4, #4]
    list->style_list = new_classes;
 8007f3a:	6025      	str	r5, [r4, #0]
    list->style_cnt--;
 8007f3c:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8007f40:	f362 0305 	bfi	r3, r2, #0, #6
 8007f44:	7123      	strb	r3, [r4, #4]
 8007f46:	e7c8      	b.n	8007eda <_lv_style_list_remove_style+0x16>
        if(list->style_list[i] == style) continue;
 8007f48:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	42be      	cmp	r6, r7
        new_classes[j] = list->style_list[i];
 8007f50:	bf1e      	ittt	ne
 8007f52:	f845 7021 	strne.w	r7, [r5, r1, lsl #2]
        j++;
 8007f56:	3101      	addne	r1, #1
 8007f58:	b2c9      	uxtbne	r1, r1
 8007f5a:	e7e8      	b.n	8007f2e <_lv_style_list_remove_style+0x6a>
 8007f5c:	08015994 	.word	0x08015994

08007f60 <_lv_style_list_add_style>:
{
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	460e      	mov	r6, r1
    if(list == NULL) return;
 8007f64:	4605      	mov	r5, r0
 8007f66:	b378      	cbz	r0, 8007fc8 <_lv_style_list_add_style+0x68>
    _lv_style_list_remove_style(list, style);
 8007f68:	f7ff ffac 	bl	8007ec4 <_lv_style_list_remove_style>
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
 8007f6c:	7929      	ldrb	r1, [r5, #4]
 8007f6e:	0688      	lsls	r0, r1, #26
 8007f70:	d10c      	bne.n	8007f8c <_lv_style_list_add_style+0x2c>
 8007f72:	2004      	movs	r0, #4
 8007f74:	f007 faba 	bl	800f4ec <lv_mem_alloc>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
 8007f78:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_classes);
 8007f7a:	f007 f825 	bl	800efc8 <lv_debug_check_null>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	b960      	cbnz	r0, 8007f9c <_lv_style_list_add_style+0x3c>
 8007f82:	4622      	mov	r2, r4
 8007f84:	4814      	ldr	r0, [pc, #80]	; (8007fd8 <_lv_style_list_add_style+0x78>)
 8007f86:	f007 f823 	bl	800efd0 <lv_debug_log_error>
 8007f8a:	e7fe      	b.n	8007f8a <_lv_style_list_add_style+0x2a>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
 8007f8c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007f90:	3101      	adds	r1, #1
 8007f92:	0089      	lsls	r1, r1, #2
 8007f94:	6828      	ldr	r0, [r5, #0]
 8007f96:	f007 fc75 	bl	800f884 <lv_mem_realloc>
 8007f9a:	e7ed      	b.n	8007f78 <_lv_style_list_add_style+0x18>
    if(new_classes == NULL) {
 8007f9c:	b1a4      	cbz	r4, 8007fc8 <_lv_style_list_add_style+0x68>
    if(list->has_trans) first_style++;
 8007f9e:	792b      	ldrb	r3, [r5, #4]
    if(list->has_local) first_style++;
 8007fa0:	065a      	lsls	r2, r3, #25
    uint8_t first_style = 0;
 8007fa2:	ea4f 11d3 	mov.w	r1, r3, lsr #7
    for(i = list->style_cnt; i > first_style; i--) {
 8007fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007faa:	461a      	mov	r2, r3
    if(list->has_local) first_style++;
 8007fac:	bf48      	it	mi
 8007fae:	3101      	addmi	r1, #1
 8007fb0:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    for(i = list->style_cnt; i > first_style; i--) {
 8007fb4:	428a      	cmp	r2, r1
 8007fb6:	d808      	bhi.n	8007fca <_lv_style_list_add_style+0x6a>
    list->style_cnt++;
 8007fb8:	792a      	ldrb	r2, [r5, #4]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	f363 0205 	bfi	r2, r3, #0, #6
    new_classes[first_style] = style;
 8007fc0:	f844 6021 	str.w	r6, [r4, r1, lsl #2]
    list->style_cnt++;
 8007fc4:	712a      	strb	r2, [r5, #4]
    list->style_list = new_classes;
 8007fc6:	602c      	str	r4, [r5, #0]
}
 8007fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_classes[i] = new_classes[i - 1];
 8007fca:	f850 7c04 	ldr.w	r7, [r0, #-4]
    for(i = list->style_cnt; i > first_style; i--) {
 8007fce:	3a01      	subs	r2, #1
        new_classes[i] = new_classes[i - 1];
 8007fd0:	f840 7904 	str.w	r7, [r0], #-4
    for(i = list->style_cnt; i > first_style; i--) {
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	e7ed      	b.n	8007fb4 <_lv_style_list_add_style+0x54>
 8007fd8:	08015994 	.word	0x08015994

08007fdc <get_alloc_local_style>:
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 8007fdc:	7901      	ldrb	r1, [r0, #4]
{
 8007fde:	b538      	push	{r3, r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 8007fe0:	064b      	lsls	r3, r1, #25
{
 8007fe2:	4605      	mov	r5, r0
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 8007fe4:	d504      	bpl.n	8007ff0 <get_alloc_local_style+0x14>
}
 8007fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 8007fea:	09c9      	lsrs	r1, r1, #7
 8007fec:	f7ff bef1 	b.w	8007dd2 <lv_style_list_get_style>
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
 8007ff0:	2004      	movs	r0, #4
 8007ff2:	f007 fa7b 	bl	800f4ec <lv_mem_alloc>
 8007ff6:	4604      	mov	r4, r0
    LV_ASSERT_MEM(local_style);
 8007ff8:	f006 ffe6 	bl	800efc8 <lv_debug_check_null>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	b920      	cbnz	r0, 800800a <get_alloc_local_style+0x2e>
 8008000:	4622      	mov	r2, r4
 8008002:	4809      	ldr	r0, [pc, #36]	; (8008028 <get_alloc_local_style+0x4c>)
 8008004:	f006 ffe4 	bl	800efd0 <lv_debug_log_error>
 8008008:	e7fe      	b.n	8008008 <get_alloc_local_style+0x2c>
    if(local_style == NULL) {
 800800a:	b154      	cbz	r4, 8008022 <get_alloc_local_style+0x46>
    lv_style_init(local_style);
 800800c:	4620      	mov	r0, r4
 800800e:	f7ff ff53 	bl	8007eb8 <lv_style_init>
    _lv_style_list_add_style(list, local_style);
 8008012:	4621      	mov	r1, r4
 8008014:	4628      	mov	r0, r5
 8008016:	f7ff ffa3 	bl	8007f60 <_lv_style_list_add_style>
    list->has_local = 1;
 800801a:	792b      	ldrb	r3, [r5, #4]
 800801c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008020:	712b      	strb	r3, [r5, #4]
}
 8008022:	4620      	mov	r0, r4
 8008024:	bd38      	pop	{r3, r4, r5, pc}
 8008026:	bf00      	nop
 8008028:	08015994 	.word	0x08015994

0800802c <lv_style_reset>:
{
 800802c:	b510      	push	{r4, lr}
 800802e:	4604      	mov	r4, r0
    lv_mem_free(style->map);
 8008030:	6800      	ldr	r0, [r0, #0]
 8008032:	f007 faab 	bl	800f58c <lv_mem_free>
    style->map = NULL;
 8008036:	2300      	movs	r3, #0
 8008038:	6023      	str	r3, [r4, #0]
}
 800803a:	bd10      	pop	{r4, pc}

0800803c <_lv_style_get_mem_size>:
{
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4605      	mov	r5, r0
    if(style->map == NULL) return 0;
 8008040:	6800      	ldr	r0, [r0, #0]
 8008042:	b148      	cbz	r0, 8008058 <_lv_style_get_mem_size+0x1c>
    size_t i = 0;
 8008044:	2400      	movs	r4, #0
    return get_style_prop(style, idx) & 0xFF;
 8008046:	4621      	mov	r1, r4
 8008048:	4628      	mov	r0, r5
 800804a:	f7ff fed6 	bl	8007dfa <get_style_prop>
 800804e:	b2c0      	uxtb	r0, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSEING_PROP) {
 8008050:	28ff      	cmp	r0, #255	; 0xff
 8008052:	d102      	bne.n	800805a <_lv_style_get_mem_size+0x1e>
    return i + sizeof(lv_style_property_t);
 8008054:	1ca0      	adds	r0, r4, #2
 8008056:	b280      	uxth	r0, r0
}
 8008058:	bd38      	pop	{r3, r4, r5, pc}
    return idx + get_prop_size(prop_id);
 800805a:	f7ff fee1 	bl	8007e20 <get_prop_size>
 800805e:	4404      	add	r4, r0
 8008060:	e7f1      	b.n	8008046 <_lv_style_get_mem_size+0xa>

08008062 <lv_style_copy>:
{
 8008062:	b570      	push	{r4, r5, r6, lr}
 8008064:	4606      	mov	r6, r0
    if(style_src == NULL) return;
 8008066:	460c      	mov	r4, r1
 8008068:	b171      	cbz	r1, 8008088 <lv_style_copy+0x26>
    if(style_src->map == NULL) return;
 800806a:	680b      	ldr	r3, [r1, #0]
 800806c:	b163      	cbz	r3, 8008088 <lv_style_copy+0x26>
    uint16_t size = _lv_style_get_mem_size(style_src);
 800806e:	4608      	mov	r0, r1
 8008070:	f7ff ffe4 	bl	800803c <_lv_style_get_mem_size>
 8008074:	4605      	mov	r5, r0
    style_dest->map = lv_mem_alloc(size);
 8008076:	f007 fa39 	bl	800f4ec <lv_mem_alloc>
 800807a:	6030      	str	r0, [r6, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
 800807c:	462a      	mov	r2, r5
 800807e:	6821      	ldr	r1, [r4, #0]
}
 8008080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_memcpy(style_dest->map, style_src->map, size);
 8008084:	f007 bb0e 	b.w	800f6a4 <_lv_memcpy>
}
 8008088:	bd70      	pop	{r4, r5, r6, pc}

0800808a <lv_style_remove_prop>:
{
 800808a:	b570      	push	{r4, r5, r6, lr}
 800808c:	460e      	mov	r6, r1
    if(style == NULL) return false;
 800808e:	4605      	mov	r5, r0
 8008090:	b908      	cbnz	r0, 8008096 <lv_style_remove_prop+0xc>
 8008092:	2000      	movs	r0, #0
}
 8008094:	bd70      	pop	{r4, r5, r6, pc}
    int32_t id = get_property_index(style, prop);
 8008096:	f7ff fece 	bl	8007e36 <get_property_index>
    if(id >= 0) {
 800809a:	1e04      	subs	r4, r0, #0
 800809c:	dbf9      	blt.n	8008092 <lv_style_remove_prop+0x8>
        attr_found = get_style_prop_attr(style, id);
 800809e:	4621      	mov	r1, r4
 80080a0:	4628      	mov	r0, r5
 80080a2:	f7ff feb7 	bl	8007e14 <get_style_prop_attr>
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 80080a6:	ea80 2016 	eor.w	r0, r0, r6, lsr #8
 80080aa:	0643      	lsls	r3, r0, #25
 80080ac:	d1f1      	bne.n	8008092 <lv_style_remove_prop+0x8>
            uint32_t map_size = _lv_style_get_mem_size(style);
 80080ae:	4628      	mov	r0, r5
 80080b0:	f7ff ffc4 	bl	800803c <_lv_style_get_mem_size>
 80080b4:	4601      	mov	r1, r0
            uint8_t prop_size = get_prop_size(prop);
 80080b6:	b2f0      	uxtb	r0, r6
 80080b8:	f7ff feb2 	bl	8007e20 <get_prop_size>
            for(i = id; i < map_size - prop_size; i++) {
 80080bc:	b2c0      	uxtb	r0, r0
 80080be:	1a09      	subs	r1, r1, r0
 80080c0:	42a1      	cmp	r1, r4
 80080c2:	d804      	bhi.n	80080ce <lv_style_remove_prop+0x44>
            style_resize(style, map_size - prop_size);
 80080c4:	4628      	mov	r0, r5
 80080c6:	f7ff fef0 	bl	8007eaa <style_resize>
            return true;
 80080ca:	2001      	movs	r0, #1
 80080cc:	e7e2      	b.n	8008094 <lv_style_remove_prop+0xa>
                style->map[i] = style->map[i + prop_size];
 80080ce:	682b      	ldr	r3, [r5, #0]
 80080d0:	191a      	adds	r2, r3, r4
 80080d2:	5c12      	ldrb	r2, [r2, r0]
 80080d4:	551a      	strb	r2, [r3, r4]
            for(i = id; i < map_size - prop_size; i++) {
 80080d6:	3401      	adds	r4, #1
 80080d8:	e7f2      	b.n	80080c0 <lv_style_remove_prop+0x36>
	...

080080dc <_lv_style_set_int>:
{
 80080dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80080de:	4605      	mov	r5, r0
 80080e0:	f8ad 1006 	strh.w	r1, [sp, #6]
 80080e4:	f8ad 2004 	strh.w	r2, [sp, #4]
    int32_t id = get_property_index(style, prop);
 80080e8:	f7ff fea5 	bl	8007e36 <get_property_index>
    if(id >= 0) {
 80080ec:	1e04      	subs	r4, r0, #0
 80080ee:	db12      	blt.n	8008116 <_lv_style_set_int+0x3a>
        attr_found = get_style_prop_attr(style, id);
 80080f0:	4621      	mov	r1, r4
 80080f2:	4628      	mov	r0, r5
 80080f4:	f7ff fe8e 	bl	8007e14 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 80080f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 80080fc:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
 8008100:	0643      	lsls	r3, r0, #25
 8008102:	d108      	bne.n	8008116 <_lv_style_set_int+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
 8008104:	2202      	movs	r2, #2
 8008106:	6828      	ldr	r0, [r5, #0]
 8008108:	3402      	adds	r4, #2
 800810a:	a901      	add	r1, sp, #4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800810c:	4420      	add	r0, r4
 800810e:	f7ff fe55 	bl	8007dbc <_lv_memcpy_small>
}
 8008112:	b004      	add	sp, #16
 8008114:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
 8008116:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
 8008118:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
 800811a:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 800811e:	f7ff ff8d 	bl	800803c <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 8008122:	2800      	cmp	r0, #0
 8008124:	bf08      	it	eq
 8008126:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
 8008128:	1d04      	adds	r4, r0, #4
    style_resize(style, size);
 800812a:	b2a4      	uxth	r4, r4
 800812c:	4621      	mov	r1, r4
 800812e:	4628      	mov	r0, r5
 8008130:	f7ff febb 	bl	8007eaa <style_resize>
    LV_ASSERT_MEM(style->map);
 8008134:	6828      	ldr	r0, [r5, #0]
 8008136:	f006 ff47 	bl	800efc8 <lv_debug_check_null>
 800813a:	682e      	ldr	r6, [r5, #0]
 800813c:	4603      	mov	r3, r0
 800813e:	b920      	cbnz	r0, 800814a <_lv_style_set_int+0x6e>
 8008140:	4632      	mov	r2, r6
 8008142:	480c      	ldr	r0, [pc, #48]	; (8008174 <_lv_style_set_int+0x98>)
 8008144:	f006 ff44 	bl	800efd0 <lv_debug_log_error>
 8008148:	e7fe      	b.n	8008148 <_lv_style_set_int+0x6c>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800814a:	1fa0      	subs	r0, r4, #6
 800814c:	2202      	movs	r2, #2
 800814e:	f10d 0106 	add.w	r1, sp, #6
 8008152:	4430      	add	r0, r6
 8008154:	f7ff fe32 	bl	8007dbc <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 8008158:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800815a:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 800815c:	2202      	movs	r2, #2
 800815e:	a901      	add	r1, sp, #4
 8008160:	4418      	add	r0, r3
 8008162:	f7ff fe2b 	bl	8007dbc <_lv_memcpy_small>
 8008166:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8008168:	6828      	ldr	r0, [r5, #0]
 800816a:	2202      	movs	r2, #2
 800816c:	f10d 010e 	add.w	r1, sp, #14
 8008170:	e7cc      	b.n	800810c <_lv_style_set_int+0x30>
 8008172:	bf00      	nop
 8008174:	08015994 	.word	0x08015994

08008178 <_lv_style_set_color>:
{
 8008178:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800817a:	4605      	mov	r5, r0
 800817c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8008180:	f8ad 1006 	strh.w	r1, [sp, #6]
    int32_t id = get_property_index(style, prop);
 8008184:	f7ff fe57 	bl	8007e36 <get_property_index>
    if(id >= 0) {
 8008188:	1e04      	subs	r4, r0, #0
 800818a:	db12      	blt.n	80081b2 <_lv_style_set_color+0x3a>
        attr_found = get_style_prop_attr(style, id);
 800818c:	4621      	mov	r1, r4
 800818e:	4628      	mov	r0, r5
 8008190:	f7ff fe40 	bl	8007e14 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 8008194:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 8008198:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
 800819c:	0643      	lsls	r3, r0, #25
 800819e:	d108      	bne.n	80081b2 <_lv_style_set_color+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
 80081a0:	2202      	movs	r2, #2
 80081a2:	6828      	ldr	r0, [r5, #0]
 80081a4:	3402      	adds	r4, #2
 80081a6:	a901      	add	r1, sp, #4
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80081a8:	4420      	add	r0, r4
 80081aa:	f7ff fe07 	bl	8007dbc <_lv_memcpy_small>
}
 80081ae:	b004      	add	sp, #16
 80081b0:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
 80081b2:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
 80081b4:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
 80081b6:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 80081ba:	f7ff ff3f 	bl	800803c <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 80081be:	2800      	cmp	r0, #0
 80081c0:	bf08      	it	eq
 80081c2:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
 80081c4:	1d04      	adds	r4, r0, #4
    style_resize(style, size);
 80081c6:	b2a4      	uxth	r4, r4
 80081c8:	4621      	mov	r1, r4
 80081ca:	4628      	mov	r0, r5
 80081cc:	f7ff fe6d 	bl	8007eaa <style_resize>
    LV_ASSERT_MEM(style->map);
 80081d0:	6828      	ldr	r0, [r5, #0]
 80081d2:	f006 fef9 	bl	800efc8 <lv_debug_check_null>
 80081d6:	682e      	ldr	r6, [r5, #0]
 80081d8:	4603      	mov	r3, r0
 80081da:	b920      	cbnz	r0, 80081e6 <_lv_style_set_color+0x6e>
 80081dc:	4632      	mov	r2, r6
 80081de:	480c      	ldr	r0, [pc, #48]	; (8008210 <_lv_style_set_color+0x98>)
 80081e0:	f006 fef6 	bl	800efd0 <lv_debug_log_error>
 80081e4:	e7fe      	b.n	80081e4 <_lv_style_set_color+0x6c>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 80081e6:	1fa0      	subs	r0, r4, #6
 80081e8:	2202      	movs	r2, #2
 80081ea:	f10d 0106 	add.w	r1, sp, #6
 80081ee:	4430      	add	r0, r6
 80081f0:	f7ff fde4 	bl	8007dbc <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 80081f4:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 80081f6:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 80081f8:	2202      	movs	r2, #2
 80081fa:	a901      	add	r1, sp, #4
 80081fc:	4418      	add	r0, r3
 80081fe:	f7ff fddd 	bl	8007dbc <_lv_memcpy_small>
 8008202:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8008204:	6828      	ldr	r0, [r5, #0]
 8008206:	2202      	movs	r2, #2
 8008208:	f10d 010e 	add.w	r1, sp, #14
 800820c:	e7cc      	b.n	80081a8 <_lv_style_set_color+0x30>
 800820e:	bf00      	nop
 8008210:	08015994 	.word	0x08015994

08008214 <_lv_style_set_opa>:
{
 8008214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008216:	4605      	mov	r5, r0
 8008218:	f8ad 1006 	strh.w	r1, [sp, #6]
 800821c:	f88d 2005 	strb.w	r2, [sp, #5]
    int32_t id = get_property_index(style, prop);
 8008220:	f7ff fe09 	bl	8007e36 <get_property_index>
    if(id >= 0) {
 8008224:	1e04      	subs	r4, r0, #0
 8008226:	db13      	blt.n	8008250 <_lv_style_set_opa+0x3c>
        attr_found = get_style_prop_attr(style, id);
 8008228:	4621      	mov	r1, r4
 800822a:	4628      	mov	r0, r5
 800822c:	f7ff fdf2 	bl	8007e14 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 8008230:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 8008234:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
 8008238:	0643      	lsls	r3, r0, #25
 800823a:	d109      	bne.n	8008250 <_lv_style_set_opa+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
 800823c:	2201      	movs	r2, #1
 800823e:	6828      	ldr	r0, [r5, #0]
 8008240:	3402      	adds	r4, #2
 8008242:	f10d 0105 	add.w	r1, sp, #5
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8008246:	4420      	add	r0, r4
 8008248:	f7ff fdb8 	bl	8007dbc <_lv_memcpy_small>
}
 800824c:	b004      	add	sp, #16
 800824e:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
 8008250:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
 8008252:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
 8008254:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 8008258:	f7ff fef0 	bl	800803c <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 800825c:	2800      	cmp	r0, #0
 800825e:	bf08      	it	eq
 8008260:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
 8008262:	1cc4      	adds	r4, r0, #3
    style_resize(style, size);
 8008264:	b2a4      	uxth	r4, r4
 8008266:	4621      	mov	r1, r4
 8008268:	4628      	mov	r0, r5
 800826a:	f7ff fe1e 	bl	8007eaa <style_resize>
    LV_ASSERT_MEM(style->map);
 800826e:	6828      	ldr	r0, [r5, #0]
 8008270:	f006 feaa 	bl	800efc8 <lv_debug_check_null>
 8008274:	682e      	ldr	r6, [r5, #0]
 8008276:	4603      	mov	r3, r0
 8008278:	b920      	cbnz	r0, 8008284 <_lv_style_set_opa+0x70>
 800827a:	4632      	mov	r2, r6
 800827c:	480c      	ldr	r0, [pc, #48]	; (80082b0 <_lv_style_set_opa+0x9c>)
 800827e:	f006 fea7 	bl	800efd0 <lv_debug_log_error>
 8008282:	e7fe      	b.n	8008282 <_lv_style_set_opa+0x6e>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8008284:	1f60      	subs	r0, r4, #5
 8008286:	2202      	movs	r2, #2
 8008288:	f10d 0106 	add.w	r1, sp, #6
 800828c:	4430      	add	r0, r6
 800828e:	f7ff fd95 	bl	8007dbc <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 8008292:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8008294:	1ee3      	subs	r3, r4, #3
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 8008296:	2201      	movs	r2, #1
 8008298:	f10d 0105 	add.w	r1, sp, #5
 800829c:	4418      	add	r0, r3
 800829e:	f7ff fd8d 	bl	8007dbc <_lv_memcpy_small>
 80082a2:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80082a4:	6828      	ldr	r0, [r5, #0]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f10d 010e 	add.w	r1, sp, #14
 80082ac:	e7cb      	b.n	8008246 <_lv_style_set_opa+0x32>
 80082ae:	bf00      	nop
 80082b0:	08015994 	.word	0x08015994

080082b4 <_lv_style_set_ptr>:
{
 80082b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80082b6:	4605      	mov	r5, r0
 80082b8:	9200      	str	r2, [sp, #0]
 80082ba:	f8ad 1006 	strh.w	r1, [sp, #6]
    int32_t id = get_property_index(style, prop);
 80082be:	f7ff fdba 	bl	8007e36 <get_property_index>
    if(id >= 0) {
 80082c2:	1e04      	subs	r4, r0, #0
 80082c4:	db12      	blt.n	80082ec <_lv_style_set_ptr+0x38>
        attr_found = get_style_prop_attr(style, id);
 80082c6:	4621      	mov	r1, r4
 80082c8:	4628      	mov	r0, r5
 80082ca:	f7ff fda3 	bl	8007e14 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
 80082ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 80082d2:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
 80082d6:	0643      	lsls	r3, r0, #25
 80082d8:	d108      	bne.n	80082ec <_lv_style_set_ptr+0x38>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
 80082da:	2204      	movs	r2, #4
 80082dc:	4669      	mov	r1, sp
 80082de:	6828      	ldr	r0, [r5, #0]
 80082e0:	3402      	adds	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 80082e2:	4420      	add	r0, r4
 80082e4:	f7ff fd6a 	bl	8007dbc <_lv_memcpy_small>
}
 80082e8:	b004      	add	sp, #16
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
 80082ec:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
 80082ee:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
 80082f0:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
 80082f4:	f7ff fea2 	bl	800803c <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
 80082f8:	2800      	cmp	r0, #0
 80082fa:	bf08      	it	eq
 80082fc:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(const void *);
 80082fe:	1d84      	adds	r4, r0, #6
    style_resize(style, size);
 8008300:	b2a4      	uxth	r4, r4
 8008302:	4621      	mov	r1, r4
 8008304:	4628      	mov	r0, r5
 8008306:	f7ff fdd0 	bl	8007eaa <style_resize>
    LV_ASSERT_MEM(style->map);
 800830a:	6828      	ldr	r0, [r5, #0]
 800830c:	f006 fe5c 	bl	800efc8 <lv_debug_check_null>
 8008310:	682e      	ldr	r6, [r5, #0]
 8008312:	4603      	mov	r3, r0
 8008314:	b920      	cbnz	r0, 8008320 <_lv_style_set_ptr+0x6c>
 8008316:	4632      	mov	r2, r6
 8008318:	480c      	ldr	r0, [pc, #48]	; (800834c <_lv_style_set_ptr+0x98>)
 800831a:	f006 fe59 	bl	800efd0 <lv_debug_log_error>
 800831e:	e7fe      	b.n	800831e <_lv_style_set_ptr+0x6a>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8008320:	f1a4 0008 	sub.w	r0, r4, #8
 8008324:	2202      	movs	r2, #2
 8008326:	f10d 0106 	add.w	r1, sp, #6
 800832a:	4430      	add	r0, r6
 800832c:	f7ff fd46 	bl	8007dbc <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 8008330:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 8008332:	1fa3      	subs	r3, r4, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 8008334:	2204      	movs	r2, #4
 8008336:	4669      	mov	r1, sp
 8008338:	4418      	add	r0, r3
 800833a:	f7ff fd3f 	bl	8007dbc <_lv_memcpy_small>
 800833e:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 8008340:	6828      	ldr	r0, [r5, #0]
 8008342:	2202      	movs	r2, #2
 8008344:	f10d 010e 	add.w	r1, sp, #14
 8008348:	e7cb      	b.n	80082e2 <_lv_style_set_ptr+0x2e>
 800834a:	bf00      	nop
 800834c:	08015994 	.word	0x08015994

08008350 <_lv_style_get_int>:
{
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	460e      	mov	r6, r1
 8008354:	4617      	mov	r7, r2
    if(style == NULL) return -1;
 8008356:	4604      	mov	r4, r0
 8008358:	b910      	cbnz	r0, 8008360 <_lv_style_get_int+0x10>
 800835a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800835e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
 8008360:	6803      	ldr	r3, [r0, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0f9      	beq.n	800835a <_lv_style_get_int+0xa>
    int32_t id = get_property_index(style, prop);
 8008366:	f7ff fd66 	bl	8007e36 <get_property_index>
    if(id < 0) {
 800836a:	1e05      	subs	r5, r0, #0
 800836c:	dbf5      	blt.n	800835a <_lv_style_get_int+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
 800836e:	6821      	ldr	r1, [r4, #0]
 8008370:	1cab      	adds	r3, r5, #2
 8008372:	4419      	add	r1, r3
 8008374:	2202      	movs	r2, #2
 8008376:	4638      	mov	r0, r7
 8008378:	f7ff fd20 	bl	8007dbc <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 800837c:	4629      	mov	r1, r5
 800837e:	4620      	mov	r0, r4
 8008380:	f7ff fd48 	bl	8007e14 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 8008384:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008388:	ea00 2016 	and.w	r0, r0, r6, lsr #8
 800838c:	e7e7      	b.n	800835e <_lv_style_get_int+0xe>

0800838e <_lv_style_get_opa>:
{
 800838e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008390:	460e      	mov	r6, r1
 8008392:	4617      	mov	r7, r2
    if(style == NULL) return -1;
 8008394:	4604      	mov	r4, r0
 8008396:	b910      	cbnz	r0, 800839e <_lv_style_get_opa+0x10>
 8008398:	f04f 30ff 	mov.w	r0, #4294967295
}
 800839c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
 800839e:	6803      	ldr	r3, [r0, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d0f9      	beq.n	8008398 <_lv_style_get_opa+0xa>
    int32_t id = get_property_index(style, prop);
 80083a4:	f7ff fd47 	bl	8007e36 <get_property_index>
    if(id < 0) {
 80083a8:	1e05      	subs	r5, r0, #0
 80083aa:	dbf5      	blt.n	8008398 <_lv_style_get_opa+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
 80083ac:	6821      	ldr	r1, [r4, #0]
 80083ae:	1cab      	adds	r3, r5, #2
 80083b0:	4419      	add	r1, r3
 80083b2:	2201      	movs	r2, #1
 80083b4:	4638      	mov	r0, r7
 80083b6:	f7ff fd01 	bl	8007dbc <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 80083ba:	4629      	mov	r1, r5
 80083bc:	4620      	mov	r0, r4
 80083be:	f7ff fd29 	bl	8007e14 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 80083c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80083c6:	ea00 2016 	and.w	r0, r0, r6, lsr #8
 80083ca:	e7e7      	b.n	800839c <_lv_style_get_opa+0xe>

080083cc <_lv_style_get_ptr>:
{
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	460e      	mov	r6, r1
 80083d0:	4617      	mov	r7, r2
    if(style == NULL) return -1;
 80083d2:	4604      	mov	r4, r0
 80083d4:	b910      	cbnz	r0, 80083dc <_lv_style_get_ptr+0x10>
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80083da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
 80083dc:	6803      	ldr	r3, [r0, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0f9      	beq.n	80083d6 <_lv_style_get_ptr+0xa>
    int32_t id = get_property_index(style, prop);
 80083e2:	f7ff fd28 	bl	8007e36 <get_property_index>
    if(id < 0) {
 80083e6:	1e05      	subs	r5, r0, #0
 80083e8:	dbf5      	blt.n	80083d6 <_lv_style_get_ptr+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
 80083ea:	6821      	ldr	r1, [r4, #0]
 80083ec:	1cab      	adds	r3, r5, #2
 80083ee:	4419      	add	r1, r3
 80083f0:	2204      	movs	r2, #4
 80083f2:	4638      	mov	r0, r7
 80083f4:	f7ff fce2 	bl	8007dbc <_lv_memcpy_small>
        attr_act = get_style_prop_attr(style, id);
 80083f8:	4629      	mov	r1, r5
 80083fa:	4620      	mov	r0, r4
 80083fc:	f7ff fd0a 	bl	8007e14 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 8008400:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008404:	ea00 2016 	and.w	r0, r0, r6, lsr #8
 8008408:	e7e7      	b.n	80083da <_lv_style_get_ptr+0xe>

0800840a <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
 800840a:	7902      	ldrb	r2, [r0, #4]
 800840c:	f012 0340 	ands.w	r3, r2, #64	; 0x40
 8008410:	d005      	beq.n	800841e <lv_style_list_get_local_style+0x14>
 8008412:	6803      	ldr	r3, [r0, #0]
    if(list->has_trans) return list->style_list[1];
 8008414:	0612      	lsls	r2, r2, #24
 8008416:	bf4c      	ite	mi
 8008418:	6858      	ldrmi	r0, [r3, #4]
    else return list->style_list[0];
 800841a:	6818      	ldrpl	r0, [r3, #0]
 800841c:	4770      	bx	lr
    if(!list->has_local) return NULL;
 800841e:	4618      	mov	r0, r3
}
 8008420:	4770      	bx	lr

08008422 <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
 8008422:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8008426:	2b00      	cmp	r3, #0
    return list->style_list[0];
 8008428:	bfba      	itte	lt
 800842a:	6803      	ldrlt	r3, [r0, #0]
 800842c:	6818      	ldrlt	r0, [r3, #0]
    if(!list->has_trans) return NULL;
 800842e:	2000      	movge	r0, #0
}
 8008430:	4770      	bx	lr

08008432 <_lv_style_list_reset>:
{
 8008432:	b538      	push	{r3, r4, r5, lr}
    if(list == NULL) return;
 8008434:	4604      	mov	r4, r0
 8008436:	b358      	cbz	r0, 8008490 <_lv_style_list_reset+0x5e>
    if(list->has_local) {
 8008438:	7903      	ldrb	r3, [r0, #4]
 800843a:	065a      	lsls	r2, r3, #25
 800843c:	d508      	bpl.n	8008450 <_lv_style_list_reset+0x1e>
        lv_style_t * local = lv_style_list_get_local_style(list);
 800843e:	f7ff ffe4 	bl	800840a <lv_style_list_get_local_style>
        if(local) {
 8008442:	4605      	mov	r5, r0
 8008444:	b120      	cbz	r0, 8008450 <_lv_style_list_reset+0x1e>
            lv_style_reset(local);
 8008446:	f7ff fdf1 	bl	800802c <lv_style_reset>
            lv_mem_free(local);
 800844a:	4628      	mov	r0, r5
 800844c:	f007 f89e 	bl	800f58c <lv_mem_free>
    if(list->has_trans) {
 8008450:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	da09      	bge.n	800846c <_lv_style_list_reset+0x3a>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
 8008458:	4620      	mov	r0, r4
 800845a:	f7ff ffe2 	bl	8008422 <_lv_style_list_get_transition_style>
        if(trans) {
 800845e:	4605      	mov	r5, r0
 8008460:	b120      	cbz	r0, 800846c <_lv_style_list_reset+0x3a>
            lv_style_reset(trans);
 8008462:	f7ff fde3 	bl	800802c <lv_style_reset>
            lv_mem_free(trans);
 8008466:	4628      	mov	r0, r5
 8008468:	f007 f890 	bl	800f58c <lv_mem_free>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
 800846c:	7923      	ldrb	r3, [r4, #4]
 800846e:	069b      	lsls	r3, r3, #26
 8008470:	d002      	beq.n	8008478 <_lv_style_list_reset+0x46>
 8008472:	6820      	ldr	r0, [r4, #0]
 8008474:	f007 f88a 	bl	800f58c <lv_mem_free>
    list->style_list = NULL;
 8008478:	2200      	movs	r2, #0
    list->style_cnt = 0;
 800847a:	7923      	ldrb	r3, [r4, #4]
    list->style_list = NULL;
 800847c:	6022      	str	r2, [r4, #0]
    list->has_trans = 0;
 800847e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008482:	f362 13c7 	bfi	r3, r2, #7, #1
 8008486:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
 8008488:	7963      	ldrb	r3, [r4, #5]
 800848a:	f362 0300 	bfi	r3, r2, #0, #1
 800848e:	7163      	strb	r3, [r4, #5]
}
 8008490:	bd38      	pop	{r3, r4, r5, pc}

08008492 <lv_style_list_copy>:
{
 8008492:	b538      	push	{r3, r4, r5, lr}
 8008494:	460c      	mov	r4, r1
 8008496:	4605      	mov	r5, r0
    _lv_style_list_reset(list_dest);
 8008498:	f7ff ffcb 	bl	8008432 <_lv_style_list_reset>
    if(list_src->style_list == NULL) return;
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	b1eb      	cbz	r3, 80084dc <lv_style_list_copy+0x4a>
    if(list_src->has_local == 0) {
 80084a0:	7923      	ldrb	r3, [r4, #4]
 80084a2:	b25a      	sxtb	r2, r3
 80084a4:	f003 003f 	and.w	r0, r3, #63	; 0x3f
 80084a8:	065b      	lsls	r3, r3, #25
 80084aa:	d429      	bmi.n	8008500 <lv_style_list_copy+0x6e>
        if(list_src->has_trans) {
 80084ac:	2a00      	cmp	r2, #0
 80084ae:	da16      	bge.n	80084de <lv_style_list_copy+0x4c>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 80084b0:	3801      	subs	r0, #1
 80084b2:	0080      	lsls	r0, r0, #2
 80084b4:	f007 f81a 	bl	800f4ec <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 80084b8:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 80084ba:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 80084bc:	6821      	ldr	r1, [r4, #0]
 80084be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80084c2:	3a01      	subs	r2, #1
 80084c4:	0092      	lsls	r2, r2, #2
 80084c6:	3104      	adds	r1, #4
 80084c8:	f007 f8ec 	bl	800f6a4 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 80084cc:	7923      	ldrb	r3, [r4, #4]
 80084ce:	792a      	ldrb	r2, [r5, #4]
 80084d0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80084d4:	3b01      	subs	r3, #1
 80084d6:	f363 0205 	bfi	r2, r3, #0, #6
 80084da:	712a      	strb	r2, [r5, #4]
}
 80084dc:	bd38      	pop	{r3, r4, r5, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
 80084de:	0080      	lsls	r0, r0, #2
 80084e0:	f007 f804 	bl	800f4ec <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
 80084e4:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
 80084e6:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
 80084e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80084ec:	0092      	lsls	r2, r2, #2
 80084ee:	6821      	ldr	r1, [r4, #0]
 80084f0:	f007 f8d8 	bl	800f6a4 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt;
 80084f4:	7922      	ldrb	r2, [r4, #4]
 80084f6:	792b      	ldrb	r3, [r5, #4]
 80084f8:	f362 0305 	bfi	r3, r2, #0, #6
 80084fc:	712b      	strb	r3, [r5, #4]
 80084fe:	e7ed      	b.n	80084dc <lv_style_list_copy+0x4a>
        if(list_src->has_trans) {
 8008500:	2a00      	cmp	r2, #0
 8008502:	da22      	bge.n	800854a <lv_style_list_copy+0xb8>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 8008504:	3802      	subs	r0, #2
 8008506:	0080      	lsls	r0, r0, #2
 8008508:	f006 fff0 	bl	800f4ec <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800850c:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800850e:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
 8008510:	6821      	ldr	r1, [r4, #0]
 8008512:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008516:	3a02      	subs	r2, #2
 8008518:	0092      	lsls	r2, r2, #2
 800851a:	3108      	adds	r1, #8
 800851c:	f007 f8c2 	bl	800f6a4 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 2;
 8008520:	7923      	ldrb	r3, [r4, #4]
 8008522:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008526:	3b02      	subs	r3, #2
            list_dest->style_cnt = list_src->style_cnt - 1;
 8008528:	792a      	ldrb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
 800852a:	4628      	mov	r0, r5
            list_dest->style_cnt = list_src->style_cnt - 1;
 800852c:	f363 0205 	bfi	r2, r3, #0, #6
 8008530:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
 8008532:	f7ff fd53 	bl	8007fdc <get_alloc_local_style>
 8008536:	4605      	mov	r5, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
 8008538:	4620      	mov	r0, r4
 800853a:	f7ff fd4f 	bl	8007fdc <get_alloc_local_style>
 800853e:	4601      	mov	r1, r0
 8008540:	4628      	mov	r0, r5
}
 8008542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
 8008546:	f7ff bd8c 	b.w	8008062 <lv_style_copy>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800854a:	3801      	subs	r0, #1
 800854c:	0080      	lsls	r0, r0, #2
 800854e:	f006 ffcd 	bl	800f4ec <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008552:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008554:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 8008556:	6821      	ldr	r1, [r4, #0]
 8008558:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800855c:	3a01      	subs	r2, #1
 800855e:	0092      	lsls	r2, r2, #2
 8008560:	3104      	adds	r1, #4
 8008562:	f007 f89f 	bl	800f6a4 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 8008566:	7923      	ldrb	r3, [r4, #4]
 8008568:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800856c:	3b01      	subs	r3, #1
 800856e:	e7db      	b.n	8008528 <lv_style_list_copy+0x96>

08008570 <_lv_style_list_add_trans_style>:
{
 8008570:	b538      	push	{r3, r4, r5, lr}
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
 8008572:	f990 3004 	ldrsb.w	r3, [r0, #4]
{
 8008576:	4605      	mov	r5, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
 8008578:	2b00      	cmp	r3, #0
 800857a:	da03      	bge.n	8008584 <_lv_style_list_add_trans_style+0x14>
}
 800857c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
 8008580:	f7ff bf4f 	b.w	8008422 <_lv_style_list_get_transition_style>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
 8008584:	2004      	movs	r0, #4
 8008586:	f006 ffb1 	bl	800f4ec <lv_mem_alloc>
 800858a:	4604      	mov	r4, r0
    LV_ASSERT_MEM(trans_style);
 800858c:	f006 fd1c 	bl	800efc8 <lv_debug_check_null>
 8008590:	4603      	mov	r3, r0
 8008592:	b920      	cbnz	r0, 800859e <_lv_style_list_add_trans_style+0x2e>
 8008594:	4622      	mov	r2, r4
 8008596:	480c      	ldr	r0, [pc, #48]	; (80085c8 <_lv_style_list_add_trans_style+0x58>)
 8008598:	f006 fd1a 	bl	800efd0 <lv_debug_log_error>
 800859c:	e7fe      	b.n	800859c <_lv_style_list_add_trans_style+0x2c>
    if(trans_style == NULL) {
 800859e:	b18c      	cbz	r4, 80085c4 <_lv_style_list_add_trans_style+0x54>
    lv_style_init(trans_style);
 80085a0:	4620      	mov	r0, r4
 80085a2:	f7ff fc89 	bl	8007eb8 <lv_style_init>
    _lv_style_list_add_style(list, trans_style);
 80085a6:	4621      	mov	r1, r4
 80085a8:	4628      	mov	r0, r5
 80085aa:	f7ff fcd9 	bl	8007f60 <_lv_style_list_add_style>
    list->has_trans = 1;
 80085ae:	792b      	ldrb	r3, [r5, #4]
 80085b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b4:	712b      	strb	r3, [r5, #4]
    if(list->has_local) {
 80085b6:	065b      	lsls	r3, r3, #25
        lv_style_t * tmp = list->style_list[0];
 80085b8:	bf42      	ittt	mi
 80085ba:	682b      	ldrmi	r3, [r5, #0]
        list->style_list[0] = list->style_list[1];
 80085bc:	e9d3 2100 	ldrdmi	r2, r1, [r3]
        list->style_list[1] = tmp;
 80085c0:	e9c3 1200 	strdmi	r1, r2, [r3]
}
 80085c4:	4620      	mov	r0, r4
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	08015994 	.word	0x08015994

080085cc <_lv_style_list_set_local_int>:
{
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	460c      	mov	r4, r1
 80085d0:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
 80085d2:	f7ff fd03 	bl	8007fdc <get_alloc_local_style>
    _lv_style_set_int(local, prop, value);
 80085d6:	462a      	mov	r2, r5
 80085d8:	4621      	mov	r1, r4
}
 80085da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _lv_style_set_int(local, prop, value);
 80085de:	f7ff bd7d 	b.w	80080dc <_lv_style_set_int>

080085e2 <_lv_style_list_set_local_opa>:
{
 80085e2:	b538      	push	{r3, r4, r5, lr}
 80085e4:	460c      	mov	r4, r1
 80085e6:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
 80085e8:	f7ff fcf8 	bl	8007fdc <get_alloc_local_style>
    _lv_style_set_opa(local, prop, value);
 80085ec:	462a      	mov	r2, r5
 80085ee:	4621      	mov	r1, r4
}
 80085f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _lv_style_set_opa(local, prop, value);
 80085f4:	f7ff be0e 	b.w	8008214 <_lv_style_set_opa>

080085f8 <_lv_style_list_set_local_color>:
{
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	460c      	mov	r4, r1
 80085fc:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
 80085fe:	f7ff fced 	bl	8007fdc <get_alloc_local_style>
    _lv_style_set_color(local, prop, value);
 8008602:	462a      	mov	r2, r5
 8008604:	4621      	mov	r1, r4
}
 8008606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _lv_style_set_color(local, prop, value);
 800860a:	f7ff bdb5 	b.w	8008178 <_lv_style_set_color>

0800860e <_lv_style_list_get_int>:
{
 800860e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008612:	4689      	mov	r9, r1
 8008614:	4692      	mov	sl, r2
    if(list == NULL) return LV_RES_INV;
 8008616:	4605      	mov	r5, r0
 8008618:	b318      	cbz	r0, 8008662 <_lv_style_list_get_int+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
 800861a:	6800      	ldr	r0, [r0, #0]
 800861c:	b308      	cbz	r0, 8008662 <_lv_style_list_get_int+0x54>
    lv_style_int_t value_act = 0;
 800861e:	2600      	movs	r6, #0
    int16_t weight = -1;
 8008620:	f04f 34ff 	mov.w	r4, #4294967295
    lv_style_int_t value_act = 0;
 8008624:	af02      	add	r7, sp, #8
    int16_t weight_goal = attr;
 8008626:	ea4f 2b11 	mov.w	fp, r1, lsr #8
    lv_style_int_t value_act = 0;
 800862a:	f827 6d02 	strh.w	r6, [r7, #-2]!
    for(ci = 0; ci < list->style_cnt; ci++) {
 800862e:	792b      	ldrb	r3, [r5, #4]
 8008630:	fa0f f886 	sxth.w	r8, r6
 8008634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008638:	4598      	cmp	r8, r3
 800863a:	db03      	blt.n	8008644 <_lv_style_list_get_int+0x36>
    if(weight >= 0) return LV_RES_OK;
 800863c:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
 800863e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8008642:	e00e      	b.n	8008662 <_lv_style_list_get_int+0x54>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 8008644:	b2f1      	uxtb	r1, r6
 8008646:	4628      	mov	r0, r5
 8008648:	f7ff fbc3 	bl	8007dd2 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
 800864c:	463a      	mov	r2, r7
 800864e:	4649      	mov	r1, r9
 8008650:	f7ff fe7e 	bl	8008350 <_lv_style_get_int>
        if(weight_act == weight_goal) {
 8008654:	4583      	cmp	fp, r0
 8008656:	d107      	bne.n	8008668 <_lv_style_list_get_int+0x5a>
            return LV_RES_OK;
 8008658:	2001      	movs	r0, #1
            *res = value_act;
 800865a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800865e:	f8aa 3000 	strh.w	r3, [sl]
}
 8008662:	b003      	add	sp, #12
 8008664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8008668:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	da07      	bge.n	8008680 <_lv_style_list_get_int+0x72>
 8008670:	2800      	cmp	r0, #0
 8008672:	db05      	blt.n	8008680 <_lv_style_list_get_int+0x72>
 8008674:	f1b8 0f00 	cmp.w	r8, #0
 8008678:	d102      	bne.n	8008680 <_lv_style_list_get_int+0x72>
 800867a:	796b      	ldrb	r3, [r5, #5]
 800867c:	07db      	lsls	r3, r3, #31
 800867e:	d5eb      	bpl.n	8008658 <_lv_style_list_get_int+0x4a>
        else if(weight_act > weight) {
 8008680:	4284      	cmp	r4, r0
            *res = value_act;
 8008682:	bfbe      	ittt	lt
 8008684:	f8bd 3006 	ldrhlt.w	r3, [sp, #6]
 8008688:	4604      	movlt	r4, r0
 800868a:	f8aa 3000 	strhlt.w	r3, [sl]
 800868e:	3601      	adds	r6, #1
 8008690:	e7cd      	b.n	800862e <_lv_style_list_get_int+0x20>

08008692 <_lv_style_list_get_color>:
{
 8008692:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008696:	4689      	mov	r9, r1
 8008698:	4692      	mov	sl, r2
    if(list == NULL) return LV_RES_INV;
 800869a:	4605      	mov	r5, r0
 800869c:	b318      	cbz	r0, 80086e6 <_lv_style_list_get_color+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
 800869e:	6800      	ldr	r0, [r0, #0]
 80086a0:	b308      	cbz	r0, 80086e6 <_lv_style_list_get_color+0x54>
    value_act.full = 0;
 80086a2:	2600      	movs	r6, #0
    int16_t weight = -1;
 80086a4:	f04f 34ff 	mov.w	r4, #4294967295
    value_act.full = 0;
 80086a8:	af02      	add	r7, sp, #8
    int16_t weight_goal = attr;
 80086aa:	ea4f 2b11 	mov.w	fp, r1, lsr #8
    value_act.full = 0;
 80086ae:	f827 6d04 	strh.w	r6, [r7, #-4]!
    for(ci = 0; ci < list->style_cnt; ci++) {
 80086b2:	792b      	ldrb	r3, [r5, #4]
 80086b4:	fa0f f886 	sxth.w	r8, r6
 80086b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086bc:	4598      	cmp	r8, r3
 80086be:	db03      	blt.n	80086c8 <_lv_style_list_get_color+0x36>
    if(weight >= 0)  return LV_RES_OK;
 80086c0:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
 80086c2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80086c6:	e00e      	b.n	80086e6 <_lv_style_list_get_color+0x54>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 80086c8:	b2f1      	uxtb	r1, r6
 80086ca:	4628      	mov	r0, r5
 80086cc:	f7ff fb81 	bl	8007dd2 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
 80086d0:	463a      	mov	r2, r7
 80086d2:	4649      	mov	r1, r9
 80086d4:	f7ff fe3c 	bl	8008350 <_lv_style_get_int>
        if(weight_act == weight_goal) {
 80086d8:	4583      	cmp	fp, r0
 80086da:	d107      	bne.n	80086ec <_lv_style_list_get_color+0x5a>
            return LV_RES_OK;
 80086dc:	2001      	movs	r0, #1
            *res = value_act;
 80086de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80086e2:	f8aa 3000 	strh.w	r3, [sl]
}
 80086e6:	b003      	add	sp, #12
 80086e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 80086ec:	f995 3004 	ldrsb.w	r3, [r5, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	da07      	bge.n	8008704 <_lv_style_list_get_color+0x72>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	db05      	blt.n	8008704 <_lv_style_list_get_color+0x72>
 80086f8:	f1b8 0f00 	cmp.w	r8, #0
 80086fc:	d102      	bne.n	8008704 <_lv_style_list_get_color+0x72>
 80086fe:	796b      	ldrb	r3, [r5, #5]
 8008700:	07db      	lsls	r3, r3, #31
 8008702:	d5eb      	bpl.n	80086dc <_lv_style_list_get_color+0x4a>
        else if(weight_act > weight) {
 8008704:	4284      	cmp	r4, r0
            *res = value_act;
 8008706:	bfbe      	ittt	lt
 8008708:	f8bd 3004 	ldrhlt.w	r3, [sp, #4]
 800870c:	4604      	movlt	r4, r0
 800870e:	f8aa 3000 	strhlt.w	r3, [sl]
 8008712:	3601      	adds	r6, #1
 8008714:	e7cd      	b.n	80086b2 <_lv_style_list_get_color+0x20>

08008716 <_lv_style_list_get_opa>:
{
 8008716:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871a:	4689      	mov	r9, r1
 800871c:	4692      	mov	sl, r2
    if(list == NULL) return LV_RES_INV;
 800871e:	4605      	mov	r5, r0
 8008720:	b318      	cbz	r0, 800876a <_lv_style_list_get_opa+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
 8008722:	6800      	ldr	r0, [r0, #0]
 8008724:	b308      	cbz	r0, 800876a <_lv_style_list_get_opa+0x54>
    lv_opa_t value_act = LV_OPA_TRANSP;
 8008726:	2600      	movs	r6, #0
    int16_t weight = -1;
 8008728:	f04f 34ff 	mov.w	r4, #4294967295
    lv_opa_t value_act = LV_OPA_TRANSP;
 800872c:	af02      	add	r7, sp, #8
    int16_t weight_goal = attr;
 800872e:	ea4f 2b11 	mov.w	fp, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
 8008732:	f807 6d01 	strb.w	r6, [r7, #-1]!
    for(ci = 0; ci < list->style_cnt; ci++) {
 8008736:	792b      	ldrb	r3, [r5, #4]
 8008738:	fa0f f886 	sxth.w	r8, r6
 800873c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008740:	4598      	cmp	r8, r3
 8008742:	db03      	blt.n	800874c <_lv_style_list_get_opa+0x36>
    if(weight >= 0)  return LV_RES_OK;
 8008744:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
 8008746:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800874a:	e00e      	b.n	800876a <_lv_style_list_get_opa+0x54>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800874c:	b2f1      	uxtb	r1, r6
 800874e:	4628      	mov	r0, r5
 8008750:	f7ff fb3f 	bl	8007dd2 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
 8008754:	463a      	mov	r2, r7
 8008756:	4649      	mov	r1, r9
 8008758:	f7ff fe19 	bl	800838e <_lv_style_get_opa>
        if(weight_act == weight_goal) {
 800875c:	4583      	cmp	fp, r0
 800875e:	d107      	bne.n	8008770 <_lv_style_list_get_opa+0x5a>
            return LV_RES_OK;
 8008760:	2001      	movs	r0, #1
            *res = value_act;
 8008762:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008766:	f88a 3000 	strb.w	r3, [sl]
}
 800876a:	b003      	add	sp, #12
 800876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 8008770:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	da07      	bge.n	8008788 <_lv_style_list_get_opa+0x72>
 8008778:	2800      	cmp	r0, #0
 800877a:	db05      	blt.n	8008788 <_lv_style_list_get_opa+0x72>
 800877c:	f1b8 0f00 	cmp.w	r8, #0
 8008780:	d102      	bne.n	8008788 <_lv_style_list_get_opa+0x72>
 8008782:	796b      	ldrb	r3, [r5, #5]
 8008784:	07db      	lsls	r3, r3, #31
 8008786:	d5eb      	bpl.n	8008760 <_lv_style_list_get_opa+0x4a>
        else if(weight_act > weight) {
 8008788:	4284      	cmp	r4, r0
            *res = value_act;
 800878a:	bfbe      	ittt	lt
 800878c:	f89d 3007 	ldrblt.w	r3, [sp, #7]
 8008790:	4604      	movlt	r4, r0
 8008792:	f88a 3000 	strblt.w	r3, [sl]
 8008796:	3601      	adds	r6, #1
 8008798:	e7cd      	b.n	8008736 <_lv_style_list_get_opa+0x20>

0800879a <_lv_style_list_get_ptr>:
{
 800879a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800879e:	4688      	mov	r8, r1
 80087a0:	4691      	mov	r9, r2
    if(list == NULL) return LV_RES_INV;
 80087a2:	4605      	mov	r5, r0
 80087a4:	b1f0      	cbz	r0, 80087e4 <_lv_style_list_get_ptr+0x4a>
    if(list->style_list == NULL) return LV_RES_INV;
 80087a6:	6800      	ldr	r0, [r0, #0]
 80087a8:	b1e0      	cbz	r0, 80087e4 <_lv_style_list_get_ptr+0x4a>
    for(ci = 0; ci < list->style_cnt; ci++) {
 80087aa:	2600      	movs	r6, #0
    int16_t weight = -1;
 80087ac:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight_goal = attr;
 80087b0:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
 80087b4:	792b      	ldrb	r3, [r5, #4]
 80087b6:	b237      	sxth	r7, r6
 80087b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087bc:	429f      	cmp	r7, r3
 80087be:	db03      	blt.n	80087c8 <_lv_style_list_get_ptr+0x2e>
    if(weight >= 0)  return LV_RES_OK;
 80087c0:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
 80087c2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80087c6:	e00d      	b.n	80087e4 <_lv_style_list_get_ptr+0x4a>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 80087c8:	b2f1      	uxtb	r1, r6
 80087ca:	4628      	mov	r0, r5
 80087cc:	f7ff fb01 	bl	8007dd2 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
 80087d0:	aa01      	add	r2, sp, #4
 80087d2:	4641      	mov	r1, r8
 80087d4:	f7ff fdfa 	bl	80083cc <_lv_style_get_ptr>
        if(weight_act == weight_goal) {
 80087d8:	4582      	cmp	sl, r0
 80087da:	d106      	bne.n	80087ea <_lv_style_list_get_ptr+0x50>
            return LV_RES_OK;
 80087dc:	2001      	movs	r0, #1
            *res = value_act;
 80087de:	9b01      	ldr	r3, [sp, #4]
 80087e0:	f8c9 3000 	str.w	r3, [r9]
}
 80087e4:	b002      	add	sp, #8
 80087e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 80087ea:	f995 3004 	ldrsb.w	r3, [r5, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	da05      	bge.n	80087fe <_lv_style_list_get_ptr+0x64>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	db03      	blt.n	80087fe <_lv_style_list_get_ptr+0x64>
 80087f6:	b917      	cbnz	r7, 80087fe <_lv_style_list_get_ptr+0x64>
 80087f8:	796b      	ldrb	r3, [r5, #5]
 80087fa:	07db      	lsls	r3, r3, #31
 80087fc:	d5ee      	bpl.n	80087dc <_lv_style_list_get_ptr+0x42>
        else if(weight_act > weight) {
 80087fe:	4284      	cmp	r4, r0
            *res = value_act;
 8008800:	bfbe      	ittt	lt
 8008802:	9b01      	ldrlt	r3, [sp, #4]
 8008804:	4604      	movlt	r4, r0
 8008806:	f8c9 3000 	strlt.w	r3, [r9]
 800880a:	3601      	adds	r6, #1
 800880c:	e7d2      	b.n	80087b4 <_lv_style_list_get_ptr+0x1a>

0800880e <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800880e:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008810:	f3c1 03c4 	ubfx	r3, r1, #3, #5
 8008814:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
 8008818:	4373      	muls	r3, r6
 800881a:	f3c0 04c4 	ubfx	r4, r0, #3, #5
 800881e:	fb02 3404 	mla	r4, r2, r4, r3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008822:	f000 0707 	and.w	r7, r0, #7
 8008826:	f3c0 3342 	ubfx	r3, r0, #13, #3
 800882a:	f001 0c07 	and.w	ip, r1, #7
 800882e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008832:	f3c1 3742 	ubfx	r7, r1, #13, #3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008836:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800883a:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800883e:	f3c1 2104 	ubfx	r1, r1, #8, #5
 8008842:	4371      	muls	r1, r6
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008844:	4377      	muls	r7, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8008846:	f3c0 2004 	ubfx	r0, r0, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800884a:	fb02 7303 	mla	r3, r2, r3, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800884e:	fb02 1200 	mla	r2, r2, r0, r1
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8008852:	f04f 0000 	mov.w	r0, #0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008856:	3380      	adds	r3, #128	; 0x80
 8008858:	436b      	muls	r3, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800885a:	3480      	adds	r4, #128	; 0x80
 800885c:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800885e:	3280      	adds	r2, #128	; 0x80
 8008860:	436a      	muls	r2, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008862:	0e99      	lsrs	r1, r3, #26
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008864:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    return ret;
 8008868:	f361 0002 	bfi	r0, r1, #0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800886c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    return ret;
 8008870:	f364 00c7 	bfi	r0, r4, #3, #5
 8008874:	f362 200c 	bfi	r0, r2, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008878:	0ddb      	lsrs	r3, r3, #23
    return ret;
 800887a:	f363 304f 	bfi	r0, r3, #13, #3
}
 800887e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008880 <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8008880:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 8008882:	2a02      	cmp	r2, #2
{
 8008884:	b4f0      	push	{r4, r5, r6, r7}
 8008886:	f3c3 0cc4 	ubfx	ip, r3, #3, #5
 800888a:	f003 0707 	and.w	r7, r3, #7
 800888e:	f3c3 2404 	ubfx	r4, r3, #8, #5
 8008892:	f3c3 3342 	ubfx	r3, r3, #13, #3
    if(opa <= LV_OPA_MIN) return bg;
 8008896:	d80b      	bhi.n	80088b0 <color_blend_true_color_additive+0x30>
 8008898:	f04f 0000 	mov.w	r0, #0
 800889c:	f367 0002 	bfi	r0, r7, #0, #3
 80088a0:	f36c 00c7 	bfi	r0, ip, #3, #5
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 80088a4:	f364 200c 	bfi	r0, r4, #8, #5
 80088a8:	f363 304f 	bfi	r0, r3, #13, #3

    return lv_color_mix(fg, bg, opa);
}
 80088ac:	bcf0      	pop	{r4, r5, r6, r7}
 80088ae:	4770      	bx	lr
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 80088b0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    tmp = bg.ch.red + fg.ch.red;
 80088b4:	f3c0 05c4 	ubfx	r5, r0, #3, #5
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 80088b8:	f000 0707 	and.w	r7, r0, #7
    tmp = bg.ch.red + fg.ch.red;
 80088bc:	4465      	add	r5, ip
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 80088be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80088c2:	f3c0 3742 	ubfx	r7, r0, #13, #3
 80088c6:	443b      	add	r3, r7
    fg.ch.red = LV_MATH_MIN(tmp, 31);
 80088c8:	2d1f      	cmp	r5, #31
    tmp = bg.ch.blue + fg.ch.blue;
 80088ca:	f3c0 2704 	ubfx	r7, r0, #8, #5
 80088ce:	443c      	add	r4, r7
    fg.ch.red = LV_MATH_MIN(tmp, 31);
 80088d0:	bf28      	it	cs
 80088d2:	251f      	movcs	r5, #31
    tmp = LV_MATH_MIN(tmp, 63);
 80088d4:	2b3f      	cmp	r3, #63	; 0x3f
 80088d6:	bf28      	it	cs
 80088d8:	233f      	movcs	r3, #63	; 0x3f
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
 80088da:	2c1f      	cmp	r4, #31
 80088dc:	bf28      	it	cs
 80088de:	241f      	movcs	r4, #31
    if(opa == LV_OPA_COVER) return fg;
 80088e0:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.green_h = tmp >> 3;
 80088e2:	f3c3 0cc2 	ubfx	ip, r3, #3, #3
    fg.ch.red = LV_MATH_MIN(tmp, 31);
 80088e6:	f005 051f 	and.w	r5, r5, #31
    fg.ch.green_l = tmp & 0x7;
 80088ea:	f003 0307 	and.w	r3, r3, #7
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
 80088ee:	f004 041f 	and.w	r4, r4, #31
    if(opa == LV_OPA_COVER) return fg;
 80088f2:	d106      	bne.n	8008902 <color_blend_true_color_additive+0x82>
 80088f4:	f04f 0000 	mov.w	r0, #0
 80088f8:	f36c 0002 	bfi	r0, ip, #0, #3
 80088fc:	f365 00c7 	bfi	r0, r5, #3, #5
 8008900:	e7d0      	b.n	80088a4 <color_blend_true_color_additive+0x24>
    return lv_color_mix(fg, bg, opa);
 8008902:	f36c 0002 	bfi	r0, ip, #0, #3
 8008906:	f365 00c7 	bfi	r0, r5, #3, #5
 800890a:	f364 200c 	bfi	r0, r4, #8, #5
 800890e:	f363 304f 	bfi	r0, r3, #13, #3
}
 8008912:	bcf0      	pop	{r4, r5, r6, r7}
    return lv_color_mix(fg, bg, opa);
 8008914:	f7ff bf7b 	b.w	800880e <lv_color_mix>

08008918 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8008918:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 800891a:	2a02      	cmp	r2, #2
{
 800891c:	b4f0      	push	{r4, r5, r6, r7}
 800891e:	f003 0707 	and.w	r7, r3, #7
 8008922:	f3c3 05c4 	ubfx	r5, r3, #3, #5
 8008926:	f3c3 2404 	ubfx	r4, r3, #8, #5
 800892a:	f3c3 3342 	ubfx	r3, r3, #13, #3
    if(opa <= LV_OPA_MIN) return bg;
 800892e:	d80b      	bhi.n	8008948 <color_blend_true_color_subtractive+0x30>
#endif

    tmp = bg.ch.blue - fg.ch.blue;
    fg.ch.blue = LV_MATH_MAX(tmp, 0);

    if(opa == LV_OPA_COVER) return fg;
 8008930:	f04f 0000 	mov.w	r0, #0
 8008934:	f367 0002 	bfi	r0, r7, #0, #3
 8008938:	f365 00c7 	bfi	r0, r5, #3, #5
 800893c:	f364 200c 	bfi	r0, r4, #8, #5
 8008940:	f363 304f 	bfi	r0, r3, #13, #3

    return lv_color_mix(fg, bg, opa);
}
 8008944:	bcf0      	pop	{r4, r5, r6, r7}
 8008946:	4770      	bx	lr
    tmp = bg.ch.red - fg.ch.red;
 8008948:	f3c0 0cc4 	ubfx	ip, r0, #3, #5
 800894c:	eba5 050c 	sub.w	r5, r5, ip
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 8008950:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    tmp = bg.ch.blue - fg.ch.blue;
 8008954:	f3c0 2c04 	ubfx	ip, r0, #8, #5
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 8008958:	f000 0707 	and.w	r7, r0, #7
 800895c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    tmp = bg.ch.blue - fg.ch.blue;
 8008960:	eba4 040c 	sub.w	r4, r4, ip
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 8008964:	f3c0 3742 	ubfx	r7, r0, #13, #3
 8008968:	443b      	add	r3, r7
    fg.ch.red = LV_MATH_MAX(tmp, 0);
 800896a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
 800896e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    if(opa == LV_OPA_COVER) return fg;
 8008972:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.green_h = tmp >> 3;
 8008974:	f3c3 07c2 	ubfx	r7, r3, #3, #3
    fg.ch.red = LV_MATH_MAX(tmp, 0);
 8008978:	f005 051f 	and.w	r5, r5, #31
    fg.ch.green_l = tmp & 0x7;
 800897c:	f003 0307 	and.w	r3, r3, #7
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
 8008980:	f004 041f 	and.w	r4, r4, #31
    if(opa == LV_OPA_COVER) return fg;
 8008984:	d0d4      	beq.n	8008930 <color_blend_true_color_subtractive+0x18>
    return lv_color_mix(fg, bg, opa);
 8008986:	f367 0002 	bfi	r0, r7, #0, #3
 800898a:	f365 00c7 	bfi	r0, r5, #3, #5
 800898e:	f364 200c 	bfi	r0, r4, #8, #5
 8008992:	f363 304f 	bfi	r0, r3, #13, #3
}
 8008996:	bcf0      	pop	{r4, r5, r6, r7}
    return lv_color_mix(fg, bg, opa);
 8008998:	f7ff bf39 	b.w	800880e <lv_color_mix>

0800899c <_lv_blend_fill>:
{
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	b08d      	sub	sp, #52	; 0x34
 80089a2:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 80089a6:	469b      	mov	fp, r3
 80089a8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
 80089ac:	2c01      	cmp	r4, #1
{
 80089ae:	4680      	mov	r8, r0
 80089b0:	468a      	mov	sl, r1
 80089b2:	4616      	mov	r6, r2
 80089b4:	9308      	str	r3, [sp, #32]
 80089b6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
    if(opa < LV_OPA_MIN) return;
 80089ba:	f240 80ad 	bls.w	8008b18 <_lv_blend_fill+0x17c>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 80aa 	beq.w	8008b18 <_lv_blend_fill+0x17c>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80089c4:	f7fe ff44 	bl	8007850 <_lv_refr_get_disp_refreshing>
 80089c8:	4607      	mov	r7, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80089ca:	f005 fd3c 	bl	800e446 <lv_disp_get_buf>
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 80089ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    lv_color_t * disp_buf = vdb->buf_act;
 80089d0:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80089d2:	4681      	mov	r9, r0
    lv_color_t * disp_buf = vdb->buf_act;
 80089d4:	9306      	str	r3, [sp, #24]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 80089d6:	b10a      	cbz	r2, 80089dc <_lv_blend_fill+0x40>
 80089d8:	4638      	mov	r0, r7
 80089da:	4790      	blx	r2
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
 80089dc:	4652      	mov	r2, sl
 80089de:	4641      	mov	r1, r8
 80089e0:	a80a      	add	r0, sp, #40	; 0x28
 80089e2:	f006 f864 	bl	800eaae <_lv_area_intersect>
    if(!is_common) return;
 80089e6:	2800      	cmp	r0, #0
 80089e8:	f000 8096 	beq.w	8008b18 <_lv_blend_fill+0x17c>
    draw_area.x1 -= disp_area->x1;
 80089ec:	f8b9 c010 	ldrh.w	ip, [r9, #16]
 80089f0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    draw_area.x2 -= disp_area->x1;
 80089f4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    draw_area.y1 -= disp_area->y1;
 80089f8:	f8b9 8012 	ldrh.w	r8, [r9, #18]
 80089fc:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
    draw_area.x1 -= disp_area->x1;
 8008a00:	eba1 010c 	sub.w	r1, r1, ip
    draw_area.x2 -= disp_area->x1;
 8008a04:	eba2 020c 	sub.w	r2, r2, ip
    draw_area.y2 -= disp_area->y1;
 8008a08:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
    draw_area.x1 -= disp_area->x1;
 8008a0c:	b289      	uxth	r1, r1
    draw_area.y1 -= disp_area->y1;
 8008a0e:	eba0 0008 	sub.w	r0, r0, r8
    draw_area.x1 -= disp_area->x1;
 8008a12:	fa0f fe81 	sxth.w	lr, r1
    draw_area.y1 -= disp_area->y1;
 8008a16:	b200      	sxth	r0, r0
    draw_area.x2 -= disp_area->x1;
 8008a18:	b292      	uxth	r2, r2
    draw_area.y2 -= disp_area->y1;
 8008a1a:	ebac 0c08 	sub.w	ip, ip, r8
    draw_area.x1 -= disp_area->x1;
 8008a1e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
    draw_area.y1 -= disp_area->y1;
 8008a22:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    draw_area.x2 -= disp_area->x1;
 8008a26:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    draw_area.y2 -= disp_area->y1;
 8008a2a:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
    if(mask && disp->driver.antialiasing == 0)
 8008a2e:	f1bb 0f00 	cmp.w	fp, #0
 8008a32:	d141      	bne.n	8008ab8 <_lv_blend_fill+0x11c>
    if(disp->driver.set_px_cb) {
 8008a34:	697f      	ldr	r7, [r7, #20]
 8008a36:	2f00      	cmp	r7, #0
 8008a38:	d15a      	bne.n	8008af0 <_lv_blend_fill+0x154>
    else if(mode == LV_BLEND_MODE_NORMAL) {
 8008a3a:	2d00      	cmp	r5, #0
 8008a3c:	f040 8219 	bne.w	8008e72 <_lv_blend_fill+0x4d6>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8008a40:	f7fe ff06 	bl	8007850 <_lv_refr_get_disp_refreshing>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008a44:	f8b9 7014 	ldrh.w	r7, [r9, #20]
 8008a48:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 8008a4c:	3701      	adds	r7, #1
 8008a4e:	1aff      	subs	r7, r7, r3
 8008a50:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    int32_t draw_area_w = lv_area_get_width(draw_area);
 8008a54:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8008a58:	3301      	adds	r3, #1
 8008a5a:	1a9b      	subs	r3, r3, r2
 8008a5c:	b21b      	sxth	r3, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008a5e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008a62:	9305      	str	r3, [sp, #20]
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8008a64:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8008a68:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008a6a:	3101      	adds	r1, #1
 8008a6c:	1ac9      	subs	r1, r1, r3
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8008a6e:	fb03 2207 	mla	r2, r3, r7, r2
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8008a72:	b209      	sxth	r1, r1
 8008a74:	9109      	str	r1, [sp, #36]	; 0x24
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8008a76:	9906      	ldr	r1, [sp, #24]
 8008a78:	fa1f f886 	uxth.w	r8, r6
 8008a7c:	eb01 0a42 	add.w	sl, r1, r2, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8008a80:	9908      	ldr	r1, [sp, #32]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8008a82:	9007      	str	r0, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8008a84:	2901      	cmp	r1, #1
 8008a86:	f040 8136 	bne.w	8008cf6 <_lv_blend_fill+0x35a>
        if(opa > LV_OPA_MAX) {
 8008a8a:	2cfd      	cmp	r4, #253	; 0xfd
 8008a8c:	f240 809f 	bls.w	8008bce <_lv_blend_fill+0x232>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 8008a90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 8098 	beq.w	8008bc8 <_lv_blend_fill+0x22c>
 8008a98:	a80a      	add	r0, sp, #40	; 0x28
 8008a9a:	f005 fffa 	bl	800ea92 <lv_area_get_size>
 8008a9e:	28f0      	cmp	r0, #240	; 0xf0
 8008aa0:	f240 8092 	bls.w	8008bc8 <_lv_blend_fill+0x22c>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
 8008aa4:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8008aa8:	9b07      	ldr	r3, [sp, #28]
 8008aaa:	463a      	mov	r2, r7
 8008aac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008aae:	f8ad 6000 	strh.w	r6, [sp]
 8008ab2:	ab0a      	add	r3, sp, #40	; 0x28
 8008ab4:	47a0      	blx	r4
 8008ab6:	e02f      	b.n	8008b18 <_lv_blend_fill+0x17c>
    if(mask && disp->driver.antialiasing == 0)
 8008ab8:	f897 c008 	ldrb.w	ip, [r7, #8]
 8008abc:	f01c 0f01 	tst.w	ip, #1
 8008ac0:	d1b8      	bne.n	8008a34 <_lv_blend_fill+0x98>
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8008ac2:	46dc      	mov	ip, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008ac4:	f102 0a01 	add.w	sl, r2, #1
 8008ac8:	ebaa 0a01 	sub.w	sl, sl, r1
        int32_t mask_w = lv_area_get_width(&draw_area);
 8008acc:	fa0f fa8a 	sxth.w	sl, sl
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8008ad0:	ebac 080b 	sub.w	r8, ip, fp
 8008ad4:	45c2      	cmp	sl, r8
 8008ad6:	ddad      	ble.n	8008a34 <_lv_blend_fill+0x98>
 8008ad8:	f89c 8000 	ldrb.w	r8, [ip]
 8008adc:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8008ae0:	f04f 38ff 	mov.w	r8, #4294967295
 8008ae4:	bf98      	it	ls
 8008ae6:	f04f 0800 	movls.w	r8, #0
 8008aea:	f80c 8b01 	strb.w	r8, [ip], #1
 8008aee:	e7ef      	b.n	8008ad0 <_lv_blend_fill+0x134>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8008af0:	f7fe feae 	bl	8007850 <_lv_refr_get_disp_refreshing>
 8008af4:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 8008af8:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 8008afc:	3201      	adds	r2, #1
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	fa0f f983 	sxth.w	r9, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8008b04:	9b08      	ldr	r3, [sp, #32]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8008b06:	4682      	mov	sl, r0
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 8008b0e:	d11f      	bne.n	8008b50 <_lv_blend_fill+0x1b4>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008b10:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8008b14:	4598      	cmp	r8, r3
 8008b16:	dd02      	ble.n	8008b1e <_lv_blend_fill+0x182>
}
 8008b18:	b00d      	add	sp, #52	; 0x34
 8008b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008b1e:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 8008b22:	fa0f fb88 	sxth.w	fp, r8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008b26:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8008b2a:	429f      	cmp	r7, r3
 8008b2c:	dd02      	ble.n	8008b34 <_lv_blend_fill+0x198>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008b2e:	f108 0801 	add.w	r8, r8, #1
 8008b32:	e7ed      	b.n	8008b10 <_lv_blend_fill+0x174>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 8008b34:	9402      	str	r4, [sp, #8]
 8008b36:	f8ad 6004 	strh.w	r6, [sp, #4]
 8008b3a:	f8cd b000 	str.w	fp, [sp]
 8008b3e:	b23b      	sxth	r3, r7
 8008b40:	464a      	mov	r2, r9
 8008b42:	9906      	ldr	r1, [sp, #24]
 8008b44:	4650      	mov	r0, sl
 8008b46:	f8da 5014 	ldr.w	r5, [sl, #20]
 8008b4a:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008b4c:	3701      	adds	r7, #1
 8008b4e:	e7ea      	b.n	8008b26 <_lv_blend_fill+0x18a>
 8008b50:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8008b54:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8008b58:	3301      	adds	r3, #1
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	b21b      	sxth	r3, r3
 8008b5e:	ebab 0502 	sub.w	r5, fp, r2
 8008b62:	9305      	str	r3, [sp, #20]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008b64:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8008b68:	4598      	cmp	r8, r3
 8008b6a:	dcd5      	bgt.n	8008b18 <_lv_blend_fill+0x17c>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8008b6c:	fa0f f388 	sxth.w	r3, r8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008b70:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8008b74:	9307      	str	r3, [sp, #28]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008b76:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8008b7a:	459b      	cmp	fp, r3
 8008b7c:	dd04      	ble.n	8008b88 <_lv_blend_fill+0x1ec>
            mask_tmp += draw_area_w;
 8008b7e:	9b05      	ldr	r3, [sp, #20]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008b80:	f108 0801 	add.w	r8, r8, #1
            mask_tmp += draw_area_w;
 8008b84:	441d      	add	r5, r3
 8008b86:	e7ed      	b.n	8008b64 <_lv_blend_fill+0x1c8>
                if(mask_tmp[x]) {
 8008b88:	f815 300b 	ldrb.w	r3, [r5, fp]
 8008b8c:	b173      	cbz	r3, 8008bac <_lv_blend_fill+0x210>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 8008b8e:	4363      	muls	r3, r4
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8008b90:	0a1b      	lsrs	r3, r3, #8
 8008b92:	9302      	str	r3, [sp, #8]
 8008b94:	9b07      	ldr	r3, [sp, #28]
 8008b96:	f8ad 6004 	strh.w	r6, [sp, #4]
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	464a      	mov	r2, r9
 8008b9e:	fa0f f38b 	sxth.w	r3, fp
 8008ba2:	9906      	ldr	r1, [sp, #24]
 8008ba4:	4650      	mov	r0, sl
 8008ba6:	f8da 7014 	ldr.w	r7, [sl, #20]
 8008baa:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008bac:	f10b 0b01 	add.w	fp, fp, #1
 8008bb0:	e7e1      	b.n	8008b76 <_lv_blend_fill+0x1da>
                lv_color_fill(disp_buf_first, color, draw_area_w);
 8008bb2:	4650      	mov	r0, sl
 8008bb4:	9a05      	ldr	r2, [sp, #20]
 8008bb6:	4641      	mov	r1, r8
 8008bb8:	f006 f9df 	bl	800ef7a <lv_color_fill>
                disp_buf_first += disp_w;
 8008bbc:	44ba      	add	sl, r7
            for(y = 0; y < draw_area_h; y++) {
 8008bbe:	3401      	adds	r4, #1
 8008bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc2:	42a3      	cmp	r3, r4
 8008bc4:	dcf5      	bgt.n	8008bb2 <_lv_blend_fill+0x216>
 8008bc6:	e7a7      	b.n	8008b18 <_lv_blend_fill+0x17c>
                disp_buf_first += disp_w;
 8008bc8:	007f      	lsls	r7, r7, #1
 8008bca:	2400      	movs	r4, #0
 8008bcc:	e7f8      	b.n	8008bc0 <_lv_blend_fill+0x224>
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 8008bce:	9b07      	ldr	r3, [sp, #28]
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	b123      	cbz	r3, 8008bde <_lv_blend_fill+0x242>
 8008bd4:	a80a      	add	r0, sp, #40	; 0x28
 8008bd6:	f005 ff5c 	bl	800ea92 <lv_area_get_size>
 8008bda:	28f0      	cmp	r0, #240	; 0xf0
 8008bdc:	d84a      	bhi.n	8008c74 <_lv_blend_fill+0x2d8>
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8008bde:	4622      	mov	r2, r4
 8008be0:	f04f 0100 	mov.w	r1, #0
 8008be4:	4630      	mov	r0, r6
 8008be6:	f7ff fe12 	bl	800880e <lv_color_mix>

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 8008bea:	b2a1      	uxth	r1, r4
 8008bec:	f3c6 02c4 	ubfx	r2, r6, #3, #5
 8008bf0:	434a      	muls	r2, r1
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 8008bf2:	f3c6 3b42 	ubfx	fp, r6, #13, #3
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 8008bf6:	9207      	str	r2, [sp, #28]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 8008bf8:	f006 0207 	and.w	r2, r6, #7
 8008bfc:	eb0b 0bc2 	add.w	fp, fp, r2, lsl #3
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 8008c00:	f3c6 2604 	ubfx	r6, r6, #8, #5
 8008c04:	fb06 f201 	mul.w	r2, r6, r1
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 8008c08:	fb0b fb01 	mul.w	fp, fp, r1
            lv_color_t last_dest_color = LV_COLOR_BLACK;
 8008c0c:	2100      	movs	r1, #0
            lv_opa_t opa_inv = 255 - opa;
 8008c0e:	43e4      	mvns	r4, r4
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 8008c10:	9208      	str	r2, [sp, #32]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008c12:	f248 0e81 	movw	lr, #32897	; 0x8081
                disp_buf_first += disp_w;
 8008c16:	007a      	lsls	r2, r7, #1
            for(y = 0; y < draw_area_h; y++) {
 8008c18:	460f      	mov	r7, r1
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8008c1a:	f000 0c07 	and.w	ip, r0, #7
 8008c1e:	f3c0 09c4 	ubfx	r9, r0, #3, #5
 8008c22:	f3c0 2304 	ubfx	r3, r0, #8, #5
            lv_opa_t opa_inv = 255 - opa;
 8008c26:	b2e4      	uxtb	r4, r4
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8008c28:	f3c0 3042 	ubfx	r0, r0, #13, #3
                disp_buf_first += disp_w;
 8008c2c:	9206      	str	r2, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 8008c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c30:	42ba      	cmp	r2, r7
 8008c32:	f77f af71 	ble.w	8008b18 <_lv_blend_fill+0x17c>
 8008c36:	4656      	mov	r6, sl
                for(x = 0; x < draw_area_w; x++) {
 8008c38:	2500      	movs	r5, #0
 8008c3a:	e055      	b.n	8008ce8 <_lv_blend_fill+0x34c>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
 8008c3c:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
 8008c40:	3501      	adds	r5, #1
 8008c42:	9a05      	ldr	r2, [sp, #20]
 8008c44:	42aa      	cmp	r2, r5
 8008c46:	dcf9      	bgt.n	8008c3c <_lv_blend_fill+0x2a0>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008c48:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
 8008c4c:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8008f7c <_lv_blend_fill+0x5e0>
                    disp_buf_first += disp_w;
 8008c50:	007f      	lsls	r7, r7, #1
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008c52:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8008c56:	429e      	cmp	r6, r3
 8008c58:	f73f af5e 	bgt.w	8008b18 <_lv_blend_fill+0x17c>
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
 8008c5c:	9b07      	ldr	r3, [sp, #28]
 8008c5e:	9400      	str	r4, [sp, #0]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	4651      	mov	r1, sl
 8008c64:	461d      	mov	r5, r3
 8008c66:	4642      	mov	r2, r8
 8008c68:	9b05      	ldr	r3, [sp, #20]
 8008c6a:	9807      	ldr	r0, [sp, #28]
 8008c6c:	47a8      	blx	r5
                    disp_buf_first += disp_w;
 8008c6e:	44ba      	add	sl, r7
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008c70:	3601      	adds	r6, #1
 8008c72:	e7ee      	b.n	8008c52 <_lv_blend_fill+0x2b6>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
 8008c74:	4bc1      	ldr	r3, [pc, #772]	; (8008f7c <_lv_blend_fill+0x5e0>)
 8008c76:	e7e4      	b.n	8008c42 <_lv_blend_fill+0x2a6>
                    if(last_dest_color.full != disp_buf_first[x].full) {
 8008c78:	4632      	mov	r2, r6
 8008c7a:	f836 8b02 	ldrh.w	r8, [r6], #2
 8008c7e:	4588      	cmp	r8, r1
 8008c80:	d024      	beq.n	8008ccc <_lv_blend_fill+0x330>
 8008c82:	7811      	ldrb	r1, [r2, #0]
 8008c84:	9b07      	ldr	r3, [sp, #28]
 8008c86:	ea4f 09d1 	mov.w	r9, r1, lsr #3
 8008c8a:	fb04 3909 	mla	r9, r4, r9, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008c8e:	7853      	ldrb	r3, [r2, #1]
 8008c90:	f001 0107 	and.w	r1, r1, #7
 8008c94:	0958      	lsrs	r0, r3, #5
 8008c96:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008c9a:	9908      	ldr	r1, [sp, #32]
 8008c9c:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008ca0:	fb04 b000 	mla	r0, r4, r0, fp
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008ca4:	fb04 1303 	mla	r3, r4, r3, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008ca8:	f109 0980 	add.w	r9, r9, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008cac:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008cae:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008cb0:	fb0e f000 	mul.w	r0, lr, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008cb4:	fb0e f909 	mul.w	r9, lr, r9
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008cb8:	fb0e f303 	mul.w	r3, lr, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008cbc:	f3c0 6c82 	ubfx	ip, r0, #26, #3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008cc0:	f3c9 59c4 	ubfx	r9, r9, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008cc4:	f3c0 50c2 	ubfx	r0, r0, #23, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8008cc8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
                    disp_buf_first[x] = last_res_color;
 8008ccc:	7811      	ldrb	r1, [r2, #0]
                for(x = 0; x < draw_area_w; x++) {
 8008cce:	3501      	adds	r5, #1
                    disp_buf_first[x] = last_res_color;
 8008cd0:	f36c 0102 	bfi	r1, ip, #0, #3
 8008cd4:	f369 01c7 	bfi	r1, r9, #3, #5
 8008cd8:	7011      	strb	r1, [r2, #0]
 8008cda:	7851      	ldrb	r1, [r2, #1]
 8008cdc:	f363 0104 	bfi	r1, r3, #0, #5
 8008ce0:	f360 1147 	bfi	r1, r0, #5, #3
 8008ce4:	7051      	strb	r1, [r2, #1]
                    if(last_dest_color.full != disp_buf_first[x].full) {
 8008ce6:	4641      	mov	r1, r8
                for(x = 0; x < draw_area_w; x++) {
 8008ce8:	9a05      	ldr	r2, [sp, #20]
 8008cea:	42aa      	cmp	r2, r5
 8008cec:	dcc4      	bgt.n	8008c78 <_lv_blend_fill+0x2dc>
                disp_buf_first += disp_w;
 8008cee:	9a06      	ldr	r2, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 8008cf0:	3701      	adds	r7, #1
                disp_buf_first += disp_w;
 8008cf2:	4492      	add	sl, r2
 8008cf4:	e79b      	b.n	8008c2e <_lv_blend_fill+0x292>
        if(opa > LV_OPA_MAX) {
 8008cf6:	2cfd      	cmp	r4, #253	; 0xfd
 8008cf8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8008cfc:	f200 8093 	bhi.w	8008e26 <_lv_blend_fill+0x48a>
        last_dest_color.full = disp_buf_first[0].full;
 8008d00:	9906      	ldr	r1, [sp, #24]
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8008d02:	46ac      	mov	ip, r5
        last_dest_color.full = disp_buf_first[0].full;
 8008d04:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
        last_res_color.full = disp_buf_first[0].full;
 8008d08:	4608      	mov	r0, r1
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008d0a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	f73f af02 	bgt.w	8008b18 <_lv_blend_fill+0x17c>
 8008d14:	4656      	mov	r6, sl
 8008d16:	46d9      	mov	r9, fp
 8008d18:	e0a2      	b.n	8008e60 <_lv_blend_fill+0x4c4>
                    FILL_NORMAL_MASK_PX(x, color)
 8008d1a:	f8b9 1000 	ldrh.w	r1, [r9]
 8008d1e:	4640      	mov	r0, r8
 8008d20:	9307      	str	r3, [sp, #28]
 8008d22:	f7ff fd74 	bl	800880e <lv_color_mix>
 8008d26:	9b07      	ldr	r3, [sp, #28]
 8008d28:	f8a9 0000 	strh.w	r0, [r9]
 8008d2c:	e008      	b.n	8008d40 <_lv_blend_fill+0x3a4>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8008d2e:	079a      	lsls	r2, r3, #30
 8008d30:	d00d      	beq.n	8008d4e <_lv_blend_fill+0x3b2>
                    FILL_NORMAL_MASK_PX(x, color)
 8008d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d36:	b11a      	cbz	r2, 8008d40 <_lv_blend_fill+0x3a4>
 8008d38:	2aff      	cmp	r2, #255	; 0xff
 8008d3a:	d1ee      	bne.n	8008d1a <_lv_blend_fill+0x37e>
 8008d3c:	f8a9 8000 	strh.w	r8, [r9]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8008d40:	3401      	adds	r4, #1
 8008d42:	f109 0902 	add.w	r9, r9, #2
 8008d46:	9a05      	ldr	r2, [sp, #20]
 8008d48:	461e      	mov	r6, r3
 8008d4a:	42a2      	cmp	r2, r4
 8008d4c:	dcef      	bgt.n	8008d2e <_lv_blend_fill+0x392>
 8008d4e:	eb0a 0944 	add.w	r9, sl, r4, lsl #1
                for(; x <= x_end4; x += 4) {
 8008d52:	9b06      	ldr	r3, [sp, #24]
 8008d54:	42a3      	cmp	r3, r4
 8008d56:	da0e      	bge.n	8008d76 <_lv_blend_fill+0x3da>
                    FILL_NORMAL_MASK_PX(x, color)
 8008d58:	1b36      	subs	r6, r6, r4
                for(; x < draw_area_w ; x++) {
 8008d5a:	9b05      	ldr	r3, [sp, #20]
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	dc52      	bgt.n	8008e06 <_lv_blend_fill+0x46a>
                disp_buf_first += disp_w;
 8008d60:	44ba      	add	sl, r7
                mask += draw_area_w;
 8008d62:	449b      	add	fp, r3
            for(y = 0; y < draw_area_h; y++) {
 8008d64:	3501      	adds	r5, #1
 8008d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d68:	42ab      	cmp	r3, r5
 8008d6a:	f77f aed5 	ble.w	8008b18 <_lv_blend_fill+0x17c>
 8008d6e:	465b      	mov	r3, fp
 8008d70:	46d1      	mov	r9, sl
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8008d72:	2400      	movs	r4, #0
 8008d74:	e7e7      	b.n	8008d46 <_lv_blend_fill+0x3aa>
                    if(*mask32) {
 8008d76:	6833      	ldr	r3, [r6, #0]
 8008d78:	b14b      	cbz	r3, 8008d8e <_lv_blend_fill+0x3f2>
                        if((*mask32) == 0xFFFFFFFF) {
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	d10c      	bne.n	8008d98 <_lv_blend_fill+0x3fc>
                            disp_buf_first[x] = color;
 8008d7e:	f8a9 8000 	strh.w	r8, [r9]
                            disp_buf_first[x + 1] = color;
 8008d82:	f8a9 8002 	strh.w	r8, [r9, #2]
                            disp_buf_first[x + 2] = color;
 8008d86:	f8a9 8004 	strh.w	r8, [r9, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 8008d8a:	f8a9 8006 	strh.w	r8, [r9, #6]
                    mask32++;
 8008d8e:	3604      	adds	r6, #4
                for(; x <= x_end4; x += 4) {
 8008d90:	3404      	adds	r4, #4
 8008d92:	f109 0908 	add.w	r9, r9, #8
 8008d96:	e7dc      	b.n	8008d52 <_lv_blend_fill+0x3b6>
                            FILL_NORMAL_MASK_PX(x, color)
 8008d98:	7832      	ldrb	r2, [r6, #0]
 8008d9a:	b11a      	cbz	r2, 8008da4 <_lv_blend_fill+0x408>
 8008d9c:	2aff      	cmp	r2, #255	; 0xff
 8008d9e:	d11a      	bne.n	8008dd6 <_lv_blend_fill+0x43a>
 8008da0:	f8a9 8000 	strh.w	r8, [r9]
                            FILL_NORMAL_MASK_PX(x + 1, color)
 8008da4:	7872      	ldrb	r2, [r6, #1]
 8008da6:	b11a      	cbz	r2, 8008db0 <_lv_blend_fill+0x414>
 8008da8:	2aff      	cmp	r2, #255	; 0xff
 8008daa:	d11c      	bne.n	8008de6 <_lv_blend_fill+0x44a>
 8008dac:	f8a9 8002 	strh.w	r8, [r9, #2]
                            FILL_NORMAL_MASK_PX(x + 2, color)
 8008db0:	78b2      	ldrb	r2, [r6, #2]
 8008db2:	b11a      	cbz	r2, 8008dbc <_lv_blend_fill+0x420>
 8008db4:	2aff      	cmp	r2, #255	; 0xff
 8008db6:	d11e      	bne.n	8008df6 <_lv_blend_fill+0x45a>
 8008db8:	f8a9 8004 	strh.w	r8, [r9, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 8008dbc:	78f2      	ldrb	r2, [r6, #3]
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	d0e5      	beq.n	8008d8e <_lv_blend_fill+0x3f2>
 8008dc2:	2aff      	cmp	r2, #255	; 0xff
 8008dc4:	d0e1      	beq.n	8008d8a <_lv_blend_fill+0x3ee>
 8008dc6:	f8b9 1006 	ldrh.w	r1, [r9, #6]
 8008dca:	4640      	mov	r0, r8
 8008dcc:	f7ff fd1f 	bl	800880e <lv_color_mix>
 8008dd0:	f8a9 0006 	strh.w	r0, [r9, #6]
 8008dd4:	e7db      	b.n	8008d8e <_lv_blend_fill+0x3f2>
                            FILL_NORMAL_MASK_PX(x, color)
 8008dd6:	f8b9 1000 	ldrh.w	r1, [r9]
 8008dda:	4640      	mov	r0, r8
 8008ddc:	f7ff fd17 	bl	800880e <lv_color_mix>
 8008de0:	f8a9 0000 	strh.w	r0, [r9]
 8008de4:	e7de      	b.n	8008da4 <_lv_blend_fill+0x408>
                            FILL_NORMAL_MASK_PX(x + 1, color)
 8008de6:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 8008dea:	4640      	mov	r0, r8
 8008dec:	f7ff fd0f 	bl	800880e <lv_color_mix>
 8008df0:	f8a9 0002 	strh.w	r0, [r9, #2]
 8008df4:	e7dc      	b.n	8008db0 <_lv_blend_fill+0x414>
                            FILL_NORMAL_MASK_PX(x + 2, color)
 8008df6:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	f7ff fd07 	bl	800880e <lv_color_mix>
 8008e00:	f8a9 0004 	strh.w	r0, [r9, #4]
 8008e04:	e7da      	b.n	8008dbc <_lv_blend_fill+0x420>
                    FILL_NORMAL_MASK_PX(x, color)
 8008e06:	5d32      	ldrb	r2, [r6, r4]
 8008e08:	b11a      	cbz	r2, 8008e12 <_lv_blend_fill+0x476>
 8008e0a:	2aff      	cmp	r2, #255	; 0xff
 8008e0c:	d103      	bne.n	8008e16 <_lv_blend_fill+0x47a>
 8008e0e:	f82a 8014 	strh.w	r8, [sl, r4, lsl #1]
                for(; x < draw_area_w ; x++) {
 8008e12:	3401      	adds	r4, #1
 8008e14:	e7a1      	b.n	8008d5a <_lv_blend_fill+0x3be>
                    FILL_NORMAL_MASK_PX(x, color)
 8008e16:	f83a 1014 	ldrh.w	r1, [sl, r4, lsl #1]
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	f7ff fcf7 	bl	800880e <lv_color_mix>
 8008e20:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
 8008e24:	e7f5      	b.n	8008e12 <_lv_blend_fill+0x476>
        int32_t x_end4 = draw_area_w - 4;
 8008e26:	9b05      	ldr	r3, [sp, #20]
 8008e28:	3b04      	subs	r3, #4
 8008e2a:	9306      	str	r3, [sp, #24]
 8008e2c:	e79b      	b.n	8008d66 <_lv_blend_fill+0x3ca>
                    if(*mask_tmp_x) {
 8008e2e:	f819 2b01 	ldrb.w	r2, [r9], #1
 8008e32:	b1a2      	cbz	r2, 8008e5e <_lv_blend_fill+0x4c2>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8008e34:	4562      	cmp	r2, ip
 8008e36:	f000 809c 	beq.w	8008f72 <_lv_blend_fill+0x5d6>
 8008e3a:	2aff      	cmp	r2, #255	; 0xff
 8008e3c:	bf0e      	itee	eq
 8008e3e:	4625      	moveq	r5, r4
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 8008e40:	fb04 f502 	mulne.w	r5, r4, r2
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8008e44:	0a2d      	lsrne	r5, r5, #8
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 8008e46:	8831      	ldrh	r1, [r6, #0]
 8008e48:	462a      	mov	r2, r5
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	9306      	str	r3, [sp, #24]
 8008e4e:	f7ff fcde 	bl	800880e <lv_color_mix>
                            last_mask = *mask_tmp_x;
 8008e52:	f819 cc01 	ldrb.w	ip, [r9, #-1]
                            last_dest_color.full = disp_buf_first[x].full;
 8008e56:	8831      	ldrh	r1, [r6, #0]
 8008e58:	9b06      	ldr	r3, [sp, #24]
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 8008e5a:	b280      	uxth	r0, r0
                        disp_buf_first[x] = last_res_color;
 8008e5c:	8030      	strh	r0, [r6, #0]
 8008e5e:	3602      	adds	r6, #2
                for(x = 0; x < draw_area_w; x++) {
 8008e60:	9a05      	ldr	r2, [sp, #20]
 8008e62:	eba9 0e0b 	sub.w	lr, r9, fp
 8008e66:	4572      	cmp	r2, lr
 8008e68:	dce1      	bgt.n	8008e2e <_lv_blend_fill+0x492>
                disp_buf_first += disp_w;
 8008e6a:	44ba      	add	sl, r7
                mask += draw_area_w;
 8008e6c:	4493      	add	fp, r2
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008e6e:	3301      	adds	r3, #1
 8008e70:	e74b      	b.n	8008d0a <_lv_blend_fill+0x36e>
    switch(mode) {
 8008e72:	2d01      	cmp	r5, #1
 8008e74:	d004      	beq.n	8008e80 <_lv_blend_fill+0x4e4>
 8008e76:	2d02      	cmp	r5, #2
 8008e78:	f47f ae4e 	bne.w	8008b18 <_lv_blend_fill+0x17c>
            blend_fp = color_blend_true_color_subtractive;
 8008e7c:	4d40      	ldr	r5, [pc, #256]	; (8008f80 <_lv_blend_fill+0x5e4>)
 8008e7e:	e000      	b.n	8008e82 <_lv_blend_fill+0x4e6>
            blend_fp = color_blend_true_color_additive;
 8008e80:	4d40      	ldr	r5, [pc, #256]	; (8008f84 <_lv_blend_fill+0x5e8>)
 8008e82:	f8b9 8014 	ldrh.w	r8, [r9, #20]
 8008e86:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 8008e8a:	f108 0801 	add.w	r8, r8, #1
 8008e8e:	eba8 0803 	sub.w	r8, r8, r3
 8008e92:	fa0f f888 	sxth.w	r8, r8
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 8008e96:	fb00 f308 	mul.w	r3, r0, r8
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	9806      	ldr	r0, [sp, #24]
 8008e9e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8008ea2:	eb00 0a43 	add.w	sl, r0, r3, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8008ea6:	9808      	ldr	r0, [sp, #32]
 8008ea8:	2801      	cmp	r0, #1
 8008eaa:	d128      	bne.n	8008efe <_lv_blend_fill+0x562>
        lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8008eac:	4622      	mov	r2, r4
 8008eae:	f04f 0100 	mov.w	r1, #0
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f7ff fcab 	bl	800880e <lv_color_mix>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
 8008eb8:	2200      	movs	r2, #0
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008eba:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8008ebe:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8008ec2:	4599      	cmp	r9, r3
 8008ec4:	f73f ae28 	bgt.w	8008b18 <_lv_blend_fill+0x17c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008ec8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8008ecc:	eb0a 0b47 	add.w	fp, sl, r7, lsl #1
 8008ed0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8008ed4:	429f      	cmp	r7, r3
 8008ed6:	dd03      	ble.n	8008ee0 <_lv_blend_fill+0x544>
            disp_buf_tmp += disp_w;
 8008ed8:	44c2      	add	sl, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008eda:	f109 0901 	add.w	r9, r9, #1
 8008ede:	e7ee      	b.n	8008ebe <_lv_blend_fill+0x522>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 8008ee0:	f8bb 3000 	ldrh.w	r3, [fp]
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d005      	beq.n	8008ef4 <_lv_blend_fill+0x558>
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4622      	mov	r2, r4
 8008eec:	4630      	mov	r0, r6
 8008eee:	9305      	str	r3, [sp, #20]
 8008ef0:	47a8      	blx	r5
 8008ef2:	9b05      	ldr	r3, [sp, #20]
                disp_buf_tmp[x] = last_res_color;
 8008ef4:	f82b 0b02 	strh.w	r0, [fp], #2
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008ef8:	3701      	adds	r7, #1
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 8008efa:	461a      	mov	r2, r3
 8008efc:	e7e8      	b.n	8008ed0 <_lv_blend_fill+0x534>
 8008efe:	3201      	adds	r2, #1
 8008f00:	1a51      	subs	r1, r2, r1
 8008f02:	b20a      	sxth	r2, r1
 8008f04:	9205      	str	r2, [sp, #20]
        last_dest_color.full = disp_buf_tmp[0].full;
 8008f06:	9a06      	ldr	r2, [sp, #24]
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8008f08:	2100      	movs	r1, #0
        last_dest_color.full = disp_buf_tmp[0].full;
 8008f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8008f0e:	ebab 0b0e 	sub.w	fp, fp, lr
        last_res_color.full = disp_buf_tmp[0].full;
 8008f12:	4618      	mov	r0, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008f14:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8008f18:	4297      	cmp	r7, r2
 8008f1a:	f73f adfd 	bgt.w	8008b18 <_lv_blend_fill+0x17c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008f1e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 8008f22:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8008f26:	4591      	cmp	r9, r2
 8008f28:	dd04      	ble.n	8008f34 <_lv_blend_fill+0x598>
            mask_tmp += draw_area_w;
 8008f2a:	9a05      	ldr	r2, [sp, #20]
            disp_buf_tmp += disp_w;
 8008f2c:	44c2      	add	sl, r8
            mask_tmp += draw_area_w;
 8008f2e:	4493      	add	fp, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008f30:	3701      	adds	r7, #1
 8008f32:	e7ef      	b.n	8008f14 <_lv_blend_fill+0x578>
                if(mask_tmp[x] == 0) continue;
 8008f34:	f81b 2009 	ldrb.w	r2, [fp, r9]
 8008f38:	b1c2      	cbz	r2, 8008f6c <_lv_blend_fill+0x5d0>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
 8008f3a:	428a      	cmp	r2, r1
 8008f3c:	eb0a 0c49 	add.w	ip, sl, r9, lsl #1
 8008f40:	d103      	bne.n	8008f4a <_lv_blend_fill+0x5ae>
 8008f42:	f83a e019 	ldrh.w	lr, [sl, r9, lsl #1]
 8008f46:	459e      	cmp	lr, r3
 8008f48:	d00e      	beq.n	8008f68 <_lv_blend_fill+0x5cc>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 8008f4a:	2afc      	cmp	r2, #252	; 0xfc
 8008f4c:	bf98      	it	ls
 8008f4e:	4362      	mulls	r2, r4
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 8008f50:	f8bc 1000 	ldrh.w	r1, [ip]
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 8008f54:	bf94      	ite	ls
 8008f56:	0a12      	lsrls	r2, r2, #8
 8008f58:	4622      	movhi	r2, r4
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	47a8      	blx	r5
                    last_mask = mask_tmp[x];
 8008f5e:	f81b 1009 	ldrb.w	r1, [fp, r9]
                    last_dest_color.full = disp_buf_tmp[x].full;
 8008f62:	f83a 3019 	ldrh.w	r3, [sl, r9, lsl #1]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 8008f66:	b280      	uxth	r0, r0
                disp_buf_tmp[x] = last_res_color;
 8008f68:	f82a 0019 	strh.w	r0, [sl, r9, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008f6c:	f109 0901 	add.w	r9, r9, #1
 8008f70:	e7d7      	b.n	8008f22 <_lv_blend_fill+0x586>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 8008f72:	8832      	ldrh	r2, [r6, #0]
 8008f74:	428a      	cmp	r2, r1
 8008f76:	f47f af66 	bne.w	8008e46 <_lv_blend_fill+0x4aa>
 8008f7a:	e76f      	b.n	8008e5c <_lv_blend_fill+0x4c0>
 8008f7c:	20000194 	.word	0x20000194
 8008f80:	08008919 	.word	0x08008919
 8008f84:	08008881 	.word	0x08008881

08008f88 <_lv_blend_map>:
{
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	b08f      	sub	sp, #60	; 0x3c
 8008f8e:	9305      	str	r3, [sp, #20]
 8008f90:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8008f94:	4689      	mov	r9, r1
 8008f96:	9308      	str	r3, [sp, #32]
 8008f98:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008f9c:	920b      	str	r2, [sp, #44]	; 0x2c
    if(opa < LV_OPA_MIN) return;
 8008f9e:	2b01      	cmp	r3, #1
{
 8008fa0:	9304      	str	r3, [sp, #16]
 8008fa2:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
    if(opa < LV_OPA_MIN) return;
 8008fa6:	f240 80e3 	bls.w	8009170 <_lv_blend_map+0x1e8>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8008faa:	9b08      	ldr	r3, [sp, #32]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 80df 	beq.w	8009170 <_lv_blend_map+0x1e8>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
 8008fb2:	460a      	mov	r2, r1
 8008fb4:	4601      	mov	r1, r0
 8008fb6:	a80c      	add	r0, sp, #48	; 0x30
 8008fb8:	f005 fd79 	bl	800eaae <_lv_area_intersect>
    if(!is_common) return;
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f000 80d7 	beq.w	8009170 <_lv_blend_map+0x1e8>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8008fc2:	f7fe fc45 	bl	8007850 <_lv_refr_get_disp_refreshing>
 8008fc6:	4604      	mov	r4, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008fc8:	f005 fa3d 	bl	800e446 <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
 8008fcc:	6883      	ldr	r3, [r0, #8]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008fce:	4683      	mov	fp, r0
    lv_color_t * disp_buf = vdb->buf_act;
 8008fd0:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 8008fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd4:	b10b      	cbz	r3, 8008fda <_lv_blend_map+0x52>
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
 8008fda:	f8bb 1010 	ldrh.w	r1, [fp, #16]
 8008fde:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    draw_area.x2 -= disp_area->x1;
 8008fe2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    draw_area.x1 -= disp_area->x1;
 8008fe6:	1a52      	subs	r2, r2, r1
    draw_area.y1 -= disp_area->y1;
 8008fe8:	f8bb 5012 	ldrh.w	r5, [fp, #18]
 8008fec:	f8bd 8032 	ldrh.w	r8, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
 8008ff0:	1a5b      	subs	r3, r3, r1
    draw_area.y2 -= disp_area->y1;
 8008ff2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    draw_area.y1 -= disp_area->y1;
 8008ff6:	eba8 0805 	sub.w	r8, r8, r5
    draw_area.y2 -= disp_area->y1;
 8008ffa:	1b49      	subs	r1, r1, r5
 8008ffc:	fa1f fe81 	uxth.w	lr, r1
    draw_area.x1 -= disp_area->x1;
 8009000:	b292      	uxth	r2, r2
    draw_area.y1 -= disp_area->y1;
 8009002:	fa1f f888 	uxth.w	r8, r8
    if(mask && disp->driver.antialiasing == 0)
 8009006:	9905      	ldr	r1, [sp, #20]
    draw_area.x1 -= disp_area->x1;
 8009008:	b210      	sxth	r0, r2
    draw_area.y1 -= disp_area->y1;
 800900a:	fa0f fc88 	sxth.w	ip, r8
    draw_area.x2 -= disp_area->x1;
 800900e:	b29b      	uxth	r3, r3
    draw_area.x1 -= disp_area->x1;
 8009010:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    draw_area.y1 -= disp_area->y1;
 8009014:	f8ad c032 	strh.w	ip, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
 8009018:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    draw_area.y2 -= disp_area->y1;
 800901c:	f8ad e036 	strh.w	lr, [sp, #54]	; 0x36
    if(mask && disp->driver.antialiasing == 0)
 8009020:	2900      	cmp	r1, #0
 8009022:	d15f      	bne.n	80090e4 <_lv_blend_map+0x15c>
    if(disp->driver.set_px_cb) {
 8009024:	6961      	ldr	r1, [r4, #20]
 8009026:	2900      	cmp	r1, #0
 8009028:	d170      	bne.n	800910c <_lv_blend_map+0x184>
 800902a:	f8bb 6014 	ldrh.w	r6, [fp, #20]
 800902e:	3301      	adds	r3, #1
 8009030:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
 8009034:	1a9a      	subs	r2, r3, r2
 8009036:	3601      	adds	r6, #1
 8009038:	b213      	sxth	r3, r2
 800903a:	1a76      	subs	r6, r6, r1
 800903c:	9306      	str	r3, [sp, #24]
 800903e:	b233      	sxth	r3, r6
 8009040:	4666      	mov	r6, ip
 8009042:	930a      	str	r3, [sp, #40]	; 0x28
 8009044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009046:	f8b9 7004 	ldrh.w	r7, [r9, #4]
 800904a:	f9b9 3000 	ldrsh.w	r3, [r9]
 800904e:	fb0c f402 	mul.w	r4, ip, r2
 8009052:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 8009056:	f9bb 2012 	ldrsh.w	r2, [fp, #18]
 800905a:	3701      	adds	r7, #1
 800905c:	1aff      	subs	r7, r7, r3
 800905e:	1aad      	subs	r5, r5, r2
 8009060:	b23f      	sxth	r7, r7
 8009062:	1b75      	subs	r5, r6, r5
 8009064:	437d      	muls	r5, r7
    else if(mode == LV_BLEND_MODE_NORMAL) {
 8009066:	f1ba 0f00 	cmp.w	sl, #0
 800906a:	f040 81ec 	bne.w	8009446 <_lv_blend_map+0x4be>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800906e:	f10e 0201 	add.w	r2, lr, #1
 8009072:	eba2 0208 	sub.w	r2, r2, r8
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 8009076:	1a5b      	subs	r3, r3, r1
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8009078:	b212      	sxth	r2, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800907a:	eba0 0b03 	sub.w	fp, r0, r3
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800907e:	4616      	mov	r6, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 8009080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8009082:	9a07      	ldr	r2, [sp, #28]
 8009084:	4404      	add	r4, r0
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 8009086:	445d      	add	r5, fp
 8009088:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800908c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009090:	f7fe fbde 	bl	8007850 <_lv_refr_get_disp_refreshing>
 8009094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009096:	4680      	mov	r8, r0
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	9307      	str	r3, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800909c:	9b08      	ldr	r3, [sp, #32]
 800909e:	007f      	lsls	r7, r7, #1
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	f040 80e6 	bne.w	8009272 <_lv_blend_map+0x2ea>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
 80090a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 80b2 	beq.w	8009212 <_lv_blend_map+0x28a>
 80090ae:	a80c      	add	r0, sp, #48	; 0x30
 80090b0:	f005 fcef 	bl	800ea92 <lv_area_get_size>
 80090b4:	28f0      	cmp	r0, #240	; 0xf0
 80090b6:	f240 80ac 	bls.w	8009212 <_lv_blend_map+0x28a>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80090ba:	f9bd 9032 	ldrsh.w	r9, [sp, #50]	; 0x32
 80090be:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80090c2:	4599      	cmp	r9, r3
 80090c4:	dc54      	bgt.n	8009170 <_lv_blend_map+0x1e8>
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
 80090c6:	9b04      	ldr	r3, [sp, #16]
 80090c8:	462a      	mov	r2, r5
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	4621      	mov	r1, r4
 80090ce:	9b06      	ldr	r3, [sp, #24]
 80090d0:	4640      	mov	r0, r8
 80090d2:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 80090d6:	47b0      	blx	r6
                disp_buf_first += disp_w;
 80090d8:	9b07      	ldr	r3, [sp, #28]
                map_buf_first += map_w;
 80090da:	443d      	add	r5, r7
                disp_buf_first += disp_w;
 80090dc:	441c      	add	r4, r3
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80090de:	f109 0901 	add.w	r9, r9, #1
 80090e2:	e7ec      	b.n	80090be <_lv_blend_map+0x136>
    if(mask && disp->driver.antialiasing == 0)
 80090e4:	7a21      	ldrb	r1, [r4, #8]
 80090e6:	07c9      	lsls	r1, r1, #31
 80090e8:	d49c      	bmi.n	8009024 <_lv_blend_map+0x9c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80090ea:	1c59      	adds	r1, r3, #1
 80090ec:	1a89      	subs	r1, r1, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80090ee:	9d05      	ldr	r5, [sp, #20]
        int32_t mask_w = lv_area_get_width(&draw_area);
 80090f0:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80090f2:	9e05      	ldr	r6, [sp, #20]
 80090f4:	1bae      	subs	r6, r5, r6
 80090f6:	42b1      	cmp	r1, r6
 80090f8:	dd94      	ble.n	8009024 <_lv_blend_map+0x9c>
 80090fa:	782e      	ldrb	r6, [r5, #0]
 80090fc:	2e80      	cmp	r6, #128	; 0x80
 80090fe:	f04f 36ff 	mov.w	r6, #4294967295
 8009102:	bf98      	it	ls
 8009104:	2600      	movls	r6, #0
 8009106:	f805 6b01 	strb.w	r6, [r5], #1
 800910a:	e7f2      	b.n	80090f2 <_lv_blend_map+0x16a>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800910c:	f7fe fba0 	bl	8007850 <_lv_refr_get_disp_refreshing>
 8009110:	f8b9 4004 	ldrh.w	r4, [r9, #4]
    int32_t disp_w = lv_area_get_width(disp_area);
 8009114:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    int32_t map_w = lv_area_get_width(map_area);
 8009118:	f9b9 3000 	ldrsh.w	r3, [r9]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800911c:	4682      	mov	sl, r0
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800911e:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 8009122:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
    int32_t draw_area_w = lv_area_get_width(draw_area);
 8009126:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 800912a:	3401      	adds	r4, #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800912c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8009130:	1ae4      	subs	r4, r4, r3
 8009132:	1a2d      	subs	r5, r5, r0
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 8009134:	1a5b      	subs	r3, r3, r1
 8009136:	b224      	sxth	r4, r4
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8009138:	1b75      	subs	r5, r6, r5
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800913a:	1ad3      	subs	r3, r2, r3
    map_buf_tmp -= draw_area->x1;
 800913c:	fb04 3305 	mla	r3, r4, r5, r3
 8009140:	0055      	lsls	r5, r2, #1
 8009142:	ebc5 0543 	rsb	r5, r5, r3, lsl #1
 8009146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009148:	f8bb 8014 	ldrh.w	r8, [fp, #20]
 800914c:	442b      	add	r3, r5
 800914e:	461d      	mov	r5, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009150:	9b08      	ldr	r3, [sp, #32]
 8009152:	f108 0801 	add.w	r8, r8, #1
 8009156:	eba8 0801 	sub.w	r8, r8, r1
 800915a:	2b01      	cmp	r3, #1
 800915c:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8009160:	fa0f f888 	sxth.w	r8, r8
 8009164:	9306      	str	r3, [sp, #24]
 8009166:	d123      	bne.n	80091b0 <_lv_blend_map+0x228>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009168:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800916c:	429e      	cmp	r6, r3
 800916e:	dd02      	ble.n	8009176 <_lv_blend_map+0x1ee>
}
 8009170:	b00f      	add	sp, #60	; 0x3c
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009176:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 800917a:	b237      	sxth	r7, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800917c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8009180:	4599      	cmp	r9, r3
 8009182:	dd03      	ble.n	800918c <_lv_blend_map+0x204>
            map_buf_tmp += map_w;
 8009184:	9b06      	ldr	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009186:	3601      	adds	r6, #1
            map_buf_tmp += map_w;
 8009188:	441d      	add	r5, r3
 800918a:	e7ed      	b.n	8009168 <_lv_blend_map+0x1e0>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	4642      	mov	r2, r8
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	f835 3019 	ldrh.w	r3, [r5, r9, lsl #1]
 8009196:	9700      	str	r7, [sp, #0]
 8009198:	f8ad 3004 	strh.w	r3, [sp, #4]
 800919c:	9907      	ldr	r1, [sp, #28]
 800919e:	fa0f f389 	sxth.w	r3, r9
 80091a2:	4650      	mov	r0, sl
 80091a4:	f8da 4014 	ldr.w	r4, [sl, #20]
 80091a8:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80091aa:	f109 0901 	add.w	r9, r9, #1
 80091ae:	e7e5      	b.n	800917c <_lv_blend_map+0x1f4>
    int32_t draw_area_w = lv_area_get_width(draw_area);
 80091b0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 80091b4:	9905      	ldr	r1, [sp, #20]
 80091b6:	3301      	adds	r3, #1
 80091b8:	eba1 0b02 	sub.w	fp, r1, r2
 80091bc:	1a9a      	subs	r2, r3, r2
            mask_tmp += draw_area_w;
 80091be:	b217      	sxth	r7, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80091c0:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80091c4:	429e      	cmp	r6, r3
 80091c6:	dcd3      	bgt.n	8009170 <_lv_blend_map+0x1e8>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 80091c8:	b233      	sxth	r3, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80091ca:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 80091ce:	9305      	str	r3, [sp, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80091d0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80091d4:	4599      	cmp	r9, r3
 80091d6:	dd04      	ble.n	80091e2 <_lv_blend_map+0x25a>
            map_buf_tmp += map_w;
 80091d8:	9b06      	ldr	r3, [sp, #24]
            mask_tmp += draw_area_w;
 80091da:	44bb      	add	fp, r7
            map_buf_tmp += map_w;
 80091dc:	441d      	add	r5, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80091de:	3601      	adds	r6, #1
 80091e0:	e7ee      	b.n	80091c0 <_lv_blend_map+0x238>
                if(mask_tmp[x]) {
 80091e2:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80091e6:	b18b      	cbz	r3, 800920c <_lv_blend_map+0x284>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 80091e8:	9a04      	ldr	r2, [sp, #16]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 80091ea:	9907      	ldr	r1, [sp, #28]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 80091ec:	4353      	muls	r3, r2
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 80091ee:	0a1b      	lsrs	r3, r3, #8
 80091f0:	9302      	str	r3, [sp, #8]
 80091f2:	f835 3019 	ldrh.w	r3, [r5, r9, lsl #1]
 80091f6:	4642      	mov	r2, r8
 80091f8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80091fc:	9b05      	ldr	r3, [sp, #20]
 80091fe:	4650      	mov	r0, sl
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	f8da 4014 	ldr.w	r4, [sl, #20]
 8009206:	fa0f f389 	sxth.w	r3, r9
 800920a:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800920c:	f109 0901 	add.w	r9, r9, #1
 8009210:	e7de      	b.n	80091d0 <_lv_blend_map+0x248>
        if(opa > LV_OPA_MAX) {
 8009212:	9b04      	ldr	r3, [sp, #16]
 8009214:	2bfd      	cmp	r3, #253	; 0xfd
 8009216:	d929      	bls.n	800926c <_lv_blend_map+0x2e4>
            for(y = 0; y < draw_area_h; y++) {
 8009218:	f04f 0800 	mov.w	r8, #0
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800921c:	9b06      	ldr	r3, [sp, #24]
 800921e:	ea4f 0943 	mov.w	r9, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
 8009222:	4546      	cmp	r6, r8
 8009224:	dda4      	ble.n	8009170 <_lv_blend_map+0x1e8>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 8009226:	4629      	mov	r1, r5
 8009228:	4620      	mov	r0, r4
 800922a:	464a      	mov	r2, r9
 800922c:	f006 fa3a 	bl	800f6a4 <_lv_memcpy>
                disp_buf_first += disp_w;
 8009230:	9b07      	ldr	r3, [sp, #28]
                map_buf_first += map_w;
 8009232:	443d      	add	r5, r7
                disp_buf_first += disp_w;
 8009234:	441c      	add	r4, r3
            for(y = 0; y < draw_area_h; y++) {
 8009236:	f108 0801 	add.w	r8, r8, #1
 800923a:	e7f2      	b.n	8009222 <_lv_blend_map+0x29a>
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 800923c:	f834 1018 	ldrh.w	r1, [r4, r8, lsl #1]
 8009240:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
 8009244:	9a04      	ldr	r2, [sp, #16]
 8009246:	f7ff fae2 	bl	800880e <lv_color_mix>
 800924a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 800924e:	f108 0801 	add.w	r8, r8, #1
 8009252:	9b06      	ldr	r3, [sp, #24]
 8009254:	4543      	cmp	r3, r8
 8009256:	dcf1      	bgt.n	800923c <_lv_blend_map+0x2b4>
                disp_buf_first += disp_w;
 8009258:	9b07      	ldr	r3, [sp, #28]
                map_buf_first += map_w;
 800925a:	443d      	add	r5, r7
                disp_buf_first += disp_w;
 800925c:	441c      	add	r4, r3
            for(y = 0; y < draw_area_h; y++) {
 800925e:	f109 0901 	add.w	r9, r9, #1
 8009262:	454e      	cmp	r6, r9
 8009264:	dd84      	ble.n	8009170 <_lv_blend_map+0x1e8>
                for(x = 0; x < draw_area_w; x++) {
 8009266:	f04f 0800 	mov.w	r8, #0
 800926a:	e7f2      	b.n	8009252 <_lv_blend_map+0x2ca>
            for(y = 0; y < draw_area_h; y++) {
 800926c:	f04f 0900 	mov.w	r9, #0
 8009270:	e7f7      	b.n	8009262 <_lv_blend_map+0x2da>
        if(opa > LV_OPA_MAX) {
 8009272:	9b04      	ldr	r3, [sp, #16]
 8009274:	2bfd      	cmp	r3, #253	; 0xfd
 8009276:	f240 80e0 	bls.w	800943a <_lv_blend_map+0x4b2>
            int32_t x_end4 = draw_area_w - 4;
 800927a:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 800927c:	f8cd a010 	str.w	sl, [sp, #16]
            int32_t x_end4 = draw_area_w - 4;
 8009280:	3b04      	subs	r3, #4
 8009282:	9308      	str	r3, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
 8009284:	9a04      	ldr	r2, [sp, #16]
 8009286:	4296      	cmp	r6, r2
 8009288:	f77f af72 	ble.w	8009170 <_lv_blend_map+0x1e8>
 800928c:	9b05      	ldr	r3, [sp, #20]
 800928e:	46a2      	mov	sl, r4
 8009290:	46ab      	mov	fp, r5
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8009292:	f04f 0800 	mov.w	r8, #0
 8009296:	e01b      	b.n	80092d0 <_lv_blend_map+0x348>
                    MAP_NORMAL_MASK_PX(x)
 8009298:	f8ba 1000 	ldrh.w	r1, [sl]
 800929c:	f8bb 0000 	ldrh.w	r0, [fp]
 80092a0:	9309      	str	r3, [sp, #36]	; 0x24
 80092a2:	f7ff fab4 	bl	800880e <lv_color_mix>
 80092a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a8:	f8aa 0000 	strh.w	r0, [sl]
 80092ac:	e00a      	b.n	80092c4 <_lv_blend_map+0x33c>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80092ae:	079a      	lsls	r2, r3, #30
 80092b0:	d012      	beq.n	80092d8 <_lv_blend_map+0x350>
                    MAP_NORMAL_MASK_PX(x)
 80092b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092b6:	b12a      	cbz	r2, 80092c4 <_lv_blend_map+0x33c>
 80092b8:	2aff      	cmp	r2, #255	; 0xff
 80092ba:	d1ed      	bne.n	8009298 <_lv_blend_map+0x310>
 80092bc:	f8bb 2000 	ldrh.w	r2, [fp]
 80092c0:	f8aa 2000 	strh.w	r2, [sl]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80092c4:	f108 0801 	add.w	r8, r8, #1
 80092c8:	f10b 0b02 	add.w	fp, fp, #2
 80092cc:	f10a 0a02 	add.w	sl, sl, #2
 80092d0:	9a06      	ldr	r2, [sp, #24]
 80092d2:	4699      	mov	r9, r3
 80092d4:	4542      	cmp	r2, r8
 80092d6:	dcea      	bgt.n	80092ae <_lv_blend_map+0x326>
 80092d8:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80092dc:	eb05 0b0a 	add.w	fp, r5, sl
 80092e0:	44a2      	add	sl, r4
                for(; x < x_end4; x += 4) {
 80092e2:	9b08      	ldr	r3, [sp, #32]
 80092e4:	4543      	cmp	r3, r8
 80092e6:	dc0f      	bgt.n	8009308 <_lv_blend_map+0x380>
                    MAP_NORMAL_MASK_PX(x)
 80092e8:	eba9 0908 	sub.w	r9, r9, r8
                for(; x < draw_area_w ; x++) {
 80092ec:	9b06      	ldr	r3, [sp, #24]
 80092ee:	4543      	cmp	r3, r8
 80092f0:	dc6d      	bgt.n	80093ce <_lv_blend_map+0x446>
                disp_buf_first += disp_w;
 80092f2:	9b07      	ldr	r3, [sp, #28]
                map_buf_first += map_w;
 80092f4:	443d      	add	r5, r7
                disp_buf_first += disp_w;
 80092f6:	441c      	add	r4, r3
                mask += draw_area_w;
 80092f8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80092fc:	4413      	add	r3, r2
 80092fe:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 8009300:	9b04      	ldr	r3, [sp, #16]
 8009302:	3301      	adds	r3, #1
 8009304:	9304      	str	r3, [sp, #16]
 8009306:	e7bd      	b.n	8009284 <_lv_blend_map+0x2fc>
                    if(*mask32) {
 8009308:	f8d9 3000 	ldr.w	r3, [r9]
 800930c:	b18b      	cbz	r3, 8009332 <_lv_blend_map+0x3aa>
                        if((*mask32) == 0xFFFFFFFF) {
 800930e:	3301      	adds	r3, #1
 8009310:	d118      	bne.n	8009344 <_lv_blend_map+0x3bc>
                            disp_buf_first[x] = map_buf_first[x];
 8009312:	f8bb 3000 	ldrh.w	r3, [fp]
 8009316:	f8aa 3000 	strh.w	r3, [sl]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
 800931a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800931e:	f8aa 3002 	strh.w	r3, [sl, #2]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
 8009322:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8009326:	f8aa 3004 	strh.w	r3, [sl, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 800932a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 800932e:	f8aa 3006 	strh.w	r3, [sl, #6]
                    mask32++;
 8009332:	f109 0904 	add.w	r9, r9, #4
                for(; x < x_end4; x += 4) {
 8009336:	f108 0804 	add.w	r8, r8, #4
 800933a:	f10b 0b08 	add.w	fp, fp, #8
 800933e:	f10a 0a08 	add.w	sl, sl, #8
 8009342:	e7ce      	b.n	80092e2 <_lv_blend_map+0x35a>
                            MAP_NORMAL_MASK_PX(x)
 8009344:	f899 2000 	ldrb.w	r2, [r9]
 8009348:	b12a      	cbz	r2, 8009356 <_lv_blend_map+0x3ce>
 800934a:	2aff      	cmp	r2, #255	; 0xff
 800934c:	d124      	bne.n	8009398 <_lv_blend_map+0x410>
 800934e:	f8bb 3000 	ldrh.w	r3, [fp]
 8009352:	f8aa 3000 	strh.w	r3, [sl]
                            MAP_NORMAL_MASK_PX(x + 1)
 8009356:	f899 2001 	ldrb.w	r2, [r9, #1]
 800935a:	b12a      	cbz	r2, 8009368 <_lv_blend_map+0x3e0>
 800935c:	2aff      	cmp	r2, #255	; 0xff
 800935e:	d124      	bne.n	80093aa <_lv_blend_map+0x422>
 8009360:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8009364:	f8aa 3002 	strh.w	r3, [sl, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 8009368:	f899 2002 	ldrb.w	r2, [r9, #2]
 800936c:	b12a      	cbz	r2, 800937a <_lv_blend_map+0x3f2>
 800936e:	2aff      	cmp	r2, #255	; 0xff
 8009370:	d124      	bne.n	80093bc <_lv_blend_map+0x434>
 8009372:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8009376:	f8aa 3004 	strh.w	r3, [sl, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 800937a:	f899 2003 	ldrb.w	r2, [r9, #3]
 800937e:	2a00      	cmp	r2, #0
 8009380:	d0d7      	beq.n	8009332 <_lv_blend_map+0x3aa>
 8009382:	2aff      	cmp	r2, #255	; 0xff
 8009384:	d0d1      	beq.n	800932a <_lv_blend_map+0x3a2>
 8009386:	f8ba 1006 	ldrh.w	r1, [sl, #6]
 800938a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800938e:	f7ff fa3e 	bl	800880e <lv_color_mix>
 8009392:	f8aa 0006 	strh.w	r0, [sl, #6]
 8009396:	e7cc      	b.n	8009332 <_lv_blend_map+0x3aa>
                            MAP_NORMAL_MASK_PX(x)
 8009398:	f8ba 1000 	ldrh.w	r1, [sl]
 800939c:	f8bb 0000 	ldrh.w	r0, [fp]
 80093a0:	f7ff fa35 	bl	800880e <lv_color_mix>
 80093a4:	f8aa 0000 	strh.w	r0, [sl]
 80093a8:	e7d5      	b.n	8009356 <_lv_blend_map+0x3ce>
                            MAP_NORMAL_MASK_PX(x + 1)
 80093aa:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80093ae:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 80093b2:	f7ff fa2c 	bl	800880e <lv_color_mix>
 80093b6:	f8aa 0002 	strh.w	r0, [sl, #2]
 80093ba:	e7d5      	b.n	8009368 <_lv_blend_map+0x3e0>
                            MAP_NORMAL_MASK_PX(x + 2)
 80093bc:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 80093c0:	f8bb 0004 	ldrh.w	r0, [fp, #4]
 80093c4:	f7ff fa23 	bl	800880e <lv_color_mix>
 80093c8:	f8aa 0004 	strh.w	r0, [sl, #4]
 80093cc:	e7d5      	b.n	800937a <_lv_blend_map+0x3f2>
                    MAP_NORMAL_MASK_PX(x)
 80093ce:	f819 2008 	ldrb.w	r2, [r9, r8]
 80093d2:	b12a      	cbz	r2, 80093e0 <_lv_blend_map+0x458>
 80093d4:	2aff      	cmp	r2, #255	; 0xff
 80093d6:	d106      	bne.n	80093e6 <_lv_blend_map+0x45e>
 80093d8:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 80093dc:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
                for(; x < draw_area_w ; x++) {
 80093e0:	f108 0801 	add.w	r8, r8, #1
 80093e4:	e782      	b.n	80092ec <_lv_blend_map+0x364>
                    MAP_NORMAL_MASK_PX(x)
 80093e6:	f834 1018 	ldrh.w	r1, [r4, r8, lsl #1]
 80093ea:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
 80093ee:	f7ff fa0e 	bl	800880e <lv_color_mix>
 80093f2:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 80093f6:	e7f3      	b.n	80093e0 <_lv_blend_map+0x458>
                    if(mask[x]) {
 80093f8:	9b05      	ldr	r3, [sp, #20]
 80093fa:	f813 2008 	ldrb.w	r2, [r3, r8]
 80093fe:	b172      	cbz	r2, 800941e <_lv_blend_map+0x496>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8009400:	2afc      	cmp	r2, #252	; 0xfc
 8009402:	bf96      	itet	ls
 8009404:	9b04      	ldrls	r3, [sp, #16]
 8009406:	9a04      	ldrhi	r2, [sp, #16]
 8009408:	435a      	mulls	r2, r3
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 800940a:	f834 1018 	ldrh.w	r1, [r4, r8, lsl #1]
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800940e:	bf98      	it	ls
 8009410:	0a12      	lsrls	r2, r2, #8
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 8009412:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
 8009416:	f7ff f9fa 	bl	800880e <lv_color_mix>
 800941a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 800941e:	f108 0801 	add.w	r8, r8, #1
 8009422:	9b06      	ldr	r3, [sp, #24]
 8009424:	4543      	cmp	r3, r8
 8009426:	dce7      	bgt.n	80093f8 <_lv_blend_map+0x470>
                disp_buf_first += disp_w;
 8009428:	9b07      	ldr	r3, [sp, #28]
                map_buf_first += map_w;
 800942a:	443d      	add	r5, r7
                disp_buf_first += disp_w;
 800942c:	441c      	add	r4, r3
                mask += draw_area_w;
 800942e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8009432:	4413      	add	r3, r2
 8009434:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 8009436:	f10a 0a01 	add.w	sl, sl, #1
 800943a:	4556      	cmp	r6, sl
 800943c:	f77f ae98 	ble.w	8009170 <_lv_blend_map+0x1e8>
                for(x = 0; x < draw_area_w; x++) {
 8009440:	f04f 0800 	mov.w	r8, #0
 8009444:	e7ed      	b.n	8009422 <_lv_blend_map+0x49a>
    switch(mode) {
 8009446:	f1ba 0f01 	cmp.w	sl, #1
 800944a:	d005      	beq.n	8009458 <_lv_blend_map+0x4d0>
 800944c:	f1ba 0f02 	cmp.w	sl, #2
 8009450:	f47f ae8e 	bne.w	8009170 <_lv_blend_map+0x1e8>
            blend_fp = color_blend_true_color_subtractive;
 8009454:	4a36      	ldr	r2, [pc, #216]	; (8009530 <_lv_blend_map+0x5a8>)
 8009456:	e000      	b.n	800945a <_lv_blend_map+0x4d2>
            blend_fp = color_blend_true_color_additive;
 8009458:	4a36      	ldr	r2, [pc, #216]	; (8009534 <_lv_blend_map+0x5ac>)
            blend_fp = color_blend_true_color_subtractive;
 800945a:	9209      	str	r2, [sp, #36]	; 0x24
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800945c:	9a07      	ldr	r2, [sp, #28]
 800945e:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8009462:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8009466:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009468:	007f      	lsls	r7, r7, #1
 800946a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800946e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009470:	0052      	lsls	r2, r2, #1
 8009472:	9207      	str	r2, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009474:	9a08      	ldr	r2, [sp, #32]
 8009476:	2a01      	cmp	r2, #1
 8009478:	d125      	bne.n	80094c6 <_lv_blend_map+0x53e>
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800947a:	1a5b      	subs	r3, r3, r1
 800947c:	eba0 0b03 	sub.w	fp, r0, r3
        map_buf_tmp -= draw_area->x1;
 8009480:	ebcc 024b 	rsb	r2, ip, fp, lsl #1
 8009484:	4415      	add	r5, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009486:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800948a:	429e      	cmp	r6, r3
 800948c:	f73f ae70 	bgt.w	8009170 <_lv_blend_map+0x1e8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009490:	f04f 0900 	mov.w	r9, #0
 8009494:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 8009498:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800949c:	eb0a 0809 	add.w	r8, sl, r9
 80094a0:	4598      	cmp	r8, r3
 80094a2:	dd04      	ble.n	80094ae <_lv_blend_map+0x526>
            disp_buf_tmp += disp_w;
 80094a4:	9b07      	ldr	r3, [sp, #28]
            map_buf_tmp += map_w;
 80094a6:	443d      	add	r5, r7
            disp_buf_tmp += disp_w;
 80094a8:	441c      	add	r4, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80094aa:	3601      	adds	r6, #1
 80094ac:	e7eb      	b.n	8009486 <_lv_blend_map+0x4fe>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
 80094ae:	9a04      	ldr	r2, [sp, #16]
 80094b0:	f834 1018 	ldrh.w	r1, [r4, r8, lsl #1]
 80094b4:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
 80094b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ba:	4798      	blx	r3
 80094bc:	f109 0901 	add.w	r9, r9, #1
 80094c0:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 80094c4:	e7e8      	b.n	8009498 <_lv_blend_map+0x510>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 80094c6:	9b05      	ldr	r3, [sp, #20]
        map_buf_tmp -= draw_area->x1;
 80094c8:	eba5 050c 	sub.w	r5, r5, ip
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 80094cc:	eba3 0b00 	sub.w	fp, r3, r0
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80094d0:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80094d4:	429e      	cmp	r6, r3
 80094d6:	f73f ae4b 	bgt.w	8009170 <_lv_blend_map+0x1e8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80094da:	f04f 0900 	mov.w	r9, #0
 80094de:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
                if(mask_tmp[x] == 0) continue;
 80094e2:	eb0b 030a 	add.w	r3, fp, sl
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80094e6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80094ea:	eb09 080a 	add.w	r8, r9, sl
 80094ee:	4590      	cmp	r8, r2
 80094f0:	dd06      	ble.n	8009500 <_lv_blend_map+0x578>
            disp_buf_tmp += disp_w;
 80094f2:	9b07      	ldr	r3, [sp, #28]
            map_buf_tmp += map_w;
 80094f4:	443d      	add	r5, r7
            disp_buf_tmp += disp_w;
 80094f6:	441c      	add	r4, r3
            mask_tmp += draw_area_w;
 80094f8:	9b06      	ldr	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80094fa:	3601      	adds	r6, #1
            mask_tmp += draw_area_w;
 80094fc:	449b      	add	fp, r3
 80094fe:	e7e7      	b.n	80094d0 <_lv_blend_map+0x548>
                if(mask_tmp[x] == 0) continue;
 8009500:	f813 2009 	ldrb.w	r2, [r3, r9]
 8009504:	b18a      	cbz	r2, 800952a <_lv_blend_map+0x5a2>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 8009506:	2afc      	cmp	r2, #252	; 0xfc
 8009508:	bf98      	it	ls
 800950a:	9904      	ldrls	r1, [sp, #16]
 800950c:	9305      	str	r3, [sp, #20]
 800950e:	bf98      	it	ls
 8009510:	434a      	mulls	r2, r1
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 8009512:	9b09      	ldr	r3, [sp, #36]	; 0x24
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 8009514:	bf94      	ite	ls
 8009516:	0a12      	lsrls	r2, r2, #8
 8009518:	9a04      	ldrhi	r2, [sp, #16]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 800951a:	f834 1018 	ldrh.w	r1, [r4, r8, lsl #1]
 800951e:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
 8009522:	4798      	blx	r3
 8009524:	9b05      	ldr	r3, [sp, #20]
 8009526:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 800952a:	f109 0901 	add.w	r9, r9, #1
 800952e:	e7da      	b.n	80094e6 <_lv_blend_map+0x55e>
 8009530:	08008919 	.word	0x08008919
 8009534:	08008881 	.word	0x08008881

08009538 <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	4604      	mov	r4, r0
 800953c:	460d      	mov	r5, r1
 800953e:	b0a0      	sub	sp, #128	; 0x80
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 8009540:	a80b      	add	r0, sp, #44	; 0x2c
{
 8009542:	4616      	mov	r6, r2
    lv_draw_rect_dsc_init(&rect_dsc);
 8009544:	f002 fd34 	bl	800bfb0 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
 8009548:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <show_error+0x3c>)
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800954a:	aa0b      	add	r2, sp, #44	; 0x2c
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800954c:	881b      	ldrh	r3, [r3, #0]
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800954e:	4629      	mov	r1, r5
 8009550:	4620      	mov	r0, r4
    rect_dsc.bg_color = LV_COLOR_WHITE;
 8009552:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
 8009556:	f002 fd4f 	bl	800bff8 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800955a:	a802      	add	r0, sp, #8
 800955c:	f000 fcd6 	bl	8009f0c <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 8009560:	2300      	movs	r3, #0
 8009562:	aa02      	add	r2, sp, #8
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	4629      	mov	r1, r5
 8009568:	4633      	mov	r3, r6
 800956a:	4620      	mov	r0, r4
 800956c:	f000 fce6 	bl	8009f3c <lv_draw_label>
}
 8009570:	b020      	add	sp, #128	; 0x80
 8009572:	bd70      	pop	{r4, r5, r6, pc}
 8009574:	080158b2 	.word	0x080158b2

08009578 <lv_area_copy>:
{
 8009578:	3901      	subs	r1, #1
 800957a:	f100 0308 	add.w	r3, r0, #8
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800957e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009582:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 8009586:	4298      	cmp	r0, r3
 8009588:	d1f9      	bne.n	800957e <lv_area_copy+0x6>
}
 800958a:	4770      	bx	lr

0800958c <lv_draw_map>:
{
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	b0bb      	sub	sp, #236	; 0xec
 8009592:	461c      	mov	r4, r3
 8009594:	f89d 3110 	ldrb.w	r3, [sp, #272]	; 0x110
 8009598:	9006      	str	r0, [sp, #24]
 800959a:	930d      	str	r3, [sp, #52]	; 0x34
 800959c:	f89d 3114 	ldrb.w	r3, [sp, #276]	; 0x114
    lv_area_copy(&draw_area, clip_area);
 80095a0:	a823      	add	r0, sp, #140	; 0x8c
{
 80095a2:	910f      	str	r1, [sp, #60]	; 0x3c
 80095a4:	4616      	mov	r6, r2
 80095a6:	9309      	str	r3, [sp, #36]	; 0x24
    lv_area_copy(&draw_area, clip_area);
 80095a8:	f7ff ffe6 	bl	8009578 <lv_area_copy>
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 80095ac:	f7fe f950 	bl	8007850 <_lv_refr_get_disp_refreshing>
 80095b0:	4607      	mov	r7, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80095b2:	f004 ff48 	bl	800e446 <lv_disp_get_buf>
    draw_area.x1 -= disp_area->x1;
 80095b6:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
 80095ba:	8a03      	ldrh	r3, [r0, #16]
    draw_area.y1 -= disp_area->y1;
 80095bc:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
    draw_area.x1 -= disp_area->x1;
 80095c0:	1ad2      	subs	r2, r2, r3
 80095c2:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
    draw_area.x2 -= disp_area->x1;
 80095c6:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80095ca:	9005      	str	r0, [sp, #20]
    draw_area.x2 -= disp_area->x1;
 80095cc:	1ad2      	subs	r2, r2, r3
    draw_area.y1 -= disp_area->y1;
 80095ce:	8a40      	ldrh	r0, [r0, #18]
    draw_area.y2 -= disp_area->y1;
 80095d0:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
    draw_area.y1 -= disp_area->y1;
 80095d4:	1a09      	subs	r1, r1, r0
    draw_area.y2 -= disp_area->y1;
 80095d6:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
 80095d8:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    draw_area.x2 -= disp_area->x1;
 80095dc:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
    draw_area.y2 -= disp_area->y1;
 80095e0:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 80095e4:	f002 f97e 	bl	800b8e4 <lv_draw_mask_get_cnt>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 80095e8:	900c      	str	r0, [sp, #48]	; 0x30
 80095ea:	b9e8      	cbnz	r0, 8009628 <lv_draw_map+0x9c>
 80095ec:	8863      	ldrh	r3, [r4, #2]
 80095ee:	b9db      	cbnz	r3, 8009628 <lv_draw_map+0x9c>
 80095f0:	8923      	ldrh	r3, [r4, #8]
 80095f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095f6:	d117      	bne.n	8009628 <lv_draw_map+0x9c>
 80095f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095fa:	b9ab      	cbnz	r3, 8009628 <lv_draw_map+0x9c>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 80095fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f040 80a3 	bne.w	800974a <lv_draw_map+0x1be>
 8009604:	7aa3      	ldrb	r3, [r4, #10]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f040 80a1 	bne.w	800974e <lv_draw_map+0x1c2>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
 800960c:	7ba2      	ldrb	r2, [r4, #14]
 800960e:	9906      	ldr	r1, [sp, #24]
 8009610:	9202      	str	r2, [sp, #8]
 8009612:	7822      	ldrb	r2, [r4, #0]
 8009614:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009616:	9201      	str	r2, [sp, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	9200      	str	r2, [sp, #0]
 800961c:	4632      	mov	r2, r6
 800961e:	f7ff fcb3 	bl	8008f88 <_lv_blend_map>
}
 8009622:	b03b      	add	sp, #236	; 0xec
 8009624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8009628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800962a:	2b00      	cmp	r3, #0
 800962c:	bf14      	ite	ne
 800962e:	2303      	movne	r3, #3
 8009630:	2302      	moveq	r3, #2
 8009632:	9307      	str	r3, [sp, #28]
        int32_t map_w = lv_area_get_width(map_area);
 8009634:	9b06      	ldr	r3, [sp, #24]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 8009636:	9906      	ldr	r1, [sp, #24]
        int32_t map_w = lv_area_get_width(map_area);
 8009638:	f9b3 0000 	ldrsh.w	r0, [r3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800963c:	889d      	ldrh	r5, [r3, #4]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800963e:	9b05      	ldr	r3, [sp, #20]
 8009640:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8009644:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009648:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800964c:	f9bd c08e 	ldrsh.w	ip, [sp, #142]	; 0x8e
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009650:	f9bd e08c 	ldrsh.w	lr, [sp, #140]	; 0x8c
 8009654:	3501      	adds	r5, #1
 8009656:	1a2d      	subs	r5, r5, r0
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 8009658:	1a89      	subs	r1, r1, r2
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800965a:	1ac0      	subs	r0, r0, r3
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800965c:	ebac 0101 	sub.w	r1, ip, r1
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009660:	ebae 0000 	sub.w	r0, lr, r0
 8009664:	b22d      	sxth	r5, r5
 8009666:	fb05 0001 	mla	r0, r5, r1, r0
 800966a:	9907      	ldr	r1, [sp, #28]
 800966c:	fb00 6101 	mla	r1, r0, r1, r6
 8009670:	910a      	str	r1, [sp, #40]	; 0x28
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8009672:	fa1f f18e 	uxth.w	r1, lr
 8009676:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 800967a:	440b      	add	r3, r1
 800967c:	f10e 0e01 	add.w	lr, lr, #1
 8009680:	ebae 0e01 	sub.w	lr, lr, r1
 8009684:	fa1f fe8e 	uxth.w	lr, lr
 8009688:	b29b      	uxth	r3, r3
 800968a:	fa0f f18e 	sxth.w	r1, lr
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 800968e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009692:	449e      	add	lr, r3
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8009694:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8009698:	fa1f f38c 	uxth.w	r3, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800969c:	f8bd c092 	ldrh.w	ip, [sp, #146]	; 0x92
 80096a0:	441a      	add	r2, r3
 80096a2:	f10c 0c01 	add.w	ip, ip, #1
 80096a6:	ebac 0c03 	sub.w	ip, ip, r3
 80096aa:	fa0f f38c 	sxth.w	r3, ip
 80096ae:	9317      	str	r3, [sp, #92]	; 0x5c
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 80096b0:	8863      	ldrh	r3, [r4, #2]
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 80096b2:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80096b4:	9111      	str	r1, [sp, #68]	; 0x44
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 80096b6:	f8ad e098 	strh.w	lr, [sp, #152]	; 0x98
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 80096ba:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
        blend_area.y2 = blend_area.y1;
 80096be:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f040 809e 	bne.w	8009804 <lv_draw_map+0x278>
 80096c8:	8923      	ldrh	r3, [r4, #8]
 80096ca:	f5b3 7280 	subs.w	r2, r3, #256	; 0x100
 80096ce:	bf18      	it	ne
 80096d0:	2201      	movne	r2, #1
 80096d2:	9216      	str	r2, [sp, #88]	; 0x58
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 80096d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	f040 8096 	bne.w	8009808 <lv_draw_map+0x27c>
 80096dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e0:	f040 8092 	bne.w	8009808 <lv_draw_map+0x27c>
 80096e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f040 808e 	bne.w	8009808 <lv_draw_map+0x27c>
 80096ec:	7aa3      	ldrb	r3, [r4, #10]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f040 808a 	bne.w	8009808 <lv_draw_map+0x27c>
 80096f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 8086 	beq.w	8009808 <lv_draw_map+0x27c>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 80096fc:	4638      	mov	r0, r7
 80096fe:	f004 fe6f 	bl	800e3e0 <lv_disp_get_hor_res>
 8009702:	4606      	mov	r6, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 8009704:	a823      	add	r0, sp, #140	; 0x8c
 8009706:	f005 f9c4 	bl	800ea92 <lv_area_get_size>
 800970a:	42b0      	cmp	r0, r6
 800970c:	d803      	bhi.n	8009716 <lv_draw_map+0x18a>
 800970e:	a823      	add	r0, sp, #140	; 0x8c
 8009710:	f005 f9bf 	bl	800ea92 <lv_area_get_size>
 8009714:	4606      	mov	r6, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8009716:	0070      	lsls	r0, r6, #1
 8009718:	f006 f8e0 	bl	800f8dc <_lv_mem_buf_get>
 800971c:	4607      	mov	r7, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800971e:	4630      	mov	r0, r6
 8009720:	f006 f8dc 	bl	800f8dc <_lv_mem_buf_get>
            for(y = 0; y < draw_area_h; y++) {
 8009724:	f04f 0900 	mov.w	r9, #0
                map_buf_tmp += map_w * px_size_byte;
 8009728:	9b07      	ldr	r3, [sp, #28]
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800972a:	4680      	mov	r8, r0
                map_buf_tmp += map_w * px_size_byte;
 800972c:	435d      	muls	r5, r3
        uint32_t px_i = 0;
 800972e:	464b      	mov	r3, r9
 8009730:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009732:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
            for(y = 0; y < draw_area_h; y++) {
 8009736:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009738:	454a      	cmp	r2, r9
 800973a:	dd47      	ble.n	80097cc <lv_draw_map+0x240>
 800973c:	eb07 0e43 	add.w	lr, r7, r3, lsl #1
                map_px = map_buf_tmp;
 8009740:	990a      	ldr	r1, [sp, #40]	; 0x28
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009742:	2200      	movs	r2, #0
                    mask_buf[px_i] = px_opa;
 8009744:	eb08 0c03 	add.w	ip, r8, r3
 8009748:	e011      	b.n	800976e <lv_draw_map+0x1e2>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800974a:	2303      	movs	r3, #3
 800974c:	e771      	b.n	8009632 <lv_draw_map+0xa6>
 800974e:	2302      	movs	r3, #2
 8009750:	e76f      	b.n	8009632 <lv_draw_map+0xa6>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8009752:	7888      	ldrb	r0, [r1, #2]
                    mask_buf[px_i] = px_opa;
 8009754:	f80c 0002 	strb.w	r0, [ip, r2]
                    if(px_opa) {
 8009758:	b130      	cbz	r0, 8009768 <lv_draw_map+0x1dc>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
 800975a:	f891 b001 	ldrb.w	fp, [r1, #1]
 800975e:	7808      	ldrb	r0, [r1, #0]
 8009760:	eb00 200b 	add.w	r0, r0, fp, lsl #8
 8009764:	f82e 0012 	strh.w	r0, [lr, r2, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009768:	9807      	ldr	r0, [sp, #28]
 800976a:	3201      	adds	r2, #1
 800976c:	4401      	add	r1, r0
 800976e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009770:	4290      	cmp	r0, r2
 8009772:	dcee      	bgt.n	8009752 <lv_draw_map+0x1c6>
                map_buf_tmp += map_w * px_size_byte;
 8009774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009776:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 800977a:	442a      	add	r2, r5
 800977c:	920a      	str	r2, [sp, #40]	; 0x28
 800977e:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8009782:	4453      	add	r3, sl
 8009784:	3201      	adds	r2, #1
 8009786:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 8009788:	b212      	sxth	r2, r2
 800978a:	441a      	add	r2, r3
 800978c:	42b2      	cmp	r2, r6
 800978e:	d207      	bcs.n	80097a0 <lv_draw_map+0x214>
                    blend_area.y2 ++;
 8009790:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 8009794:	3201      	adds	r2, #1
 8009796:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            for(y = 0; y < draw_area_h; y++) {
 800979a:	f109 0901 	add.w	r9, r9, #1
 800979e:	e7ca      	b.n	8009736 <lv_draw_map+0x1aa>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 80097a0:	7ba3      	ldrb	r3, [r4, #14]
 80097a2:	463a      	mov	r2, r7
 80097a4:	9302      	str	r3, [sp, #8]
 80097a6:	7823      	ldrb	r3, [r4, #0]
 80097a8:	a925      	add	r1, sp, #148	; 0x94
 80097aa:	9301      	str	r3, [sp, #4]
 80097ac:	2302      	movs	r3, #2
 80097ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	4643      	mov	r3, r8
 80097b4:	f7ff fbe8 	bl	8008f88 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 80097b8:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 80097bc:	3301      	adds	r3, #1
 80097be:	b21b      	sxth	r3, r3
 80097c0:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
 80097c4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    px_i = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	e7e6      	b.n	800979a <lv_draw_map+0x20e>
            if(blend_area.y1 != blend_area.y2) {
 80097cc:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 80097d0:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d00e      	beq.n	80097f6 <lv_draw_map+0x26a>
                blend_area.y2--;
 80097d8:	3b01      	subs	r3, #1
 80097da:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 80097de:	7ba3      	ldrb	r3, [r4, #14]
 80097e0:	463a      	mov	r2, r7
 80097e2:	9302      	str	r3, [sp, #8]
 80097e4:	7823      	ldrb	r3, [r4, #0]
 80097e6:	a925      	add	r1, sp, #148	; 0x94
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	2302      	movs	r3, #2
 80097ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	4643      	mov	r3, r8
 80097f2:	f7ff fbc9 	bl	8008f88 <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
 80097f6:	4640      	mov	r0, r8
 80097f8:	f005 ff08 	bl	800f60c <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 80097fc:	4638      	mov	r0, r7
            _lv_mem_buf_release(map2);
 80097fe:	f005 ff05 	bl	800f60c <_lv_mem_buf_release>
}
 8009802:	e70e      	b.n	8009622 <lv_draw_map+0x96>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 8009804:	2301      	movs	r3, #1
 8009806:	9316      	str	r3, [sp, #88]	; 0x58
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 8009808:	4638      	mov	r0, r7
 800980a:	f004 fde9 	bl	800e3e0 <lv_disp_get_hor_res>
 800980e:	9008      	str	r0, [sp, #32]
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 8009810:	a823      	add	r0, sp, #140	; 0x8c
 8009812:	f005 f93e 	bl	800ea92 <lv_area_get_size>
 8009816:	9b08      	ldr	r3, [sp, #32]
 8009818:	4298      	cmp	r0, r3
 800981a:	d803      	bhi.n	8009824 <lv_draw_map+0x298>
 800981c:	a823      	add	r0, sp, #140	; 0x8c
 800981e:	f005 f938 	bl	800ea92 <lv_area_get_size>
 8009822:	9008      	str	r0, [sp, #32]
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8009824:	9b08      	ldr	r3, [sp, #32]
 8009826:	0058      	lsls	r0, r3, #1
 8009828:	f006 f858 	bl	800f8dc <_lv_mem_buf_get>
 800982c:	9010      	str	r0, [sp, #64]	; 0x40
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800982e:	9808      	ldr	r0, [sp, #32]
 8009830:	f006 f854 	bl	800f8dc <_lv_mem_buf_get>
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 8009834:	214c      	movs	r1, #76	; 0x4c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 8009836:	4682      	mov	sl, r0
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 8009838:	a827      	add	r0, sp, #156	; 0x9c
 800983a:	f006 f8ed 	bl	800fa18 <_lv_memset_00>
            if(transform) {
 800983e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009840:	b363      	cbz	r3, 800989c <lv_draw_map+0x310>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8009842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009844:	2b00      	cmp	r3, #0
 8009846:	f040 8089 	bne.w	800995c <lv_draw_map+0x3d0>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
 800984a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800984c:	2b00      	cmp	r3, #0
 800984e:	bf14      	ite	ne
 8009850:	2206      	movne	r2, #6
 8009852:	2204      	moveq	r2, #4
                trans_dsc.cfg.angle = draw_dsc->angle;
 8009854:	8863      	ldrh	r3, [r4, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009856:	9906      	ldr	r1, [sp, #24]
 8009858:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.zoom = draw_dsc->zoom;
 800985c:	8923      	ldrh	r3, [r4, #8]
 800985e:	8849      	ldrh	r1, [r1, #2]
 8009860:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
 8009864:	9b06      	ldr	r3, [sp, #24]
                _lv_img_buf_transform_init(&trans_dsc);
 8009866:	a827      	add	r0, sp, #156	; 0x9c
 8009868:	88db      	ldrh	r3, [r3, #6]
                trans_dsc.cfg.src = map_p;
 800986a:	9627      	str	r6, [sp, #156]	; 0x9c
 800986c:	3301      	adds	r3, #1
 800986e:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
 8009870:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 8009874:	88a3      	ldrh	r3, [r4, #4]
                trans_dsc.cfg.src_w = map_w;
 8009876:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 800987a:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
 800987e:	88e3      	ldrh	r3, [r4, #6]
                trans_dsc.cfg.cf = cf;
 8009880:	f88d 20ae 	strb.w	r2, [sp, #174]	; 0xae
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
 8009884:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.color = draw_dsc->recolor;
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800988e:	7be3      	ldrb	r3, [r4, #15]
 8009890:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009894:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
                _lv_img_buf_transform_init(&trans_dsc);
 8009898:	f003 fa84 	bl	800cda4 <_lv_img_buf_transform_init>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 800989c:	7aa3      	ldrb	r3, [r4, #10]
 800989e:	43da      	mvns	r2, r3
 80098a0:	b2d2      	uxtb	r2, r2
 80098a2:	9215      	str	r2, [sp, #84]	; 0x54
            if(draw_dsc->recolor_opa != 0) {
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d05b      	beq.n	8009960 <lv_draw_map+0x3d4>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 80098a8:	7b22      	ldrb	r2, [r4, #12]
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	08d1      	lsrs	r1, r2, #3
 80098ae:	4359      	muls	r1, r3
 80098b0:	911a      	str	r1, [sp, #104]	; 0x68
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 80098b2:	f002 0107 	and.w	r1, r2, #7
 80098b6:	7b62      	ldrb	r2, [r4, #13]
 80098b8:	0950      	lsrs	r0, r2, #5
 80098ba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 80098be:	f002 021f 	and.w	r2, r2, #31
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 80098c2:	4359      	muls	r1, r3
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 80098c4:	4353      	muls	r3, r2
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 80098c6:	9119      	str	r1, [sp, #100]	; 0x64
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 80098c8:	9314      	str	r3, [sp, #80]	; 0x50
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 80098ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d14b      	bne.n	8009968 <lv_draw_map+0x3dc>
 80098d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d148      	bne.n	8009968 <lv_draw_map+0x3dc>
 80098d6:	8863      	ldrh	r3, [r4, #2]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d145      	bne.n	8009968 <lv_draw_map+0x3dc>
 80098dc:	8923      	ldrh	r3, [r4, #8]
 80098de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098e2:	bf0c      	ite	eq
 80098e4:	f04f 0b01 	moveq.w	fp, #1
 80098e8:	f04f 0b02 	movne.w	fp, #2
            if(other_mask_cnt) {
 80098ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098ee:	b11b      	cbz	r3, 80098f8 <lv_draw_map+0x36c>
                _lv_memset_ff(mask_buf, mask_buf_size);
 80098f0:	9908      	ldr	r1, [sp, #32]
 80098f2:	4650      	mov	r0, sl
 80098f4:	f006 f8bf 	bl	800fa76 <_lv_memset_ff>
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
 80098f8:	9b05      	ldr	r3, [sp, #20]
 80098fa:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
 80098fe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009902:	4413      	add	r3, r2
 8009904:	9a06      	ldr	r2, [sp, #24]
 8009906:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800990a:	1a9b      	subs	r3, r3, r2
 800990c:	931b      	str	r3, [sp, #108]	; 0x6c
                map_buf_tmp += map_w * px_size_byte;
 800990e:	9b07      	ldr	r3, [sp, #28]
 8009910:	436b      	muls	r3, r5
 8009912:	931d      	str	r3, [sp, #116]	; 0x74
            for(y = 0; y < draw_area_h; y++) {
 8009914:	2300      	movs	r3, #0
 8009916:	930b      	str	r3, [sp, #44]	; 0x2c
        uint32_t px_i = 0;
 8009918:	9304      	str	r3, [sp, #16]
 800991a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800991c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009920:	9321      	str	r3, [sp, #132]	; 0x84
            for(y = 0; y < draw_area_h; y++) {
 8009922:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009926:	4293      	cmp	r3, r2
 8009928:	dc21      	bgt.n	800996e <lv_draw_map+0x3e2>
            if(blend_area.y1 != blend_area.y2) {
 800992a:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
 800992e:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
 8009932:	429a      	cmp	r2, r3
 8009934:	d00d      	beq.n	8009952 <lv_draw_map+0x3c6>
                blend_area.y2--;
 8009936:	3b01      	subs	r3, #1
 8009938:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800993c:	7ba3      	ldrb	r3, [r4, #14]
 800993e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009940:	9302      	str	r3, [sp, #8]
 8009942:	7823      	ldrb	r3, [r4, #0]
 8009944:	a925      	add	r1, sp, #148	; 0x94
 8009946:	e9cd b300 	strd	fp, r3, [sp]
 800994a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800994c:	4653      	mov	r3, sl
 800994e:	f7ff fb1b 	bl	8008f88 <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
 8009952:	4650      	mov	r0, sl
 8009954:	f005 fe5a 	bl	800f60c <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 8009958:	9810      	ldr	r0, [sp, #64]	; 0x40
 800995a:	e750      	b.n	80097fe <lv_draw_map+0x272>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800995c:	2205      	movs	r2, #5
 800995e:	e779      	b.n	8009854 <lv_draw_map+0x2c8>
            uint16_t recolor_premult[3] = {0};
 8009960:	9314      	str	r3, [sp, #80]	; 0x50
 8009962:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 8009966:	e7b0      	b.n	80098ca <lv_draw_map+0x33e>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 8009968:	f04f 0b02 	mov.w	fp, #2
 800996c:	e7be      	b.n	80098ec <lv_draw_map+0x360>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800996e:	f04f 0900 	mov.w	r9, #0
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
 8009972:	9b05      	ldr	r3, [sp, #20]
 8009974:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
 8009978:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800997c:	4413      	add	r3, r2
 800997e:	9a06      	ldr	r2, [sp, #24]
 8009980:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009984:	1a9b      	subs	r3, r3, r2
 8009986:	931c      	str	r3, [sp, #112]	; 0x70
 8009988:	9a04      	ldr	r2, [sp, #16]
 800998a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800998c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009990:	931e      	str	r3, [sp, #120]	; 0x78
                map_px = map_buf_tmp;
 8009992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
    int32_t yt = y - dsc->cfg.pivot_y;
 8009994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009996:	930e      	str	r3, [sp, #56]	; 0x38
 8009998:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800999a:	4413      	add	r3, r2
 800999c:	b21b      	sxth	r3, r3
 800999e:	9320      	str	r3, [sp, #128]	; 0x80
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 80099a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099a2:	454b      	cmp	r3, r9
 80099a4:	dc46      	bgt.n	8009a34 <lv_draw_map+0x4a8>
 80099a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099a8:	9a04      	ldr	r2, [sp, #16]
 80099aa:	189d      	adds	r5, r3, r2
                if(other_mask_cnt) {
 80099ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099ae:	b33b      	cbz	r3, 8009a00 <lv_draw_map+0x474>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
 80099b0:	4613      	mov	r3, r2
 80099b2:	4453      	add	r3, sl
 80099b4:	4699      	mov	r9, r3
 80099b6:	9805      	ldr	r0, [sp, #20]
 80099b8:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
 80099bc:	8a40      	ldrh	r0, [r0, #18]
 80099be:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 80099c2:	4402      	add	r2, r0
 80099c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80099c6:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 80099ca:	4402      	add	r2, r0
 80099cc:	9805      	ldr	r0, [sp, #20]
 80099ce:	3301      	adds	r3, #1
 80099d0:	8a00      	ldrh	r0, [r0, #16]
 80099d2:	1a5b      	subs	r3, r3, r1
 80099d4:	4401      	add	r1, r0
 80099d6:	b21b      	sxth	r3, r3
 80099d8:	b212      	sxth	r2, r2
 80099da:	b209      	sxth	r1, r1
 80099dc:	4648      	mov	r0, r9
 80099de:	f001 ff35 	bl	800b84c <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f040 8130 	bne.w	8009c48 <lv_draw_map+0x6bc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80099e8:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 80099ec:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80099f0:	3101      	adds	r1, #1
 80099f2:	1ac9      	subs	r1, r1, r3
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 80099f4:	b209      	sxth	r1, r1
 80099f6:	4648      	mov	r0, r9
 80099f8:	f006 f80e 	bl	800fa18 <_lv_memset_00>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 80099fc:	f04f 0b02 	mov.w	fp, #2
                map_buf_tmp += map_w * px_size_byte;
 8009a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009a04:	4413      	add	r3, r2
 8009a06:	930a      	str	r3, [sp, #40]	; 0x28
 8009a08:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8009a0c:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
 8009a10:	3301      	adds	r3, #1
 8009a12:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 8009a14:	b21b      	sxth	r3, r3
 8009a16:	9a08      	ldr	r2, [sp, #32]
 8009a18:	442b      	add	r3, r5
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	f080 8119 	bcs.w	8009c52 <lv_draw_map+0x6c6>
                    blend_area.y2 ++;
 8009a20:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 8009a24:	3301      	adds	r3, #1
 8009a26:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            for(y = 0; y < draw_area_h; y++) {
 8009a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2c:	9504      	str	r5, [sp, #16]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a32:	e776      	b.n	8009922 <lv_draw_map+0x396>
                    if(transform) {
 8009a34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 80e5 	beq.w	8009c06 <lv_draw_map+0x67a>
 8009a3c:	e9dd 7030 	ldrd	r7, r0, [sp, #192]	; 0xc0
 8009a40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a42:	f9bd 10a6 	ldrsh.w	r1, [sp, #166]	; 0xa6
    int32_t xt = x - dsc->cfg.pivot_x;
 8009a46:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    int32_t yt = y - dsc->cfg.pivot_y;
 8009a48:	1a51      	subs	r1, r2, r1

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 8009a4a:	f8bd 20aa 	ldrh.w	r2, [sp, #170]	; 0xaa
    int32_t xt = x - dsc->cfg.pivot_x;
 8009a4e:	444b      	add	r3, r9
 8009a50:	f9bd 60a4 	ldrsh.w	r6, [sp, #164]	; 0xa4
 8009a54:	b21b      	sxth	r3, r3
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 8009a56:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    int32_t xt = x - dsc->cfg.pivot_x;
 8009a5a:	eba3 0306 	sub.w	r3, r3, r6
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 8009a5e:	d15b      	bne.n	8009b18 <lv_draw_map+0x58c>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 8009a60:	e9dd 6232 	ldrd	r6, r2, [sp, #200]	; 0xc8
 8009a64:	fb02 f503 	mul.w	r5, r2, r3
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 8009a68:	434a      	muls	r2, r1
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 8009a6a:	fb06 5511 	mls	r5, r6, r1, r5
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 8009a6e:	fb06 2603 	mla	r6, r6, r3, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 8009a72:	eb07 05a5 	add.w	r5, r7, r5, asr #2
 8009a76:	9512      	str	r5, [sp, #72]	; 0x48
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 8009a78:	eb00 03a6 	add.w	r3, r0, r6, asr #2
    }
    else {
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 8009a7c:	9313      	str	r3, [sp, #76]	; 0x4c
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
 8009a7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a80:	121f      	asrs	r7, r3, #8
    int32_t ys_int = ys >> 8;

    if(xs_int >= dsc->cfg.src_w) return false;
 8009a82:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 8009a86:	429f      	cmp	r7, r3
 8009a88:	da40      	bge.n	8009b0c <lv_draw_map+0x580>
    else if(xs_int < 0) return false;
 8009a8a:	2f00      	cmp	r7, #0
 8009a8c:	db3e      	blt.n	8009b0c <lv_draw_map+0x580>
    int32_t ys_int = ys >> 8;
 8009a8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a90:	1216      	asrs	r6, r2, #8

    if(ys_int >= dsc->cfg.src_h) return false;
 8009a92:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 8009a96:	4296      	cmp	r6, r2
 8009a98:	da38      	bge.n	8009b0c <lv_draw_map+0x580>
    else if(ys_int < 0) return false;
 8009a9a:	2e00      	cmp	r6, #0
 8009a9c:	db36      	blt.n	8009b0c <lv_draw_map+0x580>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
 8009a9e:	f89d 10d0 	ldrb.w	r1, [sp, #208]	; 0xd0
 8009aa2:	f011 0204 	ands.w	r2, r1, #4
 8009aa6:	921f      	str	r2, [sp, #124]	; 0x7c
 8009aa8:	d05e      	beq.n	8009b68 <lv_draw_map+0x5dc>
 8009aaa:	fb03 7306 	mla	r3, r3, r6, r7
        if(dsc->tmp.has_alpha == 0) {
 8009aae:	f011 0f02 	tst.w	r1, #2
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 8009ab2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8009ab4:	ea4f 0543 	mov.w	r5, r3, lsl #1
        if(dsc->tmp.has_alpha == 0) {
 8009ab8:	d149      	bne.n	8009b4e <lv_draw_map+0x5c2>
        *d8 = *s8;
 8009aba:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
            px_size = LV_COLOR_SIZE >> 3;

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 8009abe:	1951      	adds	r1, r2, r5
 8009ac0:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8009ac4:	784b      	ldrb	r3, [r1, #1]
 8009ac6:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
            px_size = LV_COLOR_SIZE >> 3;
 8009aca:	2302      	movs	r3, #2
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
 8009acc:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
 8009ad0:	07d2      	lsls	r2, r2, #31
 8009ad2:	d505      	bpl.n	8009ae0 <lv_draw_map+0x554>
        lv_color_t ct = LV_COLOR_TRANSP;
        if(dsc->res.color.full == ct.full) return false;
 8009ad4:	f24e 0207 	movw	r2, #57351	; 0xe007
 8009ad8:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
 8009adc:	4291      	cmp	r1, r2
 8009ade:	d015      	beq.n	8009b0c <lv_draw_map+0x580>
    }

    if(dsc->cfg.antialias == false) return true;
 8009ae0:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	d054      	beq.n	8009b92 <lv_draw_map+0x606>

    dsc->tmp.xs = xs;
 8009ae8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    dsc->tmp.ys_int = ys_int;
    dsc->tmp.pxi = pxi;
    dsc->tmp.px_size = px_size;

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
 8009aea:	a827      	add	r0, sp, #156	; 0x9c
    dsc->tmp.xs = xs;
 8009aec:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
 8009af0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    dsc->tmp.xs_int = xs_int;
 8009af2:	f8ad 70dc 	strh.w	r7, [sp, #220]	; 0xdc
    dsc->tmp.ys = ys;
 8009af6:	f8ad 20da 	strh.w	r2, [sp, #218]	; 0xda
    dsc->tmp.ys_int = ys_int;
 8009afa:	f8ad 60de 	strh.w	r6, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
 8009afe:	9538      	str	r5, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
 8009b00:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    ret = _lv_img_buf_transform_anti_alias(dsc);
 8009b04:	f003 faa3 	bl	800d04e <_lv_img_buf_transform_anti_alias>
                        if(ret == false) {
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d142      	bne.n	8009b92 <lv_draw_map+0x606>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	9b04      	ldr	r3, [sp, #16]
 8009b10:	4453      	add	r3, sl
 8009b12:	f803 2009 	strb.w	r2, [r3, r9]
                                continue;
 8009b16:	e07f      	b.n	8009c18 <lv_draw_map+0x68c>
 8009b18:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8009b1a:	4353      	muls	r3, r2
 8009b1c:	434a      	muls	r2, r1
    else if(dsc->cfg.angle == 0) {
 8009b1e:	f9bd 10a8 	ldrsh.w	r1, [sp, #168]	; 0xa8
 8009b22:	115b      	asrs	r3, r3, #5
 8009b24:	1152      	asrs	r2, r2, #5
 8009b26:	b919      	cbnz	r1, 8009b30 <lv_draw_map+0x5a4>
        xs = xt + dsc->tmp.pivot_x_256;
 8009b28:	18fb      	adds	r3, r7, r3
 8009b2a:	9312      	str	r3, [sp, #72]	; 0x48
        ys = yt + dsc->tmp.pivot_y_256;
 8009b2c:	1883      	adds	r3, r0, r2
 8009b2e:	e7a5      	b.n	8009a7c <lv_draw_map+0x4f0>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 8009b30:	e9dd 1632 	ldrd	r1, r6, [sp, #200]	; 0xc8
 8009b34:	fb03 f506 	mul.w	r5, r3, r6
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 8009b38:	4356      	muls	r6, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 8009b3a:	fb02 5511 	mls	r5, r2, r1, r5
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 8009b3e:	fb03 6601 	mla	r6, r3, r1, r6
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 8009b42:	eb07 25a5 	add.w	r5, r7, r5, asr #10
 8009b46:	9512      	str	r5, [sp, #72]	; 0x48
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 8009b48:	eb00 23a6 	add.w	r3, r0, r6, asr #10
 8009b4c:	e796      	b.n	8009a7c <lv_draw_map+0x4f0>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 8009b4e:	441d      	add	r5, r3
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 8009b50:	1953      	adds	r3, r2, r5
 8009b52:	5d52      	ldrb	r2, [r2, r5]
 8009b54:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8009b58:	785a      	ldrb	r2, [r3, #1]
 8009b5a:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
            dsc->res.opa = src_u8[pxi + px_size - 1];
 8009b5e:	789b      	ldrb	r3, [r3, #2]
 8009b60:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e7b1      	b.n	8009acc <lv_draw_map+0x540>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 8009b68:	b239      	sxth	r1, r7
 8009b6a:	b232      	sxth	r2, r6
 8009b6c:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 8009b70:	a82d      	add	r0, sp, #180	; 0xb4
 8009b72:	460d      	mov	r5, r1
 8009b74:	9218      	str	r2, [sp, #96]	; 0x60
 8009b76:	f003 f82c 	bl	800cbd2 <lv_img_buf_get_px_color>
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 8009b7a:	4629      	mov	r1, r5
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 8009b7c:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 8009b80:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b82:	a82d      	add	r0, sp, #180	; 0xb4
 8009b84:	f003 f89a 	bl	800ccbc <lv_img_buf_get_px_alpha>
        pxi = 0; /*unused*/
 8009b88:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 8009b8a:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
        px_size = 0;    /*unused*/
 8009b8e:	462b      	mov	r3, r5
 8009b90:	e79c      	b.n	8009acc <lv_draw_map+0x540>
                            mask_buf[px_i] = trans_dsc.res.opa;
 8009b92:	9b04      	ldr	r3, [sp, #16]
 8009b94:	f89d 20b2 	ldrb.w	r2, [sp, #178]	; 0xb2
 8009b98:	4453      	add	r3, sl
 8009b9a:	f803 2009 	strb.w	r2, [r3, r9]
                            c.full = trans_dsc.res.color.full;
 8009b9e:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
                    if(draw_dsc->recolor_opa != 0) {
 8009ba2:	7aa2      	ldrb	r2, [r4, #10]
 8009ba4:	b35a      	cbz	r2, 8009bfe <lv_draw_map+0x672>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009ba6:	f248 0581 	movw	r5, #32897	; 0x8081
 8009baa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009bac:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009bae:	f3c3 01c4 	ubfx	r1, r3, #3, #5
 8009bb2:	fb02 0101 	mla	r1, r2, r1, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009bb6:	f003 0007 	and.w	r0, r3, #7
 8009bba:	0b5a      	lsrs	r2, r3, #13
 8009bbc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009bc0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009bc2:	9815      	ldr	r0, [sp, #84]	; 0x54
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009bc4:	f3c3 2304 	ubfx	r3, r3, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009bc8:	fb00 6202 	mla	r2, r0, r2, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009bcc:	9e14      	ldr	r6, [sp, #80]	; 0x50
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009bce:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009bd0:	fb00 6303 	mla	r3, r0, r3, r6
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009bd4:	436a      	muls	r2, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009bd6:	3180      	adds	r1, #128	; 0x80
 8009bd8:	4369      	muls	r1, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009bda:	3380      	adds	r3, #128	; 0x80
 8009bdc:	436b      	muls	r3, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009bde:	0e90      	lsrs	r0, r2, #26
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009be0:	f3c1 51c4 	ubfx	r1, r1, #23, #5
 8009be4:	f360 0802 	bfi	r8, r0, #0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009be8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 8009bec:	f361 08c7 	bfi	r8, r1, #3, #5
 8009bf0:	f363 280c 	bfi	r8, r3, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009bf4:	0dd2      	lsrs	r2, r2, #23
 8009bf6:	f362 384f 	bfi	r8, r2, #13, #3
 8009bfa:	fa1f f388 	uxth.w	r3, r8
                    map2[px_i].full = c.full;
 8009bfe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009c00:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
 8009c04:	e008      	b.n	8009c18 <lv_draw_map+0x68c>
 8009c06:	9b04      	ldr	r3, [sp, #16]
                        if(alpha_byte) {
 8009c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c0a:	4453      	add	r3, sl
 8009c0c:	b15a      	cbz	r2, 8009c26 <lv_draw_map+0x69a>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8009c0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c10:	7892      	ldrb	r2, [r2, #2]
                            mask_buf[px_i] = px_opa;
 8009c12:	f803 2009 	strb.w	r2, [r3, r9]
                            if(px_opa == 0) {
 8009c16:	b94a      	cbnz	r2, 8009c2c <lv_draw_map+0x6a0>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c1a:	9a07      	ldr	r2, [sp, #28]
 8009c1c:	f109 0901 	add.w	r9, r9, #1
 8009c20:	4413      	add	r3, r2
 8009c22:	930e      	str	r3, [sp, #56]	; 0x38
 8009c24:	e6bc      	b.n	80099a0 <lv_draw_map+0x414>
                            mask_buf[px_i] = 0xFF;
 8009c26:	22ff      	movs	r2, #255	; 0xff
 8009c28:	f803 2009 	strb.w	r2, [r3, r9]
                        c.full =  map_px[0] + (map_px[1] << 8);
 8009c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c2e:	785a      	ldrb	r2, [r3, #1]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                        if(chroma_key) {
 8009c36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                        c.full =  map_px[0] + (map_px[1] << 8);
 8009c38:	b29b      	uxth	r3, r3
                        if(chroma_key) {
 8009c3a:	2a00      	cmp	r2, #0
 8009c3c:	d0b1      	beq.n	8009ba2 <lv_draw_map+0x616>
                            if(c.full == chroma_keyed_color.full) {
 8009c3e:	f24e 0207 	movw	r2, #57351	; 0xe007
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d1ad      	bne.n	8009ba2 <lv_draw_map+0x616>
 8009c46:	e761      	b.n	8009b0c <lv_draw_map+0x580>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 8009c48:	2802      	cmp	r0, #2
 8009c4a:	bf08      	it	eq
 8009c4c:	f04f 0b02 	moveq.w	fp, #2
 8009c50:	e6d6      	b.n	8009a00 <lv_draw_map+0x474>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 8009c52:	7ba3      	ldrb	r3, [r4, #14]
 8009c54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c56:	9302      	str	r3, [sp, #8]
 8009c58:	7823      	ldrb	r3, [r4, #0]
 8009c5a:	a925      	add	r1, sp, #148	; 0x94
 8009c5c:	e9cd b300 	strd	fp, r3, [sp]
 8009c60:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009c62:	4653      	mov	r3, sl
 8009c64:	f7ff f990 	bl	8008f88 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 8009c68:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	b21b      	sxth	r3, r3
 8009c70:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
 8009c74:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 8009c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7a:	b99b      	cbnz	r3, 8009ca4 <lv_draw_map+0x718>
 8009c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c7e:	b98b      	cbnz	r3, 8009ca4 <lv_draw_map+0x718>
 8009c80:	8863      	ldrh	r3, [r4, #2]
 8009c82:	b97b      	cbnz	r3, 8009ca4 <lv_draw_map+0x718>
 8009c84:	8923      	ldrh	r3, [r4, #8]
 8009c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c8a:	bf0c      	ite	eq
 8009c8c:	f04f 0b01 	moveq.w	fp, #1
 8009c90:	f04f 0b02 	movne.w	fp, #2
                    if(other_mask_cnt) {
 8009c94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c96:	b143      	cbz	r3, 8009caa <lv_draw_map+0x71e>
                        _lv_memset_ff(mask_buf, mask_buf_size);
 8009c98:	9908      	ldr	r1, [sp, #32]
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	f005 feeb 	bl	800fa76 <_lv_memset_ff>
                    px_i = 0;
 8009ca0:	2500      	movs	r5, #0
 8009ca2:	e6c2      	b.n	8009a2a <lv_draw_map+0x49e>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 8009ca4:	f04f 0b02 	mov.w	fp, #2
 8009ca8:	e7f4      	b.n	8009c94 <lv_draw_map+0x708>
                    px_i = 0;
 8009caa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cac:	e6bd      	b.n	8009a2a <lv_draw_map+0x49e>

08009cae <lv_draw_img_dsc_init>:
{
 8009cae:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 8009cb0:	2110      	movs	r1, #16
{
 8009cb2:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 8009cb4:	f005 feb0 	bl	800fa18 <_lv_memset_00>
    dsc->recolor = LV_COLOR_BLACK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
 8009cbc:	23ff      	movs	r3, #255	; 0xff
 8009cbe:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 8009cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cc4:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
 8009cc6:	7be3      	ldrb	r3, [r4, #15]
 8009cc8:	f043 0301 	orr.w	r3, r3, #1
 8009ccc:	73e3      	strb	r3, [r4, #15]
}
 8009cce:	bd10      	pop	{r4, pc}

08009cd0 <lv_img_cf_get_px_size>:
{
 8009cd0:	3804      	subs	r0, #4
 8009cd2:	b2c0      	uxtb	r0, r0
 8009cd4:	280a      	cmp	r0, #10
 8009cd6:	bf9a      	itte	ls
 8009cd8:	4b01      	ldrls	r3, [pc, #4]	; (8009ce0 <lv_img_cf_get_px_size+0x10>)
 8009cda:	5c18      	ldrbls	r0, [r3, r0]
 8009cdc:	2000      	movhi	r0, #0
}
 8009cde:	4770      	bx	lr
 8009ce0:	080159bb 	.word	0x080159bb

08009ce4 <lv_img_cf_is_chroma_keyed>:
{
 8009ce4:	280a      	cmp	r0, #10
 8009ce6:	d808      	bhi.n	8009cfa <lv_img_cf_is_chroma_keyed+0x16>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	fa03 f000 	lsl.w	r0, r3, r0
 8009cee:	f410 6ff9 	tst.w	r0, #1992	; 0x7c8
 8009cf2:	bf14      	ite	ne
 8009cf4:	4618      	movne	r0, r3
 8009cf6:	2000      	moveq	r0, #0
 8009cf8:	4770      	bx	lr
            is_chroma_keyed = false;
 8009cfa:	2000      	movs	r0, #0
}
 8009cfc:	4770      	bx	lr

08009cfe <lv_img_cf_has_alpha>:
{
 8009cfe:	280e      	cmp	r0, #14
 8009d00:	d809      	bhi.n	8009d16 <lv_img_cf_has_alpha+0x18>
 8009d02:	2301      	movs	r3, #1
 8009d04:	fa03 f000 	lsl.w	r0, r3, r0
 8009d08:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 8009d0c:	4218      	tst	r0, r3
 8009d0e:	bf14      	ite	ne
 8009d10:	2001      	movne	r0, #1
 8009d12:	2000      	moveq	r0, #0
 8009d14:	4770      	bx	lr
            has_alpha = false;
 8009d16:	2000      	movs	r0, #0
}
 8009d18:	4770      	bx	lr
	...

08009d1c <lv_draw_img>:
{
 8009d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d20:	4604      	mov	r4, r0
 8009d22:	b08d      	sub	sp, #52	; 0x34
 8009d24:	4689      	mov	r9, r1
 8009d26:	461f      	mov	r7, r3
    if(src == NULL) {
 8009d28:	b93a      	cbnz	r2, 8009d3a <lv_draw_img+0x1e>
        show_error(coords, mask, "No\ndata");
 8009d2a:	4a65      	ldr	r2, [pc, #404]	; (8009ec0 <lv_draw_img+0x1a4>)
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
 8009d2c:	4649      	mov	r1, r9
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f7ff fc02 	bl	8009538 <show_error>
}
 8009d34:	b00d      	add	sp, #52	; 0x34
 8009d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(dsc->opa <= LV_OPA_MIN) return;
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d9f9      	bls.n	8009d34 <lv_draw_img+0x18>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
 8009d40:	89b9      	ldrh	r1, [r7, #12]
 8009d42:	4610      	mov	r0, r2
 8009d44:	f003 fade 	bl	800d304 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 8009d48:	4606      	mov	r6, r0
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d0ed      	beq.n	8009d2a <lv_draw_img+0xe>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 8009d4e:	7b02      	ldrb	r2, [r0, #12]
 8009d50:	f002 021f 	and.w	r2, r2, #31
 8009d54:	4610      	mov	r0, r2
 8009d56:	f7ff ffc5 	bl	8009ce4 <lv_img_cf_is_chroma_keyed>
 8009d5a:	9002      	str	r0, [sp, #8]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	f7ff ffce 	bl	8009cfe <lv_img_cf_has_alpha>
    if(cdsc->dec_dsc.error_msg != NULL) {
 8009d62:	69b2      	ldr	r2, [r6, #24]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 8009d64:	9003      	str	r0, [sp, #12]
    if(cdsc->dec_dsc.error_msg != NULL) {
 8009d66:	2a00      	cmp	r2, #0
 8009d68:	d1e0      	bne.n	8009d2c <lv_draw_img+0x10>
    else if(cdsc->dec_dsc.img_data) {
 8009d6a:	6933      	ldr	r3, [r6, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d042      	beq.n	8009df6 <lv_draw_img+0xda>
        lv_area_copy(&map_area_rot, coords);
 8009d70:	a808      	add	r0, sp, #32
 8009d72:	4621      	mov	r1, r4
 8009d74:	f7ff fc00 	bl	8009578 <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8009d78:	887b      	ldrh	r3, [r7, #2]
 8009d7a:	8938      	ldrh	r0, [r7, #8]
 8009d7c:	b913      	cbnz	r3, 8009d84 <lv_draw_img+0x68>
 8009d7e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009d82:	d026      	beq.n	8009dd2 <lv_draw_img+0xb6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009d84:	88e2      	ldrh	r2, [r4, #6]
 8009d86:	8861      	ldrh	r1, [r4, #2]
 8009d88:	3201      	adds	r2, #1
 8009d8a:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009d8c:	88a1      	ldrh	r1, [r4, #4]
 8009d8e:	8825      	ldrh	r5, [r4, #0]
 8009d90:	3101      	adds	r1, #1
 8009d92:	1b49      	subs	r1, r1, r5
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 8009d94:	1d3d      	adds	r5, r7, #4
 8009d96:	e9cd 0500 	strd	r0, r5, [sp]
 8009d9a:	b21b      	sxth	r3, r3
 8009d9c:	b212      	sxth	r2, r2
 8009d9e:	b209      	sxth	r1, r1
 8009da0:	a808      	add	r0, sp, #32
 8009da2:	f003 f87a 	bl	800ce9a <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 8009da6:	8822      	ldrh	r2, [r4, #0]
 8009da8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8009dac:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
 8009db0:	4413      	add	r3, r2
 8009db2:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8009db6:	8863      	ldrh	r3, [r4, #2]
 8009db8:	4419      	add	r1, r3
 8009dba:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 8009dbe:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8009dc2:	440a      	add	r2, r1
 8009dc4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 8009dc8:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8009dcc:	4413      	add	r3, r2
 8009dce:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 8009dd2:	aa08      	add	r2, sp, #32
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	a80a      	add	r0, sp, #40	; 0x28
 8009dd8:	f004 fe69 	bl	800eaae <_lv_area_intersect>
        if(union_ok == false) {
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d0a9      	beq.n	8009d34 <lv_draw_img+0x18>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 8009de0:	9b03      	ldr	r3, [sp, #12]
 8009de2:	a90a      	add	r1, sp, #40	; 0x28
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	9b02      	ldr	r3, [sp, #8]
 8009de8:	4620      	mov	r0, r4
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	6932      	ldr	r2, [r6, #16]
 8009dee:	463b      	mov	r3, r7
 8009df0:	f7ff fbcc 	bl	800958c <lv_draw_map>
 8009df4:	e79e      	b.n	8009d34 <lv_draw_img+0x18>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 8009df6:	4622      	mov	r2, r4
 8009df8:	4649      	mov	r1, r9
 8009dfa:	a806      	add	r0, sp, #24
 8009dfc:	f004 fe57 	bl	800eaae <_lv_area_intersect>
        if(union_ok == false) {
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d097      	beq.n	8009d34 <lv_draw_img+0x18>
 8009e04:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8009e08:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8009e0c:	3501      	adds	r5, #1
 8009e0e:	1aed      	subs	r5, r5, r3
 8009e10:	b22d      	sxth	r5, r5
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8009e12:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8009e16:	f005 fd61 	bl	800f8dc <_lv_mem_buf_get>
        lv_area_copy(&line, &mask_com);
 8009e1a:	aa08      	add	r2, sp, #32
 8009e1c:	a906      	add	r1, sp, #24
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8009e1e:	4682      	mov	sl, r0
        lv_area_copy(&line, &mask_com);
 8009e20:	4610      	mov	r0, r2
 8009e22:	9204      	str	r2, [sp, #16]
 8009e24:	f7ff fba8 	bl	8009578 <lv_area_copy>
        lv_area_set_height(&line, 1);
 8009e28:	9a04      	ldr	r2, [sp, #16]
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	f004 fe1d 	bl	800ea6c <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 8009e32:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8009e36:	f9b4 1000 	ldrsh.w	r1, [r4]
        int32_t y = mask_com.y1 - coords->y1;
 8009e3a:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
 8009e3e:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8009e42:	1a5b      	subs	r3, r3, r1
 8009e44:	b21b      	sxth	r3, r3
        int32_t y = mask_com.y1 - coords->y1;
 8009e46:	ebab 0808 	sub.w	r8, fp, r8
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8009e4a:	9305      	str	r3, [sp, #20]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8009e4c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8009e50:	459b      	cmp	fp, r3
 8009e52:	dd03      	ble.n	8009e5c <lv_draw_img+0x140>
        _lv_mem_buf_release(buf);
 8009e54:	4650      	mov	r0, sl
 8009e56:	f005 fbd9 	bl	800f60c <_lv_mem_buf_release>
 8009e5a:	e76b      	b.n	8009d34 <lv_draw_img+0x18>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 8009e5c:	9a04      	ldr	r2, [sp, #16]
 8009e5e:	4649      	mov	r1, r9
 8009e60:	a80a      	add	r0, sp, #40	; 0x28
 8009e62:	f004 fe24 	bl	800eaae <_lv_area_intersect>
            if(union_ok == false) continue;
 8009e66:	b338      	cbz	r0, 8009eb8 <lv_draw_img+0x19c>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8009e68:	f8cd a000 	str.w	sl, [sp]
 8009e6c:	462b      	mov	r3, r5
 8009e6e:	fa0f f288 	sxth.w	r2, r8
 8009e72:	9905      	ldr	r1, [sp, #20]
 8009e74:	4630      	mov	r0, r6
 8009e76:	f003 fed1 	bl	800dc1c <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8009e7a:	2801      	cmp	r0, #1
 8009e7c:	d006      	beq.n	8009e8c <lv_draw_img+0x170>
                lv_img_decoder_close(&cdsc->dec_dsc);
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f003 fedc 	bl	800dc3c <lv_img_decoder_close>
                _lv_mem_buf_release(buf);
 8009e84:	4650      	mov	r0, sl
 8009e86:	f005 fbc1 	bl	800f60c <_lv_mem_buf_release>
 8009e8a:	e74e      	b.n	8009d2a <lv_draw_img+0xe>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 8009e8c:	9b03      	ldr	r3, [sp, #12]
 8009e8e:	4652      	mov	r2, sl
 8009e90:	9301      	str	r3, [sp, #4]
 8009e92:	9b02      	ldr	r3, [sp, #8]
 8009e94:	a90a      	add	r1, sp, #40	; 0x28
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	9804      	ldr	r0, [sp, #16]
 8009e9a:	463b      	mov	r3, r7
 8009e9c:	f7ff fb76 	bl	800958c <lv_draw_map>
            line.y1++;
 8009ea0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
            y++;
 8009ea4:	f108 0801 	add.w	r8, r8, #1
            line.y1++;
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 8009eae:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8009eb8:	f10b 0b01 	add.w	fp, fp, #1
 8009ebc:	e7c6      	b.n	8009e4c <lv_draw_img+0x130>
 8009ebe:	bf00      	nop
 8009ec0:	080159c6 	.word	0x080159c6

08009ec4 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 8009ec4:	b150      	cbz	r0, 8009edc <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8009ec6:	7803      	ldrb	r3, [r0, #0]
 8009ec8:	f1a3 0220 	sub.w	r2, r3, #32
 8009ecc:	2a5f      	cmp	r2, #95	; 0x5f
 8009ece:	d907      	bls.n	8009ee0 <lv_img_src_get_type+0x1c>
    else if(u8_p[0] >= 0x80) {
 8009ed0:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 8009ed4:	bf14      	ite	ne
 8009ed6:	2002      	movne	r0, #2
 8009ed8:	2000      	moveq	r0, #0
 8009eda:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 8009edc:	2003      	movs	r0, #3
 8009ede:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8009ee0:	2001      	movs	r0, #1
}
 8009ee2:	4770      	bx	lr

08009ee4 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 8009ee4:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 8009ee6:	3830      	subs	r0, #48	; 0x30
 8009ee8:	b2c0      	uxtb	r0, r0
 8009eea:	2809      	cmp	r0, #9
 8009eec:	d90b      	bls.n	8009f06 <hex_char_to_num+0x22>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8009eee:	2b60      	cmp	r3, #96	; 0x60
 8009ef0:	bf84      	itt	hi
 8009ef2:	3b20      	subhi	r3, #32
 8009ef4:	b2db      	uxtbhi	r3, r3
 8009ef6:	3b41      	subs	r3, #65	; 0x41
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b05      	cmp	r3, #5
 8009efc:	d802      	bhi.n	8009f04 <hex_char_to_num+0x20>
 8009efe:	4a02      	ldr	r2, [pc, #8]	; (8009f08 <hex_char_to_num+0x24>)
 8009f00:	5cd0      	ldrb	r0, [r2, r3]
 8009f02:	4770      	bx	lr
{
 8009f04:	2000      	movs	r0, #0
                break;
        }
    }

    return result;
}
 8009f06:	4770      	bx	lr
 8009f08:	080159ce 	.word	0x080159ce

08009f0c <lv_draw_label_dsc_init>:
{
 8009f0c:	b510      	push	{r4, lr}
 8009f0e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8009f10:	2124      	movs	r1, #36	; 0x24
 8009f12:	f005 fd81 	bl	800fa18 <_lv_memset_00>
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 8009f16:	4a08      	ldr	r2, [pc, #32]	; (8009f38 <lv_draw_label_dsc_init+0x2c>)
    dsc->opa = LV_OPA_COVER;
 8009f18:	23ff      	movs	r3, #255	; 0xff
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 8009f1a:	60a2      	str	r2, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8009f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dsc->opa = LV_OPA_COVER;
 8009f20:	7323      	strb	r3, [r4, #12]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8009f22:	e9c4 2205 	strd	r2, r2, [r4, #20]
    dsc->color = LV_COLOR_BLACK;
 8009f26:	2300      	movs	r3, #0
    dsc->sel_bg_color = LV_COLOR_BLUE;
 8009f28:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    dsc->color = LV_COLOR_BLACK;
 8009f2c:	8023      	strh	r3, [r4, #0]
    dsc->sel_color = LV_COLOR_BLACK;
 8009f2e:	8063      	strh	r3, [r4, #2]
    dsc->sel_bg_color = LV_COLOR_BLUE;
 8009f30:	80a2      	strh	r2, [r4, #4]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
 8009f32:	f884 3020 	strb.w	r3, [r4, #32]
}
 8009f36:	bd10      	pop	{r4, pc}
 8009f38:	20000038 	.word	0x20000038

08009f3c <lv_draw_label>:
{
 8009f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	b0c9      	sub	sp, #292	; 0x124
 8009f42:	930b      	str	r3, [sp, #44]	; 0x2c
    if(dsc->opa <= LV_OPA_MIN) return;
 8009f44:	7b13      	ldrb	r3, [r2, #12]
{
 8009f46:	9007      	str	r0, [sp, #28]
    if(dsc->opa <= LV_OPA_MIN) return;
 8009f48:	2b02      	cmp	r3, #2
{
 8009f4a:	468b      	mov	fp, r1
 8009f4c:	4614      	mov	r4, r2
 8009f4e:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if(dsc->opa <= LV_OPA_MIN) return;
 8009f50:	f240 80d1 	bls.w	800a0f6 <lv_draw_label+0x1ba>
    if(txt[0] == '\0')  return;
 8009f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f000 80cc 	beq.w	800a0f6 <lv_draw_label+0x1ba>
    const lv_font_t * font = dsc->font;
 8009f5e:	6893      	ldr	r3, [r2, #8]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 8009f60:	460a      	mov	r2, r1
 8009f62:	4601      	mov	r1, r0
 8009f64:	a829      	add	r0, sp, #164	; 0xa4
    const lv_font_t * font = dsc->font;
 8009f66:	9305      	str	r3, [sp, #20]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 8009f68:	f004 fda1 	bl	800eaae <_lv_area_intersect>
    if(!clip_ok) return;
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	f000 80c2 	beq.w	800a0f6 <lv_draw_label+0x1ba>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
 8009f72:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8009f76:	0793      	lsls	r3, r2, #30
 8009f78:	f100 80c0 	bmi.w	800a0fc <lv_draw_label+0x1c0>
 8009f7c:	9b07      	ldr	r3, [sp, #28]
 8009f7e:	9a07      	ldr	r2, [sp, #28]
 8009f80:	889b      	ldrh	r3, [r3, #4]
 8009f82:	8812      	ldrh	r2, [r2, #0]
 8009f84:	3301      	adds	r3, #1
 8009f86:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
 8009f88:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
 8009f8a:	9a05      	ldr	r2, [sp, #20]
    y_ofs = dsc->ofs_y;
 8009f8c:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
    int32_t line_height_font = lv_font_get_line_height(font);
 8009f90:	f9b2 a008 	ldrsh.w	sl, [r2, #8]
    pos.x = coords->x1;
 8009f94:	9a07      	ldr	r2, [sp, #28]
    int32_t line_height = line_height_font + dsc->line_space;
 8009f96:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
    pos.x = coords->x1;
 8009f9a:	f9b2 2000 	ldrsh.w	r2, [r2]
    int32_t line_height = line_height_font + dsc->line_space;
 8009f9e:	4456      	add	r6, sl
    pos.x = coords->x1;
 8009fa0:	920c      	str	r2, [sp, #48]	; 0x30
    pos.y = coords->y1;
 8009fa2:	9a07      	ldr	r2, [sp, #28]
 8009fa4:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
    x_ofs = dsc->ofs_x;
 8009fa8:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
 8009fac:	9224      	str	r2, [sp, #144]	; 0x90
    pos.y += y_ofs;
 8009fae:	eb0c 0200 	add.w	r2, ip, r0
 8009fb2:	b292      	uxth	r2, r2
 8009fb4:	b211      	sxth	r1, r2
 8009fb6:	9108      	str	r1, [sp, #32]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8009fb8:	2d00      	cmp	r5, #0
 8009fba:	f000 80b0 	beq.w	800a11e <lv_draw_label+0x1e2>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	f040 80b1 	bne.w	800a126 <lv_draw_label+0x1ea>
 8009fc4:	f1bc 0f00 	cmp.w	ip, #0
 8009fc8:	f280 80ab 	bge.w	800a122 <lv_draw_label+0x1e6>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8009fcc:	68a9      	ldr	r1, [r5, #8]
 8009fce:	f5c6 7000 	rsb	r0, r6, #512	; 0x200
 8009fd2:	eba1 010c 	sub.w	r1, r1, ip
 8009fd6:	2900      	cmp	r1, #0
 8009fd8:	bfb8      	it	lt
 8009fda:	4249      	neglt	r1, r1
 8009fdc:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
            hint->line_start = -1;
 8009fe0:	bfc4      	itt	gt
 8009fe2:	f04f 31ff 	movgt.w	r1, #4294967295
 8009fe6:	6029      	strgt	r1, [r5, #0]
        last_line_start = hint->line_start;
 8009fe8:	6829      	ldr	r1, [r5, #0]
    if(hint && last_line_start >= 0) {
 8009fea:	2900      	cmp	r1, #0
 8009fec:	f2c0 809b 	blt.w	800a126 <lv_draw_label+0x1ea>
        line_start = last_line_start;
 8009ff0:	9106      	str	r1, [sp, #24]
        pos.y += hint->y;
 8009ff2:	6869      	ldr	r1, [r5, #4]
 8009ff4:	440a      	add	r2, r1
 8009ff6:	b212      	sxth	r2, r2
 8009ff8:	9208      	str	r2, [sp, #32]
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 8009ffa:	b21b      	sxth	r3, r3
 8009ffc:	9319      	str	r3, [sp, #100]	; 0x64
 8009ffe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a000:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800a004:	9f06      	ldr	r7, [sp, #24]
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800a00c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a00e:	9905      	ldr	r1, [sp, #20]
 800a010:	4438      	add	r0, r7
 800a012:	f006 fbdb 	bl	80107cc <_lv_txt_get_next_line>
 800a016:	9b06      	ldr	r3, [sp, #24]
 800a018:	18c3      	adds	r3, r0, r3
 800a01a:	9309      	str	r3, [sp, #36]	; 0x24
    while(pos.y + line_height_font < mask->y1) {
 800a01c:	9b08      	ldr	r3, [sp, #32]
 800a01e:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 800a022:	4453      	add	r3, sl
 800a024:	4293      	cmp	r3, r2
 800a026:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    while(pos.y + line_height_font < mask->y1) {
 800a02c:	db7e      	blt.n	800a12c <lv_draw_label+0x1f0>
 800a02e:	9a06      	ldr	r2, [sp, #24]
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800a030:	074f      	lsls	r7, r1, #29
 800a032:	eb03 0002 	add.w	r0, r3, r2
 800a036:	f140 80a2 	bpl.w	800a17e <lv_draw_label+0x242>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800a03a:	9100      	str	r1, [sp, #0]
 800a03c:	9d06      	ldr	r5, [sp, #24]
 800a03e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a040:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800a044:	9a05      	ldr	r2, [sp, #20]
 800a046:	1b49      	subs	r1, r1, r5
 800a048:	f006 fb70 	bl	801072c <_lv_txt_get_width>
 800a04c:	9b07      	ldr	r3, [sp, #28]
 800a04e:	9a07      	ldr	r2, [sp, #28]
 800a050:	889b      	ldrh	r3, [r3, #4]
 800a052:	8812      	ldrh	r2, [r2, #0]
 800a054:	3301      	adds	r3, #1
 800a056:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800a058:	b21b      	sxth	r3, r3
 800a05a:	1a18      	subs	r0, r3, r0
 800a05c:	2302      	movs	r3, #2
 800a05e:	fb90 f0f3 	sdiv	r0, r0, r3
        pos.x += lv_area_get_width(coords) - line_width;
 800a062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a064:	4418      	add	r0, r3
 800a066:	b203      	sxth	r3, r0
 800a068:	930c      	str	r3, [sp, #48]	; 0x30
    lv_opa_t opa = dsc->opa;
 800a06a:	7b23      	ldrb	r3, [r4, #12]
 800a06c:	931d      	str	r3, [sp, #116]	; 0x74
    uint32_t sel_start = dsc->sel_start;
 800a06e:	6963      	ldr	r3, [r4, #20]
 800a070:	9310      	str	r3, [sp, #64]	; 0x40
    uint32_t sel_end = dsc->sel_end;
 800a072:	69a3      	ldr	r3, [r4, #24]
 800a074:	930f      	str	r3, [sp, #60]	; 0x3c
    if(sel_start > sel_end) {
 800a076:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 800a07a:	4293      	cmp	r3, r2
 800a07c:	bf9e      	ittt	ls
 800a07e:	4613      	movls	r3, r2
 800a080:	9a10      	ldrls	r2, [sp, #64]	; 0x40
 800a082:	e9cd 230f 	strdls	r2, r3, [sp, #60]	; 0x3c
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800a086:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800a08a:	0798      	lsls	r0, r3, #30
 800a08c:	d018      	beq.n	800a0c0 <lv_draw_label+0x184>
        lv_draw_line_dsc_init(&line_dsc);
 800a08e:	a82d      	add	r0, sp, #180	; 0xb4
 800a090:	f000 fba4 	bl	800a7dc <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800a094:	8823      	ldrh	r3, [r4, #0]
        line_dsc.blend_mode = dsc->blend_mode;
 800a096:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
        line_dsc.color = dsc->color;
 800a09a:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800a09e:	9b05      	ldr	r3, [sp, #20]
 800a0a0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	bf08      	it	eq
 800a0a8:	2301      	moveq	r3, #1
 800a0aa:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
        line_dsc.opa = dsc->opa;
 800a0ae:	7b23      	ldrb	r3, [r4, #12]
 800a0b0:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
        line_dsc.blend_mode = dsc->blend_mode;
 800a0b4:	f89d 30bd 	ldrb.w	r3, [sp, #189]	; 0xbd
 800a0b8:	f362 0301 	bfi	r3, r2, #0, #2
 800a0bc:	f88d 30bd 	strb.w	r3, [sp, #189]	; 0xbd
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800a0c0:	a833      	add	r0, sp, #204	; 0xcc
 800a0c2:	f001 ff75 	bl	800bfb0 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800a0c6:	88a3      	ldrh	r3, [r4, #4]
    while(txt[line_start] != '\0') {
 800a0c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800a0ca:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
 800a0ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0d0:	2bfd      	cmp	r3, #253	; 0xfd
 800a0d2:	bf88      	it	hi
 800a0d4:	23ff      	movhi	r3, #255	; 0xff
 800a0d6:	9316      	str	r3, [sp, #88]	; 0x58
 800a0d8:	b2b3      	uxth	r3, r6
 800a0da:	931e      	str	r3, [sp, #120]	; 0x78
 800a0dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a0e0:	9318      	str	r3, [sp, #96]	; 0x60
    uint32_t par_start = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	931c      	str	r3, [sp, #112]	; 0x70
    while(txt[line_start] != '\0') {
 800a0e6:	9a06      	ldr	r2, [sp, #24]
 800a0e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ea:	4413      	add	r3, r2
 800a0ec:	931b      	str	r3, [sp, #108]	; 0x6c
 800a0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0f0:	5c9b      	ldrb	r3, [r3, r2]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d158      	bne.n	800a1a8 <lv_draw_label+0x26c>
}
 800a0f6:	b049      	add	sp, #292	; 0x124
 800a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800a0fc:	9202      	str	r2, [sp, #8]
 800a0fe:	f647 4218 	movw	r2, #31768	; 0x7c18
 800a102:	9201      	str	r2, [sp, #4]
 800a104:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a108:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800a10c:	9200      	str	r2, [sp, #0]
 800a10e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a110:	68a2      	ldr	r2, [r4, #8]
 800a112:	a833      	add	r0, sp, #204	; 0xcc
 800a114:	f006 fc42 	bl	801099c <_lv_txt_get_size>
        w = p.x;
 800a118:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 800a11c:	e735      	b.n	8009f8a <lv_draw_label+0x4e>
    uint32_t line_start     = 0;
 800a11e:	9506      	str	r5, [sp, #24]
 800a120:	e76b      	b.n	8009ffa <lv_draw_label+0xbe>
 800a122:	9006      	str	r0, [sp, #24]
 800a124:	e769      	b.n	8009ffa <lv_draw_label+0xbe>
 800a126:	2200      	movs	r2, #0
 800a128:	9206      	str	r2, [sp, #24]
 800a12a:	e766      	b.n	8009ffa <lv_draw_label+0xbe>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a12c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a12e:	9100      	str	r1, [sp, #0]
 800a130:	eb03 0902 	add.w	r9, r3, r2
 800a134:	9905      	ldr	r1, [sp, #20]
 800a136:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a138:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800a13c:	4648      	mov	r0, r9
 800a13e:	f006 fb45 	bl	80107cc <_lv_txt_get_next_line>
 800a142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a144:	4418      	add	r0, r3
 800a146:	9b08      	ldr	r3, [sp, #32]
 800a148:	4433      	add	r3, r6
 800a14a:	b21b      	sxth	r3, r3
 800a14c:	9308      	str	r3, [sp, #32]
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800a14e:	b175      	cbz	r5, 800a16e <lv_draw_label+0x232>
 800a150:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800a154:	db0b      	blt.n	800a16e <lv_draw_label+0x232>
 800a156:	682b      	ldr	r3, [r5, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	da08      	bge.n	800a16e <lv_draw_label+0x232>
            hint->line_start = line_start;
 800a15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
            hint->y          = pos.y - coords->y1;
 800a15e:	9a08      	ldr	r2, [sp, #32]
            hint->line_start = line_start;
 800a160:	602b      	str	r3, [r5, #0]
            hint->y          = pos.y - coords->y1;
 800a162:	9b07      	ldr	r3, [sp, #28]
 800a164:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a168:	1ad2      	subs	r2, r2, r3
            hint->coord_y    = coords->y1;
 800a16a:	e9c5 2301 	strd	r2, r3, [r5, #4]
 800a16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a170:	9306      	str	r3, [sp, #24]
        if(txt[line_start] == '\0') return;
 800a172:	f899 3000 	ldrb.w	r3, [r9]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d0bd      	beq.n	800a0f6 <lv_draw_label+0x1ba>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a17a:	9009      	str	r0, [sp, #36]	; 0x24
 800a17c:	e74e      	b.n	800a01c <lv_draw_label+0xe0>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800a17e:	070d      	lsls	r5, r1, #28
 800a180:	f57f af73 	bpl.w	800a06a <lv_draw_label+0x12e>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800a184:	9100      	str	r1, [sp, #0]
 800a186:	9d06      	ldr	r5, [sp, #24]
 800a188:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a18a:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800a18e:	9a05      	ldr	r2, [sp, #20]
 800a190:	1b49      	subs	r1, r1, r5
 800a192:	f006 facb 	bl	801072c <_lv_txt_get_width>
 800a196:	9b07      	ldr	r3, [sp, #28]
 800a198:	9a07      	ldr	r2, [sp, #28]
 800a19a:	889b      	ldrh	r3, [r3, #4]
 800a19c:	8812      	ldrh	r2, [r2, #0]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800a1a2:	b21b      	sxth	r3, r3
 800a1a4:	1a18      	subs	r0, r3, r0
 800a1a6:	e75c      	b.n	800a062 <lv_draw_label+0x126>
        pos.x += x_ofs;
 800a1a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a1aa:	441d      	add	r5, r3
 800a1ac:	b22b      	sxth	r3, r5
 800a1ae:	930d      	str	r3, [sp, #52]	; 0x34
        i         = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	9328      	str	r3, [sp, #160]	; 0xa0
                        cmd_state = CMD_STATE_WAIT;
 800a1b4:	930a      	str	r3, [sp, #40]	; 0x28
 800a1b6:	e0b9      	b.n	800a32c <lv_draw_label+0x3f0>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800a1b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d023      	beq.n	800a20a <lv_draw_label+0x2ce>
 800a1c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d020      	beq.n	800a20a <lv_draw_label+0x2ce>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800a1c8:	9a06      	ldr	r2, [sp, #24]
 800a1ca:	4b9f      	ldr	r3, [pc, #636]	; (800a448 <lv_draw_label+0x50c>)
 800a1cc:	4411      	add	r1, r2
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a1d2:	4798      	blx	r3
 800a1d4:	4607      	mov	r7, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 800a1d6:	4d9d      	ldr	r5, [pc, #628]	; (800a44c <lv_draw_label+0x510>)
 800a1d8:	a928      	add	r1, sp, #160	; 0xa0
 800a1da:	682b      	ldr	r3, [r5, #0]
 800a1dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a1de:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800a1e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 800a1e2:	4606      	mov	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800a1e4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800a1e6:	682b      	ldr	r3, [r5, #0]
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	4410      	add	r0, r2
 800a1ec:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800a1ee:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800a1f2:	4602      	mov	r2, r0
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800a1f4:	07d9      	lsls	r1, r3, #31
 800a1f6:	f140 8120 	bpl.w	800a43a <lv_draw_label+0x4fe>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800a1fa:	2e23      	cmp	r6, #35	; 0x23
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800a1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800a1fe:	d10e      	bne.n	800a21e <lv_draw_label+0x2e2>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800a200:	b92b      	cbnz	r3, 800a20e <lv_draw_label+0x2d2>
                        par_start = i;
 800a202:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a204:	931c      	str	r3, [sp, #112]	; 0x70
                        cmd_state = CMD_STATE_PAR;
 800a206:	2301      	movs	r3, #1
 800a208:	e7d4      	b.n	800a1b4 <lv_draw_label+0x278>
            uint32_t logical_char_pos = 0;
 800a20a:	2700      	movs	r7, #0
 800a20c:	e7e3      	b.n	800a1d6 <lv_draw_label+0x29a>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
 800a20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a210:	2b01      	cmp	r3, #1
 800a212:	d04f      	beq.n	800a2b4 <lv_draw_label+0x378>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
 800a214:	2b02      	cmp	r3, #2
 800a216:	f040 8110 	bne.w	800a43a <lv_draw_label+0x4fe>
                        cmd_state = CMD_STATE_WAIT;
 800a21a:	2300      	movs	r3, #0
 800a21c:	e7ca      	b.n	800a1b4 <lv_draw_label+0x278>
                if(cmd_state == CMD_STATE_PAR) {
 800a21e:	2b01      	cmp	r3, #1
 800a220:	f040 810b 	bne.w	800a43a <lv_draw_label+0x4fe>
                    if(letter == ' ') {
 800a224:	2e20      	cmp	r6, #32
 800a226:	f040 8081 	bne.w	800a32c <lv_draw_label+0x3f0>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800a22a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a22c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a22e:	1a9b      	subs	r3, r3, r2
 800a230:	2b07      	cmp	r3, #7
 800a232:	d13d      	bne.n	800a2b0 <lv_draw_label+0x374>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800a234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a236:	1898      	adds	r0, r3, r2
 800a238:	2300      	movs	r3, #0
 800a23a:	aa30      	add	r2, sp, #192	; 0xc0
 800a23c:	5cc1      	ldrb	r1, [r0, r3]
 800a23e:	5499      	strb	r1, [r3, r2]
 800a240:	3301      	adds	r3, #1
    while(len) {
 800a242:	2b06      	cmp	r3, #6
 800a244:	d1fa      	bne.n	800a23c <lv_draw_label+0x300>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800a246:	f89d 00c0 	ldrb.w	r0, [sp, #192]	; 0xc0
 800a24a:	f7ff fe4b 	bl	8009ee4 <hex_char_to_num>
 800a24e:	4605      	mov	r5, r0
 800a250:	f89d 00c1 	ldrb.w	r0, [sp, #193]	; 0xc1
 800a254:	f7ff fe46 	bl	8009ee4 <hex_char_to_num>
 800a258:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800a25c:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
 800a260:	f7ff fe40 	bl	8009ee4 <hex_char_to_num>
 800a264:	4606      	mov	r6, r0
 800a266:	f89d 00c3 	ldrb.w	r0, [sp, #195]	; 0xc3
 800a26a:	f7ff fe3b 	bl	8009ee4 <hex_char_to_num>
 800a26e:	eb00 1606 	add.w	r6, r0, r6, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800a272:	f89d 00c4 	ldrb.w	r0, [sp, #196]	; 0xc4
 800a276:	f7ff fe35 	bl	8009ee4 <hex_char_to_num>
 800a27a:	4601      	mov	r1, r0
 800a27c:	f89d 00c5 	ldrb.w	r0, [sp, #197]	; 0xc5
 800a280:	f7ff fe30 	bl	8009ee4 <hex_char_to_num>
                            recolor = lv_color_make(r, g, b);
 800a284:	b2f3      	uxtb	r3, r6
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
 800a286:	095a      	lsrs	r2, r3, #5
 800a288:	f362 0802 	bfi	r8, r2, #0, #3
 800a28c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800a290:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a294:	f365 08c7 	bfi	r8, r5, #3, #5
 800a298:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 800a29c:	089b      	lsrs	r3, r3, #2
 800a29e:	f360 280c 	bfi	r8, r0, #8, #5
 800a2a2:	f363 384f 	bfi	r8, r3, #13, #3
 800a2a6:	fa1f f388 	uxth.w	r3, r8
                            recolor.full = dsc->color.full;
 800a2aa:	9320      	str	r3, [sp, #128]	; 0x80
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e781      	b.n	800a1b4 <lv_draw_label+0x278>
                            recolor.full = dsc->color.full;
 800a2b0:	8823      	ldrh	r3, [r4, #0]
 800a2b2:	e7fa      	b.n	800a2aa <lv_draw_label+0x36e>
                        cmd_state = CMD_STATE_WAIT;
 800a2b4:	2300      	movs	r3, #0
            lv_color_t color = dsc->color;
 800a2b6:	8825      	ldrh	r5, [r4, #0]
                        cmd_state = CMD_STATE_WAIT;
 800a2b8:	930a      	str	r3, [sp, #40]	; 0x28
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	9805      	ldr	r0, [sp, #20]
 800a2be:	f003 fd16 	bl	800dcee <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800a2c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a2c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800a2c8:	901a      	str	r0, [sp, #104]	; 0x68
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d020      	beq.n	800a310 <lv_draw_label+0x3d4>
 800a2ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d01d      	beq.n	800a310 <lv_draw_label+0x3d4>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800a2d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2d6:	42bb      	cmp	r3, r7
 800a2d8:	d81a      	bhi.n	800a310 <lv_draw_label+0x3d4>
 800a2da:	42ba      	cmp	r2, r7
 800a2dc:	d918      	bls.n	800a310 <lv_draw_label+0x3d4>
                    sel_coords.x1 = pos.x;
 800a2de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800a2e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                    sel_coords.x1 = pos.x;
 800a2e2:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
                    sel_coords.y1 = pos.y;
 800a2e6:	9b08      	ldr	r3, [sp, #32]
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800a2e8:	4659      	mov	r1, fp
                    sel_coords.y1 = pos.y;
 800a2ea:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800a2ee:	8a23      	ldrh	r3, [r4, #16]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	4413      	add	r3, r2
 800a2f4:	4403      	add	r3, r0
 800a2f6:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
                    sel_coords.y2 = pos.y + line_height - 1;
 800a2fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a2fc:	9a08      	ldr	r2, [sp, #32]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	4413      	add	r3, r2
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800a302:	a830      	add	r0, sp, #192	; 0xc0
 800a304:	aa33      	add	r2, sp, #204	; 0xcc
                    sel_coords.y2 = pos.y + line_height - 1;
 800a306:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800a30a:	f001 fe75 	bl	800bff8 <lv_draw_rect>
                    color = dsc->sel_color;
 800a30e:	8865      	ldrh	r5, [r4, #2]
    if(opa < LV_OPA_MIN) return;
 800a310:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a312:	2b01      	cmp	r3, #1
 800a314:	f200 81f2 	bhi.w	800a6fc <lv_draw_label+0x7c0>
            if(letter_w > 0) {
 800a318:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a31a:	b13b      	cbz	r3, 800a32c <lv_draw_label+0x3f0>
                pos.x += letter_w + dsc->letter_space;
 800a31c:	8a25      	ldrh	r5, [r4, #16]
 800a31e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a320:	442b      	add	r3, r5
 800a322:	461d      	mov	r5, r3
 800a324:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a326:	442b      	add	r3, r5
 800a328:	b21b      	sxth	r3, r3
 800a32a:	930d      	str	r3, [sp, #52]	; 0x34
        while(i < line_end - line_start) {
 800a32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32e:	9a06      	ldr	r2, [sp, #24]
 800a330:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800a332:	1a9b      	subs	r3, r3, r2
 800a334:	428b      	cmp	r3, r1
 800a336:	f63f af3f 	bhi.w	800a1b8 <lv_draw_label+0x27c>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800a33a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800a33e:	079e      	lsls	r6, r3, #30
 800a340:	d51d      	bpl.n	800a37e <lv_draw_label+0x442>
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800a342:	2102      	movs	r1, #2
            p1.x = pos_x_start;
 800a344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800a346:	f9bd 20b6 	ldrsh.w	r2, [sp, #182]	; 0xb6
            p1.x = pos_x_start;
 800a34a:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800a34e:	68a3      	ldr	r3, [r4, #8]
 800a350:	fb92 f2f1 	sdiv	r2, r2, r1
 800a354:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a358:	a82b      	add	r0, sp, #172	; 0xac
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800a35a:	fb93 f3f1 	sdiv	r3, r3, r1
 800a35e:	4413      	add	r3, r2
 800a360:	9a18      	ldr	r2, [sp, #96]	; 0x60
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a362:	a930      	add	r1, sp, #192	; 0xc0
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800a364:	4413      	add	r3, r2
            p2.x = pos.x;
 800a366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800a368:	b21b      	sxth	r3, r3
 800a36a:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
            p2.x = pos.x;
 800a36e:	f8ad 20c0 	strh.w	r2, [sp, #192]	; 0xc0
            p2.y = p1.y;
 800a372:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a376:	465a      	mov	r2, fp
 800a378:	ab2d      	add	r3, sp, #180	; 0xb4
 800a37a:	f000 fa3b 	bl	800a7f4 <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800a37e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800a382:	07dd      	lsls	r5, r3, #31
 800a384:	d51a      	bpl.n	800a3bc <lv_draw_label+0x480>
            p1.x = pos_x_start;
 800a386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800a388:	68a1      	ldr	r1, [r4, #8]
            p1.x = pos_x_start;
 800a38a:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800a38e:	9b05      	ldr	r3, [sp, #20]
 800a390:	894a      	ldrh	r2, [r1, #10]
 800a392:	f993 300d 	ldrsb.w	r3, [r3, #13]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a396:	a82b      	add	r0, sp, #172	; 0xac
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800a398:	441a      	add	r2, r3
 800a39a:	890b      	ldrh	r3, [r1, #8]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a39c:	a930      	add	r1, sp, #192	; 0xc0
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800a39e:	1a9b      	subs	r3, r3, r2
 800a3a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a3a2:	4413      	add	r3, r2
            p2.x = pos.x;
 800a3a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800a3a6:	b21b      	sxth	r3, r3
 800a3a8:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
            p2.x = pos.x;
 800a3ac:	f8ad 20c0 	strh.w	r2, [sp, #192]	; 0xc0
            p2.y = p1.y;
 800a3b0:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a3b4:	465a      	mov	r2, fp
 800a3b6:	ab2d      	add	r3, sp, #180	; 0xb4
 800a3b8:	f000 fa1c 	bl	800a7f4 <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a3bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c0:	9905      	ldr	r1, [sp, #20]
 800a3c2:	189f      	adds	r7, r3, r2
 800a3c4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800a3c8:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3d2:	f006 f9fb 	bl	80107cc <_lv_txt_get_next_line>
 800a3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800a3d8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a3dc:	181e      	adds	r6, r3, r0
        pos.x = coords->x1;
 800a3de:	9b07      	ldr	r3, [sp, #28]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a3e0:	4601      	mov	r1, r0
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800a3e2:	0750      	lsls	r0, r2, #29
        pos.x = coords->x1;
 800a3e4:	f9b3 5000 	ldrsh.w	r5, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800a3e8:	f140 8167 	bpl.w	800a6ba <lv_draw_label+0x77e>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800a3ec:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800a3f0:	9200      	str	r2, [sp, #0]
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	9a05      	ldr	r2, [sp, #20]
 800a3f6:	f006 f999 	bl	801072c <_lv_txt_get_width>
 800a3fa:	9b07      	ldr	r3, [sp, #28]
 800a3fc:	9a07      	ldr	r2, [sp, #28]
 800a3fe:	889b      	ldrh	r3, [r3, #4]
 800a400:	8812      	ldrh	r2, [r2, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800a406:	b21b      	sxth	r3, r3
 800a408:	1a18      	subs	r0, r3, r0
 800a40a:	2302      	movs	r3, #2
 800a40c:	fb90 f0f3 	sdiv	r0, r0, r3
            pos.x += lv_area_get_width(coords) - line_width;
 800a410:	4405      	add	r5, r0
 800a412:	b22d      	sxth	r5, r5
 800a414:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a416:	9b08      	ldr	r3, [sp, #32]
 800a418:	4413      	add	r3, r2
 800a41a:	b21b      	sxth	r3, r3
 800a41c:	9308      	str	r3, [sp, #32]
 800a41e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a420:	4413      	add	r3, r2
 800a422:	b29b      	uxth	r3, r3
 800a424:	9318      	str	r3, [sp, #96]	; 0x60
        line_start = line_end;
 800a426:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if(pos.y > mask->y2) return;
 800a428:	9a08      	ldr	r2, [sp, #32]
        line_start = line_end;
 800a42a:	9306      	str	r3, [sp, #24]
        if(pos.y > mask->y2) return;
 800a42c:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 800a430:	4293      	cmp	r3, r2
 800a432:	f6ff ae60 	blt.w	800a0f6 <lv_draw_label+0x1ba>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a436:	9609      	str	r6, [sp, #36]	; 0x24
 800a438:	e655      	b.n	800a0e6 <lv_draw_label+0x1aa>
            lv_color_t color = dsc->color;
 800a43a:	8825      	ldrh	r5, [r4, #0]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800a43c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a43e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a440:	2902      	cmp	r1, #2
 800a442:	bf08      	it	eq
 800a444:	461d      	moveq	r5, r3
 800a446:	e738      	b.n	800a2ba <lv_draw_label+0x37e>
 800a448:	20000060 	.word	0x20000060
 800a44c:	20000064 	.word	0x20000064
            bitmask_init  = 0xC0;
 800a450:	23c0      	movs	r3, #192	; 0xc0
    switch(bpp) {
 800a452:	2602      	movs	r6, #2
            shades = 4;
 800a454:	2504      	movs	r5, #4
            bitmask_init  = 0xC0;
 800a456:	9313      	str	r3, [sp, #76]	; 0x4c
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800a458:	4ba1      	ldr	r3, [pc, #644]	; (800a6e0 <lv_draw_label+0x7a4>)
            bpp_opa_table_p = _lv_bpp1_opa_table;
 800a45a:	930e      	str	r3, [sp, #56]	; 0x38
    if(opa < LV_OPA_MAX) {
 800a45c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a45e:	2bfc      	cmp	r3, #252	; 0xfc
 800a460:	d811      	bhi.n	800a486 <lv_draw_label+0x54a>
        if(prev_opa != opa || prev_bpp != bpp) {
 800a462:	4ba0      	ldr	r3, [pc, #640]	; (800a6e4 <lv_draw_label+0x7a8>)
 800a464:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	4283      	cmp	r3, r0
 800a46a:	f040 80a4 	bne.w	800a5b6 <lv_draw_label+0x67a>
 800a46e:	4b9e      	ldr	r3, [pc, #632]	; (800a6e8 <lv_draw_label+0x7ac>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	42b3      	cmp	r3, r6
 800a474:	f040 809f 	bne.w	800a5b6 <lv_draw_label+0x67a>
        prev_opa = opa;
 800a478:	4b9a      	ldr	r3, [pc, #616]	; (800a6e4 <lv_draw_label+0x7a8>)
 800a47a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a47c:	7018      	strb	r0, [r3, #0]
        prev_bpp = bpp;
 800a47e:	4b9a      	ldr	r3, [pc, #616]	; (800a6e8 <lv_draw_label+0x7ac>)
 800a480:	601e      	str	r6, [r3, #0]
        bpp_opa_table_p = opa_table;
 800a482:	4b9a      	ldr	r3, [pc, #616]	; (800a6ec <lv_draw_label+0x7b0>)
 800a484:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t box_h = g->box_h;
 800a486:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	; 0xc4
    int32_t box_w = g->box_w;
 800a48a:	f8bd a0c2 	ldrh.w	sl, [sp, #194]	; 0xc2
    int32_t box_h = g->box_h;
 800a48e:	9312      	str	r3, [sp, #72]	; 0x48
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800a490:	f9bb 3000 	ldrsh.w	r3, [fp]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a494:	eb0a 0001 	add.w	r0, sl, r1
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800a498:	4299      	cmp	r1, r3
 800a49a:	bfac      	ite	ge
 800a49c:	2300      	movge	r3, #0
 800a49e:	1a5b      	sublt	r3, r3, r1
 800a4a0:	9311      	str	r3, [sp, #68]	; 0x44
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a4a2:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800a4a6:	f9bb 7002 	ldrsh.w	r7, [fp, #2]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a4aa:	4298      	cmp	r0, r3
 800a4ac:	bfc3      	ittte	gt
 800a4ae:	1a5b      	subgt	r3, r3, r1
 800a4b0:	3301      	addgt	r3, #1
 800a4b2:	9314      	strgt	r3, [sp, #80]	; 0x50
 800a4b4:	f8cd a050 	strle.w	sl, [sp, #80]	; 0x50
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800a4b8:	42ba      	cmp	r2, r7
 800a4ba:	bfa8      	it	ge
 800a4bc:	2700      	movge	r7, #0
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800a4be:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a4c0:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 800a4c4:	4411      	add	r1, r2
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800a4c6:	bfb8      	it	lt
 800a4c8:	1abf      	sublt	r7, r7, r2
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800a4ca:	4299      	cmp	r1, r3
 800a4cc:	bfca      	itet	gt
 800a4ce:	1a9b      	subgt	r3, r3, r2
 800a4d0:	9b12      	ldrle	r3, [sp, #72]	; 0x48
 800a4d2:	3301      	addgt	r3, #1
 800a4d4:	9322      	str	r3, [sp, #136]	; 0x88
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800a4d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800a4d8:	fb06 f50a 	mul.w	r5, r6, sl
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800a4dc:	4373      	muls	r3, r6
 800a4de:	fb07 3505 	mla	r5, r7, r5, r3
    map_p += bit_ofs >> 3;
 800a4e2:	eb0c 03d5 	add.w	r3, ip, r5, lsr #3
 800a4e6:	9315      	str	r3, [sp, #84]	; 0x54
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800a4e8:	f7fd f9b2 	bl	8007850 <_lv_refr_get_disp_refreshing>
 800a4ec:	f003 ff78 	bl	800e3e0 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a4f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fill_area.y1 = row_start + pos_y;
 800a4f2:	44b9      	add	r9, r7
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a4f4:	fb03 f30a 	mul.w	r3, r3, sl
 800a4f8:	4283      	cmp	r3, r0
 800a4fa:	bfa8      	it	ge
 800a4fc:	4603      	movge	r3, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800a4fe:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a500:	9321      	str	r3, [sp, #132]	; 0x84
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800a502:	f005 f9eb 	bl	800f8dc <_lv_mem_buf_get>
    fill_area.x1 = col_start + pos_x;
 800a506:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800a50a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fill_area.y1 = row_start + pos_y;
 800a50c:	fa0f f989 	sxth.w	r9, r9
    fill_area.x1 = col_start + pos_x;
 800a510:	189a      	adds	r2, r3, r2
 800a512:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
    fill_area.x2 = col_end  + pos_x - 1;
 800a516:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a518:	3b01      	subs	r3, #1
 800a51a:	4413      	add	r3, r2
 800a51c:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800a520:	9012      	str	r0, [sp, #72]	; 0x48
    fill_area.y1 = row_start + pos_y;
 800a522:	f8ad 90ae 	strh.w	r9, [sp, #174]	; 0xae
    fill_area.y2 = fill_area.y1;
 800a526:	f8ad 90b2 	strh.w	r9, [sp, #178]	; 0xb2
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800a52a:	f001 f9db 	bl	800b8e4 <lv_draw_mask_get_cnt>
    uint32_t col_bit_max = 8 - bpp;
 800a52e:	f1c6 0308 	rsb	r3, r6, #8
 800a532:	9317      	str	r3, [sp, #92]	; 0x5c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a534:	9b11      	ldr	r3, [sp, #68]	; 0x44
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800a536:	9a11      	ldr	r2, [sp, #68]	; 0x44
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a538:	449a      	add	sl, r3
 800a53a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800a53c:	f005 0507 	and.w	r5, r5, #7
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a540:	ebaa 0a03 	sub.w	sl, sl, r3
 800a544:	fb06 f30a 	mul.w	r3, r6, sl
    int32_t mask_p = 0;
 800a548:	f04f 0a00 	mov.w	sl, #0
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a54c:	9326      	str	r3, [sp, #152]	; 0x98
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800a54e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800a550:	9025      	str	r0, [sp, #148]	; 0x94
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	9327      	str	r3, [sp, #156]	; 0x9c
    for(row = row_start ; row < row_end; row++) {
 800a556:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a558:	429f      	cmp	r7, r3
 800a55a:	db3d      	blt.n	800a5d8 <lv_draw_label+0x69c>
    if(fill_area.y1 != fill_area.y2) {
 800a55c:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 800a560:	f9bd 20ae 	ldrsh.w	r2, [sp, #174]	; 0xae
 800a564:	429a      	cmp	r2, r3
 800a566:	d00f      	beq.n	800a588 <lv_draw_label+0x64c>
        fill_area.y2--;
 800a568:	3b01      	subs	r3, #1
 800a56a:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        _lv_blend_fill(clip_area, &fill_area,
 800a56e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a570:	27ff      	movs	r7, #255	; 0xff
 800a572:	9302      	str	r3, [sp, #8]
 800a574:	2302      	movs	r3, #2
 800a576:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
 800a57a:	e9cd 3700 	strd	r3, r7, [sp]
 800a57e:	a92b      	add	r1, sp, #172	; 0xac
 800a580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a582:	4658      	mov	r0, fp
 800a584:	f7fe fa0a 	bl	800899c <_lv_blend_fill>
    _lv_mem_buf_release(mask_buf);
 800a588:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a58a:	f005 f83f 	bl	800f60c <_lv_mem_buf_release>
 800a58e:	e6c3      	b.n	800a318 <lv_draw_label+0x3dc>
            bitmask_init  = 0xFF;
 800a590:	23ff      	movs	r3, #255	; 0xff
        case 8:
 800a592:	2608      	movs	r6, #8
            bitmask_init  = 0xFF;
 800a594:	9313      	str	r3, [sp, #76]	; 0x4c
            shades = 256;
 800a596:	f44f 7580 	mov.w	r5, #256	; 0x100
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800a59a:	4b55      	ldr	r3, [pc, #340]	; (800a6f0 <lv_draw_label+0x7b4>)
 800a59c:	e75d      	b.n	800a45a <lv_draw_label+0x51e>
            bitmask_init  = 0xF0;
 800a59e:	23f0      	movs	r3, #240	; 0xf0
    if(bpp == 3) bpp = 4;
 800a5a0:	2604      	movs	r6, #4
            bitmask_init  = 0xF0;
 800a5a2:	9313      	str	r3, [sp, #76]	; 0x4c
            shades = 16;
 800a5a4:	2510      	movs	r5, #16
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800a5a6:	4b53      	ldr	r3, [pc, #332]	; (800a6f4 <lv_draw_label+0x7b8>)
 800a5a8:	e757      	b.n	800a45a <lv_draw_label+0x51e>
            bitmask_init  = 0x80;
 800a5aa:	2380      	movs	r3, #128	; 0x80
    switch(bpp) {
 800a5ac:	2601      	movs	r6, #1
            bitmask_init  = 0x80;
 800a5ae:	9313      	str	r3, [sp, #76]	; 0x4c
            shades = 2;
 800a5b0:	2502      	movs	r5, #2
            bpp_opa_table_p = _lv_bpp1_opa_table;
 800a5b2:	4b51      	ldr	r3, [pc, #324]	; (800a6f8 <lv_draw_label+0x7bc>)
 800a5b4:	e751      	b.n	800a45a <lv_draw_label+0x51e>
        if(prev_opa != opa || prev_bpp != bpp) {
 800a5b6:	2000      	movs	r0, #0
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800a5b8:	f8df e130 	ldr.w	lr, [pc, #304]	; 800a6ec <lv_draw_label+0x7b0>
 800a5bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5be:	5c1b      	ldrb	r3, [r3, r0]
 800a5c0:	2bff      	cmp	r3, #255	; 0xff
 800a5c2:	bf17      	itett	ne
 800a5c4:	9f16      	ldrne	r7, [sp, #88]	; 0x58
 800a5c6:	9b16      	ldreq	r3, [sp, #88]	; 0x58
 800a5c8:	437b      	mulne	r3, r7
 800a5ca:	0a1b      	lsrne	r3, r3, #8
 800a5cc:	f800 300e 	strb.w	r3, [r0, lr]
            for(i = 0; i < shades; i++) {
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	42a8      	cmp	r0, r5
 800a5d4:	d1f2      	bne.n	800a5bc <lv_draw_label+0x680>
 800a5d6:	e74f      	b.n	800a478 <lv_draw_label+0x53c>
        bitmask = bitmask_init >> col_bit;
 800a5d8:	46d1      	mov	r9, sl
 800a5da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5dc:	fa23 f205 	lsr.w	r2, r3, r5
        for(col = col_start; col < col_end; col++) {
 800a5e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5e2:	eba3 010a 	sub.w	r1, r3, sl
 800a5e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a5e8:	eb01 0309 	add.w	r3, r1, r9
 800a5ec:	4283      	cmp	r3, r0
 800a5ee:	db2f      	blt.n	800a650 <lv_draw_label+0x714>
        if(other_mask_cnt) {
 800a5f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a5f2:	b1c3      	cbz	r3, 800a626 <lv_draw_label+0x6ea>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800a5f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5f6:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
 800a5fa:	449a      	add	sl, r3
 800a5fc:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
 800a600:	f9bd 20b2 	ldrsh.w	r2, [sp, #178]	; 0xb2
 800a604:	3301      	adds	r3, #1
 800a606:	1a5b      	subs	r3, r3, r1
 800a608:	b21b      	sxth	r3, r3
 800a60a:	4650      	mov	r0, sl
 800a60c:	f001 f91e 	bl	800b84c <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800a610:	b948      	cbnz	r0, 800a626 <lv_draw_label+0x6ea>
 800a612:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
 800a616:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 800a61a:	3101      	adds	r1, #1
 800a61c:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
 800a61e:	b209      	sxth	r1, r1
 800a620:	4650      	mov	r0, sl
 800a622:	f005 f9f9 	bl	800fa18 <_lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800a626:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a628:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a62a:	444b      	add	r3, r9
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d92b      	bls.n	800a688 <lv_draw_label+0x74c>
            fill_area.y2 ++;
 800a630:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 800a634:	3301      	adds	r3, #1
 800a636:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        col_bit += col_bit_row_ofs;
 800a63a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    for(row = row_start ; row < row_end; row++) {
 800a63c:	3701      	adds	r7, #1
        col_bit += col_bit_row_ofs;
 800a63e:	441d      	add	r5, r3
        map_p += (col_bit >> 3);
 800a640:	9b15      	ldr	r3, [sp, #84]	; 0x54
    for(row = row_start ; row < row_end; row++) {
 800a642:	46ca      	mov	sl, r9
        map_p += (col_bit >> 3);
 800a644:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
 800a648:	9315      	str	r3, [sp, #84]	; 0x54
        col_bit = col_bit & 0x7;
 800a64a:	f005 0507 	and.w	r5, r5, #7
 800a64e:	e782      	b.n	800a556 <lv_draw_label+0x61a>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800a650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a652:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	1b40      	subs	r0, r0, r5
 800a658:	4013      	ands	r3, r2
 800a65a:	40c3      	lsrs	r3, r0
            if(letter_px) {
 800a65c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800a660:	bf1c      	itt	ne
 800a662:	980e      	ldrne	r0, [sp, #56]	; 0x38
 800a664:	5cc3      	ldrbne	r3, [r0, r3]
                mask_buf[mask_p] = 0;
 800a666:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a668:	f800 3009 	strb.w	r3, [r0, r9]
            if(col_bit < col_bit_max) {
 800a66c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
            mask_p++;
 800a66e:	f109 0901 	add.w	r9, r9, #1
            if(col_bit < col_bit_max) {
 800a672:	42ab      	cmp	r3, r5
                map_p++;
 800a674:	bf95      	itete	ls
 800a676:	9b15      	ldrls	r3, [sp, #84]	; 0x54
                col_bit += bpp;
 800a678:	19ad      	addhi	r5, r5, r6
                map_p++;
 800a67a:	3301      	addls	r3, #1
                bitmask = bitmask >> bpp;
 800a67c:	40f2      	lsrhi	r2, r6
                map_p++;
 800a67e:	bf9e      	ittt	ls
 800a680:	9315      	strls	r3, [sp, #84]	; 0x54
                bitmask = bitmask_init;
 800a682:	9a13      	ldrls	r2, [sp, #76]	; 0x4c
                col_bit = 0;
 800a684:	2500      	movls	r5, #0
 800a686:	e7ae      	b.n	800a5e6 <lv_draw_label+0x6aa>
            _lv_blend_fill(clip_area, &fill_area,
 800a688:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a68a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800a68e:	9302      	str	r3, [sp, #8]
 800a690:	2302      	movs	r3, #2
 800a692:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
 800a696:	e9cd 3c00 	strd	r3, ip, [sp]
 800a69a:	a92b      	add	r1, sp, #172	; 0xac
 800a69c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a69e:	4658      	mov	r0, fp
 800a6a0:	f7fe f97c 	bl	800899c <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800a6a4:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
            mask_p = 0;
 800a6a8:	f04f 0900 	mov.w	r9, #0
            fill_area.y1 = fill_area.y2 + 1;
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	b21b      	sxth	r3, r3
 800a6b0:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
            fill_area.y2 = fill_area.y1;
 800a6b4:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
 800a6b8:	e7bf      	b.n	800a63a <lv_draw_label+0x6fe>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800a6ba:	0713      	lsls	r3, r2, #28
 800a6bc:	f57f aeaa 	bpl.w	800a414 <lv_draw_label+0x4d8>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800a6c0:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800a6c4:	9200      	str	r2, [sp, #0]
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	9a05      	ldr	r2, [sp, #20]
 800a6ca:	f006 f82f 	bl	801072c <_lv_txt_get_width>
 800a6ce:	9b07      	ldr	r3, [sp, #28]
 800a6d0:	9a07      	ldr	r2, [sp, #28]
 800a6d2:	889b      	ldrh	r3, [r3, #4]
 800a6d4:	8812      	ldrh	r2, [r2, #0]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800a6da:	b21b      	sxth	r3, r3
 800a6dc:	1a18      	subs	r0, r3, r0
 800a6de:	e697      	b.n	800a410 <lv_draw_label+0x4d4>
 800a6e0:	080159d6 	.word	0x080159d6
 800a6e4:	20000518 	.word	0x20000518
 800a6e8:	20000514 	.word	0x20000514
 800a6ec:	20000414 	.word	0x20000414
 800a6f0:	080159ea 	.word	0x080159ea
 800a6f4:	080159da 	.word	0x080159da
 800a6f8:	080159d4 	.word	0x080159d4
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 800a6fc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800a700:	4632      	mov	r2, r6
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 800a702:	931f      	str	r3, [sp, #124]	; 0x7c
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800a704:	a930      	add	r1, sp, #192	; 0xc0
 800a706:	2300      	movs	r3, #0
 800a708:	9805      	ldr	r0, [sp, #20]
 800a70a:	f003 faeb 	bl	800dce4 <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
 800a70e:	2800      	cmp	r0, #0
 800a710:	f43f ae02 	beq.w	800a318 <lv_draw_label+0x3dc>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800a714:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	; 0xc4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f43f adfd 	beq.w	800a318 <lv_draw_label+0x3dc>
 800a71e:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
 800a722:	2a00      	cmp	r2, #0
 800a724:	f43f adf8 	beq.w	800a318 <lv_draw_label+0x3dc>
    int32_t pos_x = pos_p->x + g.ofs_x;
 800a728:	f9bd 10c6 	ldrsh.w	r1, [sp, #198]	; 0xc6
 800a72c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a72e:	4401      	add	r1, r0
    if(pos_x + g.box_w < clip_area->x1 ||
 800a730:	440a      	add	r2, r1
    int32_t pos_x = pos_p->x + g.ofs_x;
 800a732:	9117      	str	r1, [sp, #92]	; 0x5c
    if(pos_x + g.box_w < clip_area->x1 ||
 800a734:	f9bb 1000 	ldrsh.w	r1, [fp]
 800a738:	428a      	cmp	r2, r1
 800a73a:	f6ff aded 	blt.w	800a318 <lv_draw_label+0x3dc>
       pos_x > clip_area->x2 ||
 800a73e:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
 800a742:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800a744:	4291      	cmp	r1, r2
 800a746:	f73f ade7 	bgt.w	800a318 <lv_draw_label+0x3dc>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800a74a:	9a05      	ldr	r2, [sp, #20]
 800a74c:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 800a750:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800a754:	eba9 0902 	sub.w	r9, r9, r2
 800a758:	9a08      	ldr	r2, [sp, #32]
 800a75a:	4491      	add	r9, r2
 800a75c:	f9bd 20c8 	ldrsh.w	r2, [sp, #200]	; 0xc8
 800a760:	eba9 0903 	sub.w	r9, r9, r3
 800a764:	eba9 0902 	sub.w	r9, r9, r2
       pos_y + g.box_h < clip_area->y1 ||
 800a768:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 800a76c:	444b      	add	r3, r9
       pos_x > clip_area->x2 ||
 800a76e:	4293      	cmp	r3, r2
 800a770:	f6ff add2 	blt.w	800a318 <lv_draw_label+0x3dc>
       pos_y > clip_area->y2)  {
 800a774:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
       pos_y + g.box_h < clip_area->y1 ||
 800a778:	4599      	cmp	r9, r3
 800a77a:	f73f adcd 	bgt.w	800a318 <lv_draw_label+0x3dc>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800a77e:	4631      	mov	r1, r6
 800a780:	9805      	ldr	r0, [sp, #20]
 800a782:	f003 faad 	bl	800dce0 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 800a786:	4684      	mov	ip, r0
 800a788:	2800      	cmp	r0, #0
 800a78a:	f43f adc5 	beq.w	800a318 <lv_draw_label+0x3dc>
    if(font_p->subpx) {
 800a78e:	9b05      	ldr	r3, [sp, #20]
 800a790:	7b1b      	ldrb	r3, [r3, #12]
 800a792:	079b      	lsls	r3, r3, #30
 800a794:	f47f adc0 	bne.w	800a318 <lv_draw_label+0x3dc>
    uint32_t bpp = g->bpp;
 800a798:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800a79c:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
    if(bpp == 3) bpp = 4;
 800a7a0:	2b03      	cmp	r3, #3
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800a7a2:	fa0f f289 	sxth.w	r2, r9
 800a7a6:	f8ad 508e 	strh.w	r5, [sp, #142]	; 0x8e
    if(bpp == 3) bpp = 4;
 800a7aa:	f43f aef8 	beq.w	800a59e <lv_draw_label+0x662>
    switch(bpp) {
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	2b07      	cmp	r3, #7
 800a7b2:	f63f adb1 	bhi.w	800a318 <lv_draw_label+0x3dc>
 800a7b6:	a001      	add	r0, pc, #4	; (adr r0, 800a7bc <lv_draw_label+0x880>)
 800a7b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a7bc:	0800a5ab 	.word	0x0800a5ab
 800a7c0:	0800a451 	.word	0x0800a451
 800a7c4:	0800a319 	.word	0x0800a319
 800a7c8:	0800a59f 	.word	0x0800a59f
 800a7cc:	0800a319 	.word	0x0800a319
 800a7d0:	0800a319 	.word	0x0800a319
 800a7d4:	0800a319 	.word	0x0800a319
 800a7d8:	0800a591 	.word	0x0800a591

0800a7dc <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800a7dc:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800a7de:	210a      	movs	r1, #10
{
 800a7e0:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800a7e2:	f005 f919 	bl	800fa18 <_lv_memset_00>
    dsc->width = 1;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
 800a7ea:	23ff      	movs	r3, #255	; 0xff
 800a7ec:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	8023      	strh	r3, [r4, #0]
}
 800a7f2:	bd10      	pop	{r4, pc}

0800a7f4 <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
 800a7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f8:	461c      	mov	r4, r3
    if(dsc->width == 0) return;
 800a7fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
 800a7fe:	b0c9      	sub	sp, #292	; 0x124
 800a800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a804:	9206      	str	r2, [sp, #24]
    if(dsc->width == 0) return;
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 80d5 	beq.w	800a9b6 <lv_draw_line+0x1c2>
    if(dsc->opa <= LV_OPA_MIN) return;
 800a80c:	7a22      	ldrb	r2, [r4, #8]
 800a80e:	2a02      	cmp	r2, #2
 800a810:	f240 80d1 	bls.w	800a9b6 <lv_draw_line+0x1c2>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800a814:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a818:	f9b1 5000 	ldrsh.w	r5, [r1]
 800a81c:	9905      	ldr	r1, [sp, #20]
 800a81e:	42aa      	cmp	r2, r5
 800a820:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800a824:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800a828:	d102      	bne.n	800a830 <lv_draw_line+0x3c>
 800a82a:	4288      	cmp	r0, r1
 800a82c:	f000 80c3 	beq.w	800a9b6 <lv_draw_line+0x1c2>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
 800a830:	2602      	movs	r6, #2
 800a832:	fb93 f3f6 	sdiv	r3, r3, r6
 800a836:	b29b      	uxth	r3, r3
 800a838:	42aa      	cmp	r2, r5
 800a83a:	bfd4      	ite	le
 800a83c:	ebc3 0602 	rsble	r6, r3, r2
 800a840:	ebc3 0605 	rsbgt	r6, r3, r5
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
 800a844:	42aa      	cmp	r2, r5
 800a846:	bfac      	ite	ge
 800a848:	189a      	addge	r2, r3, r2
 800a84a:	195a      	addlt	r2, r3, r5
 800a84c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
 800a850:	4288      	cmp	r0, r1
 800a852:	bfd4      	ite	le
 800a854:	ebc3 0200 	rsble	r2, r3, r0
 800a858:	ebc3 0201 	rsbgt	r2, r3, r1
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 800a85c:	4288      	cmp	r0, r1
 800a85e:	bfac      	ite	ge
 800a860:	181b      	addge	r3, r3, r0
 800a862:	185b      	addlt	r3, r3, r1

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800a864:	a90c      	add	r1, sp, #48	; 0x30
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
 800a866:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800a86a:	4608      	mov	r0, r1
 800a86c:	9a06      	ldr	r2, [sp, #24]
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
 800a86e:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 800a872:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800a876:	f004 f91a 	bl	800eaae <_lv_area_intersect>
    if(!is_common) return;
 800a87a:	2800      	cmp	r0, #0
 800a87c:	f000 809b 	beq.w	800a9b6 <lv_draw_line+0x1c2>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
 800a880:	9b04      	ldr	r3, [sp, #16]
 800a882:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800a886:	9b05      	ldr	r3, [sp, #20]
 800a888:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 800a88c:	45c8      	cmp	r8, r9
 800a88e:	f040 8132 	bne.w	800aaf6 <lv_draw_line+0x302>

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;
 800a892:	7a27      	ldrb	r7, [r4, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800a894:	f7fc ffdc 	bl	8007850 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a898:	f003 fdd5 	bl	800e446 <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
 800a89c:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a8a0:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
    int32_t w = dsc->width - 1;
 800a8a4:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
 800a8a6:	ea4f 0865 	mov.w	r8, r5, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a8aa:	f005 0501 	and.w	r5, r5, #1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a8ae:	4682      	mov	sl, r0
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800a8b0:	4445      	add	r5, r8
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800a8b2:	b126      	cbz	r6, 800a8be <lv_draw_line+0xca>
 800a8b4:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 800a8b8:	3600      	adds	r6, #0
 800a8ba:	bf18      	it	ne
 800a8bc:	2601      	movne	r6, #1

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800a8be:	f001 f811 	bl	800b8e4 <lv_draw_mask_get_cnt>
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d17a      	bne.n	800a9bc <lv_draw_line+0x1c8>
    else if(dashed) simple_mode = false;
 800a8c6:	f086 0201 	eor.w	r2, r6, #1

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 800a8ca:	9b05      	ldr	r3, [sp, #20]
 800a8cc:	9904      	ldr	r1, [sp, #16]
 800a8ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8d2:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	428b      	cmp	r3, r1
 800a8da:	bfa8      	it	ge
 800a8dc:	4608      	movge	r0, r1
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 800a8de:	428b      	cmp	r3, r1
 800a8e0:	bfb8      	it	lt
 800a8e2:	460b      	movlt	r3, r1
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
 800a8ea:	9b04      	ldr	r3, [sp, #16]
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 800a8ec:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
    draw_area.y1 = point1->y - w_half1;
 800a8f0:	885b      	ldrh	r3, [r3, #2]
 800a8f2:	1b5d      	subs	r5, r3, r5
    draw_area.y2 = point1->y + w_half0;
 800a8f4:	4498      	add	r8, r3
    draw_area.y1 = point1->y - w_half1;
 800a8f6:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
    draw_area.y2 = point1->y + w_half0;
 800a8fa:	f8ad 80a6 	strh.w	r8, [sp, #166]	; 0xa6

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800a8fe:	2a00      	cmp	r2, #0
 800a900:	d05e      	beq.n	800a9c0 <lv_draw_line+0x1cc>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 800a902:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
 800a904:	f003 0303 	and.w	r3, r3, #3
 800a908:	e9cd 7301 	strd	r7, r3, [sp, #4]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
 800a90c:	2301      	movs	r3, #1
 800a90e:	8822      	ldrh	r2, [r4, #0]
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	a928      	add	r1, sp, #160	; 0xa0
 800a914:	2300      	movs	r3, #0
 800a916:	a80c      	add	r0, sp, #48	; 0x30
 800a918:	f7fe f840 	bl	800899c <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
 800a91c:	7a63      	ldrb	r3, [r4, #9]
 800a91e:	f013 0f0c 	tst.w	r3, #12
 800a922:	d048      	beq.n	800a9b6 <lv_draw_line+0x1c2>
        lv_draw_rect_dsc_init(&cir_dsc);
 800a924:	a833      	add	r0, sp, #204	; 0xcc
 800a926:	f001 fb43 	bl	800bfb0 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800a92a:	8823      	ldrh	r3, [r4, #0]
 800a92c:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800a930:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800a934:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        cir_dsc.bg_opa = dsc->opa;
 800a938:	7a23      	ldrb	r3, [r4, #8]
 800a93a:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        int32_t r = (dsc->width >> 1);
 800a93e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800a942:	105d      	asrs	r5, r3, #1
 800a944:	43db      	mvns	r3, r3
 800a946:	f003 0601 	and.w	r6, r3, #1
        if(dsc->round_start) {
 800a94a:	7a63      	ldrb	r3, [r4, #9]
 800a94c:	075a      	lsls	r2, r3, #29
 800a94e:	d517      	bpl.n	800a980 <lv_draw_line+0x18c>
            cir_area.x1 = point1->x - r;
 800a950:	9b04      	ldr	r3, [sp, #16]
 800a952:	881a      	ldrh	r2, [r3, #0]
 800a954:	b2ab      	uxth	r3, r5
 800a956:	1ad1      	subs	r1, r2, r3
 800a958:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
            cir_area.y1 = point1->y - r;
 800a95c:	9904      	ldr	r1, [sp, #16]
            cir_area.x2 = point1->x + r - r_corr;
 800a95e:	441a      	add	r2, r3
            cir_area.y1 = point1->y - r;
 800a960:	8849      	ldrh	r1, [r1, #2]
            cir_area.x2 = point1->x + r - r_corr;
 800a962:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point1->y - r;
 800a964:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point1->y + r - r_corr ;
 800a966:	440b      	add	r3, r1
            cir_area.y1 = point1->y - r;
 800a968:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
            cir_area.x2 = point1->x + r - r_corr;
 800a96c:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
 800a970:	1b9b      	subs	r3, r3, r6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800a972:	aa33      	add	r2, sp, #204	; 0xcc
 800a974:	9906      	ldr	r1, [sp, #24]
 800a976:	a828      	add	r0, sp, #160	; 0xa0
            cir_area.y2 = point1->y + r - r_corr ;
 800a978:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800a97c:	f001 fb3c 	bl	800bff8 <lv_draw_rect>
        if(dsc->round_end) {
 800a980:	7a63      	ldrb	r3, [r4, #9]
 800a982:	071b      	lsls	r3, r3, #28
 800a984:	d517      	bpl.n	800a9b6 <lv_draw_line+0x1c2>
            cir_area.x1 = point2->x - r;
 800a986:	9b05      	ldr	r3, [sp, #20]
 800a988:	881a      	ldrh	r2, [r3, #0]
 800a98a:	b2ab      	uxth	r3, r5
 800a98c:	1ad1      	subs	r1, r2, r3
 800a98e:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
            cir_area.y1 = point2->y - r;
 800a992:	9905      	ldr	r1, [sp, #20]
            cir_area.x2 = point2->x + r - r_corr;
 800a994:	441a      	add	r2, r3
            cir_area.y1 = point2->y - r;
 800a996:	8849      	ldrh	r1, [r1, #2]
            cir_area.x2 = point2->x + r - r_corr;
 800a998:	1b92      	subs	r2, r2, r6
            cir_area.y1 = point2->y - r;
 800a99a:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point2->y + r - r_corr ;
 800a99c:	440b      	add	r3, r1
            cir_area.y1 = point2->y - r;
 800a99e:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
            cir_area.x2 = point2->x + r - r_corr;
 800a9a2:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point2->y + r - r_corr ;
 800a9a6:	1b9b      	subs	r3, r3, r6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800a9a8:	aa33      	add	r2, sp, #204	; 0xcc
 800a9aa:	9906      	ldr	r1, [sp, #24]
 800a9ac:	a828      	add	r0, sp, #160	; 0xa0
            cir_area.y2 = point2->y + r - r_corr ;
 800a9ae:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800a9b2:	f001 fb21 	bl	800bff8 <lv_draw_rect>
}
 800a9b6:	b049      	add	sp, #292	; 0x124
 800a9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800a9bc:	2200      	movs	r2, #0
 800a9be:	e784      	b.n	800a8ca <lv_draw_line+0xd6>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800a9c0:	aa28      	add	r2, sp, #160	; 0xa0
 800a9c2:	a90c      	add	r1, sp, #48	; 0x30
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	f004 f872 	bl	800eaae <_lv_area_intersect>
        if(!is_common) return;
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	d0a6      	beq.n	800a91c <lv_draw_line+0x128>
        draw_area.x1 -= disp_area->x1;
 800a9ce:	f9ba 7010 	ldrsh.w	r7, [sl, #16]
        draw_area.y1 -= disp_area->y1;
 800a9d2:	f8ba 9012 	ldrh.w	r9, [sl, #18]
 800a9d6:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
        draw_area.x1 -= disp_area->x1;
 800a9da:	f9bd 80a0 	ldrsh.w	r8, [sp, #160]	; 0xa0
        draw_area.x2 -= disp_area->x1;
 800a9de:	f9bd e0a4 	ldrsh.w	lr, [sp, #164]	; 0xa4
        draw_area.x1 -= disp_area->x1;
 800a9e2:	b2bb      	uxth	r3, r7
 800a9e4:	eba8 0203 	sub.w	r2, r8, r3
        draw_area.y1 -= disp_area->y1;
 800a9e8:	eba1 0009 	sub.w	r0, r1, r9
        draw_area.x2 -= disp_area->x1;
 800a9ec:	ebae 0303 	sub.w	r3, lr, r3
 800a9f0:	b29b      	uxth	r3, r3
        draw_area.y1 -= disp_area->y1;
 800a9f2:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
        draw_area.y2 -= disp_area->y1;
 800a9f6:	f8bd 00a6 	ldrh.w	r0, [sp, #166]	; 0xa6
        draw_area.x1 -= disp_area->x1;
 800a9fa:	b292      	uxth	r2, r2
 800a9fc:	1c5d      	adds	r5, r3, #1
 800a9fe:	fa0f fc82 	sxth.w	ip, r2
        draw_area.y2 -= disp_area->y1;
 800aa02:	eba0 0009 	sub.w	r0, r0, r9
 800aa06:	1aad      	subs	r5, r5, r2
        draw_area.x1 -= disp_area->x1;
 800aa08:	f8ad c0a0 	strh.w	ip, [sp, #160]	; 0xa0
        draw_area.x2 -= disp_area->x1;
 800aa0c:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
 800aa10:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
 800aa14:	b22d      	sxth	r5, r5
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800aa16:	f8ad 80cc 	strh.w	r8, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800aa1a:	f8ad e0d0 	strh.w	lr, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800aa1e:	f8ad 10ce 	strh.w	r1, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
 800aa22:	f8ad 10d2 	strh.w	r1, [sp, #210]	; 0xd2
        if(dashed) {
 800aa26:	b1d6      	cbz	r6, 800aa5e <lv_draw_line+0x26a>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
 800aa28:	4467      	add	r7, ip
 800aa2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800aa2e:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
 800aa32:	4463      	add	r3, ip
 800aa34:	fb97 fcf3 	sdiv	ip, r7, r3
 800aa38:	fb03 771c 	mls	r7, r3, ip, r7
 800aa3c:	b23f      	sxth	r7, r7
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f004 ff4c 	bl	800f8dc <_lv_mem_buf_get>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800aa44:	f04f 0b00 	mov.w	fp, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800aa48:	4680      	mov	r8, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800aa4a:	f9bd 90a2 	ldrsh.w	r9, [sp, #162]	; 0xa2
 800aa4e:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 800aa52:	4599      	cmp	r9, r3
 800aa54:	dd05      	ble.n	800aa62 <lv_draw_line+0x26e>
        _lv_mem_buf_release(mask_buf);
 800aa56:	4640      	mov	r0, r8
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
 800aa58:	f004 fdd8 	bl	800f60c <_lv_mem_buf_release>
 800aa5c:	e75e      	b.n	800a91c <lv_draw_line+0x128>
        lv_style_int_t dash_start = 0;
 800aa5e:	4637      	mov	r7, r6
 800aa60:	e7ed      	b.n	800aa3e <lv_draw_line+0x24a>
            _lv_memset_ff(mask_buf, draw_area_w);
 800aa62:	4629      	mov	r1, r5
 800aa64:	4640      	mov	r0, r8
 800aa66:	f005 f806 	bl	800fa76 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800aa6a:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 800aa6e:	f8ba 2012 	ldrh.w	r2, [sl, #18]
 800aa72:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800aa76:	444a      	add	r2, r9
 800aa78:	4419      	add	r1, r3
 800aa7a:	b212      	sxth	r2, r2
 800aa7c:	462b      	mov	r3, r5
 800aa7e:	b209      	sxth	r1, r1
 800aa80:	4640      	mov	r0, r8
 800aa82:	f000 fee3 	bl	800b84c <lv_draw_mask_apply>
 800aa86:	4602      	mov	r2, r0
            if(dashed) {
 800aa88:	b18e      	cbz	r6, 800aaae <lv_draw_line+0x2ba>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800aa8a:	b180      	cbz	r0, 800aaae <lv_draw_line+0x2ba>
                    lv_style_int_t dash_cnt = dash_start;
 800aa8c:	4639      	mov	r1, r7
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800aa8e:	2300      	movs	r3, #0
 800aa90:	e00a      	b.n	800aaa8 <lv_draw_line+0x2b4>
                        if(dash_cnt <= dsc->dash_width) {
 800aa92:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800aa96:	428a      	cmp	r2, r1
 800aa98:	db23      	blt.n	800aae2 <lv_draw_line+0x2ee>
                            i += diff;
 800aa9a:	4413      	add	r3, r2
 800aa9c:	1a5b      	subs	r3, r3, r1
 800aa9e:	b21b      	sxth	r3, r3
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	3201      	adds	r2, #1
 800aaa4:	b21b      	sxth	r3, r3
 800aaa6:	b211      	sxth	r1, r2
 800aaa8:	429d      	cmp	r5, r3
 800aaaa:	dcf2      	bgt.n	800aa92 <lv_draw_line+0x29e>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 800aaac:	2202      	movs	r2, #2
                           dsc->blend_mode);
 800aaae:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(clip, &fill_area,
 800aab0:	a933      	add	r1, sp, #204	; 0xcc
 800aab2:	f003 0303 	and.w	r3, r3, #3
 800aab6:	9302      	str	r3, [sp, #8]
 800aab8:	7a23      	ldrb	r3, [r4, #8]
 800aaba:	a80c      	add	r0, sp, #48	; 0x30
 800aabc:	e9cd 2300 	strd	r2, r3, [sp]
 800aac0:	4643      	mov	r3, r8
 800aac2:	8822      	ldrh	r2, [r4, #0]
 800aac4:	f7fd ff6a 	bl	800899c <_lv_blend_fill>
            fill_area.y1++;
 800aac8:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800aacc:	f109 0901 	add.w	r9, r9, #1
            fill_area.y1++;
 800aad0:	3301      	adds	r3, #1
 800aad2:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
 800aad6:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
 800aada:	3301      	adds	r3, #1
 800aadc:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
 800aae0:	e7b5      	b.n	800aa4e <lv_draw_line+0x25a>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800aae2:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800aae6:	4402      	add	r2, r0
 800aae8:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
 800aaea:	bfba      	itte	lt
 800aaec:	f808 b003 	strblt.w	fp, [r8, r3]
 800aaf0:	460a      	movlt	r2, r1
                            dash_cnt = 0;
 800aaf2:	2200      	movge	r2, #0
 800aaf4:	e7d4      	b.n	800aaa0 <lv_draw_line+0x2ac>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
 800aaf6:	9b04      	ldr	r3, [sp, #16]
 800aaf8:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aafc:	9b05      	ldr	r3, [sp, #20]
 800aafe:	f9b3 7000 	ldrsh.w	r7, [r3]
 800ab02:	42be      	cmp	r6, r7
 800ab04:	f040 80c4 	bne.w	800ac90 <lv_draw_line+0x49c>
    lv_opa_t opa = dsc->opa;
 800ab08:	7a25      	ldrb	r5, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800ab0a:	f7fc fea1 	bl	8007850 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800ab0e:	f003 fc9a 	bl	800e446 <lv_disp_get_buf>
    int32_t w = dsc->width - 1;
 800ab12:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800ab16:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
    int32_t w = dsc->width - 1;
 800ab1a:	3b01      	subs	r3, #1
    int32_t w_half0 = w >> 1;
 800ab1c:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800ab20:	f003 0301 	and.w	r3, r3, #1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800ab24:	4681      	mov	r9, r0
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800ab26:	eb03 0608 	add.w	r6, r3, r8
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800ab2a:	b127      	cbz	r7, 800ab36 <lv_draw_line+0x342>
 800ab2c:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
 800ab30:	3700      	adds	r7, #0
 800ab32:	bf18      	it	ne
 800ab34:	2701      	movne	r7, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800ab36:	f000 fed5 	bl	800b8e4 <lv_draw_mask_get_cnt>
 800ab3a:	bb10      	cbnz	r0, 800ab82 <lv_draw_line+0x38e>
    else if(dashed) simple_mode = false;
 800ab3c:	f087 0101 	eor.w	r1, r7, #1
    draw_area.x1 = point1->x - w_half1;
 800ab40:	9b04      	ldr	r3, [sp, #16]
 800ab42:	881a      	ldrh	r2, [r3, #0]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800ab44:	9b05      	ldr	r3, [sp, #20]
    draw_area.x1 = point1->x - w_half1;
 800ab46:	1b96      	subs	r6, r2, r6
    draw_area.x2 = point1->x + w_half0;
 800ab48:	4490      	add	r8, r2
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800ab4a:	9a04      	ldr	r2, [sp, #16]
 800ab4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ab50:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ab54:	4618      	mov	r0, r3
 800ab56:	4293      	cmp	r3, r2
 800ab58:	bfa8      	it	ge
 800ab5a:	4610      	movge	r0, r2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	bfb8      	it	lt
 800ab60:	4613      	movlt	r3, r2
 800ab62:	3b01      	subs	r3, #1
    draw_area.x1 = point1->x - w_half1;
 800ab64:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
    draw_area.x2 = point1->x + w_half0;
 800ab68:	f8ad 80a4 	strh.w	r8, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 800ab6c:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 800ab70:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
 800ab74:	b139      	cbz	r1, 800ab86 <lv_draw_line+0x392>
                       dsc->blend_mode);
 800ab76:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
 800ab78:	f003 0303 	and.w	r3, r3, #3
 800ab7c:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800ab80:	e6c4      	b.n	800a90c <lv_draw_line+0x118>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800ab82:	2100      	movs	r1, #0
 800ab84:	e7dc      	b.n	800ab40 <lv_draw_line+0x34c>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800ab86:	aa28      	add	r2, sp, #160	; 0xa0
 800ab88:	a90c      	add	r1, sp, #48	; 0x30
 800ab8a:	4610      	mov	r0, r2
 800ab8c:	f003 ff8f 	bl	800eaae <_lv_area_intersect>
        if(!is_common) return;
 800ab90:	2800      	cmp	r0, #0
 800ab92:	f43f aec3 	beq.w	800a91c <lv_draw_line+0x128>
        draw_area.x1 -= vdb->area.x1;
 800ab96:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 800ab9a:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
 800ab9e:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
        draw_area.x1 -= vdb->area.x1;
 800aba2:	1ac5      	subs	r5, r0, r3
 800aba4:	b2ae      	uxth	r6, r5
        draw_area.y1 -= vdb->area.y1;
 800aba6:	f8b9 5012 	ldrh.w	r5, [r9, #18]
        draw_area.y2 -= vdb->area.y1;
 800abaa:	f8bd c0a6 	ldrh.w	ip, [sp, #166]	; 0xa6
        draw_area.y1 -= vdb->area.y1;
 800abae:	1b51      	subs	r1, r2, r5
 800abb0:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= vdb->area.x1;
 800abb4:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
        draw_area.y2 -= vdb->area.y1;
 800abb8:	ebac 0505 	sub.w	r5, ip, r5
        draw_area.x2 -= vdb->area.x1;
 800abbc:	1acb      	subs	r3, r1, r3
 800abbe:	b29b      	uxth	r3, r3
        draw_area.y2 -= vdb->area.y1;
 800abc0:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
 800abc4:	1c5d      	adds	r5, r3, #1
 800abc6:	1bad      	subs	r5, r5, r6
 800abc8:	b22d      	sxth	r5, r5
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800abca:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800abce:	4628      	mov	r0, r5
        draw_area.x1 -= vdb->area.x1;
 800abd0:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
        draw_area.x2 -= vdb->area.x1;
 800abd4:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800abd8:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800abdc:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
 800abe0:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800abe4:	f004 fe7a 	bl	800f8dc <_lv_mem_buf_get>
 800abe8:	f9bd 80a2 	ldrsh.w	r8, [sp, #162]	; 0xa2
 800abec:	4682      	mov	sl, r0
        if(dashed) {
 800abee:	b1a7      	cbz	r7, 800ac1a <lv_draw_line+0x426>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800abf0:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
 800abf4:	f9b9 2012 	ldrsh.w	r2, [r9, #18]
 800abf8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800abfc:	4442      	add	r2, r8
 800abfe:	4433      	add	r3, r6
 800ac00:	fb92 f6f3 	sdiv	r6, r2, r3
 800ac04:	fb03 2616 	mls	r6, r3, r6, r2
 800ac08:	b236      	sxth	r6, r6
            _lv_blend_fill(clip, &fill_area,
 800ac0a:	f04f 0b00 	mov.w	fp, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ac0e:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 800ac12:	4598      	cmp	r8, r3
 800ac14:	dd03      	ble.n	800ac1e <lv_draw_line+0x42a>
        _lv_mem_buf_release(mask_buf);
 800ac16:	4650      	mov	r0, sl
 800ac18:	e71e      	b.n	800aa58 <lv_draw_line+0x264>
        lv_style_int_t dash_start = 0;
 800ac1a:	463e      	mov	r6, r7
 800ac1c:	e7f5      	b.n	800ac0a <lv_draw_line+0x416>
            _lv_memset_ff(mask_buf, draw_area_w);
 800ac1e:	4629      	mov	r1, r5
 800ac20:	4650      	mov	r0, sl
 800ac22:	f004 ff28 	bl	800fa76 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800ac26:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 800ac2a:	f8b9 2012 	ldrh.w	r2, [r9, #18]
 800ac2e:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 800ac32:	4442      	add	r2, r8
 800ac34:	4419      	add	r1, r3
 800ac36:	b212      	sxth	r2, r2
 800ac38:	462b      	mov	r3, r5
 800ac3a:	b209      	sxth	r1, r1
 800ac3c:	4650      	mov	r0, sl
 800ac3e:	f000 fe05 	bl	800b84c <lv_draw_mask_apply>
            if(dashed) {
 800ac42:	b16f      	cbz	r7, 800ac60 <lv_draw_line+0x46c>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800ac44:	b150      	cbz	r0, 800ac5c <lv_draw_line+0x468>
                    if(dash_cnt > dsc->dash_width) {
 800ac46:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800ac4a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
 800ac4e:	42b2      	cmp	r2, r6
 800ac50:	bfb8      	it	lt
 800ac52:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800ac54:	4413      	add	r3, r2
                        dash_cnt = 0;
 800ac56:	429e      	cmp	r6, r3
 800ac58:	bfa8      	it	ge
 800ac5a:	2600      	movge	r6, #0
                dash_cnt ++;
 800ac5c:	3601      	adds	r6, #1
 800ac5e:	b236      	sxth	r6, r6
            _lv_blend_fill(clip, &fill_area,
 800ac60:	7a23      	ldrb	r3, [r4, #8]
 800ac62:	f8cd b008 	str.w	fp, [sp, #8]
 800ac66:	e9cd 0300 	strd	r0, r3, [sp]
 800ac6a:	8822      	ldrh	r2, [r4, #0]
 800ac6c:	4653      	mov	r3, sl
 800ac6e:	a933      	add	r1, sp, #204	; 0xcc
 800ac70:	a80c      	add	r0, sp, #48	; 0x30
 800ac72:	f7fd fe93 	bl	800899c <_lv_blend_fill>
            fill_area.y1++;
 800ac76:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ac7a:	f108 0801 	add.w	r8, r8, #1
            fill_area.y1++;
 800ac7e:	3301      	adds	r3, #1
 800ac80:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
 800ac84:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
 800ac88:	3301      	adds	r3, #1
 800ac8a:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
 800ac8e:	e7be      	b.n	800ac0e <lv_draw_line+0x41a>
                                                 const lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 800ac90:	45c8      	cmp	r8, r9
 800ac92:	da05      	bge.n	800aca0 <lv_draw_line+0x4ac>
 800ac94:	464b      	mov	r3, r9
 800ac96:	46c1      	mov	r9, r8
 800ac98:	4698      	mov	r8, r3
 800ac9a:	463b      	mov	r3, r7
 800ac9c:	4637      	mov	r7, r6
 800ac9e:	461e      	mov	r6, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800aca0:	1bf3      	subs	r3, r6, r7
 800aca2:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
 800aca4:	eba8 0309 	sub.w	r3, r8, r9
 800aca8:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 800acaa:	9a07      	ldr	r2, [sp, #28]
 800acac:	1bf3      	subs	r3, r6, r7
 800acae:	2b00      	cmp	r3, #0
 800acb0:	bfb8      	it	lt
 800acb2:	425b      	neglt	r3, r3
 800acb4:	2a00      	cmp	r2, #0
 800acb6:	bfb8      	it	lt
 800acb8:	4252      	neglt	r2, r2
 800acba:	4693      	mov	fp, r2
        181,
    };

    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 800acbc:	4293      	cmp	r3, r2
 800acbe:	bfcb      	itete	gt
 800acc0:	0152      	lslgt	r2, r2, #5
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 800acc2:	015a      	lslle	r2, r3, #5
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 800acc4:	fb92 f2f3 	sdivgt	r2, r2, r3
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 800acc8:	fb92 f2fb 	sdivle	r2, r2, fp

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800accc:	49c2      	ldr	r1, [pc, #776]	; (800afd8 <lv_draw_line+0x7e4>)
    int32_t w = dsc->width;
 800acce:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800acd2:	5c8a      	ldrb	r2, [r1, r2]
 800acd4:	9308      	str	r3, [sp, #32]
 800acd6:	4355      	muls	r5, r2
 800acd8:	353f      	adds	r5, #63	; 0x3f
 800acda:	ea4f 1ae5 	mov.w	sl, r5, asr #7
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 800acde:	fa1f f28a 	uxth.w	r2, sl
 800ace2:	42be      	cmp	r6, r7
 800ace4:	bfd4      	ite	le
 800ace6:	ebc2 0106 	rsble	r1, r2, r6
 800acea:	ebc2 0107 	rsbgt	r1, r2, r7
 800acee:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 800acf2:	42be      	cmp	r6, r7
 800acf4:	bfac      	ite	ge
 800acf6:	1991      	addge	r1, r2, r6
 800acf8:	19d1      	addlt	r1, r2, r7
 800acfa:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 800acfe:	45c8      	cmp	r8, r9
 800ad00:	bfd4      	ite	le
 800ad02:	ebc2 0108 	rsble	r1, r2, r8
 800ad06:	ebc2 0109 	rsbgt	r1, r2, r9
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 800ad0a:	45c8      	cmp	r8, r9
 800ad0c:	bfac      	ite	ge
 800ad0e:	4442      	addge	r2, r8
 800ad10:	444a      	addlt	r2, r9
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 800ad12:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800ad16:	a90e      	add	r1, sp, #56	; 0x38
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 800ad18:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	aa0c      	add	r2, sp, #48	; 0x30
 800ad20:	f003 fec5 	bl	800eaae <_lv_area_intersect>
    if(is_common == false) return;
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f43f adf9 	beq.w	800a91c <lv_draw_line+0x128>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 800ad2a:	9b08      	ldr	r3, [sp, #32]
    int32_t w_half0 = w >> 1;
 800ad2c:	122d      	asrs	r5, r5, #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800ad2e:	f00a 0201 	and.w	r2, sl, #1
 800ad32:	442a      	add	r2, r5
    if(flat) {
 800ad34:	455b      	cmp	r3, fp
 800ad36:	b292      	uxth	r2, r2
 800ad38:	b2ad      	uxth	r5, r5
 800ad3a:	f340 80f5 	ble.w	800af28 <lv_draw_line+0x734>
 800ad3e:	fa1f f388 	uxth.w	r3, r8
 800ad42:	fa1f fa89 	uxth.w	sl, r9
 800ad46:	eb02 0b0a 	add.w	fp, r2, sl
 800ad4a:	441a      	add	r2, r3
 800ad4c:	ebaa 0a05 	sub.w	sl, sl, r5
 800ad50:	1b5d      	subs	r5, r3, r5
        if(xdiff > 0) {
 800ad52:	1bf3      	subs	r3, r6, r7
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f04f 0300 	mov.w	r3, #0
 800ad5a:	b212      	sxth	r2, r2
 800ad5c:	fa0f fb8b 	sxth.w	fp, fp
 800ad60:	9208      	str	r2, [sp, #32]
 800ad62:	fa0f fa8a 	sxth.w	sl, sl
 800ad66:	b22d      	sxth	r5, r5
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800ad68:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
 800ad6a:	f340 80cf 	ble.w	800af0c <lv_draw_line+0x718>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800ad6e:	4633      	mov	r3, r6
 800ad70:	4652      	mov	r2, sl
 800ad72:	9500      	str	r5, [sp, #0]
 800ad74:	4639      	mov	r1, r7
 800ad76:	a812      	add	r0, sp, #72	; 0x48
 800ad78:	f000 fdc2 	bl	800b900 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	9b08      	ldr	r3, [sp, #32]
 800ad82:	465a      	mov	r2, fp
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	4633      	mov	r3, r6
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800ad88:	4639      	mov	r1, r7
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800ad8a:	a81d      	add	r0, sp, #116	; 0x74
 800ad8c:	f000 fdb8 	bl	800b900 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800ad90:	2100      	movs	r1, #0
 800ad92:	a812      	add	r0, sp, #72	; 0x48
 800ad94:	f000 fd44 	bl	800b820 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800ad98:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800ad9a:	900a      	str	r0, [sp, #40]	; 0x28
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800ad9c:	a81d      	add	r0, sp, #116	; 0x74
 800ad9e:	f000 fd3f 	bl	800b820 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 800ada2:	7a65      	ldrb	r5, [r4, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800ada4:	900b      	str	r0, [sp, #44]	; 0x2c
    if(!dsc->raw_end) {
 800ada6:	f015 0510 	ands.w	r5, r5, #16
 800adaa:	f040 80d9 	bne.w	800af60 <lv_draw_line+0x76c>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800adae:	2203      	movs	r2, #3
 800adb0:	f8bd b024 	ldrh.w	fp, [sp, #36]	; 0x24
 800adb4:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 800adb8:	9201      	str	r2, [sp, #4]
 800adba:	eb0b 0209 	add.w	r2, fp, r9
 800adbe:	eba7 030a 	sub.w	r3, r7, sl
 800adc2:	b212      	sxth	r2, r2
 800adc4:	9200      	str	r2, [sp, #0]
 800adc6:	b21b      	sxth	r3, r3
 800adc8:	464a      	mov	r2, r9
 800adca:	4639      	mov	r1, r7
 800adcc:	a828      	add	r0, sp, #160	; 0xa0
 800adce:	f000 fd97 	bl	800b900 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800add2:	2202      	movs	r2, #2
 800add4:	44c3      	add	fp, r8
 800add6:	eba6 030a 	sub.w	r3, r6, sl
 800adda:	9201      	str	r2, [sp, #4]
 800addc:	fa0f f28b 	sxth.w	r2, fp
 800ade0:	b21b      	sxth	r3, r3
 800ade2:	9200      	str	r2, [sp, #0]
 800ade4:	4631      	mov	r1, r6
 800ade6:	4642      	mov	r2, r8
 800ade8:	a833      	add	r0, sp, #204	; 0xcc
 800adea:	f000 fd89 	bl	800b900 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800adee:	4629      	mov	r1, r5
 800adf0:	a828      	add	r0, sp, #160	; 0xa0
 800adf2:	f000 fd15 	bl	800b820 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800adf6:	4629      	mov	r1, r5
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800adf8:	9009      	str	r0, [sp, #36]	; 0x24
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800adfa:	a833      	add	r0, sp, #204	; 0xcc
 800adfc:	f000 fd10 	bl	800b820 <lv_draw_mask_add>
 800ae00:	4682      	mov	sl, r0
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800ae02:	f7fc fd25 	bl	8007850 <_lv_refr_get_disp_refreshing>
 800ae06:	4605      	mov	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800ae08:	f003 fb1d 	bl	800e446 <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
 800ae0c:	8a07      	ldrh	r7, [r0, #16]
    draw_area.y1 -= disp_area->y1;
 800ae0e:	8a41      	ldrh	r1, [r0, #18]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800ae10:	4606      	mov	r6, r0
    draw_area.y1 -= disp_area->y1;
 800ae12:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
 800ae16:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    draw_area.x1 -= disp_area->x1;
 800ae1a:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
 800ae1e:	1a40      	subs	r0, r0, r1
 800ae20:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
 800ae24:	1bdb      	subs	r3, r3, r7
    draw_area.y2 -= disp_area->y1;
 800ae26:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
    draw_area.x2 -= disp_area->x1;
 800ae2a:	b29b      	uxth	r3, r3
    draw_area.x1 -= disp_area->x1;
 800ae2c:	ebab 0b07 	sub.w	fp, fp, r7
 800ae30:	fa1f f28b 	uxth.w	r2, fp
    draw_area.y2 -= disp_area->y1;
 800ae34:	1a41      	subs	r1, r0, r1
 800ae36:	f103 0b01 	add.w	fp, r3, #1
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	ebab 0b02 	sub.w	fp, fp, r2
    draw_area.x1 -= disp_area->x1;
 800ae40:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.x2 -= disp_area->x1;
 800ae44:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
 800ae48:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800ae4c:	f003 fac8 	bl	800e3e0 <lv_disp_get_hor_res>
 800ae50:	4607      	mov	r7, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
 800ae52:	a80e      	add	r0, sp, #56	; 0x38
 800ae54:	f003 fe1d 	bl	800ea92 <lv_area_get_size>
 800ae58:	4287      	cmp	r7, r0
 800ae5a:	fa0f fb8b 	sxth.w	fp, fp
 800ae5e:	d903      	bls.n	800ae68 <lv_draw_line+0x674>
 800ae60:	a80e      	add	r0, sp, #56	; 0x38
 800ae62:	f003 fe16 	bl	800ea92 <lv_area_get_size>
 800ae66:	4607      	mov	r7, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800ae68:	4638      	mov	r0, r7
 800ae6a:	f004 fd37 	bl	800f8dc <_lv_mem_buf_get>
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    fill_area.y2 = fill_area.y1;

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;
 800ae6e:	f04f 0900 	mov.w	r9, #0
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800ae72:	8a33      	ldrh	r3, [r6, #16]
 800ae74:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38

    _lv_memset_ff(mask_buf, mask_buf_size);
 800ae78:	4639      	mov	r1, r7
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800ae7a:	441a      	add	r2, r3
 800ae7c:	b212      	sxth	r2, r2
 800ae7e:	9207      	str	r2, [sp, #28]
 800ae80:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800ae84:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800ae88:	4680      	mov	r8, r0
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800ae90:	8a72      	ldrh	r2, [r6, #18]
 800ae92:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800ae96:	4413      	add	r3, r2
 800ae98:	b21b      	sxth	r3, r3
 800ae9a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
 800ae9e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    _lv_memset_ff(mask_buf, mask_buf_size);
 800aea2:	f004 fde8 	bl	800fa76 <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800aea6:	f9bd 503a 	ldrsh.w	r5, [sp, #58]	; 0x3a
 800aeaa:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 800aeae:	441d      	add	r5, r3
 800aeb0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800aeb4:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 800aeb8:	4413      	add	r3, r2
 800aeba:	429d      	cmp	r5, r3
 800aebc:	dd55      	ble.n	800af6a <lv_draw_line+0x776>
            _lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800aebe:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 800aec2:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d010      	beq.n	800aeec <lv_draw_line+0x6f8>
        fill_area.y2--;
 800aeca:	3b01      	subs	r3, #1
 800aecc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
 800aed0:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(&fill_area, clip,
 800aed2:	8822      	ldrh	r2, [r4, #0]
 800aed4:	f003 0303 	and.w	r3, r3, #3
 800aed8:	9302      	str	r3, [sp, #8]
 800aeda:	7a23      	ldrb	r3, [r4, #8]
 800aedc:	a90c      	add	r1, sp, #48	; 0x30
 800aede:	9301      	str	r3, [sp, #4]
 800aee0:	2302      	movs	r3, #2
 800aee2:	a810      	add	r0, sp, #64	; 0x40
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	4643      	mov	r3, r8
 800aee8:	f7fd fd58 	bl	800899c <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
 800aeec:	4640      	mov	r0, r8
 800aeee:	f004 fb8d 	bl	800f60c <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
 800aef2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aef4:	f000 fcce 	bl	800b894 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800aef8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aefa:	f000 fccb 	bl	800b894 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800aefe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af00:	f000 fcc8 	bl	800b894 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 800af04:	4650      	mov	r0, sl
 800af06:	f000 fcc5 	bl	800b894 <lv_draw_mask_remove_id>
 800af0a:	e507      	b.n	800a91c <lv_draw_line+0x128>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800af0c:	9b08      	ldr	r3, [sp, #32]
 800af0e:	465a      	mov	r2, fp
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	4639      	mov	r1, r7
 800af14:	4633      	mov	r3, r6
 800af16:	a812      	add	r0, sp, #72	; 0x48
 800af18:	f000 fcf2 	bl	800b900 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800af1c:	2301      	movs	r3, #1
 800af1e:	4652      	mov	r2, sl
 800af20:	e9cd 5300 	strd	r5, r3, [sp]
 800af24:	4633      	mov	r3, r6
 800af26:	e72f      	b.n	800ad88 <lv_draw_line+0x594>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 800af28:	fa1f fb87 	uxth.w	fp, r7
 800af2c:	fa1f fa86 	uxth.w	sl, r6
 800af30:	eb0a 0302 	add.w	r3, sl, r2
 800af34:	eb0b 0102 	add.w	r1, fp, r2
 800af38:	2200      	movs	r2, #0
 800af3a:	b21b      	sxth	r3, r3
 800af3c:	e9cd 8200 	strd	r8, r2, [sp]
 800af40:	b209      	sxth	r1, r1
 800af42:	464a      	mov	r2, r9
 800af44:	a812      	add	r0, sp, #72	; 0x48
 800af46:	f000 fcdb 	bl	800b900 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800af4a:	2201      	movs	r2, #1
 800af4c:	ebaa 0305 	sub.w	r3, sl, r5
 800af50:	ebab 0105 	sub.w	r1, fp, r5
 800af54:	e9cd 8200 	strd	r8, r2, [sp]
 800af58:	b21b      	sxth	r3, r3
 800af5a:	464a      	mov	r2, r9
 800af5c:	b209      	sxth	r1, r1
 800af5e:	e714      	b.n	800ad8a <lv_draw_line+0x596>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800af60:	f04f 3aff 	mov.w	sl, #4294967295
    int16_t mask_top_id = LV_MASK_ID_INV;
 800af64:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800af68:	e74b      	b.n	800ae02 <lv_draw_line+0x60e>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
 800af6a:	eb08 0309 	add.w	r3, r8, r9
 800af6e:	9308      	str	r3, [sp, #32]
 800af70:	b22a      	sxth	r2, r5
 800af72:	465b      	mov	r3, fp
 800af74:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 800af78:	f000 fc68 	bl	800b84c <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800af7c:	b918      	cbnz	r0, 800af86 <lv_draw_line+0x792>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
 800af7e:	4659      	mov	r1, fp
 800af80:	9808      	ldr	r0, [sp, #32]
 800af82:	f004 fd49 	bl	800fa18 <_lv_memset_00>
        mask_p += draw_area_w;
 800af86:	44d9      	add	r9, fp
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 800af88:	eb09 030b 	add.w	r3, r9, fp
 800af8c:	429f      	cmp	r7, r3
 800af8e:	d906      	bls.n	800af9e <lv_draw_line+0x7aa>
            fill_area.y2 ++;
 800af90:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800af94:	3301      	adds	r3, #1
 800af96:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800af9a:	3501      	adds	r5, #1
 800af9c:	e788      	b.n	800aeb0 <lv_draw_line+0x6bc>
                           dsc->blend_mode);
 800af9e:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(&fill_area, clip,
 800afa0:	8822      	ldrh	r2, [r4, #0]
 800afa2:	f003 0303 	and.w	r3, r3, #3
 800afa6:	9302      	str	r3, [sp, #8]
 800afa8:	7a23      	ldrb	r3, [r4, #8]
 800afaa:	a90c      	add	r1, sp, #48	; 0x30
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	2302      	movs	r3, #2
 800afb0:	a810      	add	r0, sp, #64	; 0x40
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	4643      	mov	r3, r8
 800afb6:	f7fd fcf1 	bl	800899c <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800afba:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
            _lv_memset_ff(mask_buf, mask_buf_size);
 800afbe:	4639      	mov	r1, r7
            fill_area.y1 = fill_area.y2 + 1;
 800afc0:	3301      	adds	r3, #1
 800afc2:	b21b      	sxth	r3, r3
            _lv_memset_ff(mask_buf, mask_buf_size);
 800afc4:	4640      	mov	r0, r8
            fill_area.y1 = fill_area.y2 + 1;
 800afc6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
 800afca:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
 800afce:	f04f 0900 	mov.w	r9, #0
            _lv_memset_ff(mask_buf, mask_buf_size);
 800afd2:	f004 fd50 	bl	800fa76 <_lv_memset_ff>
 800afd6:	e7e0      	b.n	800af9a <lv_draw_line+0x7a6>
 800afd8:	08015aea 	.word	0x08015aea

0800afdc <mask_mix>:
}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800afdc:	29fc      	cmp	r1, #252	; 0xfc
 800afde:	d809      	bhi.n	800aff4 <mask_mix+0x18>
    if(mask_new <= LV_OPA_MIN) return 0;
 800afe0:	2902      	cmp	r1, #2
 800afe2:	d906      	bls.n	800aff2 <mask_mix+0x16>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 800afe4:	4341      	muls	r1, r0
 800afe6:	f248 0081 	movw	r0, #32897	; 0x8081
 800afea:	4348      	muls	r0, r1
 800afec:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 800aff0:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
 800aff2:	2000      	movs	r0, #0
}
 800aff4:	4770      	bx	lr

0800aff6 <lv_draw_mask_line>:
{
 800aff6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800affa:	9f08      	ldr	r7, [sp, #32]
 800affc:	4605      	mov	r5, r0
    abs_y -= p->origo.y;
 800affe:	8abc      	ldrh	r4, [r7, #20]
    abs_x -= p->origo.x;
 800b000:	8a7e      	ldrh	r6, [r7, #18]
    abs_y -= p->origo.y;
 800b002:	1b14      	subs	r4, r2, r4
    abs_x -= p->origo.x;
 800b004:	1b8e      	subs	r6, r1, r6
 800b006:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    if(p->steep == 0) {
 800b00a:	6a39      	ldr	r1, [r7, #32]
    abs_y -= p->origo.y;
 800b00c:	b224      	sxth	r4, r4
    abs_x -= p->origo.x;
 800b00e:	b236      	sxth	r6, r6
 800b010:	f002 0c01 	and.w	ip, r2, #1
    if(p->steep == 0) {
 800b014:	bb99      	cbnz	r1, 800b07e <lv_draw_mask_line+0x88>
 800b016:	7c3a      	ldrb	r2, [r7, #16]
 800b018:	f002 0203 	and.w	r2, r2, #3
        if(p->flat) {
 800b01c:	f1bc 0f00 	cmp.w	ip, #0
 800b020:	d00f      	beq.n	800b042 <lv_draw_mask_line+0x4c>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 800b022:	2a01      	cmp	r2, #1
 800b024:	f240 8187 	bls.w	800b336 <lv_draw_mask_line+0x340>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b028:	2a02      	cmp	r2, #2
 800b02a:	d105      	bne.n	800b038 <lv_draw_mask_line+0x42>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b02c:	3401      	adds	r4, #1
 800b02e:	bfac      	ite	ge
 800b030:	2000      	movge	r0, #0
 800b032:	2001      	movlt	r0, #1
}
 800b034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b038:	2c00      	cmp	r4, #0
 800b03a:	bfd4      	ite	le
 800b03c:	2000      	movle	r0, #0
 800b03e:	2001      	movgt	r0, #1
 800b040:	e7f8      	b.n	800b034 <lv_draw_mask_line+0x3e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 800b042:	1e91      	subs	r1, r2, #2
 800b044:	2901      	cmp	r1, #1
 800b046:	f240 8176 	bls.w	800b336 <lv_draw_mask_line+0x340>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b04a:	2a01      	cmp	r2, #1
 800b04c:	d10a      	bne.n	800b064 <lv_draw_mask_line+0x6e>
 800b04e:	2e00      	cmp	r6, #0
 800b050:	f300 8171 	bgt.w	800b336 <lv_draw_mask_line+0x340>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800b054:	42de      	cmn	r6, r3
 800b056:	d40a      	bmi.n	800b06e <lv_draw_mask_line+0x78>
                    int32_t k = - abs_x;
 800b058:	4271      	negs	r1, r6
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800b05a:	428b      	cmp	r3, r1
 800b05c:	dd07      	ble.n	800b06e <lv_draw_mask_line+0x78>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 800b05e:	f004 fcdb 	bl	800fa18 <_lv_memset_00>
 800b062:	e00a      	b.n	800b07a <lv_draw_mask_line+0x84>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b064:	1999      	adds	r1, r3, r6
 800b066:	f100 8166 	bmi.w	800b336 <lv_draw_mask_line+0x340>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 800b06a:	2e00      	cmp	r6, #0
 800b06c:	dd01      	ble.n	800b072 <lv_draw_mask_line+0x7c>
 800b06e:	2000      	movs	r0, #0
 800b070:	e7e0      	b.n	800b034 <lv_draw_mask_line+0x3e>
                    int32_t k = - abs_x;
 800b072:	4270      	negs	r0, r6
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 800b074:	4298      	cmp	r0, r3
 800b076:	f2c0 8097 	blt.w	800b1a8 <lv_draw_mask_line+0x1b2>
    return LV_DRAW_MASK_RES_CHANGED;
 800b07a:	2002      	movs	r0, #2
 800b07c:	e7da      	b.n	800b034 <lv_draw_mask_line+0x3e>
 800b07e:	f002 0002 	and.w	r0, r2, #2
    if(p->flat) {
 800b082:	f1bc 0f00 	cmp.w	ip, #0
 800b086:	f000 8091 	beq.w	800b1ac <lv_draw_mask_line+0x1b6>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800b08a:	69f9      	ldr	r1, [r7, #28]
 800b08c:	fb06 f201 	mul.w	r2, r6, r1
    if(p->yx_steep > 0) {
 800b090:	2900      	cmp	r1, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800b092:	ea4f 22a2 	mov.w	r2, r2, asr #10
    if(p->yx_steep > 0) {
 800b096:	dd05      	ble.n	800b0a4 <lv_draw_mask_line+0xae>
        if(y_at_x > abs_y) {
 800b098:	42a2      	cmp	r2, r4
 800b09a:	dd05      	ble.n	800b0a8 <lv_draw_mask_line+0xb2>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b09c:	3000      	adds	r0, #0
 800b09e:	bf18      	it	ne
 800b0a0:	2001      	movne	r0, #1
 800b0a2:	e7c7      	b.n	800b034 <lv_draw_mask_line+0x3e>
        if(y_at_x < abs_y) {
 800b0a4:	42a2      	cmp	r2, r4
 800b0a6:	dbf9      	blt.n	800b09c <lv_draw_mask_line+0xa6>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800b0a8:	199a      	adds	r2, r3, r6
 800b0aa:	434a      	muls	r2, r1
    if(p->yx_steep > 0) {
 800b0ac:	2900      	cmp	r1, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800b0ae:	ea4f 22a2 	mov.w	r2, r2, asr #10
    if(p->yx_steep > 0) {
 800b0b2:	dd05      	ble.n	800b0c0 <lv_draw_mask_line+0xca>
        if(y_at_x < abs_y) {
 800b0b4:	42a2      	cmp	r2, r4
 800b0b6:	da06      	bge.n	800b0c6 <lv_draw_mask_line+0xd0>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b0b8:	fab0 f080 	clz	r0, r0
 800b0bc:	0940      	lsrs	r0, r0, #5
 800b0be:	e7b9      	b.n	800b034 <lv_draw_mask_line+0x3e>
        if(y_at_x > abs_y) {
 800b0c0:	42a2      	cmp	r2, r4
 800b0c2:	dcf9      	bgt.n	800b0b8 <lv_draw_mask_line+0xc2>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800b0c4:	3401      	adds	r4, #1
 800b0c6:	69b9      	ldr	r1, [r7, #24]
 800b0c8:	0224      	lsls	r4, r4, #8
 800b0ca:	434c      	muls	r4, r1
 800b0cc:	12a4      	asrs	r4, r4, #10
    int32_t xei = xe >> 8;
 800b0ce:	ea4f 2c24 	mov.w	ip, r4, asr #8
    if(xef == 0) px_h = 255;
 800b0d2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800b0d6:	bf1f      	itttt	ne
 800b0d8:	6a79      	ldrne	r1, [r7, #36]	; 0x24
 800b0da:	f1c4 02ff 	rsbne	r2, r4, #255	; 0xff
 800b0de:	434a      	mulne	r2, r1
 800b0e0:	1212      	asrne	r2, r2, #8
 800b0e2:	bf14      	ite	ne
 800b0e4:	f1c2 02ff 	rsbne	r2, r2, #255	; 0xff
    if(xef == 0) px_h = 255;
 800b0e8:	22ff      	moveq	r2, #255	; 0xff
    int32_t k = xei - abs_x;
 800b0ea:	ebac 0606 	sub.w	r6, ip, r6
    if(xef) {
 800b0ee:	2c00      	cmp	r4, #0
 800b0f0:	d051      	beq.n	800b196 <lv_draw_mask_line+0x1a0>
        if(k >= 0 && k < len) {
 800b0f2:	2e00      	cmp	r6, #0
 800b0f4:	db0f      	blt.n	800b116 <lv_draw_mask_line+0x120>
 800b0f6:	42b3      	cmp	r3, r6
 800b0f8:	dd0d      	ble.n	800b116 <lv_draw_mask_line+0x120>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800b0fa:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
 800b0fe:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b102:	434c      	muls	r4, r1
 800b104:	f3c4 2147 	ubfx	r1, r4, #9, #8
            if(p->inv) m = 255 - m;
 800b108:	b908      	cbnz	r0, 800b10e <lv_draw_mask_line+0x118>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800b10a:	43c9      	mvns	r1, r1
 800b10c:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800b10e:	5da8      	ldrb	r0, [r5, r6]
 800b110:	f7ff ff64 	bl	800afdc <mask_mix>
 800b114:	55a8      	strb	r0, [r5, r6]
        k++;
 800b116:	1c74      	adds	r4, r6, #1
    while(px_h > p->spx) {
 800b118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b11a:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800b11e:	428a      	cmp	r2, r1
 800b120:	f000 0002 	and.w	r0, r0, #2
 800b124:	dc16      	bgt.n	800b154 <lv_draw_mask_line+0x15e>
    if(k < len && k >= 0) {
 800b126:	42a3      	cmp	r3, r4
 800b128:	dd28      	ble.n	800b17c <lv_draw_mask_line+0x186>
 800b12a:	2c00      	cmp	r4, #0
 800b12c:	db26      	blt.n	800b17c <lv_draw_mask_line+0x186>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800b12e:	69b9      	ldr	r1, [r7, #24]
 800b130:	4351      	muls	r1, r2
 800b132:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
 800b134:	4351      	muls	r1, r2
        if(p->yx_steep < 0) m = 255 - m;
 800b136:	69fa      	ldr	r2, [r7, #28]
        m = (x_inters * px_h) >> 9;
 800b138:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 800b13c:	2a00      	cmp	r2, #0
 800b13e:	bfbc      	itt	lt
 800b140:	43c9      	mvnlt	r1, r1
 800b142:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
 800b144:	b108      	cbz	r0, 800b14a <lv_draw_mask_line+0x154>
 800b146:	43c9      	mvns	r1, r1
 800b148:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800b14a:	5d28      	ldrb	r0, [r5, r4]
 800b14c:	f7ff ff46 	bl	800afdc <mask_mix>
 800b150:	5528      	strb	r0, [r5, r4]
 800b152:	e013      	b.n	800b17c <lv_draw_mask_line+0x186>
        if(k >= 0 && k < len) {
 800b154:	2c00      	cmp	r4, #0
 800b156:	db0b      	blt.n	800b170 <lv_draw_mask_line+0x17a>
 800b158:	42a3      	cmp	r3, r4
 800b15a:	dd09      	ble.n	800b170 <lv_draw_mask_line+0x17a>
            m = px_h - (p->spx >> 1);
 800b15c:	eba2 0161 	sub.w	r1, r2, r1, asr #1
 800b160:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 800b162:	b108      	cbz	r0, 800b168 <lv_draw_mask_line+0x172>
 800b164:	43c9      	mvns	r1, r1
 800b166:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800b168:	5d28      	ldrb	r0, [r5, r4]
 800b16a:	f7ff ff37 	bl	800afdc <mask_mix>
 800b16e:	5528      	strb	r0, [r5, r4]
        px_h -= p->spx;
 800b170:	6a79      	ldr	r1, [r7, #36]	; 0x24
        k++;
 800b172:	3401      	adds	r4, #1
        if(k >= len) break;
 800b174:	42a3      	cmp	r3, r4
        px_h -= p->spx;
 800b176:	eba2 0201 	sub.w	r2, r2, r1
        if(k >= len) break;
 800b17a:	dccd      	bgt.n	800b118 <lv_draw_mask_line+0x122>
    if(p->inv) {
 800b17c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b180:	0792      	lsls	r2, r2, #30
 800b182:	d50a      	bpl.n	800b19a <lv_draw_mask_line+0x1a4>
        if(k > len) {
 800b184:	42b3      	cmp	r3, r6
 800b186:	f6ff af72 	blt.w	800b06e <lv_draw_mask_line+0x78>
        if(k >= 0) {
 800b18a:	2e00      	cmp	r6, #0
 800b18c:	f6ff af75 	blt.w	800b07a <lv_draw_mask_line+0x84>
            _lv_memset_00(&mask_buf[0], k);
 800b190:	4631      	mov	r1, r6
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 800b192:	4628      	mov	r0, r5
 800b194:	e763      	b.n	800b05e <lv_draw_mask_line+0x68>
    int32_t k = xei - abs_x;
 800b196:	4634      	mov	r4, r6
 800b198:	e7be      	b.n	800b118 <lv_draw_mask_line+0x122>
        if(k < 0) {
 800b19a:	1c60      	adds	r0, r4, #1
 800b19c:	f53f af67 	bmi.w	800b06e <lv_draw_mask_line+0x78>
        if(k <= len) {
 800b1a0:	4283      	cmp	r3, r0
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
 800b1a2:	f6ff af6a 	blt.w	800b07a <lv_draw_mask_line+0x84>
 800b1a6:	1a19      	subs	r1, r3, r0
 800b1a8:	4428      	add	r0, r5
 800b1aa:	e758      	b.n	800b05e <lv_draw_mask_line+0x68>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800b1ac:	69ba      	ldr	r2, [r7, #24]
 800b1ae:	fb04 f102 	mul.w	r1, r4, r2
    if(p->xy_steep > 0) x_at_y++;
 800b1b2:	2a00      	cmp	r2, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800b1b4:	ea4f 21a1 	mov.w	r1, r1, asr #10
 800b1b8:	bfd4      	ite	le
 800b1ba:	468c      	movle	ip, r1
    if(p->xy_steep > 0) x_at_y++;
 800b1bc:	f101 0c01 	addgt.w	ip, r1, #1
    if(x_at_y < abs_x) {
 800b1c0:	45b4      	cmp	ip, r6
 800b1c2:	f6ff af6b 	blt.w	800b09c <lv_draw_mask_line+0xa6>
    if(x_at_y > abs_x + len) {
 800b1c6:	eb03 0c06 	add.w	ip, r3, r6
 800b1ca:	4561      	cmp	r1, ip
 800b1cc:	f73f af74 	bgt.w	800b0b8 <lv_draw_mask_line+0xc2>
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 800b1d0:	0221      	lsls	r1, r4, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800b1d2:	3401      	adds	r4, #1
 800b1d4:	0224      	lsls	r4, r4, #8
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 800b1d6:	4351      	muls	r1, r2
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 800b1d8:	4354      	muls	r4, r2
    int32_t xsi = xs >> 8;
 800b1da:	ea4f 4ea1 	mov.w	lr, r1, asr #18
    int32_t xei = xe >> 8;
 800b1de:	ea4f 48a4 	mov.w	r8, r4, asr #18
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800b1e2:	45c6      	cmp	lr, r8
    int32_t xsf = xs & 0xFF;
 800b1e4:	f3c1 2c87 	ubfx	ip, r1, #10, #8
    k = xsi - abs_x;
 800b1e8:	ebae 0906 	sub.w	r9, lr, r6
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800b1ec:	f000 80a5 	beq.w	800b33a <lv_draw_mask_line+0x344>
 800b1f0:	2a00      	cmp	r2, #0
 800b1f2:	da54      	bge.n	800b29e <lv_draw_mask_line+0x2a8>
 800b1f4:	f109 32ff 	add.w	r2, r9, #4294967295
 800b1f8:	f1bc 0f00 	cmp.w	ip, #0
 800b1fc:	f000 80bb 	beq.w	800b376 <lv_draw_mask_line+0x380>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800b200:	69fe      	ldr	r6, [r7, #28]
            if(k >= 0 && k < len) {
 800b202:	f1b9 0f00 	cmp.w	r9, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800b206:	f1c6 0600 	rsb	r6, r6, #0
 800b20a:	fb0c f606 	mul.w	r6, ip, r6
 800b20e:	ea4f 26a6 	mov.w	r6, r6, asr #10
            if(k >= 0 && k < len) {
 800b212:	db0e      	blt.n	800b232 <lv_draw_mask_line+0x23c>
 800b214:	454b      	cmp	r3, r9
 800b216:	dd0c      	ble.n	800b232 <lv_draw_mask_line+0x23c>
                m = (y_inters * xsf) >> 9;
 800b218:	fb06 f10c 	mul.w	r1, r6, ip
 800b21c:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800b220:	b108      	cbz	r0, 800b226 <lv_draw_mask_line+0x230>
 800b222:	43c9      	mvns	r1, r1
 800b224:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b226:	f815 0009 	ldrb.w	r0, [r5, r9]
 800b22a:	f7ff fed7 	bl	800afdc <mask_mix>
 800b22e:	f805 0009 	strb.w	r0, [r5, r9]
            if(k >= 0 && k < len) {
 800b232:	2a00      	cmp	r2, #0
 800b234:	db15      	blt.n	800b262 <lv_draw_mask_line+0x26c>
 800b236:	4293      	cmp	r3, r2
 800b238:	dd13      	ble.n	800b262 <lv_draw_mask_line+0x26c>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800b23a:	69b9      	ldr	r1, [r7, #24]
 800b23c:	f1c6 06ff 	rsb	r6, r6, #255	; 0xff
 800b240:	4249      	negs	r1, r1
 800b242:	4371      	muls	r1, r6
 800b244:	1289      	asrs	r1, r1, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800b246:	434e      	muls	r6, r1
                if(p->inv) m = 255 - m;
 800b248:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800b24c:	f3c6 2147 	ubfx	r1, r6, #9, #8
                if(p->inv) m = 255 - m;
 800b250:	0786      	lsls	r6, r0, #30
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800b252:	bf58      	it	pl
 800b254:	43c9      	mvnpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b256:	5ca8      	ldrb	r0, [r5, r2]
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800b258:	bf58      	it	pl
 800b25a:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b25c:	f7ff febe 	bl	800afdc <mask_mix>
 800b260:	54a8      	strb	r0, [r5, r2]
            if(p->inv) {
 800b262:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800b266:	078c      	lsls	r4, r1, #30
 800b268:	d513      	bpl.n	800b292 <lv_draw_mask_line+0x29c>
                if(k > len) k = len;
 800b26a:	4293      	cmp	r3, r2
 800b26c:	f6ff af05 	blt.w	800b07a <lv_draw_mask_line+0x84>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 800b270:	2a00      	cmp	r2, #0
 800b272:	f77f af02 	ble.w	800b07a <lv_draw_mask_line+0x84>
 800b276:	4611      	mov	r1, r2
 800b278:	e78b      	b.n	800b192 <lv_draw_mask_line+0x19c>
        k++;
 800b27a:	3201      	adds	r2, #1
 800b27c:	429a      	cmp	r2, r3
 800b27e:	bfa8      	it	ge
 800b280:	461a      	movge	r2, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800b282:	2a00      	cmp	r2, #0
 800b284:	f43f aef3 	beq.w	800b06e <lv_draw_mask_line+0x78>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 800b288:	f77f aef7 	ble.w	800b07a <lv_draw_mask_line+0x84>
 800b28c:	1a99      	subs	r1, r3, r2
 800b28e:	18a8      	adds	r0, r5, r2
 800b290:	e6e5      	b.n	800b05e <lv_draw_mask_line+0x68>
            k += 2;
 800b292:	f109 0001 	add.w	r0, r9, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800b296:	4283      	cmp	r3, r0
 800b298:	db4d      	blt.n	800b336 <lv_draw_mask_line+0x340>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
 800b29a:	2800      	cmp	r0, #0
 800b29c:	e781      	b.n	800b1a2 <lv_draw_mask_line+0x1ac>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800b29e:	69fa      	ldr	r2, [r7, #28]
 800b2a0:	f1cc 01ff 	rsb	r1, ip, #255	; 0xff
 800b2a4:	434a      	muls	r2, r1
            if(k >= 0 && k < len) {
 800b2a6:	f1b9 0f00 	cmp.w	r9, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800b2aa:	ea4f 22a2 	mov.w	r2, r2, asr #10
            if(k >= 0 && k < len) {
 800b2ae:	db0d      	blt.n	800b2cc <lv_draw_mask_line+0x2d6>
 800b2b0:	454b      	cmp	r3, r9
 800b2b2:	dd0b      	ble.n	800b2cc <lv_draw_mask_line+0x2d6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800b2b4:	4351      	muls	r1, r2
 800b2b6:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800b2ba:	b908      	cbnz	r0, 800b2c0 <lv_draw_mask_line+0x2ca>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800b2bc:	43c9      	mvns	r1, r1
 800b2be:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b2c0:	f815 0009 	ldrb.w	r0, [r5, r9]
 800b2c4:	f7ff fe8a 	bl	800afdc <mask_mix>
 800b2c8:	f805 0009 	strb.w	r0, [r5, r9]
            if(k >= 0 && k < len) {
 800b2cc:	f119 0401 	adds.w	r4, r9, #1
 800b2d0:	d414      	bmi.n	800b2fc <lv_draw_mask_line+0x306>
 800b2d2:	42a3      	cmp	r3, r4
 800b2d4:	dd12      	ble.n	800b2fc <lv_draw_mask_line+0x306>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800b2d6:	69b9      	ldr	r1, [r7, #24]
 800b2d8:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800b2dc:	4351      	muls	r1, r2
 800b2de:	1289      	asrs	r1, r1, #10
                m = ((255 - y_inters) * x_inters) >> 9;
 800b2e0:	434a      	muls	r2, r1
 800b2e2:	f3c2 2147 	ubfx	r1, r2, #9, #8
                if(p->inv) m = 255 - m;
 800b2e6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b2ea:	0790      	lsls	r0, r2, #30
 800b2ec:	bf48      	it	mi
 800b2ee:	43c9      	mvnmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b2f0:	5d28      	ldrb	r0, [r5, r4]
                if(p->inv) m = 255 - m;
 800b2f2:	bf48      	it	mi
 800b2f4:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b2f6:	f7ff fe71 	bl	800afdc <mask_mix>
 800b2fa:	5528      	strb	r0, [r5, r4]
            if(p->inv) {
 800b2fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b300:	0792      	lsls	r2, r2, #30
 800b302:	d508      	bpl.n	800b316 <lv_draw_mask_line+0x320>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 800b304:	454b      	cmp	r3, r9
 800b306:	f6ff aeb2 	blt.w	800b06e <lv_draw_mask_line+0x78>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 800b30a:	f1b9 0f00 	cmp.w	r9, #0
 800b30e:	f6ff aeb4 	blt.w	800b07a <lv_draw_mask_line+0x84>
 800b312:	4649      	mov	r1, r9
 800b314:	e73d      	b.n	800b192 <lv_draw_mask_line+0x19c>
            k++;
 800b316:	f109 0902 	add.w	r9, r9, #2
 800b31a:	4599      	cmp	r9, r3
 800b31c:	bfa8      	it	ge
 800b31e:	4699      	movge	r9, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800b320:	f1b9 0f00 	cmp.w	r9, #0
 800b324:	f43f aea3 	beq.w	800b06e <lv_draw_mask_line+0x78>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 800b328:	f77f aea7 	ble.w	800b07a <lv_draw_mask_line+0x84>
 800b32c:	eba3 0109 	sub.w	r1, r3, r9
 800b330:	eb05 0009 	add.w	r0, r5, r9
 800b334:	e693      	b.n	800b05e <lv_draw_mask_line+0x68>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800b336:	2001      	movs	r0, #1
 800b338:	e67c      	b.n	800b034 <lv_draw_mask_line+0x3e>
    k = xsi - abs_x;
 800b33a:	464a      	mov	r2, r9
        if(k >= 0 && k < len) {
 800b33c:	2a00      	cmp	r2, #0
 800b33e:	db0d      	blt.n	800b35c <lv_draw_mask_line+0x366>
 800b340:	4293      	cmp	r3, r2
 800b342:	dd0b      	ble.n	800b35c <lv_draw_mask_line+0x366>
    int32_t xef = xe & 0xFF;
 800b344:	f3c4 2187 	ubfx	r1, r4, #10, #8
            m = (xsf + xef) >> 1;
 800b348:	4461      	add	r1, ip
 800b34a:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
 800b34e:	b108      	cbz	r0, 800b354 <lv_draw_mask_line+0x35e>
 800b350:	43c9      	mvns	r1, r1
 800b352:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800b354:	5ca8      	ldrb	r0, [r5, r2]
 800b356:	f7ff fe41 	bl	800afdc <mask_mix>
 800b35a:	54a8      	strb	r0, [r5, r2]
        if(p->inv) {
 800b35c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800b360:	078f      	lsls	r7, r1, #30
 800b362:	d58a      	bpl.n	800b27a <lv_draw_mask_line+0x284>
            k = xsi - abs_x;
 800b364:	eba8 0106 	sub.w	r1, r8, r6
            if(k >= len) {
 800b368:	428b      	cmp	r3, r1
 800b36a:	f77f ae80 	ble.w	800b06e <lv_draw_mask_line+0x78>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
 800b36e:	2900      	cmp	r1, #0
 800b370:	f6ff ae83 	blt.w	800b07a <lv_draw_mask_line+0x84>
 800b374:	e70d      	b.n	800b192 <lv_draw_mask_line+0x19c>
        xsf = 0xFF;
 800b376:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800b37a:	e7df      	b.n	800b33c <lv_draw_mask_line+0x346>

0800b37c <_lv_memcpy_small.constprop.4>:
    uint8_t * d8 = (uint8_t *)dst;
 800b37c:	4603      	mov	r3, r0
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
 800b37e:	b510      	push	{r4, lr}
 800b380:	3901      	subs	r1, #1
 800b382:	f100 0208 	add.w	r2, r0, #8
        *d8 = *s8;
 800b386:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b38a:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
 800b38e:	4293      	cmp	r3, r2
 800b390:	d1f9      	bne.n	800b386 <_lv_memcpy_small.constprop.4+0xa>
        s8++;
        len--;
    }

    return dst;
}
 800b392:	bd10      	pop	{r4, pc}

0800b394 <lv_draw_mask_radius>:
{
 800b394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b398:	b08b      	sub	sp, #44	; 0x2c
 800b39a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b39e:	4605      	mov	r5, r0
    bool outer = p->cfg.outer;
 800b3a0:	f898 a012 	ldrb.w	sl, [r8, #18]
{
 800b3a4:	468b      	mov	fp, r1
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 800b3a6:	a808      	add	r0, sp, #32
 800b3a8:	f108 0108 	add.w	r1, r8, #8
    bool outer = p->cfg.outer;
 800b3ac:	f00a 0a01 	and.w	sl, sl, #1
{
 800b3b0:	4616      	mov	r6, r2
 800b3b2:	461c      	mov	r4, r3
    int32_t radius = p->cfg.radius;
 800b3b4:	f9b8 9010 	ldrsh.w	r9, [r8, #16]
 800b3b8:	f7ff ffe0 	bl	800b37c <_lv_memcpy_small.constprop.4>
 800b3bc:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
    if(outer == false) {
 800b3c0:	f1ba 0f00 	cmp.w	sl, #0
 800b3c4:	d13a      	bne.n	800b43c <lv_draw_mask_radius+0xa8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800b3c6:	42b2      	cmp	r2, r6
 800b3c8:	dd01      	ble.n	800b3ce <lv_draw_mask_radius+0x3a>
                    return LV_DRAW_MASK_RES_TRANSP;
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	e039      	b.n	800b442 <lv_draw_mask_radius+0xae>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800b3ce:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800b3d2:	42b3      	cmp	r3, r6
 800b3d4:	dbf9      	blt.n	800b3ca <lv_draw_mask_radius+0x36>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800b3d6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800b3da:	eb01 0309 	add.w	r3, r1, r9
 800b3de:	459b      	cmp	fp, r3
 800b3e0:	eba1 070b 	sub.w	r7, r1, fp
 800b3e4:	db07      	blt.n	800b3f6 <lv_draw_mask_radius+0x62>
 800b3e6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800b3ea:	eb04 000b 	add.w	r0, r4, fp
 800b3ee:	eba3 0309 	sub.w	r3, r3, r9
 800b3f2:	4298      	cmp	r0, r3
 800b3f4:	dd09      	ble.n	800b40a <lv_draw_mask_radius+0x76>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800b3f6:	eb02 0309 	add.w	r3, r2, r9
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800b3fa:	429e      	cmp	r6, r3
 800b3fc:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
 800b400:	db3d      	blt.n	800b47e <lv_draw_mask_radius+0xea>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800b402:	eba0 0309 	sub.w	r3, r0, r9
 800b406:	429e      	cmp	r6, r3
 800b408:	dc39      	bgt.n	800b47e <lv_draw_mask_radius+0xea>
        if(outer == false) {
 800b40a:	f1ba 0f00 	cmp.w	sl, #0
 800b40e:	d125      	bne.n	800b45c <lv_draw_mask_radius+0xc8>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 800b410:	42bc      	cmp	r4, r7
 800b412:	dbda      	blt.n	800b3ca <lv_draw_mask_radius+0x36>
            if(last >= 0) {
 800b414:	2f00      	cmp	r7, #0
 800b416:	db03      	blt.n	800b420 <lv_draw_mask_radius+0x8c>
                _lv_memset_00(&mask_buf[0], last);
 800b418:	4639      	mov	r1, r7
 800b41a:	4628      	mov	r0, r5
 800b41c:	f004 fafc 	bl	800fa18 <_lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
 800b420:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 800b424:	eba1 010b 	sub.w	r1, r1, fp
 800b428:	1c48      	adds	r0, r1, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 800b42a:	2800      	cmp	r0, #0
 800b42c:	ddcd      	ble.n	800b3ca <lv_draw_mask_radius+0x36>
            else if(first < len) {
 800b42e:	42a0      	cmp	r0, r4
 800b430:	da0f      	bge.n	800b452 <lv_draw_mask_radius+0xbe>
                _lv_memset_00(&mask_buf[first], len - first);
 800b432:	1a21      	subs	r1, r4, r0
                    _lv_memset_00(&mask_buf[first], len_tmp);
 800b434:	4428      	add	r0, r5
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 800b436:	f004 faef 	bl	800fa18 <_lv_memset_00>
 800b43a:	e00d      	b.n	800b458 <lv_draw_mask_radius+0xc4>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800b43c:	42b2      	cmp	r2, r6
 800b43e:	dd03      	ble.n	800b448 <lv_draw_mask_radius+0xb4>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800b440:	2001      	movs	r0, #1
}
 800b442:	b00b      	add	sp, #44	; 0x2c
 800b444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800b448:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 800b44c:	42b3      	cmp	r3, r6
 800b44e:	dac2      	bge.n	800b3d6 <lv_draw_mask_radius+0x42>
 800b450:	e7f6      	b.n	800b440 <lv_draw_mask_radius+0xac>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800b452:	b90f      	cbnz	r7, 800b458 <lv_draw_mask_radius+0xc4>
 800b454:	42a0      	cmp	r0, r4
 800b456:	d0f3      	beq.n	800b440 <lv_draw_mask_radius+0xac>
    return LV_DRAW_MASK_RES_CHANGED;
 800b458:	2002      	movs	r0, #2
 800b45a:	e7f2      	b.n	800b442 <lv_draw_mask_radius+0xae>
 800b45c:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
            if(first <= len) {
 800b460:	42a0      	cmp	r0, r4
 800b462:	dcf9      	bgt.n	800b458 <lv_draw_mask_radius+0xc4>
                int32_t last =  rect.x2 - abs_x - first + 1;
 800b464:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 800b468:	eba1 010b 	sub.w	r1, r1, fp
 800b46c:	1a09      	subs	r1, r1, r0
 800b46e:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 800b470:	180b      	adds	r3, r1, r0
 800b472:	42a3      	cmp	r3, r4
 800b474:	dd00      	ble.n	800b478 <lv_draw_mask_radius+0xe4>
 800b476:	1a21      	subs	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800b478:	2900      	cmp	r1, #0
 800b47a:	dbed      	blt.n	800b458 <lv_draw_mask_radius+0xc4>
 800b47c:	e7da      	b.n	800b434 <lv_draw_mask_radius+0xa0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b47e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b482:	b292      	uxth	r2, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b484:	3301      	adds	r3, #1
 800b486:	1a5b      	subs	r3, r3, r1
    int32_t w = lv_area_get_width(&rect);
 800b488:	b21b      	sxth	r3, r3
 800b48a:	9302      	str	r3, [sp, #8]
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 800b48c:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
    abs_y -= rect.y1;
 800b490:	1ab6      	subs	r6, r6, r2
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 800b492:	435b      	muls	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b494:	3001      	adds	r0, #1
    abs_y -= rect.y1;
 800b496:	b236      	sxth	r6, r6
 800b498:	1a80      	subs	r0, r0, r2
    if(abs_y < radius || abs_y > h - radius - 1) {
 800b49a:	45b1      	cmp	r9, r6
    int32_t h = lv_area_get_height(&rect);
 800b49c:	b200      	sxth	r0, r0
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 800b49e:	9301      	str	r3, [sp, #4]
    if(abs_y < radius || abs_y > h - radius - 1) {
 800b4a0:	f300 81a8 	bgt.w	800b7f4 <lv_draw_mask_radius+0x460>
 800b4a4:	eba0 0309 	sub.w	r3, r0, r9
 800b4a8:	429e      	cmp	r6, r3
 800b4aa:	dbd5      	blt.n	800b458 <lv_draw_mask_radius+0xc4>
            y = radius - (h - abs_y) + 1;
 800b4ac:	1b86      	subs	r6, r0, r6
            if((y - 1) == p->y_prev) {
 800b4ae:	f8d8 3014 	ldr.w	r3, [r8, #20]
        else sqrt_mask = 0x8000;
 800b4b2:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            y = radius - (h - abs_y) + 1;
 800b4b6:	eba9 0006 	sub.w	r0, r9, r6
        else sqrt_mask = 0x8000;
 800b4ba:	bfd4      	ite	le
 800b4bc:	f44f 6b00 	movle.w	fp, #2048	; 0x800
 800b4c0:	f44f 4b00 	movgt.w	fp, #32768	; 0x8000
            if((y - 1) == p->y_prev) {
 800b4c4:	4298      	cmp	r0, r3
            y = radius - (h - abs_y) + 1;
 800b4c6:	f100 0601 	add.w	r6, r0, #1
            if((y - 1) == p->y_prev) {
 800b4ca:	d073      	beq.n	800b5b4 <lv_draw_mask_radius+0x220>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800b4cc:	9b01      	ldr	r3, [sp, #4]
 800b4ce:	465a      	mov	r2, fp
 800b4d0:	a905      	add	r1, sp, #20
 800b4d2:	fb00 3010 	mls	r0, r0, r0, r3
 800b4d6:	f003 ffb7 	bl	800f448 <_lv_sqrt>
 800b4da:	e073      	b.n	800b5c4 <lv_draw_mask_radius+0x230>
                x0.f = p->y_prev_x.f;
 800b4dc:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b4e0:	f8ad 3012 	strh.w	r3, [sp, #18]
                x0.i = p->y_prev_x.i;
 800b4e4:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 800b4e8:	f8ad 3010 	strh.w	r3, [sp, #16]
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800b4ec:	9801      	ldr	r0, [sp, #4]
 800b4ee:	1e73      	subs	r3, r6, #1
 800b4f0:	fb03 0013 	mls	r0, r3, r3, r0
 800b4f4:	465a      	mov	r2, fp
 800b4f6:	a905      	add	r1, sp, #20
 800b4f8:	9303      	str	r3, [sp, #12]
 800b4fa:	f003 ffa5 	bl	800f448 <_lv_sqrt>
            p->y_prev = y - 1;
 800b4fe:	9b03      	ldr	r3, [sp, #12]
 800b500:	f8c8 3014 	str.w	r3, [r8, #20]
            p->y_prev_x.f = x1.f;
 800b504:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800b508:	f8a8 301a 	strh.w	r3, [r8, #26]
            p->y_prev_x.i = x1.i;
 800b50c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        if(x0.i == x1.i - 1 && x1.f == 0) {
 800b510:	f8bd 2014 	ldrh.w	r2, [sp, #20]
            p->y_prev_x.i = x0.i;
 800b514:	f8a8 3018 	strh.w	r3, [r8, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
 800b518:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800b51c:	3a01      	subs	r2, #1
 800b51e:	4293      	cmp	r3, r2
 800b520:	d107      	bne.n	800b532 <lv_draw_mask_radius+0x19e>
 800b522:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800b526:	b922      	cbnz	r2, 800b532 <lv_draw_mask_radius+0x19e>
            x1.f = 0xFF;
 800b528:	22ff      	movs	r2, #255	; 0xff
            x1.i--;
 800b52a:	f8ad 3014 	strh.w	r3, [sp, #20]
            x1.f = 0xFF;
 800b52e:	f8ad 2016 	strh.w	r2, [sp, #22]
        if(x0.i == x1.i) {
 800b532:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800b536:	429a      	cmp	r2, r3
 800b538:	d15f      	bne.n	800b5fa <lv_draw_mask_radius+0x266>
            lv_opa_t m = (x0.f + x1.f) >> 1;
 800b53a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b53e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800b542:	440a      	add	r2, r1
 800b544:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
 800b548:	f1ba 0f00 	cmp.w	sl, #0
 800b54c:	d001      	beq.n	800b552 <lv_draw_mask_radius+0x1be>
 800b54e:	43d2      	mvns	r2, r2
 800b550:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
 800b552:	eba9 0903 	sub.w	r9, r9, r3
 800b556:	f109 39ff 	add.w	r9, r9, #4294967295
            if(kl >= 0 && kl < len) {
 800b55a:	eb17 0609 	adds.w	r6, r7, r9
 800b55e:	d406      	bmi.n	800b56e <lv_draw_mask_radius+0x1da>
 800b560:	42a6      	cmp	r6, r4
 800b562:	da04      	bge.n	800b56e <lv_draw_mask_radius+0x1da>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800b564:	5da8      	ldrb	r0, [r5, r6]
 800b566:	4611      	mov	r1, r2
 800b568:	f7ff fd38 	bl	800afdc <mask_mix>
 800b56c:	55a8      	strb	r0, [r5, r6]
            int32_t kr = k + (w - ofs - 1);
 800b56e:	9b02      	ldr	r3, [sp, #8]
 800b570:	eba3 0909 	sub.w	r9, r3, r9
 800b574:	f109 30ff 	add.w	r0, r9, #4294967295
            if(kr >= 0 && kr < len) {
 800b578:	19c7      	adds	r7, r0, r7
 800b57a:	d406      	bmi.n	800b58a <lv_draw_mask_radius+0x1f6>
 800b57c:	42a7      	cmp	r7, r4
 800b57e:	da04      	bge.n	800b58a <lv_draw_mask_radius+0x1f6>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800b580:	5de8      	ldrb	r0, [r5, r7]
 800b582:	4611      	mov	r1, r2
 800b584:	f7ff fd2a 	bl	800afdc <mask_mix>
 800b588:	55e8      	strb	r0, [r5, r7]
            if(outer == false) {
 800b58a:	f1ba 0f00 	cmp.w	sl, #0
 800b58e:	d129      	bne.n	800b5e4 <lv_draw_mask_radius+0x250>
                if(kl > len)  {
 800b590:	42a6      	cmp	r6, r4
 800b592:	f73f af1a 	bgt.w	800b3ca <lv_draw_mask_radius+0x36>
                if(kl >= 0) {
 800b596:	2e00      	cmp	r6, #0
 800b598:	db03      	blt.n	800b5a2 <lv_draw_mask_radius+0x20e>
                    _lv_memset_00(&mask_buf[0], kl);
 800b59a:	4631      	mov	r1, r6
 800b59c:	4628      	mov	r0, r5
 800b59e:	f004 fa3b 	bl	800fa18 <_lv_memset_00>
                if(kr < 0) {
 800b5a2:	3701      	adds	r7, #1
 800b5a4:	f53f af11 	bmi.w	800b3ca <lv_draw_mask_radius+0x36>
                if(kr <= len) {
 800b5a8:	42a7      	cmp	r7, r4
 800b5aa:	f73f af55 	bgt.w	800b458 <lv_draw_mask_radius+0xc4>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 800b5ae:	1be1      	subs	r1, r4, r7
 800b5b0:	19e8      	adds	r0, r5, r7
 800b5b2:	e740      	b.n	800b436 <lv_draw_mask_radius+0xa2>
                x1.f = p->y_prev_x.f;
 800b5b4:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b5b8:	f8ad 3016 	strh.w	r3, [sp, #22]
                x1.i = p->y_prev_x.i;
 800b5bc:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 800b5c0:	f8ad 3014 	strh.w	r3, [sp, #20]
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800b5c4:	9b01      	ldr	r3, [sp, #4]
 800b5c6:	465a      	mov	r2, fp
 800b5c8:	fb06 3016 	mls	r0, r6, r6, r3
 800b5cc:	a904      	add	r1, sp, #16
 800b5ce:	f003 ff3b 	bl	800f448 <_lv_sqrt>
            p->y_prev_x.f = x0.f;
 800b5d2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
            p->y_prev = y;
 800b5d6:	f8c8 6014 	str.w	r6, [r8, #20]
            p->y_prev_x.f = x0.f;
 800b5da:	f8a8 301a 	strh.w	r3, [r8, #26]
            p->y_prev_x.i = x0.i;
 800b5de:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800b5e2:	e795      	b.n	800b510 <lv_draw_mask_radius+0x17c>
                kl++;
 800b5e4:	1c70      	adds	r0, r6, #1
 800b5e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
 800b5ea:	42a7      	cmp	r7, r4
                int32_t len_tmp = kr - first;
 800b5ec:	bfd4      	ite	le
 800b5ee:	1a39      	suble	r1, r7, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800b5f0:	1a21      	subgt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800b5f2:	42a0      	cmp	r0, r4
 800b5f4:	f6ff af40 	blt.w	800b478 <lv_draw_mask_radius+0xe4>
 800b5f8:	e72e      	b.n	800b458 <lv_draw_mask_radius+0xc4>
            int32_t ofs = radius - (x0.i + 1);
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	eba9 0903 	sub.w	r9, r9, r3
            int32_t kr = k + (w - ofs - 1);
 800b600:	9b02      	ldr	r3, [sp, #8]
            int32_t kl = k + ofs;
 800b602:	eb07 0809 	add.w	r8, r7, r9
            int32_t kr = k + (w - ofs - 1);
 800b606:	eba3 0909 	sub.w	r9, r3, r9
 800b60a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b60e:	444f      	add	r7, r9
            if(outer) {
 800b610:	f1ba 0f00 	cmp.w	sl, #0
 800b614:	d00e      	beq.n	800b634 <lv_draw_mask_radius+0x2a0>
                int32_t first = kl + 1;
 800b616:	f108 0001 	add.w	r0, r8, #1
 800b61a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
 800b61e:	42bc      	cmp	r4, r7
                int32_t len_tmp = kr - first;
 800b620:	bfac      	ite	ge
 800b622:	1a39      	subge	r1, r7, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800b624:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800b626:	4284      	cmp	r4, r0
 800b628:	dd04      	ble.n	800b634 <lv_draw_mask_radius+0x2a0>
 800b62a:	2900      	cmp	r1, #0
 800b62c:	db02      	blt.n	800b634 <lv_draw_mask_radius+0x2a0>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 800b62e:	4428      	add	r0, r5
 800b630:	f004 f9f2 	bl	800fa18 <_lv_memset_00>
            uint32_t i = x0.i + 1;
 800b634:	f8bd 0010 	ldrh.w	r0, [sp, #16]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800b638:	9b01      	ldr	r3, [sp, #4]
            uint32_t i = x0.i + 1;
 800b63a:	f100 0901 	add.w	r9, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800b63e:	465a      	mov	r2, fp
 800b640:	fb00 3010 	mls	r0, r0, r0, r3
 800b644:	a906      	add	r1, sp, #24
 800b646:	f003 feff 	bl	800f448 <_lv_sqrt>
            if(y_prev.f == 0) {
 800b64a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800b64e:	b93b      	cbnz	r3, 800b660 <lv_draw_mask_radius+0x2cc>
                y_prev.i--;
 800b650:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800b654:	3b01      	subs	r3, #1
 800b656:	f8ad 3018 	strh.w	r3, [sp, #24]
                y_prev.f = 0xFF;
 800b65a:	23ff      	movs	r3, #255	; 0xff
 800b65c:	f8ad 301a 	strh.w	r3, [sp, #26]
            if(y_prev.i >= y) {
 800b660:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800b664:	42b3      	cmp	r3, r6
 800b666:	db32      	blt.n	800b6ce <lv_draw_mask_radius+0x33a>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
 800b668:	9b01      	ldr	r3, [sp, #4]
 800b66a:	465a      	mov	r2, fp
 800b66c:	a907      	add	r1, sp, #28
 800b66e:	fb09 3019 	mls	r0, r9, r9, r3
 800b672:	f003 fee9 	bl	800f448 <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800b676:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b67a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b67e:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
 800b682:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 800b686:	434b      	muls	r3, r1
 800b688:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
 800b68c:	f1ba 0f00 	cmp.w	sl, #0
 800b690:	d101      	bne.n	800b696 <lv_draw_mask_radius+0x302>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800b692:	43db      	mvns	r3, r3
 800b694:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800b696:	f1b8 0f00 	cmp.w	r8, #0
 800b69a:	db08      	blt.n	800b6ae <lv_draw_mask_radius+0x31a>
 800b69c:	4544      	cmp	r4, r8
 800b69e:	dd06      	ble.n	800b6ae <lv_draw_mask_radius+0x31a>
 800b6a0:	f815 0008 	ldrb.w	r0, [r5, r8]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	f7ff fc99 	bl	800afdc <mask_mix>
 800b6aa:	f805 0008 	strb.w	r0, [r5, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800b6ae:	2f00      	cmp	r7, #0
 800b6b0:	db06      	blt.n	800b6c0 <lv_draw_mask_radius+0x32c>
 800b6b2:	42bc      	cmp	r4, r7
 800b6b4:	dd04      	ble.n	800b6c0 <lv_draw_mask_radius+0x32c>
 800b6b6:	5de8      	ldrb	r0, [r5, r7]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	f7ff fc8f 	bl	800afdc <mask_mix>
 800b6be:	55e8      	strb	r0, [r5, r7]
                kl--;
 800b6c0:	f108 38ff 	add.w	r8, r8, #4294967295
                kr++;
 800b6c4:	3701      	adds	r7, #1
                y_prev.f = y_next.f;
 800b6c6:	f8ad 201a 	strh.w	r2, [sp, #26]
                i++;
 800b6ca:	f109 0901 	add.w	r9, r9, #1
            for(; i <= x1.i; i++) {
 800b6ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800b6d2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b6d6:	9302      	str	r3, [sp, #8]
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800b6d8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800b6dc:	f8bd 601e 	ldrh.w	r6, [sp, #30]
 800b6e0:	011b      	lsls	r3, r3, #4
 800b6e2:	9303      	str	r3, [sp, #12]
 800b6e4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800b6e8:	f04f 0c00 	mov.w	ip, #0
 800b6ec:	eba9 0b07 	sub.w	fp, r9, r7
 800b6f0:	e038      	b.n	800b764 <lv_draw_mask_radius+0x3d0>
 800b6f2:	9b03      	ldr	r3, [sp, #12]
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 800b6f4:	9e01      	ldr	r6, [sp, #4]
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800b6f6:	eb03 1211 	add.w	r2, r3, r1, lsr #4
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 800b6fa:	fb00 6010 	mls	r0, r0, r0, r6
    uint32_t raw2 = raw * raw;
 800b6fe:	fb02 f602 	mul.w	r6, r2, r2

    int32_t d = x - raw2;
 800b702:	ebc6 2600 	rsb	r6, r6, r0, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800b706:	0050      	lsls	r0, r2, #1
 800b708:	fb96 f6f0 	sdiv	r6, r6, r0
 800b70c:	4416      	add	r6, r2

    q->i = d >> 4;
 800b70e:	f3c6 120f 	ubfx	r2, r6, #4, #16
    q->f = (d & 0xF) << 4;
 800b712:	0136      	lsls	r6, r6, #4
 800b714:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
 800b718:	eb01 0906 	add.w	r9, r1, r6
 800b71c:	f3c9 0947 	ubfx	r9, r9, #1, #8
                if(outer) m = 255 - m;
 800b720:	f1ba 0f00 	cmp.w	sl, #0
 800b724:	d003      	beq.n	800b72e <lv_draw_mask_radius+0x39a>
 800b726:	ea6f 0909 	mvn.w	r9, r9
 800b72a:	fa5f f989 	uxtb.w	r9, r9
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800b72e:	f1b8 0f00 	cmp.w	r8, #0
 800b732:	db08      	blt.n	800b746 <lv_draw_mask_radius+0x3b2>
 800b734:	4544      	cmp	r4, r8
 800b736:	dd06      	ble.n	800b746 <lv_draw_mask_radius+0x3b2>
 800b738:	f815 0008 	ldrb.w	r0, [r5, r8]
 800b73c:	4649      	mov	r1, r9
 800b73e:	f7ff fc4d 	bl	800afdc <mask_mix>
 800b742:	f805 0008 	strb.w	r0, [r5, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800b746:	2f00      	cmp	r7, #0
 800b748:	db06      	blt.n	800b758 <lv_draw_mask_radius+0x3c4>
 800b74a:	42bc      	cmp	r4, r7
 800b74c:	dd04      	ble.n	800b758 <lv_draw_mask_radius+0x3c4>
 800b74e:	5de8      	ldrb	r0, [r5, r7]
 800b750:	4649      	mov	r1, r9
 800b752:	f7ff fc43 	bl	800afdc <mask_mix>
 800b756:	55e8      	strb	r0, [r5, r7]
 800b758:	f04f 0c01 	mov.w	ip, #1
                y_prev.f = y_next.f;
 800b75c:	4631      	mov	r1, r6
                kl--;
 800b75e:	f108 38ff 	add.w	r8, r8, #4294967295
                kr++;
 800b762:	3701      	adds	r7, #1
            for(; i <= x1.i; i++) {
 800b764:	9b02      	ldr	r3, [sp, #8]
 800b766:	eb0b 0007 	add.w	r0, fp, r7
 800b76a:	4283      	cmp	r3, r0
 800b76c:	d2c1      	bcs.n	800b6f2 <lv_draw_mask_radius+0x35e>
 800b76e:	f1bc 0f00 	cmp.w	ip, #0
 800b772:	d005      	beq.n	800b780 <lv_draw_mask_radius+0x3ec>
 800b774:	f8ad 101a 	strh.w	r1, [sp, #26]
 800b778:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b77c:	f8ad 601e 	strh.w	r6, [sp, #30]
            if(y_prev.f) {
 800b780:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800b784:	b30b      	cbz	r3, 800b7ca <lv_draw_mask_radius+0x436>
                m = (y_prev.f * x1.f) >> 9;
 800b786:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800b78a:	4353      	muls	r3, r2
 800b78c:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
 800b790:	f1ba 0f00 	cmp.w	sl, #0
 800b794:	d001      	beq.n	800b79a <lv_draw_mask_radius+0x406>
 800b796:	43db      	mvns	r3, r3
 800b798:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800b79a:	f1b8 0f00 	cmp.w	r8, #0
 800b79e:	db08      	blt.n	800b7b2 <lv_draw_mask_radius+0x41e>
 800b7a0:	4544      	cmp	r4, r8
 800b7a2:	dd06      	ble.n	800b7b2 <lv_draw_mask_radius+0x41e>
 800b7a4:	f815 0008 	ldrb.w	r0, [r5, r8]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	f7ff fc17 	bl	800afdc <mask_mix>
 800b7ae:	f805 0008 	strb.w	r0, [r5, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800b7b2:	2f00      	cmp	r7, #0
 800b7b4:	db06      	blt.n	800b7c4 <lv_draw_mask_radius+0x430>
 800b7b6:	42bc      	cmp	r4, r7
 800b7b8:	dd04      	ble.n	800b7c4 <lv_draw_mask_radius+0x430>
 800b7ba:	5de8      	ldrb	r0, [r5, r7]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	f7ff fc0d 	bl	800afdc <mask_mix>
 800b7c2:	55e8      	strb	r0, [r5, r7]
                kl--;
 800b7c4:	f108 38ff 	add.w	r8, r8, #4294967295
                kr++;
 800b7c8:	3701      	adds	r7, #1
            if(outer == 0) {
 800b7ca:	f1ba 0f00 	cmp.w	sl, #0
 800b7ce:	f47f ae43 	bne.w	800b458 <lv_draw_mask_radius+0xc4>
                kl++;
 800b7d2:	f108 0101 	add.w	r1, r8, #1
                if(kl > len) {
 800b7d6:	428c      	cmp	r4, r1
 800b7d8:	f6ff adf7 	blt.w	800b3ca <lv_draw_mask_radius+0x36>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	db02      	blt.n	800b7e6 <lv_draw_mask_radius+0x452>
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	f004 f919 	bl	800fa18 <_lv_memset_00>
                if(kr < 0) {
 800b7e6:	2f00      	cmp	r7, #0
 800b7e8:	f6ff adef 	blt.w	800b3ca <lv_draw_mask_radius+0x36>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 800b7ec:	42bc      	cmp	r4, r7
 800b7ee:	f77f ae33 	ble.w	800b458 <lv_draw_mask_radius+0xc4>
 800b7f2:	e6dc      	b.n	800b5ae <lv_draw_mask_radius+0x21a>
            if(y == p->y_prev) {
 800b7f4:	f8d8 3014 	ldr.w	r3, [r8, #20]
        if(radius <= 256) sqrt_mask = 0x800;
 800b7f8:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            y = radius - abs_y;
 800b7fc:	eba9 0606 	sub.w	r6, r9, r6
        if(radius <= 256) sqrt_mask = 0x800;
 800b800:	bfcc      	ite	gt
 800b802:	f44f 4b00 	movgt.w	fp, #32768	; 0x8000
 800b806:	f44f 6b00 	movle.w	fp, #2048	; 0x800
            if(y == p->y_prev) {
 800b80a:	42b3      	cmp	r3, r6
 800b80c:	f43f ae66 	beq.w	800b4dc <lv_draw_mask_radius+0x148>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800b810:	9b01      	ldr	r3, [sp, #4]
 800b812:	465a      	mov	r2, fp
 800b814:	a904      	add	r1, sp, #16
 800b816:	fb06 3016 	mls	r0, r6, r6, r3
 800b81a:	f003 fe15 	bl	800f448 <_lv_sqrt>
 800b81e:	e665      	b.n	800b4ec <lv_draw_mask_radius+0x158>

0800b820 <lv_draw_mask_add>:
{
 800b820:	2300      	movs	r3, #0
 800b822:	b570      	push	{r4, r5, r6, lr}
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800b824:	4c08      	ldr	r4, [pc, #32]	; (800b848 <lv_draw_mask_add+0x28>)
 800b826:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 800b830:	b12e      	cbz	r6, 800b83e <lv_draw_mask_add+0x1e>
 800b832:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800b834:	2b10      	cmp	r3, #16
 800b836:	d1f6      	bne.n	800b826 <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
 800b838:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b83c:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800b83e:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 800b842:	6069      	str	r1, [r5, #4]
    return i;
 800b844:	b210      	sxth	r0, r2
 800b846:	e7f9      	b.n	800b83c <lv_draw_mask_add+0x1c>
 800b848:	20003410 	.word	0x20003410

0800b84c <lv_draw_mask_apply>:
{
 800b84c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while(m->param) {
 800b850:	2400      	movs	r4, #0
{
 800b852:	4607      	mov	r7, r0
 800b854:	4688      	mov	r8, r1
 800b856:	4691      	mov	r9, r2
 800b858:	469a      	mov	sl, r3
    bool changed = false;
 800b85a:	4625      	mov	r5, r4
    while(m->param) {
 800b85c:	4e0c      	ldr	r6, [pc, #48]	; (800b890 <lv_draw_mask_apply+0x44>)
 800b85e:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 800b862:	b933      	cbnz	r3, 800b872 <lv_draw_mask_apply+0x26>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800b864:	2d00      	cmp	r5, #0
 800b866:	bf14      	ite	ne
 800b868:	2002      	movne	r0, #2
 800b86a:	2001      	moveq	r0, #1
}
 800b86c:	b003      	add	sp, #12
 800b86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	f8d3 b000 	ldr.w	fp, [r3]
 800b878:	464a      	mov	r2, r9
 800b87a:	4653      	mov	r3, sl
 800b87c:	4641      	mov	r1, r8
 800b87e:	4638      	mov	r0, r7
 800b880:	47d8      	blx	fp
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800b882:	2800      	cmp	r0, #0
 800b884:	d0f2      	beq.n	800b86c <lv_draw_mask_apply+0x20>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800b886:	2802      	cmp	r0, #2
 800b888:	bf08      	it	eq
 800b88a:	2501      	moveq	r5, #1
 800b88c:	3401      	adds	r4, #1
 800b88e:	e7e6      	b.n	800b85e <lv_draw_mask_apply+0x12>
 800b890:	20003410 	.word	0x20003410

0800b894 <lv_draw_mask_remove_id>:
{
 800b894:	2200      	movs	r2, #0
    if(id != LV_MASK_ID_INV) {
 800b896:	1c43      	adds	r3, r0, #1
    void * p = NULL;
 800b898:	bf0f      	iteee	eq
 800b89a:	4611      	moveq	r1, r2
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800b89c:	4b05      	ldrne	r3, [pc, #20]	; (800b8b4 <lv_draw_mask_remove_id+0x20>)
 800b89e:	f853 1030 	ldrne.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 800b8a2:	f843 2030 	strne.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800b8a6:	bf1c      	itt	ne
 800b8a8:	eb03 03c0 	addne.w	r3, r3, r0, lsl #3
 800b8ac:	605a      	strne	r2, [r3, #4]
}
 800b8ae:	4608      	mov	r0, r1
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	20003410 	.word	0x20003410

0800b8b8 <lv_draw_mask_remove_custom>:
{
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	b570      	push	{r4, r5, r6, lr}
    void * p = NULL;
 800b8bc:	4619      	mov	r1, r3
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800b8be:	461c      	mov	r4, r3
 800b8c0:	4a07      	ldr	r2, [pc, #28]	; (800b8e0 <lv_draw_mask_remove_custom+0x28>)
 800b8c2:	189d      	adds	r5, r3, r2
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800b8c4:	686e      	ldr	r6, [r5, #4]
 800b8c6:	4286      	cmp	r6, r0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800b8c8:	bf04      	itt	eq
 800b8ca:	5899      	ldreq	r1, [r3, r2]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800b8cc:	509c      	streq	r4, [r3, r2]
 800b8ce:	f103 0308 	add.w	r3, r3, #8
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
 800b8d2:	bf08      	it	eq
 800b8d4:	606c      	streq	r4, [r5, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800b8d6:	2b80      	cmp	r3, #128	; 0x80
 800b8d8:	d1f3      	bne.n	800b8c2 <lv_draw_mask_remove_custom+0xa>
}
 800b8da:	4608      	mov	r0, r1
 800b8dc:	bd70      	pop	{r4, r5, r6, pc}
 800b8de:	bf00      	nop
 800b8e0:	20003410 	.word	0x20003410

0800b8e4 <lv_draw_mask_get_cnt>:
{
 800b8e4:	2300      	movs	r3, #0
    uint8_t cnt = 0;
 800b8e6:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 800b8e8:	4a04      	ldr	r2, [pc, #16]	; (800b8fc <lv_draw_mask_get_cnt+0x18>)
 800b8ea:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b8ee:	b109      	cbz	r1, 800b8f4 <lv_draw_mask_get_cnt+0x10>
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	b2c0      	uxtb	r0, r0
 800b8f4:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800b8f6:	2b10      	cmp	r3, #16
 800b8f8:	d1f7      	bne.n	800b8ea <lv_draw_mask_get_cnt+0x6>
}
 800b8fa:	4770      	bx	lr
 800b8fc:	20003410 	.word	0x20003410

0800b900 <lv_draw_mask_line_points_init>:
{
 800b900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b904:	4616      	mov	r6, r2
 800b906:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 800b90a:	4688      	mov	r8, r1
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800b90c:	212c      	movs	r1, #44	; 0x2c
{
 800b90e:	4604      	mov	r4, r0
 800b910:	461f      	mov	r7, r3
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800b912:	f004 f881 	bl	800fa18 <_lv_memset_00>
    if(p1y > p2y) {
 800b916:	42ae      	cmp	r6, r5
 800b918:	dc05      	bgt.n	800b926 <lv_draw_mask_line_points_init+0x26>
 800b91a:	462b      	mov	r3, r5
 800b91c:	4635      	mov	r5, r6
 800b91e:	461e      	mov	r6, r3
 800b920:	463b      	mov	r3, r7
 800b922:	4647      	mov	r7, r8
 800b924:	4698      	mov	r8, r3
    param->cfg.side = side;
 800b926:	7c23      	ldrb	r3, [r4, #16]
 800b928:	f89d 201c 	ldrb.w	r2, [sp, #28]
    param->cfg.p1.y = p1y;
 800b92c:	8165      	strh	r5, [r4, #10]
    param->cfg.side = side;
 800b92e:	f362 0301 	bfi	r3, r2, #0, #2
 800b932:	7423      	strb	r3, [r4, #16]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800b934:	1b72      	subs	r2, r6, r5
 800b936:	eba8 0307 	sub.w	r3, r8, r7
 800b93a:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 800b93e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800b942:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800b946:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800b94a:	4288      	cmp	r0, r1
 800b94c:	bfd4      	ite	le
 800b94e:	2000      	movle	r0, #0
 800b950:	2001      	movgt	r0, #1
 800b952:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    param->origo.y = p1y;
 800b956:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800b958:	f360 0100 	bfi	r1, r0, #0, #1
    param->yx_steep = 0;
 800b95c:	2000      	movs	r0, #0
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800b95e:	4d29      	ldr	r5, [pc, #164]	; (800ba04 <lv_draw_mask_line_points_init+0x104>)
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 800b960:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    if(param->flat) {
 800b964:	07c9      	lsls	r1, r1, #31
    param->cfg.p1.x = p1x;
 800b966:	8127      	strh	r7, [r4, #8]
    param->cfg.p2.x = p2x;
 800b968:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
 800b96c:	81e6      	strh	r6, [r4, #14]
    param->origo.x = p1x;
 800b96e:	8267      	strh	r7, [r4, #18]
    param->xy_steep = 0;
 800b970:	e9c4 0006 	strd	r0, r0, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800b974:	6025      	str	r5, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 800b976:	7120      	strb	r0, [r4, #4]
    if(param->flat) {
 800b978:	d524      	bpl.n	800b9c4 <lv_draw_mask_line_points_init+0xc4>
        if(dx) {
 800b97a:	b133      	cbz	r3, 800b98a <lv_draw_mask_line_points_init+0x8a>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 800b97c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800b980:	fb91 f1f3 	sdiv	r1, r1, r3
            param->yx_steep = (m * dy) >> 10;
 800b984:	4351      	muls	r1, r2
 800b986:	1289      	asrs	r1, r1, #10
 800b988:	61e1      	str	r1, [r4, #28]
        if(dy) {
 800b98a:	b132      	cbz	r2, 800b99a <lv_draw_mask_line_points_init+0x9a>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800b98c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800b990:	fb91 f2f2 	sdiv	r2, r1, r2
            param->xy_steep = (m * dx) >> 10;
 800b994:	4353      	muls	r3, r2
 800b996:	129b      	asrs	r3, r3, #10
 800b998:	61a3      	str	r3, [r4, #24]
        param->steep = param->yx_steep;
 800b99a:	69e3      	ldr	r3, [r4, #28]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800b99c:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
 800b99e:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800b9a0:	f012 0203 	ands.w	r2, r2, #3
 800b9a4:	6a21      	ldr	r1, [r4, #32]
 800b9a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b9aa:	d11d      	bne.n	800b9e8 <lv_draw_mask_line_points_init+0xe8>
 800b9ac:	f36f 0341 	bfc	r3, #1, #1
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800b9b0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if(param->steep < 0) param->spx = -param->spx;
 800b9b4:	2900      	cmp	r1, #0
    param->spx = param->steep >> 2;
 800b9b6:	ea4f 03a1 	mov.w	r3, r1, asr #2
    if(param->steep < 0) param->spx = -param->spx;
 800b9ba:	bfb8      	it	lt
 800b9bc:	425b      	neglt	r3, r3
 800b9be:	6263      	str	r3, [r4, #36]	; 0x24
}
 800b9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
 800b9c4:	b132      	cbz	r2, 800b9d4 <lv_draw_mask_line_points_init+0xd4>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800b9c6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800b9ca:	fb91 f1f2 	sdiv	r1, r1, r2
            param->xy_steep = (m * dx) >> 10;
 800b9ce:	4359      	muls	r1, r3
 800b9d0:	1289      	asrs	r1, r1, #10
 800b9d2:	61a1      	str	r1, [r4, #24]
        if(dx) {
 800b9d4:	b133      	cbz	r3, 800b9e4 <lv_draw_mask_line_points_init+0xe4>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800b9d6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800b9da:	fb91 f3f3 	sdiv	r3, r1, r3
            param->yx_steep = (m * dy) >> 10;
 800b9de:	435a      	muls	r2, r3
 800b9e0:	1292      	asrs	r2, r2, #10
 800b9e2:	61e2      	str	r2, [r4, #28]
        param->steep = param->xy_steep;
 800b9e4:	69a3      	ldr	r3, [r4, #24]
 800b9e6:	e7d9      	b.n	800b99c <lv_draw_mask_line_points_init+0x9c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800b9e8:	2a01      	cmp	r2, #1
 800b9ea:	d102      	bne.n	800b9f2 <lv_draw_mask_line_points_init+0xf2>
 800b9ec:	f043 0302 	orr.w	r3, r3, #2
 800b9f0:	e7de      	b.n	800b9b0 <lv_draw_mask_line_points_init+0xb0>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 800b9f2:	2a02      	cmp	r2, #2
 800b9f4:	d102      	bne.n	800b9fc <lv_draw_mask_line_points_init+0xfc>
        if(param->steep > 0) param->inv = 1;
 800b9f6:	2900      	cmp	r1, #0
 800b9f8:	dcf8      	bgt.n	800b9ec <lv_draw_mask_line_points_init+0xec>
 800b9fa:	e7d7      	b.n	800b9ac <lv_draw_mask_line_points_init+0xac>
        if(param->steep > 0) param->inv = 0;
 800b9fc:	2900      	cmp	r1, #0
 800b9fe:	dcd5      	bgt.n	800b9ac <lv_draw_mask_line_points_init+0xac>
 800ba00:	e7f4      	b.n	800b9ec <lv_draw_mask_line_points_init+0xec>
 800ba02:	bf00      	nop
 800ba04:	0800aff7 	.word	0x0800aff7

0800ba08 <lv_draw_mask_radius_init>:
{
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	88c8      	ldrh	r0, [r1, #6]
 800ba0e:	461f      	mov	r7, r3
 800ba10:	884b      	ldrh	r3, [r1, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ba12:	888d      	ldrh	r5, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ba14:	3001      	adds	r0, #1
 800ba16:	1ac0      	subs	r0, r0, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ba18:	880b      	ldrh	r3, [r1, #0]
 800ba1a:	3501      	adds	r5, #1
 800ba1c:	1aed      	subs	r5, r5, r3
    int32_t short_side = LV_MATH_MIN(w, h);
 800ba1e:	b200      	sxth	r0, r0
 800ba20:	b22d      	sxth	r5, r5
 800ba22:	42a8      	cmp	r0, r5
 800ba24:	bfa8      	it	ge
 800ba26:	4628      	movge	r0, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
 800ba28:	1040      	asrs	r0, r0, #1
 800ba2a:	4282      	cmp	r2, r0
{
 800ba2c:	4616      	mov	r6, r2
    if(radius > short_side >> 1) radius = short_side >> 1;
 800ba2e:	bfc8      	it	gt
 800ba30:	b206      	sxthgt	r6, r0
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 800ba32:	f104 0008 	add.w	r0, r4, #8
 800ba36:	f7ff fca1 	bl	800b37c <_lv_memcpy_small.constprop.4>
    param->cfg.outer = inv ? 1 : 0;
 800ba3a:	7ca3      	ldrb	r3, [r4, #18]
    param->y_prev = INT32_MIN;
 800ba3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    param->cfg.outer = inv ? 1 : 0;
 800ba40:	f367 0300 	bfi	r3, r7, #0, #1
 800ba44:	74a3      	strb	r3, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800ba46:	4b04      	ldr	r3, [pc, #16]	; (800ba58 <lv_draw_mask_radius_init+0x50>)
    param->cfg.radius = radius;
 800ba48:	8226      	strh	r6, [r4, #16]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800ba4a:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	7123      	strb	r3, [r4, #4]
    param->y_prev = INT32_MIN;
 800ba50:	2300      	movs	r3, #0
 800ba52:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
 800ba56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba58:	0800b395 	.word	0x0800b395

0800ba5c <grad_get>:
        _lv_mem_buf_release(mask_buf);
    }
}

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
 800ba5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 800ba5e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 800ba62:	fb01 f405 	mul.w	r4, r1, r5
 800ba66:	1224      	asrs	r4, r4, #8
    if(i <= min) return dsc->bg_color;
 800ba68:	42a2      	cmp	r2, r4
 800ba6a:	dc01      	bgt.n	800ba70 <grad_get+0x14>
 800ba6c:	8840      	ldrh	r0, [r0, #2]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
 800ba6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 800ba70:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800ba74:	fb03 f601 	mul.w	r6, r3, r1
    if(i >= max) return dsc->bg_grad_color;
 800ba78:	ebb2 2f26 	cmp.w	r2, r6, asr #8
 800ba7c:	db01      	blt.n	800ba82 <grad_get+0x26>
 800ba7e:	8880      	ldrh	r0, [r0, #4]
 800ba80:	e7f5      	b.n	800ba6e <grad_get+0x12>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 800ba82:	1b5b      	subs	r3, r3, r5
    d = (s * d) >> 8;
 800ba84:	434b      	muls	r3, r1
    i -= min;
 800ba86:	1b12      	subs	r2, r2, r4
    lv_opa_t mix = (i * 255) / d;
 800ba88:	b212      	sxth	r2, r2
 800ba8a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
 800ba8e:	121b      	asrs	r3, r3, #8
    lv_opa_t mix = (i * 255) / d;
 800ba90:	fb92 f3f3 	sdiv	r3, r2, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800ba94:	7887      	ldrb	r7, [r0, #2]
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	f1c3 06ff 	rsb	r6, r3, #255	; 0xff
 800ba9c:	08f9      	lsrs	r1, r7, #3
 800ba9e:	4371      	muls	r1, r6
 800baa0:	7902      	ldrb	r2, [r0, #4]
 800baa2:	f248 0581 	movw	r5, #32897	; 0x8081
 800baa6:	08d4      	lsrs	r4, r2, #3
 800baa8:	fb03 1404 	mla	r4, r3, r4, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800baac:	7941      	ldrb	r1, [r0, #5]
 800baae:	f002 0c07 	and.w	ip, r2, #7
 800bab2:	094a      	lsrs	r2, r1, #5
 800bab4:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800bab8:	f007 0c07 	and.w	ip, r7, #7
 800babc:	78c7      	ldrb	r7, [r0, #3]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800babe:	f001 011f 	and.w	r1, r1, #31
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bac2:	0978      	lsrs	r0, r7, #5
 800bac4:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 800bac8:	4370      	muls	r0, r6
 800baca:	fb03 0202 	mla	r2, r3, r2, r0
 800bace:	f04f 0000 	mov.w	r0, #0
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bad2:	f007 071f 	and.w	r7, r7, #31
 800bad6:	437e      	muls	r6, r7
 800bad8:	fb03 6301 	mla	r3, r3, r1, r6
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800badc:	3280      	adds	r2, #128	; 0x80
 800bade:	436a      	muls	r2, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800bae0:	3480      	adds	r4, #128	; 0x80
 800bae2:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800bae4:	3380      	adds	r3, #128	; 0x80
 800bae6:	436b      	muls	r3, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bae8:	0e91      	lsrs	r1, r2, #26
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800baea:	f3c4 54c4 	ubfx	r4, r4, #23, #5
 800baee:	f361 0002 	bfi	r0, r1, #0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800baf2:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 800baf6:	f364 00c7 	bfi	r0, r4, #3, #5
 800bafa:	f363 200c 	bfi	r0, r3, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800bafe:	0dd2      	lsrs	r2, r2, #23
 800bb00:	f362 304f 	bfi	r0, r2, #13, #3
 800bb04:	e7b3      	b.n	800ba6e <grad_get+0x12>

0800bb06 <draw_full_border>:
}
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800bb06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb0a:	b0a3      	sub	sp, #140	; 0x8c
 800bb0c:	469a      	mov	sl, r3
 800bb0e:	f89d 30b8 	ldrb.w	r3, [sp, #184]	; 0xb8
 800bb12:	460c      	mov	r4, r1
 800bb14:	9305      	str	r3, [sp, #20]
 800bb16:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	4690      	mov	r8, r2
 800bb1e:	9306      	str	r3, [sp, #24]
 800bb20:	f89d 50b0 	ldrb.w	r5, [sp, #176]	; 0xb0
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800bb24:	f7ff fede 	bl	800b8e4 <lv_draw_mask_get_cnt>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bb28:	88b1      	ldrh	r1, [r6, #4]
 800bb2a:	4681      	mov	r9, r0
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800bb2c:	88a0      	ldrh	r0, [r4, #4]
    int32_t inner_w = lv_area_get_width(area_inner);
 800bb2e:	f9b6 b000 	ldrsh.w	fp, [r6]
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800bb32:	1a43      	subs	r3, r0, r1
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	9309      	str	r3, [sp, #36]	; 0x24

    int32_t coords_out_w = lv_area_get_width(area_outer);
 800bb38:	f9b4 3000 	ldrsh.w	r3, [r4]
    int32_t inner_h = lv_area_get_height(area_inner);
 800bb3c:	f9b6 e002 	ldrsh.w	lr, [r6, #2]
    int32_t coords_out_w = lv_area_get_width(area_outer);
 800bb40:	9308      	str	r3, [sp, #32]
 800bb42:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
    int32_t inner_h = lv_area_get_height(area_inner);
 800bb46:	f9b6 c006 	ldrsh.w	ip, [r6, #6]
    int32_t coords_out_h = lv_area_get_height(area_outer);
 800bb4a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800bb4e:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 800bb52:	9307      	str	r3, [sp, #28]

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
 800bb54:	2d00      	cmp	r5, #0
 800bb56:	f000 80e5 	beq.w	800bd24 <draw_full_border+0x21e>
 800bb5a:	3101      	adds	r1, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bb5c:	f10c 0c01 	add.w	ip, ip, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bb60:	eba1 0b0b 	sub.w	fp, r1, fp
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bb64:	ebac 0e0e 	sub.w	lr, ip, lr
    int32_t inner_w = lv_area_get_width(area_inner);
 800bb68:	fa0f fb8b 	sxth.w	fp, fp
    int32_t inner_h = lv_area_get_height(area_inner);
 800bb6c:	fa0f fe8e 	sxth.w	lr, lr
        rin = radius;
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
 800bb70:	45f3      	cmp	fp, lr
 800bb72:	bfa8      	it	ge
 800bb74:	46f3      	movge	fp, lr
        if(rin > short_side >> 1) rin = short_side >> 1;
 800bb76:	ea4f 056b 	mov.w	r5, fp, asr #1
 800bb7a:	45aa      	cmp	sl, r5
 800bb7c:	bfa8      	it	ge
 800bb7e:	46aa      	movge	sl, r5

        /*Get the outer area*/
        rout = rin + border_width;
 800bb80:	eb0a 0503 	add.w	r5, sl, r3
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800bb84:	f7fb fe64 	bl	8007850 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800bb88:	f002 fc5d 	bl	800e446 <lv_disp_get_buf>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800bb8c:	4642      	mov	r2, r8
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800bb8e:	4607      	mov	r7, r0
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800bb90:	4621      	mov	r1, r4
 800bb92:	a80e      	add	r0, sp, #56	; 0x38
 800bb94:	f002 ff8b 	bl	800eaae <_lv_area_intersect>
    if(is_common == false) return;
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	f000 80c0 	beq.w	800bd1e <draw_full_border+0x218>

    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800bb9e:	f8b7 c010 	ldrh.w	ip, [r7, #16]
 800bba2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
 800bba6:	8a78      	ldrh	r0, [r7, #18]
    draw_area.x1 -= disp_area->x1;
 800bba8:	eba3 030c 	sub.w	r3, r3, ip
 800bbac:	b29a      	uxth	r2, r3
    draw_area.y1 -= disp_area->y1;
 800bbae:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
 800bbb2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    draw_area.y1 -= disp_area->y1;
 800bbb6:	1a09      	subs	r1, r1, r0
    draw_area.x2 -= disp_area->x1;
 800bbb8:	eba3 030c 	sub.w	r3, r3, ip
    draw_area.y1 -= disp_area->y1;
 800bbbc:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
 800bbc0:	b29b      	uxth	r3, r3
    draw_area.y2 -= disp_area->y1;
 800bbc2:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
    draw_area.x2 -= disp_area->x1;
 800bbc6:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bbca:	3301      	adds	r3, #1
    draw_area.y2 -= disp_area->y1;
 800bbcc:	1a09      	subs	r1, r1, r0
 800bbce:	1a9b      	subs	r3, r3, r2
    draw_area.x1 -= disp_area->x1;
 800bbd0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.y2 -= disp_area->y1;
 800bbd4:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800bbd8:	fa0f f28a 	sxth.w	r2, sl
 800bbdc:	4631      	mov	r1, r6
 800bbde:	fa0f fb83 	sxth.w	fp, r3
 800bbe2:	a814      	add	r0, sp, #80	; 0x50
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	f7ff ff0f 	bl	800ba08 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800bbea:	2100      	movs	r1, #0
 800bbec:	a814      	add	r0, sp, #80	; 0x50
 800bbee:	f7ff fe17 	bl	800b820 <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	b22a      	sxth	r2, r5
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800bbf6:	900c      	str	r0, [sp, #48]	; 0x30
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	a81b      	add	r0, sp, #108	; 0x6c
 800bbfc:	f7ff ff04 	bl	800ba08 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800bc00:	2100      	movs	r1, #0
 800bc02:	a81b      	add	r0, sp, #108	; 0x6c
 800bc04:	f7ff fe0c 	bl	800b820 <lv_draw_mask_add>
 800bc08:	900d      	str	r0, [sp, #52]	; 0x34

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800bc0a:	4658      	mov	r0, fp
 800bc0c:	f003 fe66 	bl	800f8dc <_lv_mem_buf_get>

    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 800bc10:	9b07      	ldr	r3, [sp, #28]
 800bc12:	f9b7 c012 	ldrsh.w	ip, [r7, #18]
 800bc16:	429d      	cmp	r5, r3
 800bc18:	f9bd a03a 	ldrsh.w	sl, [sp, #58]	; 0x3a
 800bc1c:	bfbc      	itt	lt
 800bc1e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bc22:	9308      	strlt	r3, [sp, #32]
 800bc24:	eb0c 030a 	add.w	r3, ip, sl
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800bc28:	4606      	mov	r6, r0
 800bc2a:	bfa8      	it	ge
 800bc2c:	9508      	strge	r5, [sp, #32]
 800bc2e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800bc32:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800bc36:	b21b      	sxth	r3, r3
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
 800bc38:	f1b9 0f00 	cmp.w	r9, #0
 800bc3c:	f040 8178 	bne.w	800bf30 <draw_full_border+0x42a>
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800bc40:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800bc44:	9908      	ldr	r1, [sp, #32]
 800bc46:	eba2 020c 	sub.w	r2, r2, ip
 800bc4a:	440a      	add	r2, r1
 800bc4c:	920a      	str	r2, [sp, #40]	; 0x28

        fill_area.x1 = area_outer->x1;
 800bc4e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x2;
 800bc52:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800bc56:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800bc5a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            lv_area_t fill_area2;
            fill_area2.y1 = fill_area.y1;
            fill_area2.y2 = fill_area.y2;

            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800bc5e:	fa1f f985 	uxth.w	r9, r5
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800bc62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc64:	459a      	cmp	sl, r3
 800bc66:	dd71      	ble.n	800bd4c <draw_full_border+0x246>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800bc68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc6c:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
 800bc70:	9a08      	ldr	r2, [sp, #32]
 800bc72:	eba9 0903 	sub.w	r9, r9, r3
 800bc76:	eba9 0902 	sub.w	r9, r9, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 800bc7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            _lv_memset_ff(mask_buf, draw_area_w);
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);

            lv_area_t fill_area2;
            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800bc7c:	fa1f fa85 	uxth.w	sl, r5
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 800bc80:	454a      	cmp	r2, r9
 800bc82:	bfa8      	it	ge
 800bc84:	f102 0901 	addge.w	r9, r2, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 800bc88:	444b      	add	r3, r9
 800bc8a:	b21b      	sxth	r3, r3
 800bc8c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800bc90:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800bc94:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800bc98:	454b      	cmp	r3, r9
 800bc9a:	f280 80d0 	bge.w	800be3e <draw_full_border+0x338>
        fill_area.y1 = area_outer->y1 + corner_size + 1;
        fill_area.y2 = area_outer->y2 - corner_size - 1;

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x1 + border_width - 1;
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800bc9e:	2501      	movs	r5, #1
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800bca0:	8862      	ldrh	r2, [r4, #2]
 800bca2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bca6:	3201      	adds	r2, #1
 800bca8:	441a      	add	r2, r3
 800bcaa:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800bcae:	88e2      	ldrh	r2, [r4, #6]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800bcb0:	a910      	add	r1, sp, #64	; 0x40
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800bcb2:	3a01      	subs	r2, #1
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        fill_area.x1 = area_outer->x1;
 800bcba:	f9b4 3000 	ldrsh.w	r3, [r4]
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800bcbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
        fill_area.x1 = area_outer->x1;
 800bcc0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	4413      	add	r3, r2
 800bcc8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800bccc:	9b06      	ldr	r3, [sp, #24]
 800bcce:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 800bcd2:	9302      	str	r3, [sp, #8]
 800bcd4:	9b05      	ldr	r3, [sp, #20]
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	9500      	str	r5, [sp, #0]
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f7fc fe5d 	bl	800899c <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800bce2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800bce6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bce8:	1953      	adds	r3, r2, r5
 800bcea:	1a5b      	subs	r3, r3, r1
 800bcec:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x2;

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800bcf0:	9b06      	ldr	r3, [sp, #24]
        fill_area.x2 = area_outer->x2;
 800bcf2:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800bcf6:	9302      	str	r3, [sp, #8]
 800bcf8:	9b05      	ldr	r3, [sp, #20]
 800bcfa:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 800bcfe:	e9cd 5300 	strd	r5, r3, [sp]
 800bd02:	a910      	add	r1, sp, #64	; 0x40
 800bd04:	2300      	movs	r3, #0
 800bd06:	4640      	mov	r0, r8
 800bd08:	f7fc fe48 	bl	800899c <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
 800bd0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bd0e:	f7ff fdc1 	bl	800b894 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
 800bd12:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bd14:	f7ff fdbe 	bl	800b894 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 800bd18:	4630      	mov	r0, r6
 800bd1a:	f003 fc77 	bl	800f60c <_lv_mem_buf_release>
}
 800bd1e:	b023      	add	sp, #140	; 0x8c
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	9b08      	ldr	r3, [sp, #32]
 800bd26:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bd28:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bd2a:	1ac3      	subs	r3, r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bd2c:	1aba      	subs	r2, r7, r2
    int32_t coords_out_w = lv_area_get_width(area_outer);
 800bd2e:	b21d      	sxth	r5, r3
    int32_t coords_out_h = lv_area_get_height(area_outer);
 800bd30:	b213      	sxth	r3, r2
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
 800bd32:	429d      	cmp	r5, r3
 800bd34:	bfa8      	it	ge
 800bd36:	461d      	movge	r5, r3
        if(rout > short_side >> 1) rout = short_side >> 1;
 800bd38:	106d      	asrs	r5, r5, #1
 800bd3a:	4555      	cmp	r5, sl
 800bd3c:	bfa8      	it	ge
 800bd3e:	4655      	movge	r5, sl
        rin = rout - border_width;
 800bd40:	9b07      	ldr	r3, [sp, #28]
 800bd42:	eba5 0a03 	sub.w	sl, r5, r3
 800bd46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd4a:	e71b      	b.n	800bb84 <draw_full_border+0x7e>
            _lv_memset_ff(mask_buf, draw_area_w);
 800bd4c:	4659      	mov	r1, fp
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f003 fe91 	bl	800fa76 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800bd54:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800bd58:	8a7a      	ldrh	r2, [r7, #18]
 800bd5a:	8a39      	ldrh	r1, [r7, #16]
 800bd5c:	4452      	add	r2, sl
 800bd5e:	4419      	add	r1, r3
 800bd60:	b212      	sxth	r2, r2
 800bd62:	465b      	mov	r3, fp
 800bd64:	b209      	sxth	r1, r1
 800bd66:	4630      	mov	r0, r6
 800bd68:	f7ff fd70 	bl	800b84c <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
 800bd6c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800bd70:	900b      	str	r0, [sp, #44]	; 0x2c
            fill_area2.y1 = fill_area.y1;
 800bd72:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area2.y2 = fill_area.y2;
 800bd76:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800bd7a:	9000      	str	r0, [sp, #0]
            fill_area2.y2 = fill_area.y2;
 800bd7c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            fill_area2.x1 = area_outer->x1;
 800bd80:	f9b4 3000 	ldrsh.w	r3, [r4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800bd84:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
            fill_area2.x1 = area_outer->x1;
 800bd88:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	444b      	add	r3, r9
 800bd90:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800bd94:	9b06      	ldr	r3, [sp, #24]
 800bd96:	a912      	add	r1, sp, #72	; 0x48
 800bd98:	9302      	str	r3, [sp, #8]
 800bd9a:	9b05      	ldr	r3, [sp, #20]
 800bd9c:	4640      	mov	r0, r8
 800bd9e:	9301      	str	r3, [sp, #4]
 800bda0:	4633      	mov	r3, r6
 800bda2:	f7fc fdfb 	bl	800899c <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
 800bda6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800bdaa:	9907      	ldr	r1, [sp, #28]
 800bdac:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800bdb0:	440b      	add	r3, r1
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	da15      	bge.n	800bde2 <draw_full_border+0x2dc>
                fill_area2.x1 = area_outer->x1 + rout;
 800bdb6:	8823      	ldrh	r3, [r4, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800bdb8:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
                fill_area2.x1 = area_outer->x1 + rout;
 800bdbc:	444b      	add	r3, r9
 800bdbe:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800bdc2:	88a3      	ldrh	r3, [r4, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800bdc4:	a912      	add	r1, sp, #72	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800bdc6:	eba3 0309 	sub.w	r3, r3, r9
 800bdca:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800bdce:	9b06      	ldr	r3, [sp, #24]
 800bdd0:	4640      	mov	r0, r8
 800bdd2:	9302      	str	r3, [sp, #8]
 800bdd4:	9b05      	ldr	r3, [sp, #20]
 800bdd6:	9301      	str	r3, [sp, #4]
 800bdd8:	2301      	movs	r3, #1
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	2300      	movs	r3, #0
 800bdde:	f7fc fddd 	bl	800899c <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800bde2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800bde6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	eba2 0209 	sub.w	r2, r2, r9
 800bdf0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800bdf4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
            fill_area2.x2 = area_outer->x2;
 800bdf8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800bdfc:	1b5b      	subs	r3, r3, r5
 800bdfe:	440a      	add	r2, r1
 800be00:	3301      	adds	r3, #1
 800be02:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800be04:	9a06      	ldr	r2, [sp, #24]
 800be06:	2b00      	cmp	r3, #0
 800be08:	bfac      	ite	ge
 800be0a:	18f3      	addge	r3, r6, r3
 800be0c:	1c33      	addlt	r3, r6, #0
 800be0e:	9202      	str	r2, [sp, #8]
 800be10:	9a05      	ldr	r2, [sp, #20]
 800be12:	a912      	add	r1, sp, #72	; 0x48
 800be14:	9201      	str	r2, [sp, #4]
 800be16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be18:	4640      	mov	r0, r8
 800be1a:	9200      	str	r2, [sp, #0]
 800be1c:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 800be20:	f7fc fdbc 	bl	800899c <_lv_blend_fill>
            fill_area.y1++;
 800be24:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800be28:	f10a 0a01 	add.w	sl, sl, #1
            fill_area.y1++;
 800be2c:	3301      	adds	r3, #1
 800be2e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800be32:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800be36:	3301      	adds	r3, #1
 800be38:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800be3c:	e711      	b.n	800bc62 <draw_full_border+0x15c>
            _lv_memset_ff(mask_buf, draw_area_w);
 800be3e:	4659      	mov	r1, fp
 800be40:	4630      	mov	r0, r6
 800be42:	f003 fe18 	bl	800fa76 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800be46:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800be4a:	8a7a      	ldrh	r2, [r7, #18]
 800be4c:	8a39      	ldrh	r1, [r7, #16]
 800be4e:	444a      	add	r2, r9
 800be50:	4419      	add	r1, r3
 800be52:	b212      	sxth	r2, r2
 800be54:	465b      	mov	r3, fp
 800be56:	b209      	sxth	r1, r1
 800be58:	4630      	mov	r0, r6
 800be5a:	f7ff fcf7 	bl	800b84c <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
 800be5e:	f9b4 3000 	ldrsh.w	r3, [r4]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800be62:	900a      	str	r0, [sp, #40]	; 0x28
            fill_area2.x1 = area_outer->x1;
 800be64:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800be68:	3b01      	subs	r3, #1
 800be6a:	4453      	add	r3, sl
 800be6c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            fill_area2.y1 = fill_area.y1;
 800be70:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800be74:	9000      	str	r0, [sp, #0]
            fill_area2.y1 = fill_area.y1;
 800be76:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area2.y2 = fill_area.y2;
 800be7a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800be7e:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
            fill_area2.y2 = fill_area.y2;
 800be82:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800be86:	9b06      	ldr	r3, [sp, #24]
 800be88:	a912      	add	r1, sp, #72	; 0x48
 800be8a:	9302      	str	r3, [sp, #8]
 800be8c:	9b05      	ldr	r3, [sp, #20]
 800be8e:	4640      	mov	r0, r8
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	4633      	mov	r3, r6
 800be94:	f7fc fd82 	bl	800899c <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
 800be98:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800be9c:	9907      	ldr	r1, [sp, #28]
 800be9e:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800bea2:	1a5b      	subs	r3, r3, r1
 800bea4:	429a      	cmp	r2, r3
 800bea6:	dd15      	ble.n	800bed4 <draw_full_border+0x3ce>
                fill_area2.x1 = area_outer->x1 + rout;
 800bea8:	8823      	ldrh	r3, [r4, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800beaa:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
                fill_area2.x1 = area_outer->x1 + rout;
 800beae:	4453      	add	r3, sl
 800beb0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800beb4:	88a3      	ldrh	r3, [r4, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800beb6:	a912      	add	r1, sp, #72	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800beb8:	eba3 030a 	sub.w	r3, r3, sl
 800bebc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800bec0:	9b06      	ldr	r3, [sp, #24]
 800bec2:	4640      	mov	r0, r8
 800bec4:	9302      	str	r3, [sp, #8]
 800bec6:	9b05      	ldr	r3, [sp, #20]
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	2301      	movs	r3, #1
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	2300      	movs	r3, #0
 800bed0:	f7fc fd64 	bl	800899c <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800bed4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800bed8:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	eba2 020a 	sub.w	r2, r2, sl
 800bee2:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800bee6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
            fill_area2.x2 = area_outer->x2;
 800beea:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800beee:	1b5b      	subs	r3, r3, r5
 800bef0:	440a      	add	r2, r1
 800bef2:	3301      	adds	r3, #1
 800bef4:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800bef6:	9a06      	ldr	r2, [sp, #24]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	bfac      	ite	ge
 800befc:	18f3      	addge	r3, r6, r3
 800befe:	1c33      	addlt	r3, r6, #0
 800bf00:	9202      	str	r2, [sp, #8]
 800bf02:	9a05      	ldr	r2, [sp, #20]
 800bf04:	a912      	add	r1, sp, #72	; 0x48
 800bf06:	9201      	str	r2, [sp, #4]
 800bf08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf0a:	4640      	mov	r0, r8
 800bf0c:	9200      	str	r2, [sp, #0]
 800bf0e:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 800bf12:	f7fc fd43 	bl	800899c <_lv_blend_fill>
            fill_area.y1++;
 800bf16:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800bf1a:	f109 0901 	add.w	r9, r9, #1
            fill_area.y1++;
 800bf1e:	3301      	adds	r3, #1
 800bf20:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800bf24:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800bf28:	3301      	adds	r3, #1
 800bf2a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800bf2e:	e6b1      	b.n	800bc94 <draw_full_border+0x18e>
        fill_area.x1 = area_outer->x1;
 800bf30:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x2;
 800bf34:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800bf38:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800bf3c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800bf40:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800bf44:	4553      	cmp	r3, sl
 800bf46:	f6ff aee1 	blt.w	800bd0c <draw_full_border+0x206>
            _lv_memset_ff(mask_buf, draw_area_w);
 800bf4a:	4659      	mov	r1, fp
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	f003 fd92 	bl	800fa76 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800bf52:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800bf56:	8a7a      	ldrh	r2, [r7, #18]
 800bf58:	8a39      	ldrh	r1, [r7, #16]
 800bf5a:	4452      	add	r2, sl
 800bf5c:	4419      	add	r1, r3
 800bf5e:	b212      	sxth	r2, r2
 800bf60:	465b      	mov	r3, fp
 800bf62:	b209      	sxth	r1, r1
 800bf64:	4630      	mov	r0, r6
 800bf66:	f7ff fc71 	bl	800b84c <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 800bf6a:	9b06      	ldr	r3, [sp, #24]
 800bf6c:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 800bf70:	9302      	str	r3, [sp, #8]
 800bf72:	9b05      	ldr	r3, [sp, #20]
 800bf74:	a910      	add	r1, sp, #64	; 0x40
 800bf76:	e9cd 0300 	strd	r0, r3, [sp]
 800bf7a:	4633      	mov	r3, r6
 800bf7c:	4640      	mov	r0, r8
 800bf7e:	f7fc fd0d 	bl	800899c <_lv_blend_fill>
            fill_area.y1++;
 800bf82:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800bf86:	f10a 0a01 	add.w	sl, sl, #1
            fill_area.y1++;
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800bf90:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800bf94:	3301      	adds	r3, #1
 800bf96:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800bf9a:	e7d1      	b.n	800bf40 <draw_full_border+0x43a>

0800bf9c <lv_area_copy>:
{
 800bf9c:	3901      	subs	r1, #1
 800bf9e:	f100 0308 	add.w	r3, r0, #8
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800bfa2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bfa6:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 800bfaa:	4298      	cmp	r0, r3
 800bfac:	d1f9      	bne.n	800bfa2 <lv_area_copy+0x6>
}
 800bfae:	4770      	bx	lr

0800bfb0 <lv_draw_rect_dsc_init>:
{
 800bfb0:	b510      	push	{r4, lr}
 800bfb2:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800bfb4:	2154      	movs	r1, #84	; 0x54
 800bfb6:	f003 fd2f 	bl	800fa18 <_lv_memset_00>
    dsc->bg_color = LV_COLOR_WHITE;
 800bfba:	4b0d      	ldr	r3, [pc, #52]	; (800bff0 <lv_draw_rect_dsc_init+0x40>)
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800bfbc:	4a0d      	ldr	r2, [pc, #52]	; (800bff4 <lv_draw_rect_dsc_init+0x44>)
    dsc->bg_color = LV_COLOR_WHITE;
 800bfbe:	881b      	ldrh	r3, [r3, #0]
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800bfc0:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->bg_color = LV_COLOR_WHITE;
 800bfc2:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	80a3      	strh	r3, [r4, #4]
    dsc->border_color = LV_COLOR_BLACK;
 800bfc8:	81e3      	strh	r3, [r4, #14]
    dsc->pattern_recolor = LV_COLOR_BLACK;
 800bfca:	86a3      	strh	r3, [r4, #52]	; 0x34
    dsc->value_color = LV_COLOR_BLACK;
 800bfcc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dsc->shadow_color = LV_COLOR_BLACK;
 800bfd0:	8423      	strh	r3, [r4, #32]
    dsc->bg_grad_color_stop = 0xFF;
 800bfd2:	23ff      	movs	r3, #255	; 0xff
 800bfd4:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
 800bfd6:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
 800bfd8:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
 800bfda:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
 800bfdc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->value_opa = LV_OPA_COVER;
 800bfe0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->shadow_opa = LV_OPA_COVER;
 800bfe4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
 800bfe8:	230f      	movs	r3, #15
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
 800bfea:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->border_side = LV_BORDER_SIDE_FULL;
 800bfec:	8263      	strh	r3, [r4, #18]
}
 800bfee:	bd10      	pop	{r4, pc}
 800bff0:	080158b4 	.word	0x080158b4
 800bff4:	20000038 	.word	0x20000038

0800bff8 <lv_draw_rect>:
{
 800bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bffc:	88c3      	ldrh	r3, [r0, #6]
 800bffe:	4614      	mov	r4, r2
 800c000:	8842      	ldrh	r2, [r0, #2]
 800c002:	3301      	adds	r3, #1
 800c004:	1a9b      	subs	r3, r3, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800c006:	b21b      	sxth	r3, r3
{
 800c008:	b0ab      	sub	sp, #172	; 0xac
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800c00a:	2b00      	cmp	r3, #0
{
 800c00c:	4681      	mov	r9, r0
 800c00e:	9104      	str	r1, [sp, #16]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800c010:	f340 840d 	ble.w	800c82e <lv_draw_rect+0x836>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c014:	8883      	ldrh	r3, [r0, #4]
 800c016:	8802      	ldrh	r2, [r0, #0]
 800c018:	3301      	adds	r3, #1
 800c01a:	1a9b      	subs	r3, r3, r2
 800c01c:	b21b      	sxth	r3, r3
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f340 8405 	ble.w	800c82e <lv_draw_rect+0x836>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800c024:	7b23      	ldrb	r3, [r4, #12]
 800c026:	2b02      	cmp	r3, #2
 800c028:	f240 80a7 	bls.w	800c17a <lv_draw_rect+0x182>
    lv_area_copy(&coords_bg, coords);
 800c02c:	4601      	mov	r1, r0
 800c02e:	a812      	add	r0, sp, #72	; 0x48
 800c030:	f7ff ffb4 	bl	800bf9c <lv_area_copy>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 800c034:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	dd22      	ble.n	800c082 <lv_draw_rect+0x8a>
 800c03c:	7d23      	ldrb	r3, [r4, #20]
 800c03e:	2bfc      	cmp	r3, #252	; 0xfc
 800c040:	d91f      	bls.n	800c082 <lv_draw_rect+0x8a>
 800c042:	f9b4 3000 	ldrsh.w	r3, [r4]
 800c046:	b1e3      	cbz	r3, 800c082 <lv_draw_rect+0x8a>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800c048:	8a63      	ldrh	r3, [r4, #18]
 800c04a:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800c04e:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800c052:	440a      	add	r2, r1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800c054:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800c058:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800c05c:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800c060:	440a      	add	r2, r1
 800c062:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800c066:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800c06a:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 800c06e:	1a52      	subs	r2, r2, r1
 800c070:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800c074:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	1ad3      	subs	r3, r2, r3
 800c07e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    lv_opa_t opa = dsc->bg_opa;
 800c082:	7b26      	ldrb	r6, [r4, #12]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c084:	2efe      	cmp	r6, #254	; 0xfe
 800c086:	bf28      	it	cs
 800c088:	26ff      	movcs	r6, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800c08a:	f7fb fbe1 	bl	8007850 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c08e:	f002 f9da 	bl	800e446 <lv_disp_get_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 800c092:	9a04      	ldr	r2, [sp, #16]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c094:	9005      	str	r0, [sp, #20]
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 800c096:	a912      	add	r1, sp, #72	; 0x48
 800c098:	a814      	add	r0, sp, #80	; 0x50
 800c09a:	f002 fd08 	bl	800eaae <_lv_area_intersect>
    if(is_common == false) return;
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d06b      	beq.n	800c17a <lv_draw_rect+0x182>
    draw_area.x1 -= disp_area->x1;
 800c0a2:	9b05      	ldr	r3, [sp, #20]
 800c0a4:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800c0a8:	8a19      	ldrh	r1, [r3, #16]
    draw_area.y1 -= disp_area->y1;
 800c0aa:	8a5d      	ldrh	r5, [r3, #18]
    draw_area.x2 -= disp_area->x1;
 800c0ac:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    draw_area.x1 -= disp_area->x1;
 800c0b0:	1a52      	subs	r2, r2, r1
    draw_area.x2 -= disp_area->x1;
 800c0b2:	1a5b      	subs	r3, r3, r1
 800c0b4:	b29b      	uxth	r3, r3
    draw_area.x1 -= disp_area->x1;
 800c0b6:	b292      	uxth	r2, r2
    draw_area.y1 -= disp_area->y1;
 800c0b8:	f8bd 0052 	ldrh.w	r0, [sp, #82]	; 0x52
    draw_area.x2 -= disp_area->x1;
 800c0bc:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 800c0c0:	3301      	adds	r3, #1
    draw_area.y2 -= disp_area->y1;
 800c0c2:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 800c0c6:	1a9b      	subs	r3, r3, r2
 800c0c8:	b21b      	sxth	r3, r3
    draw_area.y1 -= disp_area->y1;
 800c0ca:	1b40      	subs	r0, r0, r5
    draw_area.y2 -= disp_area->y1;
 800c0cc:	1b49      	subs	r1, r1, r5
    draw_area.y1 -= disp_area->y1;
 800c0ce:	f8ad 0052 	strh.w	r0, [sp, #82]	; 0x52
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800c0d2:	4618      	mov	r0, r3
    draw_area.x1 -= disp_area->x1;
 800c0d4:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
    draw_area.y2 -= disp_area->y1;
 800c0d8:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 800c0dc:	9308      	str	r3, [sp, #32]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800c0de:	f003 fbfd 	bl	800f8dc <_lv_mem_buf_get>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800c0e2:	88a3      	ldrh	r3, [r4, #4]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 800c0e4:	79a5      	ldrb	r5, [r4, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800c0e6:	8862      	ldrh	r2, [r4, #2]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800c0e8:	4682      	mov	sl, r0
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	bf08      	it	eq
 800c0ee:	2500      	moveq	r5, #0
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 800c0f0:	f7ff fbf8 	bl	800b8e4 <lv_draw_mask_get_cnt>
 800c0f4:	b283      	uxth	r3, r0
 800c0f6:	930c      	str	r3, [sp, #48]	; 0x30
    if(other_mask_cnt) simple_mode = false;
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f040 80b4 	bne.w	800c266 <lv_draw_rect+0x26e>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
 800c0fe:	1eab      	subs	r3, r5, #2
 800c100:	bf18      	it	ne
 800c102:	2301      	movne	r3, #1
 800c104:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c108:	f8bd b04e 	ldrh.w	fp, [sp, #78]	; 0x4e
    if(other_mask_cnt) simple_mode = false;
 800c10c:	9309      	str	r3, [sp, #36]	; 0x24
 800c10e:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c112:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c116:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c118:	f10b 0b01 	add.w	fp, fp, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c11c:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c11e:	ebab 0b02 	sub.w	fp, fp, r2
    int32_t coords_h = lv_area_get_height(&coords_bg);
 800c122:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c126:	b23f      	sxth	r7, r7
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 800c128:	45bb      	cmp	fp, r7
 800c12a:	bfa8      	it	ge
 800c12c:	46bb      	movge	fp, r7
    int32_t rout = dsc->radius;
 800c12e:	f9b4 3000 	ldrsh.w	r3, [r4]
    if(rout > short_side >> 1) rout = short_side >> 1;
 800c132:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 800c136:	459b      	cmp	fp, r3
 800c138:	bfa8      	it	ge
 800c13a:	469b      	movge	fp, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800c13c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f000 8093 	beq.w	800c26a <lv_draw_rect+0x272>
 800c144:	f1bb 0f00 	cmp.w	fp, #0
 800c148:	f040 808f 	bne.w	800c26a <lv_draw_rect+0x272>
 800c14c:	2d00      	cmp	r5, #0
 800c14e:	f040 8135 	bne.w	800c3bc <lv_draw_rect+0x3c4>
        _lv_blend_fill(clip, &coords_bg,
 800c152:	7b63      	ldrb	r3, [r4, #13]
 800c154:	8862      	ldrh	r2, [r4, #2]
 800c156:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800c15a:	2301      	movs	r3, #1
 800c15c:	a912      	add	r1, sp, #72	; 0x48
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	9804      	ldr	r0, [sp, #16]
 800c162:	462b      	mov	r3, r5
 800c164:	f7fc fc1a 	bl	800899c <_lv_blend_fill>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800c168:	f04f 33ff 	mov.w	r3, #4294967295
 800c16c:	930d      	str	r3, [sp, #52]	; 0x34
    lv_draw_mask_remove_id(mask_rout_id);
 800c16e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c170:	f7ff fb90 	bl	800b894 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 800c174:	4650      	mov	r0, sl
 800c176:	f003 fa49 	bl	800f60c <_lv_mem_buf_release>
    if(dsc->pattern_image == NULL) return;
 800c17a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c17c:	2800      	cmp	r0, #0
 800c17e:	f000 8236 	beq.w	800c5ee <lv_draw_rect+0x5f6>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
 800c182:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800c186:	2b02      	cmp	r3, #2
 800c188:	f240 8231 	bls.w	800c5ee <lv_draw_rect+0x5f6>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
 800c18c:	f7fd fe9a 	bl	8009ec4 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 800c190:	2801      	cmp	r0, #1
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
 800c192:	4680      	mov	r8, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 800c194:	f200 8204 	bhi.w	800c5a0 <lv_draw_rect+0x5a8>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
 800c198:	a921      	add	r1, sp, #132	; 0x84
 800c19a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c19c:	f001 fcce 	bl	800db3c <lv_img_decoder_get_info>
        if(res != LV_RES_OK) {
 800c1a0:	2801      	cmp	r0, #1
 800c1a2:	f040 8224 	bne.w	800c5ee <lv_draw_rect+0x5f6>
        lv_draw_img_dsc_init(&img_dsc);
 800c1a6:	a816      	add	r0, sp, #88	; 0x58
        img_w = header.w;
 800c1a8:	9d21      	ldr	r5, [sp, #132]	; 0x84
        img_h = header.h;
 800c1aa:	f8bd 7086 	ldrh.w	r7, [sp, #134]	; 0x86
        lv_draw_img_dsc_init(&img_dsc);
 800c1ae:	f7fd fd7e 	bl	8009cae <lv_draw_img_dsc_init>
        img_dsc.opa = dsc->pattern_opa;
 800c1b2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        img_w = header.w;
 800c1b6:	f3c5 258a 	ubfx	r5, r5, #10, #11
        img_dsc.opa = dsc->pattern_opa;
 800c1ba:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
 800c1be:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
        img_h = header.h;
 800c1c2:	097f      	lsrs	r7, r7, #5
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
 800c1c4:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
        img_dsc.recolor = dsc->pattern_recolor;
 800c1c8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800c1ca:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    if(img_w == 0 || img_h == 0) return;
 800c1ce:	2d00      	cmp	r5, #0
 800c1d0:	f000 820d 	beq.w	800c5ee <lv_draw_rect+0x5f6>
 800c1d4:	2f00      	cmp	r7, #0
 800c1d6:	f000 820a 	beq.w	800c5ee <lv_draw_rect+0x5f6>
    if(dsc->pattern_repeat) {
 800c1da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800c1de:	fa1f fa87 	uxth.w	sl, r7
 800c1e2:	f10a 36ff 	add.w	r6, sl, #4294967295
 800c1e6:	07d8      	lsls	r0, r3, #31
 800c1e8:	f9b4 2000 	ldrsh.w	r2, [r4]
 800c1ec:	b2b6      	uxth	r6, r6
 800c1ee:	f140 8357 	bpl.w	800c8a0 <lv_draw_rect+0x8a8>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	4649      	mov	r1, r9
 800c1f6:	a81a      	add	r0, sp, #104	; 0x68
 800c1f8:	f7ff fc06 	bl	800ba08 <lv_draw_mask_radius_init>
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	a81a      	add	r0, sp, #104	; 0x68
 800c200:	f7ff fb0e 	bl	800b820 <lv_draw_mask_add>
 800c204:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800c208:	f8b9 2000 	ldrh.w	r2, [r9]
 800c20c:	3301      	adds	r3, #1
 800c20e:	1a9b      	subs	r3, r3, r2
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
 800c210:	b21b      	sxth	r3, r3
 800c212:	fb93 f2f5 	sdiv	r2, r3, r5
 800c216:	2102      	movs	r1, #2
 800c218:	fb05 3312 	mls	r3, r5, r2, r3
 800c21c:	fb93 f3f1 	sdiv	r3, r3, r1
 800c220:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c222:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 800c226:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 800c22a:	3301      	adds	r3, #1
 800c22c:	1a9b      	subs	r3, r3, r2
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
 800c22e:	b21b      	sxth	r3, r3
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 800c230:	4683      	mov	fp, r0
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
 800c232:	fb93 f0f7 	sdiv	r0, r3, r7
 800c236:	fb07 3710 	mls	r7, r7, r0, r3
 800c23a:	fb97 f7f1 	sdiv	r7, r7, r1
        coords_tmp.y1 = coords->y1 - ofs_y;
 800c23e:	1bd7      	subs	r7, r2, r7
 800c240:	b2bf      	uxth	r7, r7
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 800c242:	443e      	add	r6, r7
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 800c244:	b2ad      	uxth	r5, r5
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 800c246:	f8ad 6056 	strh.w	r6, [sp, #86]	; 0x56
        coords_tmp.y1 = coords->y1 - ofs_y;
 800c24a:	f8ad 7052 	strh.w	r7, [sp, #82]	; 0x52
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 800c24e:	1e6e      	subs	r6, r5, #1
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 800c250:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 800c254:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800c258:	429a      	cmp	r2, r3
 800c25a:	f340 82eb 	ble.w	800c834 <lv_draw_rect+0x83c>
        lv_draw_mask_remove_id(radius_mask_id);
 800c25e:	4658      	mov	r0, fp
        lv_draw_mask_remove_id(radius_mask_id);
 800c260:	f7ff fb18 	bl	800b894 <lv_draw_mask_remove_id>
 800c264:	e1c3      	b.n	800c5ee <lv_draw_rect+0x5f6>
    if(other_mask_cnt) simple_mode = false;
 800c266:	2300      	movs	r3, #0
 800c268:	e74c      	b.n	800c104 <lv_draw_rect+0x10c>
        if(rout > 0) {
 800c26a:	f1bb 0f00 	cmp.w	fp, #0
 800c26e:	f340 80a5 	ble.w	800c3bc <lv_draw_rect+0x3c4>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
 800c272:	2300      	movs	r3, #0
 800c274:	465a      	mov	r2, fp
 800c276:	a912      	add	r1, sp, #72	; 0x48
 800c278:	a821      	add	r0, sp, #132	; 0x84
 800c27a:	f7ff fbc5 	bl	800ba08 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800c27e:	2100      	movs	r1, #0
 800c280:	a821      	add	r0, sp, #132	; 0x84
 800c282:	f7ff facd 	bl	800b820 <lv_draw_mask_add>
 800c286:	900d      	str	r0, [sp, #52]	; 0x34
        lv_color_t grad_color = dsc->bg_color;
 800c288:	8863      	ldrh	r3, [r4, #2]
        if(grad_dir == LV_GRAD_DIR_HOR) {
 800c28a:	2d02      	cmp	r5, #2
        lv_color_t grad_color = dsc->bg_color;
 800c28c:	f8ad 301c 	strh.w	r3, [sp, #28]
        if(grad_dir == LV_GRAD_DIR_HOR) {
 800c290:	f040 80a4 	bne.w	800c3dc <lv_draw_rect+0x3e4>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800c294:	0078      	lsls	r0, r7, #1
 800c296:	f003 fb21 	bl	800f8dc <_lv_mem_buf_get>
            for(i = 0; i < coords_w; i++) {
 800c29a:	f04f 0800 	mov.w	r8, #0
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800c29e:	900a      	str	r0, [sp, #40]	; 0x28
            for(i = 0; i < coords_w; i++) {
 800c2a0:	4547      	cmp	r7, r8
 800c2a2:	f300 808f 	bgt.w	800c3c4 <lv_draw_rect+0x3cc>
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 800c2a6:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 800c2aa:	f9bd 1048 	ldrsh.w	r1, [sp, #72]	; 0x48
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c2ae:	1c53      	adds	r3, r2, #1
 800c2b0:	1a5b      	subs	r3, r3, r1
 800c2b2:	b21b      	sxth	r3, r3
 800c2b4:	eba3 034b 	sub.w	r3, r3, fp, lsl #1
 800c2b8:	930f      	str	r3, [sp, #60]	; 0x3c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800c2ba:	9b05      	ldr	r3, [sp, #20]
        fill_area.x2 = coords_bg.x2;
 800c2bc:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800c2c0:	8a5b      	ldrh	r3, [r3, #18]
 800c2c2:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
        fill_area.x1 = coords_bg.x1;
 800c2c6:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800c2ca:	4413      	add	r3, r2
 800c2cc:	b21b      	sxth	r3, r3
 800c2ce:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        fill_area.y2 = fill_area.y1;
 800c2d2:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800c2d6:	fa1f f38b 	uxth.w	r3, fp
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800c2da:	9206      	str	r2, [sp, #24]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800c2dc:	930e      	str	r3, [sp, #56]	; 0x38
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800c2de:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800c2e2:	9a06      	ldr	r2, [sp, #24]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	dd7c      	ble.n	800c3e2 <lv_draw_rect+0x3ea>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
 800c2e8:	2d00      	cmp	r5, #0
 800c2ea:	d15f      	bne.n	800c3ac <lv_draw_rect+0x3b4>
 800c2ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d15c      	bne.n	800c3ac <lv_draw_rect+0x3b4>
 800c2f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2f4:	2b32      	cmp	r3, #50	; 0x32
 800c2f6:	dd59      	ble.n	800c3ac <lv_draw_rect+0x3b4>
            fill_area.x1 = coords_bg.x1 + rout;
 800c2f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c2fc:	fa1f fb8b 	uxth.w	fp, fp
 800c300:	445b      	add	r3, fp
 800c302:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.x2 = coords_bg.x2 - rout;
 800c306:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
            _lv_blend_fill(clip, &fill_area,
 800c30a:	2501      	movs	r5, #1
            fill_area.x2 = coords_bg.x2 - rout;
 800c30c:	eba3 030b 	sub.w	r3, r3, fp
 800c310:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            fill_area.y1 = coords_bg.y1;
 800c314:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
            _lv_blend_fill(clip, &fill_area,
 800c318:	8862      	ldrh	r2, [r4, #2]
            fill_area.y1 = coords_bg.y1;
 800c31a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            fill_area.y2 = coords_bg.y1 + rout;
 800c31e:	445b      	add	r3, fp
 800c320:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            _lv_blend_fill(clip, &fill_area,
 800c324:	7b63      	ldrb	r3, [r4, #13]
 800c326:	a916      	add	r1, sp, #88	; 0x58
 800c328:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800c32c:	2301      	movs	r3, #1
 800c32e:	9804      	ldr	r0, [sp, #16]
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c334:	f7fc fb32 	bl	800899c <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
 800c338:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800c33c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
            fill_area.y1 = coords_bg.y2 - rout;
 800c340:	eba1 020b 	sub.w	r2, r1, fp
 800c344:	b212      	sxth	r2, r2
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800c346:	429a      	cmp	r2, r3
 800c348:	bfd8      	it	le
 800c34a:	3301      	addle	r3, #1
            fill_area.y1 = coords_bg.y2 - rout;
 800c34c:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800c350:	bfd8      	it	le
 800c352:	f8ad 305a 	strhle.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
 800c356:	7b63      	ldrb	r3, [r4, #13]
            fill_area.y2 = coords_bg.y2;
 800c358:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
            _lv_blend_fill(clip, &fill_area,
 800c35c:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800c360:	8862      	ldrh	r2, [r4, #2]
 800c362:	2300      	movs	r3, #0
 800c364:	a916      	add	r1, sp, #88	; 0x58
 800c366:	9804      	ldr	r0, [sp, #16]
 800c368:	9500      	str	r5, [sp, #0]
 800c36a:	f7fc fb17 	bl	800899c <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
 800c36e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
            _lv_blend_fill(clip, &fill_area,
 800c372:	9500      	str	r5, [sp, #0]
            fill_area.x1 = coords_bg.x1;
 800c374:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.x2 = coords_bg.x2;
 800c378:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
            _lv_blend_fill(clip, &fill_area,
 800c37c:	8862      	ldrh	r2, [r4, #2]
            fill_area.x2 = coords_bg.x2;
 800c37e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            fill_area.y1 = coords_bg.y1 + rout + 1;
 800c382:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
            _lv_blend_fill(clip, &fill_area,
 800c386:	a916      	add	r1, sp, #88	; 0x58
            fill_area.y1 = coords_bg.y1 + rout + 1;
 800c388:	442b      	add	r3, r5
 800c38a:	445b      	add	r3, fp
 800c38c:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800c390:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
            _lv_blend_fill(clip, &fill_area,
 800c394:	9804      	ldr	r0, [sp, #16]
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800c396:	3b01      	subs	r3, #1
 800c398:	eba3 0b0b 	sub.w	fp, r3, fp
            _lv_blend_fill(clip, &fill_area,
 800c39c:	7b63      	ldrb	r3, [r4, #13]
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800c39e:	f8ad b05e 	strh.w	fp, [sp, #94]	; 0x5e
            _lv_blend_fill(clip, &fill_area,
 800c3a2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f7fc faf8 	bl	800899c <_lv_blend_fill>
        if(grad_map) _lv_mem_buf_release(grad_map);
 800c3ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f43f aedd 	beq.w	800c16e <lv_draw_rect+0x176>
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f003 f929 	bl	800f60c <_lv_mem_buf_release>
 800c3ba:	e6d8      	b.n	800c16e <lv_draw_rect+0x176>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800c3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c0:	930d      	str	r3, [sp, #52]	; 0x34
 800c3c2:	e761      	b.n	800c288 <lv_draw_rect+0x290>
                grad_map[i] = grad_get(dsc, coords_w, i);
 800c3c4:	fa0f f288 	sxth.w	r2, r8
 800c3c8:	4639      	mov	r1, r7
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f7ff fb46 	bl	800ba5c <grad_get>
 800c3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3d2:	f823 0018 	strh.w	r0, [r3, r8, lsl #1]
            for(i = 0; i < coords_w; i++) {
 800c3d6:	f108 0801 	add.w	r8, r8, #1
 800c3da:	e761      	b.n	800c2a0 <lv_draw_rect+0x2a8>
        lv_color_t * grad_map = NULL;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	930a      	str	r3, [sp, #40]	; 0x28
 800c3e0:	e761      	b.n	800c2a6 <lv_draw_rect+0x2ae>
            int32_t y = h + vdb->area.y1;
 800c3e2:	9b05      	ldr	r3, [sp, #20]
 800c3e4:	9a06      	ldr	r2, [sp, #24]
 800c3e6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	930b      	str	r3, [sp, #44]	; 0x2c
            if(y > coords_bg.y1 + rout + 1 &&
 800c3ee:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 800c3f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3f4:	445b      	add	r3, fp
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	dd0a      	ble.n	800c412 <lv_draw_rect+0x41a>
               y < coords_bg.y2 - rout - 1) {
 800c3fc:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800c400:	eba3 030b 	sub.w	r3, r3, fp
 800c404:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
 800c406:	429a      	cmp	r2, r3
 800c408:	da03      	bge.n	800c412 <lv_draw_rect+0x41a>
                if(simple_mode == false) {
 800c40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f040 8395 	bne.w	800cb3c <lv_draw_rect+0xb44>
                _lv_memset(mask_buf, opa, draw_area_w);
 800c412:	9a08      	ldr	r2, [sp, #32]
 800c414:	4631      	mov	r1, r6
 800c416:	4650      	mov	r0, sl
 800c418:	f003 face 	bl	800f9b8 <_lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800c41c:	9b05      	ldr	r3, [sp, #20]
 800c41e:	4650      	mov	r0, sl
 800c420:	8a5a      	ldrh	r2, [r3, #18]
 800c422:	9b06      	ldr	r3, [sp, #24]
 800c424:	441a      	add	r2, r3
 800c426:	9b05      	ldr	r3, [sp, #20]
 800c428:	b212      	sxth	r2, r2
 800c42a:	8a19      	ldrh	r1, [r3, #16]
 800c42c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800c430:	4419      	add	r1, r3
 800c432:	b209      	sxth	r1, r1
 800c434:	9b08      	ldr	r3, [sp, #32]
 800c436:	f7ff fa09 	bl	800b84c <lv_draw_mask_apply>
            opa2 = opa;
 800c43a:	2802      	cmp	r0, #2
 800c43c:	bf14      	ite	ne
 800c43e:	46b0      	movne	r8, r6
 800c440:	f04f 08ff 	moveq.w	r8, #255	; 0xff
            if(grad_dir == LV_GRAD_DIR_VER) {
 800c444:	2d01      	cmp	r5, #1
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800c446:	4607      	mov	r7, r0
            if(grad_dir == LV_GRAD_DIR_VER) {
 800c448:	d17a      	bne.n	800c540 <lv_draw_rect+0x548>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c44a:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800c44e:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 800c452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c454:	3101      	adds	r1, #1
 800c456:	1ad2      	subs	r2, r2, r3
 800c458:	1ac9      	subs	r1, r1, r3
 800c45a:	b212      	sxth	r2, r2
 800c45c:	b209      	sxth	r1, r1
 800c45e:	4620      	mov	r0, r4
 800c460:	f7ff fafc 	bl	800ba5c <grad_get>
            if(simple_mode && split &&
 800c464:	9b09      	ldr	r3, [sp, #36]	; 0x24
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 800c466:	f8ad 001c 	strh.w	r0, [sp, #28]
            if(simple_mode && split &&
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f000 808f 	beq.w	800c58e <lv_draw_rect+0x596>
 800c470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c472:	2b32      	cmp	r3, #50	; 0x32
 800c474:	dd6f      	ble.n	800c556 <lv_draw_rect+0x55e>
               (y < coords_bg.y1 + rout + 1 ||
 800c476:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
            if(simple_mode && split &&
 800c47a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
               (y < coords_bg.y1 + rout + 1 ||
 800c47c:	445b      	add	r3, fp
            if(simple_mode && split &&
 800c47e:	429a      	cmp	r2, r3
 800c480:	dd05      	ble.n	800c48e <lv_draw_rect+0x496>
                y > coords_bg.y2 - rout - 1)) {
 800c482:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800c486:	eba3 030b 	sub.w	r3, r3, fp
               (y < coords_bg.y1 + rout + 1 ||
 800c48a:	429a      	cmp	r2, r3
 800c48c:	db63      	blt.n	800c556 <lv_draw_rect+0x55e>
                fill_area2.x1 = coords_bg.x1;
 800c48e:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800c492:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                fill_area2.x1 = coords_bg.x1;
 800c494:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800c498:	3b01      	subs	r3, #1
 800c49a:	4413      	add	r3, r2
 800c49c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                fill_area2.y1 = fill_area.y1;
 800c4a0:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
                _lv_blend_fill(clip, &fill_area2,
 800c4a4:	9700      	str	r7, [sp, #0]
                fill_area2.y1 = fill_area.y1;
 800c4a6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
                fill_area2.y2 = fill_area.y2;
 800c4aa:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
                _lv_blend_fill(clip, &fill_area2,
 800c4ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
                fill_area2.y2 = fill_area.y2;
 800c4b2:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
                _lv_blend_fill(clip, &fill_area2,
 800c4b6:	7b63      	ldrb	r3, [r4, #13]
 800c4b8:	a91a      	add	r1, sp, #104	; 0x68
 800c4ba:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800c4be:	9804      	ldr	r0, [sp, #16]
 800c4c0:	4653      	mov	r3, sl
 800c4c2:	f7fc fa6b 	bl	800899c <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
 800c4c6:	2d01      	cmp	r5, #1
 800c4c8:	d115      	bne.n	800c4f6 <lv_draw_rect+0x4fe>
                    fill_area2.x1 = coords_bg.x1 + rout;
 800c4ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
                    _lv_blend_fill(clip, &fill_area2,
 800c4d0:	9500      	str	r5, [sp, #0]
                    fill_area2.x1 = coords_bg.x1 + rout;
 800c4d2:	4413      	add	r3, r2
 800c4d4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                    fill_area2.x2 = coords_bg.x2 - rout;
 800c4d8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
                    _lv_blend_fill(clip, &fill_area2,
 800c4dc:	a91a      	add	r1, sp, #104	; 0x68
                    fill_area2.x2 = coords_bg.x2 - rout;
 800c4de:	1a9b      	subs	r3, r3, r2
 800c4e0:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                    _lv_blend_fill(clip, &fill_area2,
 800c4e4:	7b63      	ldrb	r3, [r4, #13]
 800c4e6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c4ea:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800c4ee:	9804      	ldr	r0, [sp, #16]
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	f7fc fa53 	bl	800899c <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800c4f6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 800c4fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c4fc:	1c5a      	adds	r2, r3, #1
 800c4fe:	1a52      	subs	r2, r2, r1
 800c500:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800c504:	9a05      	ldr	r2, [sp, #20]
 800c506:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
 800c50a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
                fill_area2.x2 = coords_bg.x2;
 800c50e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 800c512:	eba3 030b 	sub.w	r3, r3, fp
 800c516:	440a      	add	r2, r1
 800c518:	3301      	adds	r3, #1
 800c51a:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	bfac      	ite	ge
 800c520:	4453      	addge	r3, sl
 800c522:	f10a 0300 	addlt.w	r3, sl, #0
 800c526:	7b62      	ldrb	r2, [r4, #13]
 800c528:	9700      	str	r7, [sp, #0]
 800c52a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800c52e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c532:	a91a      	add	r1, sp, #104	; 0x68
                    _lv_blend_fill(clip, &fill_area,
 800c534:	9804      	ldr	r0, [sp, #16]
 800c536:	f7fc fa31 	bl	800899c <_lv_blend_fill>
 800c53a:	e018      	b.n	800c56e <lv_draw_rect+0x576>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800c53c:	462f      	mov	r7, r5
 800c53e:	e784      	b.n	800c44a <lv_draw_rect+0x452>
            if(simple_mode && split &&
 800c540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c542:	2b00      	cmp	r3, #0
 800c544:	d194      	bne.n	800c470 <lv_draw_rect+0x478>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800c546:	2d02      	cmp	r5, #2
 800c548:	d007      	beq.n	800c55a <lv_draw_rect+0x562>
                else if(other_mask_cnt != 0 || !split) {
 800c54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c54c:	b9fb      	cbnz	r3, 800c58e <lv_draw_rect+0x596>
 800c54e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c550:	2b32      	cmp	r3, #50	; 0x32
 800c552:	dc0c      	bgt.n	800c56e <lv_draw_rect+0x576>
 800c554:	e01b      	b.n	800c58e <lv_draw_rect+0x596>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800c556:	2d02      	cmp	r5, #2
 800c558:	d117      	bne.n	800c58a <lv_draw_rect+0x592>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
 800c55a:	7b63      	ldrb	r3, [r4, #13]
 800c55c:	9700      	str	r7, [sp, #0]
 800c55e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800c562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c564:	4653      	mov	r3, sl
 800c566:	a916      	add	r1, sp, #88	; 0x58
 800c568:	9804      	ldr	r0, [sp, #16]
 800c56a:	f7fc fd0d 	bl	8008f88 <_lv_blend_map>
            fill_area.y1++;
 800c56e:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 800c572:	3301      	adds	r3, #1
 800c574:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            fill_area.y2++;
 800c578:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800c57c:	3301      	adds	r3, #1
 800c57e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800c582:	9b06      	ldr	r3, [sp, #24]
 800c584:	3301      	adds	r3, #1
 800c586:	9306      	str	r3, [sp, #24]
 800c588:	e6a9      	b.n	800c2de <lv_draw_rect+0x2e6>
                else if(grad_dir == LV_GRAD_DIR_VER) {
 800c58a:	2d01      	cmp	r5, #1
 800c58c:	d1dd      	bne.n	800c54a <lv_draw_rect+0x552>
                    _lv_blend_fill(clip, &fill_area,
 800c58e:	7b63      	ldrb	r3, [r4, #13]
 800c590:	9700      	str	r7, [sp, #0]
 800c592:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800c596:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c59a:	4653      	mov	r3, sl
 800c59c:	a916      	add	r1, sp, #88	; 0x58
 800c59e:	e7c9      	b.n	800c534 <lv_draw_rect+0x53c>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800c5a0:	2802      	cmp	r0, #2
 800c5a2:	d11e      	bne.n	800c5e2 <lv_draw_rect+0x5ea>
        lv_draw_label_dsc_init(&label_dsc);
 800c5a4:	a821      	add	r0, sp, #132	; 0x84
 800c5a6:	f7fd fcb1 	bl	8009f0c <lv_draw_label_dsc_init>
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800c5aa:	2500      	movs	r5, #0
 800c5ac:	f647 4118 	movw	r1, #31768	; 0x7c18
        label_dsc.color = dsc->pattern_recolor;
 800c5b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800c5b2:	e9cd 1501 	strd	r1, r5, [sp, #4]
        label_dsc.color = dsc->pattern_recolor;
 800c5b6:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800c5ba:	f9bd 1092 	ldrsh.w	r1, [sp, #146]	; 0x92
        label_dsc.opa = dsc->pattern_opa;
 800c5be:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        label_dsc.font = dsc->pattern_font;
 800c5c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
        label_dsc.opa = dsc->pattern_opa;
 800c5c4:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800c5c8:	9100      	str	r1, [sp, #0]
 800c5ca:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800c5ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c5d0:	a81a      	add	r0, sp, #104	; 0x68
        label_dsc.font = dsc->pattern_font;
 800c5d2:	9223      	str	r2, [sp, #140]	; 0x8c
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800c5d4:	f004 f9e2 	bl	801099c <_lv_txt_get_size>
        img_w = s.x;
 800c5d8:	f9bd 5068 	ldrsh.w	r5, [sp, #104]	; 0x68
        img_h = s.y;
 800c5dc:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
 800c5e0:	e5f5      	b.n	800c1ce <lv_draw_rect+0x1d6>
        lv_draw_img(coords, clip, NULL, NULL);
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	9904      	ldr	r1, [sp, #16]
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	4648      	mov	r0, r9
 800c5ea:	f7fd fb97 	bl	8009d1c <lv_draw_img>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 800c5ee:	7d23      	ldrb	r3, [r4, #20]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d970      	bls.n	800c6d6 <lv_draw_rect+0x6de>
    if(dsc->border_width == 0) return;
 800c5f4:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d06c      	beq.n	800c6d6 <lv_draw_rect+0x6de>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 800c5fc:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d068      	beq.n	800c6d6 <lv_draw_rect+0x6de>
    if(dsc->border_post) return;
 800c604:	7da3      	ldrb	r3, [r4, #22]
 800c606:	07d9      	lsls	r1, r3, #31
 800c608:	d465      	bmi.n	800c6d6 <lv_draw_rect+0x6de>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c60a:	f8b9 5004 	ldrh.w	r5, [r9, #4]
 800c60e:	f8b9 3000 	ldrh.w	r3, [r9]
 800c612:	3501      	adds	r5, #1
 800c614:	1aed      	subs	r5, r5, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c616:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 800c61a:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 800c61e:	3301      	adds	r3, #1
 800c620:	1a5b      	subs	r3, r3, r1
    int32_t coords_h = lv_area_get_height(coords);
 800c622:	b21b      	sxth	r3, r3
    int32_t coords_w = lv_area_get_width(coords);
 800c624:	b22d      	sxth	r5, r5
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 800c626:	429d      	cmp	r5, r3
 800c628:	bfa8      	it	ge
 800c62a:	461d      	movge	r5, r3
    int32_t rout = dsc->radius;
 800c62c:	f9b4 2000 	ldrsh.w	r2, [r4]
    if(rout > short_side >> 1) rout = short_side >> 1;
 800c630:	106d      	asrs	r5, r5, #1
 800c632:	4295      	cmp	r5, r2
    lv_area_copy(&area_inner, coords);
 800c634:	4649      	mov	r1, r9
 800c636:	a812      	add	r0, sp, #72	; 0x48
 800c638:	bfa8      	it	ge
 800c63a:	4615      	movge	r5, r2
 800c63c:	f7ff fcae 	bl	800bf9c <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800c640:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800c644:	8a23      	ldrh	r3, [r4, #16]
 800c646:	b288      	uxth	r0, r1
 800c648:	f010 0f04 	tst.w	r0, #4
 800c64c:	bf14      	ite	ne
 800c64e:	461a      	movne	r2, r3
 800c650:	18ea      	addeq	r2, r5, r3
 800c652:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800c656:	bf04      	itt	eq
 800c658:	4252      	negeq	r2, r2
 800c65a:	b292      	uxtheq	r2, r2
 800c65c:	4432      	add	r2, r6
 800c65e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800c662:	0702      	lsls	r2, r0, #28
 800c664:	bf4c      	ite	mi
 800c666:	461a      	movmi	r2, r3
 800c668:	195a      	addpl	r2, r3, r5
 800c66a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800c66e:	bf5c      	itt	pl
 800c670:	4252      	negpl	r2, r2
 800c672:	b292      	uxthpl	r2, r2
 800c674:	1aba      	subs	r2, r7, r2
 800c676:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800c67a:	0782      	lsls	r2, r0, #30
 800c67c:	bf48      	it	mi
 800c67e:	461a      	movmi	r2, r3
 800c680:	461e      	mov	r6, r3
 800c682:	bf5c      	itt	pl
 800c684:	195a      	addpl	r2, r3, r5
 800c686:	4252      	negpl	r2, r2
 800c688:	f8bd 704a 	ldrh.w	r7, [sp, #74]	; 0x4a
 800c68c:	bf58      	it	pl
 800c68e:	b292      	uxthpl	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800c690:	07c0      	lsls	r0, r0, #31
 800c692:	bf58      	it	pl
 800c694:	195b      	addpl	r3, r3, r5
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800c696:	443a      	add	r2, r7
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800c698:	bf58      	it	pl
 800c69a:	425b      	negpl	r3, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800c69c:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800c6a0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 800c6a4:	bf58      	it	pl
 800c6a6:	b29e      	uxthpl	r6, r3
 800c6a8:	1b93      	subs	r3, r2, r6
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800c6aa:	290f      	cmp	r1, #15
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800c6ac:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 800c6b0:	f894 8014 	ldrb.w	r8, [r4, #20]
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800c6b4:	f040 814f 	bne.w	800c956 <lv_draw_rect+0x95e>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
 800c6b8:	7d62      	ldrb	r2, [r4, #21]
 800c6ba:	f9b4 3000 	ldrsh.w	r3, [r4]
 800c6be:	e9cd 8202 	strd	r8, r2, [sp, #8]
 800c6c2:	89e2      	ldrh	r2, [r4, #14]
 800c6c4:	4649      	mov	r1, r9
 800c6c6:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	a812      	add	r0, sp, #72	; 0x48
 800c6ce:	9200      	str	r2, [sp, #0]
 800c6d0:	9a04      	ldr	r2, [sp, #16]
 800c6d2:	f7ff fa18 	bl	800bb06 <draw_full_border>
    if(dsc->value_str == NULL) return;
 800c6d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	d05f      	beq.n	800c79c <lv_draw_rect+0x7a4>
    if(dsc->value_opa <= LV_OPA_MIN) return;
 800c6dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	d95b      	bls.n	800c79c <lv_draw_rect+0x7a4>
    _lv_txt_get_size(&s, dsc->value_str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
 800c6e4:	2500      	movs	r5, #0
 800c6e6:	f647 4218 	movw	r2, #31768	; 0x7c18
 800c6ea:	e9cd 2501 	strd	r2, r5, [sp, #4]
 800c6ee:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
 800c6f2:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 800c6f6:	9200      	str	r2, [sp, #0]
 800c6f8:	a814      	add	r0, sp, #80	; 0x50
 800c6fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c6fc:	f004 f94e 	bl	801099c <_lv_txt_get_size>
    value_area.x2 = s.x - 1;
 800c700:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 800c704:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
    value_area.x2 = s.x - 1;
 800c708:	3b01      	subs	r3, #1
 800c70a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    value_area.y2 = s.y - 1;
 800c70e:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 800c712:	a91a      	add	r1, sp, #104	; 0x68
    value_area.y2 = s.y - 1;
 800c714:	3b01      	subs	r3, #1
 800c716:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 800c71a:	4648      	mov	r0, r9
 800c71c:	ab16      	add	r3, sp, #88	; 0x58
    value_area.x1 = 0;
 800c71e:	951a      	str	r5, [sp, #104]	; 0x68
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 800c720:	f002 fb11 	bl	800ed46 <_lv_area_align>
    value_area.x1 += p_align.x + dsc->value_ofs_x;
 800c724:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800c728:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 800c72c:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
    value_area.x1 += p_align.x + dsc->value_ofs_x;
 800c730:	441a      	add	r2, r3
 800c732:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800c736:	b292      	uxth	r2, r2
 800c738:	4413      	add	r3, r2
 800c73a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 800c73e:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    lv_draw_label_dsc_init(&label_dsc);
 800c742:	a821      	add	r0, sp, #132	; 0x84
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 800c744:	440b      	add	r3, r1
 800c746:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	4419      	add	r1, r3
 800c74e:	f8ad 106a 	strh.w	r1, [sp, #106]	; 0x6a
    value_area.x2 += p_align.x + dsc->value_ofs_x;
 800c752:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 800c756:	440a      	add	r2, r1
 800c758:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
    value_area.y2 += p_align.y + dsc->value_ofs_y;
 800c75c:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 800c760:	4413      	add	r3, r2
 800c762:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    lv_draw_label_dsc_init(&label_dsc);
 800c766:	f7fd fbd1 	bl	8009f0c <lv_draw_label_dsc_init>
    label_dsc.font = dsc->value_font;
 800c76a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    lv_draw_label(&value_area, clip, &label_dsc, dsc->value_str, NULL);
 800c76c:	9500      	str	r5, [sp, #0]
    label_dsc.font = dsc->value_font;
 800c76e:	9323      	str	r3, [sp, #140]	; 0x8c
    label_dsc.letter_space = dsc->value_letter_space;
 800c770:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    lv_draw_label(&value_area, clip, &label_dsc, dsc->value_str, NULL);
 800c774:	aa21      	add	r2, sp, #132	; 0x84
    label_dsc.letter_space = dsc->value_letter_space;
 800c776:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
    label_dsc.line_space = dsc->value_line_space;
 800c77a:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    lv_draw_label(&value_area, clip, &label_dsc, dsc->value_str, NULL);
 800c77e:	9904      	ldr	r1, [sp, #16]
    label_dsc.line_space = dsc->value_line_space;
 800c780:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
    label_dsc.color = dsc->value_color;
 800c784:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    lv_draw_label(&value_area, clip, &label_dsc, dsc->value_str, NULL);
 800c788:	a81a      	add	r0, sp, #104	; 0x68
    label_dsc.color = dsc->value_color;
 800c78a:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    label_dsc.opa = dsc->value_opa;
 800c78e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c792:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    lv_draw_label(&value_area, clip, &label_dsc, dsc->value_str, NULL);
 800c796:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c798:	f7fd fbd0 	bl	8009f3c <lv_draw_label>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 800c79c:	7fa3      	ldrb	r3, [r4, #30]
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d945      	bls.n	800c82e <lv_draw_rect+0x836>
    if(dsc->outline_width == 0) return;
 800c7a2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d041      	beq.n	800c82e <lv_draw_rect+0x836>
    lv_area_copy(&area_inner, coords);
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	a81a      	add	r0, sp, #104	; 0x68
 800c7ae:	f7ff fbf5 	bl	800bf9c <lv_area_copy>
    area_inner.x1 -= dsc->outline_pad;
 800c7b2:	8ba3      	ldrh	r3, [r4, #28]
 800c7b4:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    lv_area_copy(&area_outer, &area_inner);
 800c7b8:	a91a      	add	r1, sp, #104	; 0x68
    area_inner.x1 -= dsc->outline_pad;
 800c7ba:	1ad2      	subs	r2, r2, r3
 800c7bc:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    area_inner.y1 -= dsc->outline_pad;
 800c7c0:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
    lv_area_copy(&area_outer, &area_inner);
 800c7c4:	a821      	add	r0, sp, #132	; 0x84
    area_inner.y1 -= dsc->outline_pad;
 800c7c6:	1ad2      	subs	r2, r2, r3
 800c7c8:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    area_inner.x2 += dsc->outline_pad;
 800c7cc:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800c7d0:	441a      	add	r2, r3
 800c7d2:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
    area_inner.y2 += dsc->outline_pad;
 800c7d6:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 800c7da:	4413      	add	r3, r2
 800c7dc:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    lv_area_copy(&area_outer, &area_inner);
 800c7e0:	f7ff fbdc 	bl	800bf9c <lv_area_copy>
    area_outer.x1 -= dsc->outline_width;
 800c7e4:	8b63      	ldrh	r3, [r4, #26]
 800c7e6:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800c7ea:	a921      	add	r1, sp, #132	; 0x84
    area_outer.x1 -= dsc->outline_width;
 800c7ec:	1ad2      	subs	r2, r2, r3
 800c7ee:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
    area_outer.x2 += dsc->outline_width;
 800c7f2:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800c7f6:	a81a      	add	r0, sp, #104	; 0x68
    area_outer.x2 += dsc->outline_width;
 800c7f8:	441a      	add	r2, r3
 800c7fa:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
    area_outer.y1 -= dsc->outline_width;
 800c7fe:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
 800c802:	1ad2      	subs	r2, r2, r3
 800c804:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
    area_outer.y2 += dsc->outline_width;
 800c808:	f8bd 208a 	ldrh.w	r2, [sp, #138]	; 0x8a
 800c80c:	4413      	add	r3, r2
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800c80e:	7fe2      	ldrb	r2, [r4, #31]
    area_outer.y2 += dsc->outline_width;
 800c810:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800c814:	9203      	str	r2, [sp, #12]
 800c816:	7fa2      	ldrb	r2, [r4, #30]
 800c818:	f9b4 3000 	ldrsh.w	r3, [r4]
 800c81c:	9202      	str	r2, [sp, #8]
 800c81e:	8b22      	ldrh	r2, [r4, #24]
 800c820:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	9200      	str	r2, [sp, #0]
 800c828:	9a04      	ldr	r2, [sp, #16]
 800c82a:	f7ff f96c 	bl	800bb06 <draw_full_border>
}
 800c82e:	b02b      	add	sp, #172	; 0xac
 800c830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            coords_tmp.x1 = coords->x1 - ofs_x;
 800c834:	f8b9 3000 	ldrh.w	r3, [r9]
 800c838:	9a05      	ldr	r2, [sp, #20]
 800c83a:	1a9b      	subs	r3, r3, r2
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 800c842:	4433      	add	r3, r6
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 800c844:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 800c848:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
 800c84c:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 800c850:	429a      	cmp	r2, r3
 800c852:	dd0a      	ble.n	800c86a <lv_draw_rect+0x872>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 800c854:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800c858:	4453      	add	r3, sl
 800c85a:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
 800c85e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800c862:	4453      	add	r3, sl
 800c864:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 800c868:	e4f2      	b.n	800c250 <lv_draw_rect+0x258>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 800c86a:	f1b8 0f02 	cmp.w	r8, #2
 800c86e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c870:	d110      	bne.n	800c894 <lv_draw_rect+0x89c>
 800c872:	2300      	movs	r3, #0
 800c874:	9904      	ldr	r1, [sp, #16]
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	a814      	add	r0, sp, #80	; 0x50
 800c87a:	4613      	mov	r3, r2
 800c87c:	aa21      	add	r2, sp, #132	; 0x84
 800c87e:	f7fd fb5d 	bl	8009f3c <lv_draw_label>
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 800c882:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800c886:	442b      	add	r3, r5
 800c888:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 800c88c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800c890:	442b      	add	r3, r5
 800c892:	e7d7      	b.n	800c844 <lv_draw_rect+0x84c>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 800c894:	ab16      	add	r3, sp, #88	; 0x58
 800c896:	9904      	ldr	r1, [sp, #16]
 800c898:	a814      	add	r0, sp, #80	; 0x50
 800c89a:	f7fd fa3f 	bl	8009d1c <lv_draw_img>
 800c89e:	e7f0      	b.n	800c882 <lv_draw_rect+0x88a>
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 800c8a0:	f04f 0e02 	mov.w	lr, #2
 800c8a4:	f8b9 3006 	ldrh.w	r3, [r9, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c8a8:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 800c8ac:	f8b9 c000 	ldrh.w	ip, [r9]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c8b0:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800c8b4:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c8b6:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c8b8:	1a1b      	subs	r3, r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c8ba:	eba1 010c 	sub.w	r1, r1, ip
        int32_t obj_h = lv_area_get_height(coords);
 800c8be:	b21b      	sxth	r3, r3
        int32_t obj_w = lv_area_get_width(coords);
 800c8c0:	b209      	sxth	r1, r1
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 800c8c2:	1b49      	subs	r1, r1, r5
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 800c8c4:	1bdf      	subs	r7, r3, r7
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 800c8c6:	fb91 f1fe 	sdiv	r1, r1, lr
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 800c8ca:	fb97 fefe 	sdiv	lr, r7, lr
 800c8ce:	4470      	add	r0, lr
 800c8d0:	b280      	uxth	r0, r0
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 800c8d2:	4461      	add	r1, ip
 800c8d4:	b289      	uxth	r1, r1
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 800c8d6:	3d01      	subs	r5, #1
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 800c8d8:	4406      	add	r6, r0
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 800c8da:	440d      	add	r5, r1
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 800c8dc:	b2b6      	uxth	r6, r6
        if(src_type == LV_IMG_SRC_SYMBOL) {
 800c8de:	f1b8 0f02 	cmp.w	r8, #2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 800c8e2:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 800c8e6:	f8ad 0052 	strh.w	r0, [sp, #82]	; 0x52
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 800c8ea:	f8ad 5054 	strh.w	r5, [sp, #84]	; 0x54
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 800c8ee:	f8ad 6056 	strh.w	r6, [sp, #86]	; 0x56
        if(src_type == LV_IMG_SRC_SYMBOL) {
 800c8f2:	d107      	bne.n	800c904 <lv_draw_rect+0x90c>
            coords_tmp.y1 += y_corr;
 800c8f4:	f007 0701 	and.w	r7, r7, #1
 800c8f8:	4438      	add	r0, r7
            coords_tmp.y2 += y_corr;
 800c8fa:	443e      	add	r6, r7
            coords_tmp.y1 += y_corr;
 800c8fc:	f8ad 0052 	strh.w	r0, [sp, #82]	; 0x52
            coords_tmp.y2 += y_corr;
 800c900:	f8ad 6056 	strh.w	r6, [sp, #86]	; 0x56
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
 800c904:	4649      	mov	r1, r9
 800c906:	a814      	add	r0, sp, #80	; 0x50
 800c908:	f002 f9cd 	bl	800eca6 <_lv_area_is_in>
 800c90c:	4605      	mov	r5, r0
 800c90e:	b9c8      	cbnz	r0, 800c944 <lv_draw_rect+0x94c>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 800c910:	4603      	mov	r3, r0
 800c912:	f9b4 2000 	ldrsh.w	r2, [r4]
 800c916:	4649      	mov	r1, r9
 800c918:	a81a      	add	r0, sp, #104	; 0x68
 800c91a:	f7ff f875 	bl	800ba08 <lv_draw_mask_radius_init>
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 800c91e:	4629      	mov	r1, r5
 800c920:	a81a      	add	r0, sp, #104	; 0x68
 800c922:	f7fe ff7d 	bl	800b820 <lv_draw_mask_add>
 800c926:	4605      	mov	r5, r0
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 800c928:	f1b8 0f02 	cmp.w	r8, #2
 800c92c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c92e:	d10c      	bne.n	800c94a <lv_draw_rect+0x952>
 800c930:	2300      	movs	r3, #0
 800c932:	9904      	ldr	r1, [sp, #16]
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	a814      	add	r0, sp, #80	; 0x50
 800c938:	4613      	mov	r3, r2
 800c93a:	aa21      	add	r2, sp, #132	; 0x84
 800c93c:	f7fd fafe 	bl	8009f3c <lv_draw_label>
        lv_draw_mask_remove_id(radius_mask_id);
 800c940:	4628      	mov	r0, r5
 800c942:	e48d      	b.n	800c260 <lv_draw_rect+0x268>
        int16_t radius_mask_id = LV_MASK_ID_INV;
 800c944:	f04f 35ff 	mov.w	r5, #4294967295
 800c948:	e7ee      	b.n	800c928 <lv_draw_rect+0x930>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 800c94a:	ab16      	add	r3, sp, #88	; 0x58
 800c94c:	9904      	ldr	r1, [sp, #16]
 800c94e:	a814      	add	r0, sp, #80	; 0x50
 800c950:	f7fd f9e4 	bl	8009d1c <lv_draw_img>
 800c954:	e7f4      	b.n	800c940 <lv_draw_rect+0x948>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c956:	f1b8 0ffe 	cmp.w	r8, #254	; 0xfe
 800c95a:	bf28      	it	cs
 800c95c:	f04f 08ff 	movcs.w	r8, #255	; 0xff
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800c960:	f7fa ff76 	bl	8007850 <_lv_refr_get_disp_refreshing>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c964:	f001 fd6f 	bl	800e446 <lv_disp_get_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800c968:	9a04      	ldr	r2, [sp, #16]
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c96a:	4607      	mov	r7, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800c96c:	4649      	mov	r1, r9
 800c96e:	a814      	add	r0, sp, #80	; 0x50
 800c970:	f002 f89d 	bl	800eaae <_lv_area_intersect>
        if(is_common == false) return;
 800c974:	2800      	cmp	r0, #0
 800c976:	f43f aeae 	beq.w	800c6d6 <lv_draw_rect+0x6de>
        draw_area.x1 -= disp_area->x1;
 800c97a:	8a39      	ldrh	r1, [r7, #16]
        draw_area.x2 -= disp_area->x1;
 800c97c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
        draw_area.x1 -= disp_area->x1;
 800c980:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
        draw_area.x2 -= disp_area->x1;
 800c984:	1a5b      	subs	r3, r3, r1
        draw_area.x1 -= disp_area->x1;
 800c986:	ebab 0b01 	sub.w	fp, fp, r1
        draw_area.x2 -= disp_area->x1;
 800c98a:	b29b      	uxth	r3, r3
        draw_area.y1 -= disp_area->y1;
 800c98c:	8a7e      	ldrh	r6, [r7, #18]
        draw_area.x1 -= disp_area->x1;
 800c98e:	fa1f f28b 	uxth.w	r2, fp
        draw_area.y1 -= disp_area->y1;
 800c992:	f8bd 0052 	ldrh.w	r0, [sp, #82]	; 0x52
 800c996:	f103 0b01 	add.w	fp, r3, #1
        draw_area.y2 -= disp_area->y1;
 800c99a:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 800c99e:	ebab 0b02 	sub.w	fp, fp, r2
        draw_area.y1 -= disp_area->y1;
 800c9a2:	1b80      	subs	r0, r0, r6
        draw_area.x2 -= disp_area->x1;
 800c9a4:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 800c9a8:	fa0f f38b 	sxth.w	r3, fp
        draw_area.y1 -= disp_area->y1;
 800c9ac:	f8ad 0052 	strh.w	r0, [sp, #82]	; 0x52
        draw_area.y2 -= disp_area->y1;
 800c9b0:	1b89      	subs	r1, r1, r6
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800c9b2:	4618      	mov	r0, r3
        draw_area.x1 -= disp_area->x1;
 800c9b4:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
        draw_area.y2 -= disp_area->y1;
 800c9b8:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
 800c9bc:	9305      	str	r3, [sp, #20]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800c9be:	f002 ff8d 	bl	800f8dc <_lv_mem_buf_get>
        if(rout > 0) {
 800c9c2:	2d00      	cmp	r5, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 800c9c4:	4683      	mov	fp, r0
        if(rout > 0) {
 800c9c6:	dd3e      	ble.n	800ca46 <lv_draw_rect+0xa4e>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	b22a      	sxth	r2, r5
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	a81a      	add	r0, sp, #104	; 0x68
 800c9d0:	f7ff f81a 	bl	800ba08 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	a81a      	add	r0, sp, #104	; 0x68
 800c9d8:	f7fe ff22 	bl	800b820 <lv_draw_mask_add>
 800c9dc:	9006      	str	r0, [sp, #24]
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
 800c9de:	8a22      	ldrh	r2, [r4, #16]
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	1aaa      	subs	r2, r5, r2
 800c9e4:	b212      	sxth	r2, r2
 800c9e6:	a912      	add	r1, sp, #72	; 0x48
 800c9e8:	a821      	add	r0, sp, #132	; 0x84
 800c9ea:	f7ff f80d 	bl	800ba08 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	a821      	add	r0, sp, #132	; 0x84
 800c9f2:	f7fe ff15 	bl	800b820 <lv_draw_mask_add>
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 800c9f6:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800c9fa:	f9bd 6052 	ldrsh.w	r6, [sp, #82]	; 0x52
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 800c9fe:	42ab      	cmp	r3, r5
 800ca00:	bfc8      	it	gt
 800ca02:	f103 35ff 	addgt.w	r5, r3, #4294967295
        lv_color_t color = dsc->border_color;
 800ca06:	89e3      	ldrh	r3, [r4, #14]
        fill_area.x1 = coords->x1;
 800ca08:	f9b9 2000 	ldrsh.w	r2, [r9]
        lv_color_t color = dsc->border_color;
 800ca0c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
 800ca10:	7d63      	ldrb	r3, [r4, #21]
        fill_area.x2 = coords->x2;
 800ca12:	f9b9 a004 	ldrsh.w	sl, [r9, #4]
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
 800ca16:	9308      	str	r3, [sp, #32]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800ca18:	8a7b      	ldrh	r3, [r7, #18]
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800ca1a:	9007      	str	r0, [sp, #28]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800ca1c:	4433      	add	r3, r6
 800ca1e:	b21b      	sxth	r3, r3
 800ca20:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        fill_area.y2 = fill_area.y1;
 800ca24:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800ca28:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
        fill_area.x1 = coords->x1;
 800ca2c:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800ca30:	2b04      	cmp	r3, #4
        fill_area.x2 = coords->x2;
 800ca32:	f8ad a05c 	strh.w	sl, [sp, #92]	; 0x5c
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800ca36:	d10a      	bne.n	800ca4e <lv_draw_rect+0xa56>
 800ca38:	eb02 0a05 	add.w	sl, r2, r5
 800ca3c:	f8ad a05c 	strh.w	sl, [sp, #92]	; 0x5c
        uint32_t buf_ofs = 0;
 800ca40:	f04f 0a00 	mov.w	sl, #0
 800ca44:	e00d      	b.n	800ca62 <lv_draw_rect+0xa6a>
        int16_t mask_rout_id = LV_MASK_ID_INV;
 800ca46:	f04f 33ff 	mov.w	r3, #4294967295
 800ca4a:	9306      	str	r3, [sp, #24]
 800ca4c:	e7c7      	b.n	800c9de <lv_draw_rect+0x9e6>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
 800ca4e:	2b08      	cmp	r3, #8
 800ca50:	d1f6      	bne.n	800ca40 <lv_draw_rect+0xa48>
            fill_area.x1 = coords->x2 - corner_size;
 800ca52:	ebaa 0a05 	sub.w	sl, sl, r5
 800ca56:	fa0f fa8a 	sxth.w	sl, sl
 800ca5a:	f8ad a058 	strh.w	sl, [sp, #88]	; 0x58
            buf_ofs = fill_area.x1 - coords->x1;
 800ca5e:	ebaa 0a02 	sub.w	sl, sl, r2
        volatile bool top_only = false;
 800ca62:	2200      	movs	r2, #0
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800ca64:	2b02      	cmp	r3, #2
        volatile bool top_only = false;
 800ca66:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
        volatile bool bottom_only = false;
 800ca6a:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800ca6e:	d11c      	bne.n	800caaa <lv_draw_rect+0xab2>
 800ca70:	2301      	movs	r3, #1
 800ca72:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800ca76:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800ca7a:	bb0b      	cbnz	r3, 800cac0 <lv_draw_rect+0xac8>
 800ca7c:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800ca80:	f083 0301 	eor.w	r3, r3, #1
 800ca84:	f003 0301 	and.w	r3, r3, #1
 800ca88:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 800ca8c:	44da      	add	sl, fp
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ca8e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 800ca92:	429e      	cmp	r6, r3
 800ca94:	dd16      	ble.n	800cac4 <lv_draw_rect+0xacc>
        lv_draw_mask_remove_id(mask_rin_id);
 800ca96:	9807      	ldr	r0, [sp, #28]
 800ca98:	f7fe fefc 	bl	800b894 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
 800ca9c:	9806      	ldr	r0, [sp, #24]
 800ca9e:	f7fe fef9 	bl	800b894 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
 800caa2:	4658      	mov	r0, fp
 800caa4:	f002 fdb2 	bl	800f60c <_lv_mem_buf_release>
 800caa8:	e615      	b.n	800c6d6 <lv_draw_rect+0x6de>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d102      	bne.n	800cab4 <lv_draw_rect+0xabc>
            bottom_only = true;
 800caae:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800cab2:	e7e0      	b.n	800ca76 <lv_draw_rect+0xa7e>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 800cab4:	2b03      	cmp	r3, #3
 800cab6:	d1de      	bne.n	800ca76 <lv_draw_rect+0xa7e>
            top_only = true;
 800cab8:	2301      	movs	r3, #1
 800caba:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 800cabe:	e7f6      	b.n	800caae <lv_draw_rect+0xab6>
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800cac0:	2300      	movs	r3, #0
 800cac2:	e7df      	b.n	800ca84 <lv_draw_rect+0xa8c>
            if(normal ||
 800cac4:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 800cac8:	b98b      	cbnz	r3, 800caee <lv_draw_rect+0xaf6>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800caca:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800cace:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
            if(normal ||
 800cad2:	b123      	cbz	r3, 800cade <lv_draw_rect+0xae6>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800cad4:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 800cad8:	442b      	add	r3, r5
 800cada:	429a      	cmp	r2, r3
 800cadc:	dd07      	ble.n	800caee <lv_draw_rect+0xaf6>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800cade:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800cae2:	b1fb      	cbz	r3, 800cb24 <lv_draw_rect+0xb2c>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800cae4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800cae8:	1b5b      	subs	r3, r3, r5
 800caea:	429a      	cmp	r2, r3
 800caec:	db1a      	blt.n	800cb24 <lv_draw_rect+0xb2c>
                _lv_memset_ff(mask_buf, draw_area_w);
 800caee:	9905      	ldr	r1, [sp, #20]
 800caf0:	4658      	mov	r0, fp
 800caf2:	f002 ffc0 	bl	800fa76 <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 800caf6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800cafa:	8a7a      	ldrh	r2, [r7, #18]
 800cafc:	8a39      	ldrh	r1, [r7, #16]
 800cafe:	4432      	add	r2, r6
 800cb00:	4419      	add	r1, r3
 800cb02:	b212      	sxth	r2, r2
 800cb04:	9b05      	ldr	r3, [sp, #20]
 800cb06:	b209      	sxth	r1, r1
 800cb08:	4658      	mov	r0, fp
 800cb0a:	f7fe fe9f 	bl	800b84c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 800cb0e:	9b08      	ldr	r3, [sp, #32]
 800cb10:	9000      	str	r0, [sp, #0]
 800cb12:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800cb16:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800cb1a:	4653      	mov	r3, sl
 800cb1c:	a916      	add	r1, sp, #88	; 0x58
 800cb1e:	9804      	ldr	r0, [sp, #16]
 800cb20:	f7fb ff3c 	bl	800899c <_lv_blend_fill>
            fill_area.y1++;
 800cb24:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800cb28:	3601      	adds	r6, #1
            fill_area.y1++;
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            fill_area.y2++;
 800cb30:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800cb34:	3301      	adds	r3, #1
 800cb36:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 800cb3a:	e7a8      	b.n	800ca8e <lv_draw_rect+0xa96>
            if(grad_dir == LV_GRAD_DIR_VER) {
 800cb3c:	2d01      	cmp	r5, #1
            opa2 = opa;
 800cb3e:	46b0      	mov	r8, r6
            if(grad_dir == LV_GRAD_DIR_VER) {
 800cb40:	f43f acfc 	beq.w	800c53c <lv_draw_rect+0x544>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800cb44:	2701      	movs	r7, #1
 800cb46:	e493      	b.n	800c470 <lv_draw_rect+0x478>

0800cb48 <lv_color_mix>:
{
 800cb48:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800cb4a:	f3c1 03c4 	ubfx	r3, r1, #3, #5
 800cb4e:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
 800cb52:	4373      	muls	r3, r6
 800cb54:	f3c0 04c4 	ubfx	r4, r0, #3, #5
 800cb58:	fb02 3404 	mla	r4, r2, r4, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cb5c:	f000 0707 	and.w	r7, r0, #7
 800cb60:	f3c0 3342 	ubfx	r3, r0, #13, #3
 800cb64:	f001 0c07 	and.w	ip, r1, #7
 800cb68:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb6c:	f3c1 3742 	ubfx	r7, r1, #13, #3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800cb70:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cb74:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800cb78:	f3c1 2104 	ubfx	r1, r1, #8, #5
 800cb7c:	4371      	muls	r1, r6
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cb7e:	4377      	muls	r7, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800cb80:	f3c0 2004 	ubfx	r0, r0, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cb84:	fb02 7303 	mla	r3, r2, r3, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800cb88:	fb02 1200 	mla	r2, r2, r0, r1
    return ret;
 800cb8c:	f04f 0000 	mov.w	r0, #0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cb90:	3380      	adds	r3, #128	; 0x80
 800cb92:	436b      	muls	r3, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800cb94:	3480      	adds	r4, #128	; 0x80
 800cb96:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800cb98:	3280      	adds	r2, #128	; 0x80
 800cb9a:	436a      	muls	r2, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cb9c:	0e99      	lsrs	r1, r3, #26
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800cb9e:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    return ret;
 800cba2:	f361 0002 	bfi	r0, r1, #0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800cba6:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    return ret;
 800cbaa:	f364 00c7 	bfi	r0, r4, #3, #5
 800cbae:	f362 200c 	bfi	r0, r2, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800cbb2:	0ddb      	lsrs	r3, r3, #23
    return ret;
 800cbb4:	f363 304f 	bfi	r0, r3, #13, #3
}
 800cbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbba <_lv_memcpy_small>:
    uint8_t * d8 = (uint8_t *)dst;
 800cbba:	4603      	mov	r3, r0
{
 800cbbc:	b510      	push	{r4, lr}
 800cbbe:	3901      	subs	r1, #1
 800cbc0:	4402      	add	r2, r0
    while(len) {
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d100      	bne.n	800cbc8 <_lv_memcpy_small+0xe>
}
 800cbc6:	bd10      	pop	{r4, pc}
        *d8 = *s8;
 800cbc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cbcc:	f803 4b01 	strb.w	r4, [r3], #1
 800cbd0:	e7f7      	b.n	800cbc2 <_lv_memcpy_small+0x8>

0800cbd2 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
 800cbd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbd4:	4616      	mov	r6, r2
    lv_color_t p_color = LV_COLOR_BLACK;
 800cbd6:	2200      	movs	r2, #0
{
 800cbd8:	4607      	mov	r7, r0
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 800cbda:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 800cbdc:	7800      	ldrb	r0, [r0, #0]
    lv_color_t p_color = LV_COLOR_BLACK;
 800cbde:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 800cbe2:	f000 021f 	and.w	r2, r0, #31
{
 800cbe6:	460c      	mov	r4, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 800cbe8:	1f11      	subs	r1, r2, #4
 800cbea:	2902      	cmp	r1, #2
 800cbec:	d813      	bhi.n	800cc16 <lv_img_buf_get_px_color+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 800cbee:	4610      	mov	r0, r2
 800cbf0:	f7fd f86e 	bl	8009cd0 <lv_img_cf_get_px_size>
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 800cbf4:	6839      	ldr	r1, [r7, #0]
 800cbf6:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 800cbfa:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800cbfe:	fb06 4101 	mla	r1, r6, r1, r4
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 800cc02:	2202      	movs	r2, #2
 800cc04:	fb00 5101 	mla	r1, r0, r1, r5
 800cc08:	a801      	add	r0, sp, #4
 800cc0a:	f7ff ffd6 	bl	800cbba <_lv_memcpy_small>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
        p_color = color;
    }
    return p_color;
}
 800cc0e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800cc12:	b003      	add	sp, #12
 800cc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 800cc16:	2a07      	cmp	r2, #7
 800cc18:	d114      	bne.n	800cc44 <lv_img_buf_get_px_color+0x72>
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 800cc1a:	683a      	ldr	r2, [r7, #0]
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800cc1c:	f004 0307 	and.w	r3, r4, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 800cc20:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800cc24:	3207      	adds	r2, #7
 800cc26:	10d2      	asrs	r2, r2, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800cc28:	fb06 5202 	mla	r2, r6, r2, r5
 800cc2c:	eb02 01e4 	add.w	r1, r2, r4, asr #3
 800cc30:	2201      	movs	r2, #1
 800cc32:	f1c3 0007 	rsb	r0, r3, #7
 800cc36:	7a0b      	ldrb	r3, [r1, #8]
 800cc38:	4082      	lsls	r2, r0
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	4103      	asrs	r3, r0
        p_color = color;
 800cc3e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800cc42:	e7e4      	b.n	800cc0e <lv_img_buf_get_px_color+0x3c>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 800cc44:	2a08      	cmp	r2, #8
 800cc46:	d116      	bne.n	800cc76 <lv_img_buf_get_px_color+0xa4>
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800cc48:	683b      	ldr	r3, [r7, #0]
        uint8_t bit = (x & 0x3) * 2;
 800cc4a:	f004 0003 	and.w	r0, r4, #3
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800cc4e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800cc52:	3303      	adds	r3, #3
 800cc54:	109b      	asrs	r3, r3, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800cc56:	fb06 5203 	mla	r2, r6, r3, r5
 800cc5a:	eb02 01a4 	add.w	r1, r2, r4, asr #2
 800cc5e:	2203      	movs	r2, #3
 800cc60:	0040      	lsls	r0, r0, #1
 800cc62:	7c0b      	ldrb	r3, [r1, #16]
 800cc64:	f1c0 0006 	rsb	r0, r0, #6
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800cc68:	4082      	lsls	r2, r0
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	fa43 f000 	asr.w	r0, r3, r0
 800cc70:	f8ad 0004 	strh.w	r0, [sp, #4]
 800cc74:	e7cb      	b.n	800cc0e <lv_img_buf_get_px_color+0x3c>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 800cc76:	2a09      	cmp	r2, #9
 800cc78:	d111      	bne.n	800cc9e <lv_img_buf_get_px_color+0xcc>
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800cc7a:	683b      	ldr	r3, [r7, #0]
        uint8_t bit = (x & 0x1) * 4;
 800cc7c:	f004 0001 	and.w	r0, r4, #1
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800cc80:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800cc84:	3301      	adds	r3, #1
 800cc86:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800cc88:	fb06 5203 	mla	r2, r6, r3, r5
 800cc8c:	0080      	lsls	r0, r0, #2
 800cc8e:	eb02 0164 	add.w	r1, r2, r4, asr #1
 800cc92:	f1c0 0004 	rsb	r0, r0, #4
 800cc96:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800cc9a:	220f      	movs	r2, #15
 800cc9c:	e7e4      	b.n	800cc68 <lv_img_buf_get_px_color+0x96>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 800cc9e:	2a0a      	cmp	r2, #10
 800cca0:	d108      	bne.n	800ccb4 <lv_img_buf_get_px_color+0xe2>
        uint32_t px  = dsc->header.w * y + x;
 800cca2:	683a      	ldr	r2, [r7, #0]
        p_color.full = buf_u8[px];
 800cca4:	1929      	adds	r1, r5, r4
        uint32_t px  = dsc->header.w * y + x;
 800cca6:	f3c2 228a 	ubfx	r2, r2, #10, #11
        p_color.full = buf_u8[px];
 800ccaa:	fb06 1102 	mla	r1, r6, r2, r1
 800ccae:	f891 3400 	ldrb.w	r3, [r1, #1024]	; 0x400
 800ccb2:	e7c4      	b.n	800cc3e <lv_img_buf_get_px_color+0x6c>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800ccb4:	3a0b      	subs	r2, #11
 800ccb6:	2a03      	cmp	r2, #3
 800ccb8:	d9c1      	bls.n	800cc3e <lv_img_buf_get_px_color+0x6c>
 800ccba:	e7a8      	b.n	800cc0e <lv_img_buf_get_px_color+0x3c>

0800ccbc <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 800ccbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccbe:	460b      	mov	r3, r1
    uint8_t * buf_u8 = (uint8_t *)dsc->data;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800ccc0:	7801      	ldrb	r1, [r0, #0]
{
 800ccc2:	b085      	sub	sp, #20
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800ccc4:	f001 011f 	and.w	r1, r1, #31
 800ccc8:	2905      	cmp	r1, #5
{
 800ccca:	4605      	mov	r5, r0
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 800cccc:	6884      	ldr	r4, [r0, #8]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800ccce:	d10a      	bne.n	800cce6 <lv_img_buf_get_px_alpha+0x2a>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800ccd0:	6801      	ldr	r1, [r0, #0]
 800ccd2:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800ccd6:	fb02 3301 	mla	r3, r2, r1, r3
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800ccda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ccde:	4423      	add	r3, r4
 800cce0:	7898      	ldrb	r0, [r3, #2]
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
}
 800cce2:	b005      	add	sp, #20
 800cce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 800cce6:	290b      	cmp	r1, #11
 800cce8:	d114      	bne.n	800cd14 <lv_img_buf_get_px_alpha+0x58>
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800ccea:	6829      	ldr	r1, [r5, #0]
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800ccec:	f003 0007 	and.w	r0, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800ccf0:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800ccf4:	3107      	adds	r1, #7
 800ccf6:	10c9      	asrs	r1, r1, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800ccf8:	fb02 4201 	mla	r2, r2, r1, r4
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800ccfc:	10db      	asrs	r3, r3, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800ccfe:	5cd3      	ldrb	r3, [r2, r3]
 800cd00:	2201      	movs	r2, #1
 800cd02:	f1c0 0007 	rsb	r0, r0, #7
 800cd06:	4082      	lsls	r2, r0
 800cd08:	4013      	ands	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 800cd0a:	4103      	asrs	r3, r0
 800cd0c:	bf0c      	ite	eq
 800cd0e:	20ff      	moveq	r0, #255	; 0xff
 800cd10:	2000      	movne	r0, #0
 800cd12:	e7e6      	b.n	800cce2 <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 800cd14:	290c      	cmp	r1, #12
 800cd16:	d118      	bne.n	800cd4a <lv_img_buf_get_px_alpha+0x8e>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800cd18:	4920      	ldr	r1, [pc, #128]	; (800cd9c <lv_img_buf_get_px_alpha+0xe0>)
        uint8_t bit = (x & 0x3) * 2;
 800cd1a:	f003 0003 	and.w	r0, r3, #3
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800cd1e:	9100      	str	r1, [sp, #0]
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800cd20:	6829      	ldr	r1, [r5, #0]
 800cd22:	109b      	asrs	r3, r3, #2
 800cd24:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800cd28:	3103      	adds	r1, #3
 800cd2a:	1089      	asrs	r1, r1, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800cd2c:	fb02 4201 	mla	r2, r2, r1, r4
 800cd30:	5cd3      	ldrb	r3, [r2, r3]
 800cd32:	2203      	movs	r2, #3
 800cd34:	0040      	lsls	r0, r0, #1
 800cd36:	f1c0 0006 	rsb	r0, r0, #6
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800cd3a:	4082      	lsls	r2, r0
 800cd3c:	4013      	ands	r3, r2
 800cd3e:	4103      	asrs	r3, r0
        return opa_table[px_opa];
 800cd40:	aa04      	add	r2, sp, #16
 800cd42:	4413      	add	r3, r2
 800cd44:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 800cd48:	e7cb      	b.n	800cce2 <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 800cd4a:	290d      	cmp	r1, #13
 800cd4c:	d11b      	bne.n	800cd86 <lv_img_buf_get_px_alpha+0xca>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 800cd4e:	46ec      	mov	ip, sp
 800cd50:	4e13      	ldr	r6, [pc, #76]	; (800cda0 <lv_img_buf_get_px_alpha+0xe4>)
 800cd52:	f106 0e10 	add.w	lr, r6, #16
 800cd56:	4667      	mov	r7, ip
 800cd58:	6830      	ldr	r0, [r6, #0]
 800cd5a:	6871      	ldr	r1, [r6, #4]
 800cd5c:	3608      	adds	r6, #8
 800cd5e:	c703      	stmia	r7!, {r0, r1}
 800cd60:	4576      	cmp	r6, lr
 800cd62:	46bc      	mov	ip, r7
 800cd64:	d1f7      	bne.n	800cd56 <lv_img_buf_get_px_alpha+0x9a>
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800cd66:	6829      	ldr	r1, [r5, #0]
        uint8_t bit = (x & 0x1) * 4;
 800cd68:	f003 0001 	and.w	r0, r3, #1
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800cd6c:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800cd70:	3101      	adds	r1, #1
 800cd72:	1049      	asrs	r1, r1, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800cd74:	fb02 4201 	mla	r2, r2, r1, r4
 800cd78:	0080      	lsls	r0, r0, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800cd7a:	105b      	asrs	r3, r3, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800cd7c:	5cd3      	ldrb	r3, [r2, r3]
 800cd7e:	f1c0 0004 	rsb	r0, r0, #4
 800cd82:	220f      	movs	r2, #15
 800cd84:	e7d9      	b.n	800cd3a <lv_img_buf_get_px_alpha+0x7e>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 800cd86:	290e      	cmp	r1, #14
        uint32_t px = dsc->header.w * y + x;
 800cd88:	bf09      	itett	eq
 800cd8a:	6801      	ldreq	r1, [r0, #0]
    return LV_OPA_COVER;
 800cd8c:	20ff      	movne	r0, #255	; 0xff
        uint32_t px = dsc->header.w * y + x;
 800cd8e:	f3c1 218a 	ubfxeq	r1, r1, #10, #11
        return buf_u8[px];
 800cd92:	fb02 4201 	mlaeq	r2, r2, r1, r4
 800cd96:	bf08      	it	eq
 800cd98:	5cd0      	ldrbeq	r0, [r2, r3]
 800cd9a:	e7a2      	b.n	800cce2 <lv_img_buf_get_px_alpha+0x26>
 800cd9c:	ffaa5500 	.word	0xffaa5500
 800cda0:	080158b6 	.word	0x080158b6

0800cda4 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
 800cda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;

    int32_t angle_low = dsc->cfg.angle / 10;
 800cda8:	f04f 090a 	mov.w	r9, #10
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800cdac:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
{
 800cdb0:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800cdb2:	021b      	lsls	r3, r3, #8
 800cdb4:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 800cdb6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int32_t angle_hight = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 800cdba:	f06f 0709 	mvn.w	r7, #9
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 800cdbe:	021b      	lsls	r3, r3, #8
 800cdc0:	6283      	str	r3, [r0, #40]	; 0x28
    int32_t angle_low = dsc->cfg.angle / 10;
 800cdc2:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800cdc6:	fb90 f5f9 	sdiv	r5, r0, r9

    int32_t s1 = _lv_trigo_sin(-angle_low);
 800cdca:	b2ae      	uxth	r6, r5
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 800cdcc:	fb07 0705 	mla	r7, r7, r5, r0
    int32_t s1 = _lv_trigo_sin(-angle_low);
 800cdd0:	4270      	negs	r0, r6
 800cdd2:	b200      	sxth	r0, r0
 800cdd4:	f002 fb0c 	bl	800f3f0 <_lv_trigo_sin>
    int32_t angle_hight = angle_low + 1;
 800cdd8:	3501      	adds	r5, #1
    int32_t s2 = _lv_trigo_sin(-angle_hight);
 800cdda:	b2ad      	uxth	r5, r5
    int32_t s1 = _lv_trigo_sin(-angle_low);
 800cddc:	4680      	mov	r8, r0
    int32_t s2 = _lv_trigo_sin(-angle_hight);
 800cdde:	4268      	negs	r0, r5
 800cde0:	b200      	sxth	r0, r0
 800cde2:	f002 fb05 	bl	800f3f0 <_lv_trigo_sin>
 800cde6:	4682      	mov	sl, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
 800cde8:	f1c6 005a 	rsb	r0, r6, #90	; 0x5a
 800cdec:	b200      	sxth	r0, r0
 800cdee:	f002 faff 	bl	800f3f0 <_lv_trigo_sin>
    int32_t c2 = _lv_trigo_sin(-angle_hight + 90);
 800cdf2:	f1c5 055a 	rsb	r5, r5, #90	; 0x5a
    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
 800cdf6:	4606      	mov	r6, r0
    int32_t c2 = _lv_trigo_sin(-angle_hight + 90);
 800cdf8:	b228      	sxth	r0, r5
 800cdfa:	f002 faf9 	bl	800f3f0 <_lv_trigo_sin>

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800cdfe:	fb07 f30a 	mul.w	r3, r7, sl
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800ce02:	4378      	muls	r0, r7
    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800ce04:	eba9 0207 	sub.w	r2, r9, r7
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800ce08:	fb02 0606 	mla	r6, r2, r6, r0
    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800ce0c:	fb02 3308 	mla	r3, r2, r8, r3
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800ce10:	fb96 f6f9 	sdiv	r6, r6, r9
    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800ce14:	fb93 f3f9 	sdiv	r3, r3, r9

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800ce18:	1176      	asrs	r6, r6, #5
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800ce1a:	115b      	asrs	r3, r3, #5
 800ce1c:	62e3      	str	r3, [r4, #44]	; 0x2c
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800ce1e:	6326      	str	r6, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 800ce20:	7ca0      	ldrb	r0, [r4, #18]
 800ce22:	f7fc ff5f 	bl	8009ce4 <lv_img_cf_is_chroma_keyed>
 800ce26:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ce2a:	f360 0300 	bfi	r3, r0, #0, #1
 800ce2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800ce32:	7ca0      	ldrb	r0, [r4, #18]
 800ce34:	f7fc ff63 	bl	8009cfe <lv_img_cf_has_alpha>
 800ce38:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ce3c:	7ca2      	ldrb	r2, [r4, #18]
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800ce3e:	f360 0341 	bfi	r3, r0, #1, #1
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ce42:	1f11      	subs	r1, r2, #4
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800ce44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ce48:	2902      	cmp	r1, #2
 800ce4a:	b2db      	uxtb	r3, r3
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
 800ce4c:	bf94      	ite	ls
 800ce4e:	f043 0304 	orrls.w	r3, r3, #4
    }
    else {
        dsc->tmp.native_color = 0;
 800ce52:	f36f 0382 	bfchi	r3, #2, #1
 800ce56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
 800ce5a:	6823      	ldr	r3, [r4, #0]
 800ce5c:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
 800ce5e:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 800ce60:	f003 031f 	and.w	r3, r3, #31
 800ce64:	f362 0304 	bfi	r3, r2, #0, #5
 800ce68:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
 800ce6a:	69a3      	ldr	r3, [r4, #24]
 800ce6c:	88a2      	ldrh	r2, [r4, #4]
 800ce6e:	f362 2394 	bfi	r3, r2, #10, #11
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
 800ce72:	88e2      	ldrh	r2, [r4, #6]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
 800ce74:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
 800ce76:	f3c3 430f 	ubfx	r3, r3, #16, #16
 800ce7a:	f362 134f 	bfi	r3, r2, #5, #11

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 800ce7e:	89e2      	ldrh	r2, [r4, #14]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
 800ce80:	8363      	strh	r3, [r4, #26]
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 800ce82:	0853      	lsrs	r3, r2, #1
 800ce84:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ce88:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce8c:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
 800ce8e:	23ff      	movs	r3, #255	; 0xff
 800ce90:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
 800ce92:	8a23      	ldrh	r3, [r4, #16]
 800ce94:	82a3      	strh	r3, [r4, #20]
}
 800ce96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ce9a <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 800ce9a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cea0:	4604      	mov	r4, r0
 800cea2:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 800cea6:	b953      	cbnz	r3, 800cebe <_lv_img_buf_get_transformed_area+0x24>
 800cea8:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 800ceac:	d107      	bne.n	800cebe <_lv_img_buf_get_transformed_area+0x24>
        res->x1 = 0;
        res->y1 = 0;
        res->x2 = w - 1;
 800ceae:	3901      	subs	r1, #1
        res->x1 = 0;
 800ceb0:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
 800ceb2:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
 800ceb4:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
 800ceb6:	3a01      	subs	r2, #1

    if(angle == 0) {
        res->x1 += pivot->x;
        res->y1 += pivot->y;
        res->x2 += pivot->x;
        res->y2 += pivot->y;
 800ceb8:	80e2      	strh	r2, [r4, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 800ceba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800cebe:	f9b6 c000 	ldrsh.w	ip, [r6]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800cec2:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800cec6:	f1cc 0700 	rsb	r7, ip, #0
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800ceca:	4245      	negs	r5, r0
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800cecc:	eba1 010c 	sub.w	r1, r1, ip
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800ced0:	1a12      	subs	r2, r2, r0
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800ced2:	fb0e f707 	mul.w	r7, lr, r7
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800ced6:	fb0e f505 	mul.w	r5, lr, r5
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800ceda:	fb0e f101 	mul.w	r1, lr, r1
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800cede:	fb0e f202 	mul.w	r2, lr, r2
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800cee2:	123f      	asrs	r7, r7, #8
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800cee4:	122d      	asrs	r5, r5, #8
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800cee6:	1209      	asrs	r1, r1, #8
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800cee8:	1212      	asrs	r2, r2, #8
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800ceea:	3f01      	subs	r7, #1
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800ceec:	3d01      	subs	r5, #1
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800ceee:	3102      	adds	r1, #2
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800cef0:	3202      	adds	r2, #2
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800cef2:	b2bf      	uxth	r7, r7
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800cef4:	b2ad      	uxth	r5, r5
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800cef6:	b289      	uxth	r1, r1
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800cef8:	b292      	uxth	r2, r2
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800cefa:	8027      	strh	r7, [r4, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800cefc:	8065      	strh	r5, [r4, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800cefe:	80a1      	strh	r1, [r4, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800cf00:	80e2      	strh	r2, [r4, #6]
    if(angle == 0) {
 800cf02:	b95b      	cbnz	r3, 800cf1c <_lv_img_buf_get_transformed_area+0x82>
        res->x1 += pivot->x;
 800cf04:	fa1f fc8c 	uxth.w	ip, ip
        res->y1 += pivot->y;
 800cf08:	b280      	uxth	r0, r0
        res->x1 += pivot->x;
 800cf0a:	4467      	add	r7, ip
        res->y1 += pivot->y;
 800cf0c:	4405      	add	r5, r0
        res->x2 += pivot->x;
 800cf0e:	448c      	add	ip, r1
        res->x1 += pivot->x;
 800cf10:	8027      	strh	r7, [r4, #0]
        res->y1 += pivot->y;
 800cf12:	8065      	strh	r5, [r4, #2]
        res->x2 += pivot->x;
 800cf14:	f8a4 c004 	strh.w	ip, [r4, #4]
        res->y2 += pivot->y;
 800cf18:	4402      	add	r2, r0
 800cf1a:	e7cd      	b.n	800ceb8 <_lv_img_buf_get_transformed_area+0x1e>
    int32_t angle_low = angle / 10;
 800cf1c:	f04f 0a0a 	mov.w	sl, #10
 800cf20:	fb93 f8fa 	sdiv	r8, r3, sl
    int32_t angle_rem = angle  - (angle_low * 10);
 800cf24:	f06f 0509 	mvn.w	r5, #9
    int32_t s1 = _lv_trigo_sin(angle_low);
 800cf28:	4640      	mov	r0, r8
    int32_t angle_rem = angle  - (angle_low * 10);
 800cf2a:	fb05 3508 	mla	r5, r5, r8, r3
    int32_t s1 = _lv_trigo_sin(angle_low);
 800cf2e:	f002 fa5f 	bl	800f3f0 <_lv_trigo_sin>
    int32_t angle_hight = angle_low + 1;
 800cf32:	f108 0b01 	add.w	fp, r8, #1
    int32_t s1 = _lv_trigo_sin(angle_low);
 800cf36:	4681      	mov	r9, r0
    int32_t s2 = _lv_trigo_sin(angle_hight);
 800cf38:	fa0f f08b 	sxth.w	r0, fp
 800cf3c:	f002 fa58 	bl	800f3f0 <_lv_trigo_sin>
 800cf40:	4683      	mov	fp, r0
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
 800cf42:	f108 005a 	add.w	r0, r8, #90	; 0x5a
 800cf46:	b200      	sxth	r0, r0
 800cf48:	f002 fa52 	bl	800f3f0 <_lv_trigo_sin>
 800cf4c:	4607      	mov	r7, r0
    int32_t c2 = _lv_trigo_sin(angle_hight + 90);
 800cf4e:	f108 005b 	add.w	r0, r8, #91	; 0x5b
 800cf52:	b200      	sxth	r0, r0
 800cf54:	f002 fa4c 	bl	800f3f0 <_lv_trigo_sin>
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800cf58:	fb05 f20b 	mul.w	r2, r5, fp
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800cf5c:	4368      	muls	r0, r5
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800cf5e:	ebaa 0105 	sub.w	r1, sl, r5
 800cf62:	fb01 2209 	mla	r2, r1, r9, r2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800cf66:	fb01 0707 	mla	r7, r1, r7, r0
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800cf6a:	fb92 f2fa 	sdiv	r2, r2, sl
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800cf6e:	fb97 f7fa 	sdiv	r7, r7, sl
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cf72:	f9b4 1000 	ldrsh.w	r1, [r4]
 800cf76:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cf7a:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800cf7e:	1152      	asrs	r2, r2, #5
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800cf80:	117f      	asrs	r7, r7, #5
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cf82:	fb07 fe01 	mul.w	lr, r7, r1
 800cf86:	fb02 f800 	mul.w	r8, r2, r0
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cf8a:	fb07 fb09 	mul.w	fp, r7, r9
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cf8e:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cf92:	f8b6 c000 	ldrh.w	ip, [r6]
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800cf96:	4351      	muls	r1, r2
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800cf98:	fb02 f909 	mul.w	r9, r2, r9
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cf9c:	fb02 f20a 	mul.w	r2, r2, sl
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfa0:	ebae 0508 	sub.w	r5, lr, r8
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfa4:	ebab 0808 	sub.w	r8, fp, r8
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfa8:	eb0c 25a5 	add.w	r5, ip, r5, asr #10
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfac:	eb0c 28a8 	add.w	r8, ip, r8, asr #10
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfb0:	b22d      	sxth	r5, r5
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfb2:	fa0f f888 	sxth.w	r8, r8
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 800cfb6:	4545      	cmp	r5, r8
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfb8:	ebae 0e02 	sub.w	lr, lr, r2
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfbc:	ebab 0202 	sub.w	r2, fp, r2
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfc0:	eb0c 2eae 	add.w	lr, ip, lr, asr #10
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfc4:	eb0c 2ca2 	add.w	ip, ip, r2, asr #10
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 800cfc8:	462a      	mov	r2, r5
 800cfca:	bfa8      	it	ge
 800cfcc:	4642      	movge	r2, r8
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfce:	fa0f fe8e 	sxth.w	lr, lr
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 800cfd2:	4572      	cmp	r2, lr
 800cfd4:	bfa8      	it	ge
 800cfd6:	4672      	movge	r2, lr
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800cfd8:	fa0f fc8c 	sxth.w	ip, ip
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 800cfdc:	4562      	cmp	r2, ip
 800cfde:	bfa8      	it	ge
 800cfe0:	4662      	movge	r2, ip
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 800cfe2:	4545      	cmp	r5, r8
 800cfe4:	bfb8      	it	lt
 800cfe6:	4645      	movlt	r5, r8
 800cfe8:	45ae      	cmp	lr, r5
 800cfea:	bfb8      	it	lt
 800cfec:	46ae      	movlt	lr, r5
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800cfee:	4378      	muls	r0, r7
 800cff0:	8876      	ldrh	r6, [r6, #2]
 800cff2:	180b      	adds	r3, r1, r0
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800cff4:	4448      	add	r0, r9
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800cff6:	eb06 23a3 	add.w	r3, r6, r3, asr #10
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800cffa:	eb06 20a0 	add.w	r0, r6, r0, asr #10
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800cffe:	b21b      	sxth	r3, r3
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800d000:	b200      	sxth	r0, r0
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 800d002:	45f4      	cmp	ip, lr
 800d004:	bfb8      	it	lt
 800d006:	46f4      	movlt	ip, lr
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 800d008:	4283      	cmp	r3, r0
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 800d00a:	8022      	strh	r2, [r4, #0]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 800d00c:	461a      	mov	r2, r3
 800d00e:	bfa8      	it	ge
 800d010:	4602      	movge	r2, r0
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800d012:	fb07 f70a 	mul.w	r7, r7, sl
 800d016:	4439      	add	r1, r7
 800d018:	eb06 21a1 	add.w	r1, r6, r1, asr #10
 800d01c:	b209      	sxth	r1, r1
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 800d01e:	428a      	cmp	r2, r1
 800d020:	bfa8      	it	ge
 800d022:	460a      	movge	r2, r1
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800d024:	444f      	add	r7, r9
 800d026:	eb06 26a7 	add.w	r6, r6, r7, asr #10
 800d02a:	b236      	sxth	r6, r6
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 800d02c:	42b2      	cmp	r2, r6
 800d02e:	bfa8      	it	ge
 800d030:	4632      	movge	r2, r6
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 800d032:	4283      	cmp	r3, r0
 800d034:	bfb8      	it	lt
 800d036:	4603      	movlt	r3, r0
 800d038:	4299      	cmp	r1, r3
 800d03a:	bfb8      	it	lt
 800d03c:	4619      	movlt	r1, r3
 800d03e:	428e      	cmp	r6, r1
 800d040:	bfb8      	it	lt
 800d042:	460e      	movlt	r6, r1
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 800d044:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 800d048:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 800d04a:	80e6      	strh	r6, [r4, #6]
 800d04c:	e735      	b.n	800ceba <_lv_img_buf_get_transformed_area+0x20>

0800d04e <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
 800d04e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const uint8_t * src_u8 = dsc->cfg.src;

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
 800d052:	f9b0 603c 	ldrsh.w	r6, [r0, #60]	; 0x3c
    int ys_fract = dsc->tmp.ys & 0xff;
 800d056:	f9b0 803e 	ldrsh.w	r8, [r0, #62]	; 0x3e
 800d05a:	b2f2      	uxtb	r2, r6
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
 800d05c:	2a6f      	cmp	r2, #111	; 0x6f
{
 800d05e:	b087      	sub	sp, #28
 800d060:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;
 800d062:	6805      	ldr	r5, [r0, #0]
 800d064:	fa5f f388 	uxtb.w	r3, r8
    if(xs_fract < 0x70) {
 800d068:	f200 80a6 	bhi.w	800d1b8 <_lv_img_buf_transform_anti_alias+0x16a>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 800d06c:	f9b0 b040 	ldrsh.w	fp, [r0, #64]	; 0x40
        xr = xs_fract + 0x80;
 800d070:	3e80      	subs	r6, #128	; 0x80
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 800d072:	f1bb 0f00 	cmp.w	fp, #0
 800d076:	bfd4      	ite	le
 800d078:	f04f 0b00 	movle.w	fp, #0
 800d07c:	f04f 0b01 	movgt.w	fp, #1
 800d080:	f1cb 0b00 	rsb	fp, fp, #0
    }
    else if(xs_fract > 0x90) {
        xn =  1;
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
        xr = (0xFF - xs_fract) + 0x80;
 800d084:	b2f6      	uxtb	r6, r6
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
 800d086:	2b6f      	cmp	r3, #111	; 0x6f
 800d088:	f200 80ab 	bhi.w	800d1e2 <_lv_img_buf_transform_anti_alias+0x194>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 800d08c:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42

        yr = ys_fract + 0x80;
 800d090:	f1a8 0880 	sub.w	r8, r8, #128	; 0x80
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 800d094:	2f00      	cmp	r7, #0
 800d096:	bfd4      	ite	le
 800d098:	2700      	movle	r7, #0
 800d09a:	2701      	movgt	r7, #1
 800d09c:	427f      	negs	r7, r7
    }
    else if(ys_fract > 0x90) {
        yn =  1;
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;

        yr = (0xFF - ys_fract) + 0x80;
 800d09e:	fa5f f888 	uxtb.w	r8, r8
    lv_color_t c00 = dsc->res.color;
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
 800d0a2:	7da3      	ldrb	r3, [r4, #22]
    lv_color_t c00 = dsc->res.color;
 800d0a4:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_opa_t a00 = dsc->res.opa;
 800d0a8:	9300      	str	r3, [sp, #0]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
 800d0aa:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800d0ae:	075b      	lsls	r3, r3, #29
 800d0b0:	f140 80a9 	bpl.w	800d206 <_lv_img_buf_transform_anti_alias+0x1b8>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 800d0b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d0b6:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800d0ba:	2202      	movs	r2, #2
 800d0bc:	fb0b 3101 	mla	r1, fp, r1, r3
 800d0c0:	a803      	add	r0, sp, #12
 800d0c2:	4429      	add	r1, r5
 800d0c4:	f7ff fd79 	bl	800cbba <_lv_memcpy_small>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 800d0c8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800d0cc:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800d0d0:	2202      	movs	r2, #2
 800d0d2:	4359      	muls	r1, r3
 800d0d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d0d6:	a804      	add	r0, sp, #16
 800d0d8:	fb07 3101 	mla	r1, r7, r1, r3
 800d0dc:	4429      	add	r1, r5
 800d0de:	f7ff fd6c 	bl	800cbba <_lv_memcpy_small>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
 800d0e2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d0e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d0e8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d0ec:	a805      	add	r0, sp, #20
 800d0ee:	4359      	muls	r1, r3
 800d0f0:	fb0b 2303 	mla	r3, fp, r3, r2
 800d0f4:	fb07 3101 	mla	r1, r7, r1, r3
 800d0f8:	2202      	movs	r2, #2
 800d0fa:	4429      	add	r1, r5
 800d0fc:	f7ff fd5d 	bl	800cbba <_lv_memcpy_small>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
 800d100:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800d104:	0798      	lsls	r0, r3, #30
 800d106:	f140 80d3 	bpl.w	800d2b0 <_lv_img_buf_transform_anti_alias+0x262>
 800d10a:	6c62      	ldr	r2, [r4, #68]	; 0x44
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800d10c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800d110:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800d114:	3a01      	subs	r2, #1
 800d116:	441a      	add	r2, r3
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800d118:	fb0b 2103 	mla	r1, fp, r3, r2
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800d11c:	4343      	muls	r3, r0
 800d11e:	435f      	muls	r7, r3
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800d120:	f815 b001 	ldrb.w	fp, [r5, r1]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800d124:	19eb      	adds	r3, r5, r7
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800d126:	440d      	add	r5, r1
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800d128:	5c9b      	ldrb	r3, [r3, r2]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800d12a:	5de8      	ldrb	r0, [r5, r7]
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
 800d12c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800d130:	0792      	lsls	r2, r2, #30
 800d132:	f140 80bd 	bpl.w	800d2b0 <_lv_img_buf_transform_anti_alias+0x262>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 800d136:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
 800d13a:	fb02 f50b 	mul.w	r5, r2, fp
 800d13e:	9900      	ldr	r1, [sp, #0]
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800d140:	4342      	muls	r2, r0
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 800d142:	fb06 5501 	mla	r5, r6, r1, r5
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800d146:	fb06 2203 	mla	r2, r6, r3, r2
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800d14a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800d14e:	fb08 f705 	mul.w	r7, r8, r5
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800d152:	f3c2 2207 	ubfx	r2, r2, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800d156:	f1c8 01ff 	rsb	r1, r8, #255	; 0xff
 800d15a:	fb02 7101 	mla	r1, r2, r1, r7

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800d15e:	2d02      	cmp	r5, #2
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800d160:	ea4f 2121 	mov.w	r1, r1, asr #8
 800d164:	75a1      	strb	r1, [r4, #22]
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800d166:	f200 809e 	bhi.w	800d2a6 <_lv_img_buf_transform_anti_alias+0x258>
 800d16a:	2a02      	cmp	r2, #2
 800d16c:	f240 80c8 	bls.w	800d300 <_lv_img_buf_transform_anti_alias+0x2b2>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 800d170:	f04f 0800 	mov.w	r8, #0
    lv_opa_t xr0 = xr;
 800d174:	9a00      	ldr	r2, [sp, #0]
 800d176:	2a03      	cmp	r2, #3
 800d178:	bf2c      	ite	cs
 800d17a:	4632      	movcs	r2, r6
 800d17c:	2200      	movcc	r2, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 800d17e:	f1bb 0f02 	cmp.w	fp, #2
 800d182:	bf98      	it	ls
 800d184:	22ff      	movls	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 800d186:	2b02      	cmp	r3, #2
 800d188:	bf98      	it	ls
 800d18a:	2600      	movls	r6, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 800d18c:	2802      	cmp	r0, #2
 800d18e:	bf98      	it	ls
 800d190:	26ff      	movls	r6, #255	; 0xff
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 800d192:	2a00      	cmp	r2, #0
 800d194:	f040 8090 	bne.w	800d2b8 <_lv_img_buf_transform_anti_alias+0x26a>
 800d198:	f8bd 900c 	ldrh.w	r9, [sp, #12]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
 800d19c:	2e00      	cmp	r6, #0
 800d19e:	f040 8095 	bne.w	800d2cc <_lv_img_buf_transform_anti_alias+0x27e>
 800d1a2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 800d1a6:	f1b8 0f00 	cmp.w	r8, #0
 800d1aa:	f040 809d 	bne.w	800d2e8 <_lv_img_buf_transform_anti_alias+0x29a>
 800d1ae:	82a1      	strh	r1, [r4, #20]
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    else dsc->res.color = lv_color_mix(c0, c1, yr);

    return true;
 800d1b0:	2001      	movs	r0, #1
}
 800d1b2:	b007      	add	sp, #28
 800d1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(xs_fract > 0x90) {
 800d1b8:	2a90      	cmp	r2, #144	; 0x90
 800d1ba:	d90e      	bls.n	800d1da <_lv_img_buf_transform_anti_alias+0x18c>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 800d1bc:	f9b0 b040 	ldrsh.w	fp, [r0, #64]	; 0x40
 800d1c0:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800d1c4:	f10b 0b01 	add.w	fp, fp, #1
 800d1c8:	458b      	cmp	fp, r1
 800d1ca:	bfac      	ite	ge
 800d1cc:	f04f 0b00 	movge.w	fp, #0
 800d1d0:	f04f 0b01 	movlt.w	fp, #1
        xr = (0xFF - xs_fract) + 0x80;
 800d1d4:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
 800d1d8:	e754      	b.n	800d084 <_lv_img_buf_transform_anti_alias+0x36>
        xr = 0xFF;
 800d1da:	26ff      	movs	r6, #255	; 0xff
        xn = 0;
 800d1dc:	f04f 0b00 	mov.w	fp, #0
 800d1e0:	e751      	b.n	800d086 <_lv_img_buf_transform_anti_alias+0x38>
    else if(ys_fract > 0x90) {
 800d1e2:	2b90      	cmp	r3, #144	; 0x90
 800d1e4:	d90b      	bls.n	800d1fe <_lv_img_buf_transform_anti_alias+0x1b0>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 800d1e6:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
 800d1ea:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d1ee:	3701      	adds	r7, #1
 800d1f0:	4297      	cmp	r7, r2
 800d1f2:	bfac      	ite	ge
 800d1f4:	2700      	movge	r7, #0
 800d1f6:	2701      	movlt	r7, #1
        yr = (0xFF - ys_fract) + 0x80;
 800d1f8:	f1c8 087f 	rsb	r8, r8, #127	; 0x7f
 800d1fc:	e74f      	b.n	800d09e <_lv_img_buf_transform_anti_alias+0x50>
        yr = 0xFF;
 800d1fe:	f04f 08ff 	mov.w	r8, #255	; 0xff
        yn = 0;
 800d202:	2700      	movs	r7, #0
 800d204:	e74d      	b.n	800d0a2 <_lv_img_buf_transform_anti_alias+0x54>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 800d206:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800d20a:	fa1f f58b 	uxth.w	r5, fp
 800d20e:	f104 0a18 	add.w	sl, r4, #24
 800d212:	4429      	add	r1, r5
 800d214:	8a23      	ldrh	r3, [r4, #16]
 800d216:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800d21a:	b209      	sxth	r1, r1
 800d21c:	4650      	mov	r0, sl
 800d21e:	f7ff fcd8 	bl	800cbd2 <lv_img_buf_get_px_color>
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800d222:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800d226:	b2bf      	uxth	r7, r7
 800d228:	443a      	add	r2, r7
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 800d22a:	f8ad 000c 	strh.w	r0, [sp, #12]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800d22e:	8a23      	ldrh	r3, [r4, #16]
 800d230:	b212      	sxth	r2, r2
 800d232:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800d236:	4650      	mov	r0, sl
 800d238:	f7ff fccb 	bl	800cbd2 <lv_img_buf_get_px_color>
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800d23c:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800d240:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800d244:	443a      	add	r2, r7
 800d246:	4429      	add	r1, r5
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800d248:	f8ad 0010 	strh.w	r0, [sp, #16]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800d24c:	8a23      	ldrh	r3, [r4, #16]
 800d24e:	b209      	sxth	r1, r1
 800d250:	b212      	sxth	r2, r2
 800d252:	4650      	mov	r0, sl
 800d254:	f7ff fcbd 	bl	800cbd2 <lv_img_buf_get_px_color>
        if(dsc->tmp.has_alpha) {
 800d258:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800d25c:	f8ad 0014 	strh.w	r0, [sp, #20]
        if(dsc->tmp.has_alpha) {
 800d260:	0799      	lsls	r1, r3, #30
 800d262:	d525      	bpl.n	800d2b0 <_lv_img_buf_transform_anti_alias+0x262>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 800d264:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800d268:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800d26c:	4429      	add	r1, r5
 800d26e:	b209      	sxth	r1, r1
 800d270:	4650      	mov	r0, sl
 800d272:	f7ff fd23 	bl	800ccbc <lv_img_buf_get_px_alpha>
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800d276:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800d27a:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800d27e:	443a      	add	r2, r7
 800d280:	b212      	sxth	r2, r2
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 800d282:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800d284:	4650      	mov	r0, sl
 800d286:	f7ff fd19 	bl	800ccbc <lv_img_buf_get_px_alpha>
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 800d28a:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800d28e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800d292:	443a      	add	r2, r7
 800d294:	4429      	add	r1, r5
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800d296:	9001      	str	r0, [sp, #4]
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 800d298:	b212      	sxth	r2, r2
 800d29a:	b209      	sxth	r1, r1
 800d29c:	4650      	mov	r0, sl
 800d29e:	f7ff fd0d 	bl	800ccbc <lv_img_buf_get_px_alpha>
 800d2a2:	9b01      	ldr	r3, [sp, #4]
 800d2a4:	e742      	b.n	800d12c <_lv_img_buf_transform_anti_alias+0xde>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
 800d2a6:	2a02      	cmp	r2, #2
 800d2a8:	bf98      	it	ls
 800d2aa:	f04f 08ff 	movls.w	r8, #255	; 0xff
 800d2ae:	e761      	b.n	800d174 <_lv_img_buf_transform_anti_alias+0x126>
        dsc->res.opa = LV_OPA_COVER;
 800d2b0:	23ff      	movs	r3, #255	; 0xff
        xr0 = xr;
 800d2b2:	4632      	mov	r2, r6
        dsc->res.opa = LV_OPA_COVER;
 800d2b4:	75a3      	strb	r3, [r4, #22]
 800d2b6:	e76c      	b.n	800d192 <_lv_img_buf_transform_anti_alias+0x144>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 800d2b8:	2aff      	cmp	r2, #255	; 0xff
 800d2ba:	f43f af6f 	beq.w	800d19c <_lv_img_buf_transform_anti_alias+0x14e>
    else c0 = lv_color_mix(c00, c01, xr0);
 800d2be:	4648      	mov	r0, r9
 800d2c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d2c4:	f7ff fc40 	bl	800cb48 <lv_color_mix>
 800d2c8:	4681      	mov	r9, r0
 800d2ca:	e767      	b.n	800d19c <_lv_img_buf_transform_anti_alias+0x14e>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
 800d2cc:	2eff      	cmp	r6, #255	; 0xff
 800d2ce:	d102      	bne.n	800d2d6 <_lv_img_buf_transform_anti_alias+0x288>
 800d2d0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800d2d4:	e767      	b.n	800d1a6 <_lv_img_buf_transform_anti_alias+0x158>
    else c1 = lv_color_mix(c10, c11, xr1);
 800d2d6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800d2da:	4632      	mov	r2, r6
 800d2dc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800d2e0:	f7ff fc32 	bl	800cb48 <lv_color_mix>
 800d2e4:	4601      	mov	r1, r0
 800d2e6:	e75e      	b.n	800d1a6 <_lv_img_buf_transform_anti_alias+0x158>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 800d2e8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800d2ec:	d102      	bne.n	800d2f4 <_lv_img_buf_transform_anti_alias+0x2a6>
 800d2ee:	f8a4 9014 	strh.w	r9, [r4, #20]
 800d2f2:	e75d      	b.n	800d1b0 <_lv_img_buf_transform_anti_alias+0x162>
    else dsc->res.color = lv_color_mix(c0, c1, yr);
 800d2f4:	4642      	mov	r2, r8
 800d2f6:	4648      	mov	r0, r9
 800d2f8:	f7ff fc26 	bl	800cb48 <lv_color_mix>
 800d2fc:	82a0      	strh	r0, [r4, #20]
 800d2fe:	e757      	b.n	800d1b0 <_lv_img_buf_transform_anti_alias+0x162>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800d300:	2000      	movs	r0, #0
 800d302:	e756      	b.n	800d1b2 <_lv_img_buf_transform_anti_alias+0x164>

0800d304 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
 800d304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(entry_cnt == 0) {
 800d308:	4b43      	ldr	r3, [pc, #268]	; (800d418 <_lv_img_cache_open+0x114>)
{
 800d30a:	4606      	mov	r6, r0
    if(entry_cnt == 0) {
 800d30c:	881c      	ldrh	r4, [r3, #0]
{
 800d30e:	460f      	mov	r7, r1
 800d310:	4698      	mov	r8, r3
    if(entry_cnt == 0) {
 800d312:	2c00      	cmp	r4, #0
 800d314:	d05c      	beq.n	800d3d0 <_lv_img_cache_open+0xcc>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800d316:	4b41      	ldr	r3, [pc, #260]	; (800d41c <_lv_img_cache_open+0x118>)
 800d318:	2224      	movs	r2, #36	; 0x24
 800d31a:	681d      	ldr	r5, [r3, #0]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800d31c:	4940      	ldr	r1, [pc, #256]	; (800d420 <_lv_img_cache_open+0x11c>)
 800d31e:	462b      	mov	r3, r5
 800d320:	fb02 5404 	mla	r4, r2, r4, r5
    for(i = 0; i < entry_cnt; i++) {
 800d324:	429c      	cmp	r4, r3
 800d326:	d133      	bne.n	800d390 <_lv_img_cache_open+0x8c>
 800d328:	f04f 0900 	mov.w	r9, #0

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
 800d32c:	f04f 0a24 	mov.w	sl, #36	; 0x24
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
 800d330:	fa1f fb87 	uxth.w	fp, r7
    for(i = 0; i < entry_cnt; i++) {
 800d334:	f8b8 0000 	ldrh.w	r0, [r8]
 800d338:	fa1f f389 	uxth.w	r3, r9
 800d33c:	4298      	cmp	r0, r3
 800d33e:	d830      	bhi.n	800d3a2 <_lv_img_cache_open+0x9e>
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
        /*Find an entry to reuse. Select the entry with the least life*/
        cached_src = &cache[0];
 800d340:	462c      	mov	r4, r5
        for(i = 1; i < entry_cnt; i++) {
 800d342:	2301      	movs	r3, #1
 800d344:	f105 0224 	add.w	r2, r5, #36	; 0x24
 800d348:	4298      	cmp	r0, r3
 800d34a:	d84f      	bhi.n	800d3ec <_lv_img_cache_open+0xe8>
                cached_src = &cache[i];
            }
        }

        /*Close the decoder to reuse if it was opened (has a valid source)*/
        if(cached_src->dec_dsc.src) {
 800d34c:	6863      	ldr	r3, [r4, #4]
 800d34e:	b113      	cbz	r3, 800d356 <_lv_img_cache_open+0x52>
            lv_img_decoder_close(&cached_src->dec_dsc);
 800d350:	4620      	mov	r0, r4
 800d352:	f000 fc73 	bl	800dc3c <lv_img_decoder_close>
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
        }

        /*Open the image and measure the time to open*/
        uint32_t t_start;
        t_start                          = lv_tick_get();
 800d356:	f001 f9a9 	bl	800e6ac <lv_tick_get>
        cached_src->dec_dsc.time_to_open = 0;
 800d35a:	2500      	movs	r5, #0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 800d35c:	4631      	mov	r1, r6
        t_start                          = lv_tick_get();
 800d35e:	4680      	mov	r8, r0
        cached_src->dec_dsc.time_to_open = 0;
 800d360:	6165      	str	r5, [r4, #20]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 800d362:	463a      	mov	r2, r7
 800d364:	4620      	mov	r0, r4
 800d366:	f000 fc13 	bl	800db90 <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
 800d36a:	4606      	mov	r6, r0
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d146      	bne.n	800d3fe <_lv_img_cache_open+0xfa>
            LV_LOG_WARN("Image draw cannot open the image resource");
            lv_img_decoder_close(&cached_src->dec_dsc);
 800d370:	4620      	mov	r0, r4
 800d372:	f000 fc63 	bl	800dc3c <lv_img_decoder_close>
            _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
 800d376:	4620      	mov	r0, r4
 800d378:	2120      	movs	r1, #32
 800d37a:	f002 fb4d 	bl	800fa18 <_lv_memset_00>
            _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
 800d37e:	4620      	mov	r0, r4
 800d380:	2124      	movs	r1, #36	; 0x24
 800d382:	f002 fb49 	bl	800fa18 <_lv_memset_00>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 800d386:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d38a:	6223      	str	r3, [r4, #32]
            return NULL;
 800d38c:	4634      	mov	r4, r6
 800d38e:	e01f      	b.n	800d3d0 <_lv_img_cache_open+0xcc>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800d390:	6a1a      	ldr	r2, [r3, #32]
 800d392:	3324      	adds	r3, #36	; 0x24
 800d394:	428a      	cmp	r2, r1
            cache[i].life -= LV_IMG_CACHE_AGING;
 800d396:	bfa4      	itt	ge
 800d398:	f102 32ff 	addge.w	r2, r2, #4294967295
 800d39c:	f843 2c04 	strge.w	r2, [r3, #-4]
 800d3a0:	e7c0      	b.n	800d324 <_lv_img_cache_open+0x20>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
 800d3a2:	fa1f f489 	uxth.w	r4, r9
 800d3a6:	fb0a 5404 	mla	r4, sl, r4, r5
 800d3aa:	6860      	ldr	r0, [r4, #4]
 800d3ac:	f7fc fd8a 	bl	8009ec4 <lv_img_src_get_type>
        if(src_type == LV_IMG_SRC_VARIABLE) {
 800d3b0:	b988      	cbnz	r0, 800d3d6 <_lv_img_cache_open+0xd2>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
 800d3b2:	6863      	ldr	r3, [r4, #4]
 800d3b4:	42b3      	cmp	r3, r6
 800d3b6:	d116      	bne.n	800d3e6 <_lv_img_cache_open+0xe2>
 800d3b8:	8923      	ldrh	r3, [r4, #8]
 800d3ba:	455b      	cmp	r3, fp
 800d3bc:	d113      	bne.n	800d3e6 <_lv_img_cache_open+0xe2>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 800d3be:	6a23      	ldr	r3, [r4, #32]
 800d3c0:	6962      	ldr	r2, [r4, #20]
 800d3c2:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 800d3c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3c8:	bfc8      	it	gt
 800d3ca:	f44f 737a 	movgt.w	r3, #1000	; 0x3e8
 800d3ce:	6223      	str	r3, [r4, #32]

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(src_type == LV_IMG_SRC_FILE) {
 800d3d6:	2801      	cmp	r0, #1
 800d3d8:	d105      	bne.n	800d3e6 <_lv_img_cache_open+0xe2>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
 800d3da:	4631      	mov	r1, r6
 800d3dc:	6860      	ldr	r0, [r4, #4]
 800d3de:	f7f2 feb5 	bl	800014c <strcmp>
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	d0eb      	beq.n	800d3be <_lv_img_cache_open+0xba>
 800d3e6:	f109 0901 	add.w	r9, r9, #1
 800d3ea:	e7a3      	b.n	800d334 <_lv_img_cache_open+0x30>
            if(cache[i].life < cached_src->life) {
 800d3ec:	6a11      	ldr	r1, [r2, #32]
 800d3ee:	6a25      	ldr	r5, [r4, #32]
        for(i = 1; i < entry_cnt; i++) {
 800d3f0:	3301      	adds	r3, #1
            if(cache[i].life < cached_src->life) {
 800d3f2:	42a9      	cmp	r1, r5
 800d3f4:	bfb8      	it	lt
 800d3f6:	4614      	movlt	r4, r2
        for(i = 1; i < entry_cnt; i++) {
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	3224      	adds	r2, #36	; 0x24
 800d3fc:	e7a4      	b.n	800d348 <_lv_img_cache_open+0x44>
        if(cached_src->dec_dsc.time_to_open == 0) {
 800d3fe:	6963      	ldr	r3, [r4, #20]
        cached_src->life = 0;
 800d400:	6225      	str	r5, [r4, #32]
        if(cached_src->dec_dsc.time_to_open == 0) {
 800d402:	b91b      	cbnz	r3, 800d40c <_lv_img_cache_open+0x108>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800d404:	4640      	mov	r0, r8
 800d406:	f001 f95f 	bl	800e6c8 <lv_tick_elaps>
 800d40a:	6160      	str	r0, [r4, #20]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800d40c:	6963      	ldr	r3, [r4, #20]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1de      	bne.n	800d3d0 <_lv_img_cache_open+0xcc>
 800d412:	2301      	movs	r3, #1
 800d414:	6163      	str	r3, [r4, #20]
 800d416:	e7db      	b.n	800d3d0 <_lv_img_cache_open+0xcc>
 800d418:	2000051a 	.word	0x2000051a
 800d41c:	200033fc 	.word	0x200033fc
 800d420:	80000002 	.word	0x80000002

0800d424 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 800d424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d428:	4606      	mov	r6, r0

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 800d42a:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800d42c:	f04f 0924 	mov.w	r9, #36	; 0x24
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800d430:	4b0f      	ldr	r3, [pc, #60]	; (800d470 <lv_img_cache_invalidate_src+0x4c>)
    for(i = 0; i < entry_cnt; i++) {
 800d432:	4f10      	ldr	r7, [pc, #64]	; (800d474 <lv_img_cache_invalidate_src+0x50>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800d434:	f8d3 8000 	ldr.w	r8, [r3]
    for(i = 0; i < entry_cnt; i++) {
 800d438:	883a      	ldrh	r2, [r7, #0]
 800d43a:	b2ab      	uxth	r3, r5
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d801      	bhi.n	800d444 <lv_img_cache_invalidate_src+0x20>

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
        }
    }
}
 800d440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800d444:	b2ac      	uxth	r4, r5
 800d446:	fb09 8404 	mla	r4, r9, r4, r8
 800d44a:	6863      	ldr	r3, [r4, #4]
 800d44c:	42b3      	cmp	r3, r6
 800d44e:	d000      	beq.n	800d452 <lv_img_cache_invalidate_src+0x2e>
 800d450:	b95e      	cbnz	r6, 800d46a <lv_img_cache_invalidate_src+0x46>
            if(cache[i].dec_dsc.src != NULL) {
 800d452:	b113      	cbz	r3, 800d45a <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
 800d454:	4620      	mov	r0, r4
 800d456:	f000 fbf1 	bl	800dc3c <lv_img_decoder_close>
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 800d45a:	2120      	movs	r1, #32
 800d45c:	4620      	mov	r0, r4
 800d45e:	f002 fadb 	bl	800fa18 <_lv_memset_00>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
 800d462:	2124      	movs	r1, #36	; 0x24
 800d464:	4620      	mov	r0, r4
 800d466:	f002 fad7 	bl	800fa18 <_lv_memset_00>
 800d46a:	3501      	adds	r5, #1
 800d46c:	e7e4      	b.n	800d438 <lv_img_cache_invalidate_src+0x14>
 800d46e:	bf00      	nop
 800d470:	200033fc 	.word	0x200033fc
 800d474:	2000051a 	.word	0x2000051a

0800d478 <lv_img_cache_set_size>:
{
 800d478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800d47c:	4c1b      	ldr	r4, [pc, #108]	; (800d4ec <lv_img_cache_set_size+0x74>)
{
 800d47e:	4606      	mov	r6, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800d480:	6823      	ldr	r3, [r4, #0]
 800d482:	b12b      	cbz	r3, 800d490 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 800d484:	2000      	movs	r0, #0
 800d486:	f7ff ffcd 	bl	800d424 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800d48a:	6820      	ldr	r0, [r4, #0]
 800d48c:	f002 f87e 	bl	800f58c <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800d490:	2524      	movs	r5, #36	; 0x24
 800d492:	fb05 f006 	mul.w	r0, r5, r6
 800d496:	f002 f829 	bl	800f4ec <lv_mem_alloc>
 800d49a:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
 800d49c:	f001 fd94 	bl	800efc8 <lv_debug_check_null>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	b920      	cbnz	r0, 800d4ae <lv_img_cache_set_size+0x36>
 800d4a4:	6822      	ldr	r2, [r4, #0]
 800d4a6:	4812      	ldr	r0, [pc, #72]	; (800d4f0 <lv_img_cache_set_size+0x78>)
 800d4a8:	f001 fd92 	bl	800efd0 <lv_debug_log_error>
 800d4ac:	e7fe      	b.n	800d4ac <lv_img_cache_set_size+0x34>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 800d4ae:	6823      	ldr	r3, [r4, #0]
 800d4b0:	4f10      	ldr	r7, [pc, #64]	; (800d4f4 <lv_img_cache_set_size+0x7c>)
 800d4b2:	b913      	cbnz	r3, 800d4ba <lv_img_cache_set_size+0x42>
        entry_cnt = 0;
 800d4b4:	803b      	strh	r3, [r7, #0]
}
 800d4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry_cnt = new_entry_cnt;
 800d4ba:	803e      	strh	r6, [r7, #0]
    for(i = 0; i < entry_cnt; i++) {
 800d4bc:	2300      	movs	r3, #0
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 800d4be:	462e      	mov	r6, r5
    for(i = 0; i < entry_cnt; i++) {
 800d4c0:	8839      	ldrh	r1, [r7, #0]
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	4291      	cmp	r1, r2
 800d4c6:	f103 0801 	add.w	r8, r3, #1
 800d4ca:	d9f4      	bls.n	800d4b6 <lv_img_cache_set_size+0x3e>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	fb06 f503 	mul.w	r5, r6, r3
 800d4d2:	6820      	ldr	r0, [r4, #0]
 800d4d4:	2120      	movs	r1, #32
 800d4d6:	4428      	add	r0, r5
 800d4d8:	f002 fa9e 	bl	800fa18 <_lv_memset_00>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
 800d4dc:	6820      	ldr	r0, [r4, #0]
 800d4de:	2124      	movs	r1, #36	; 0x24
 800d4e0:	4428      	add	r0, r5
 800d4e2:	f002 fa99 	bl	800fa18 <_lv_memset_00>
 800d4e6:	4643      	mov	r3, r8
 800d4e8:	e7ea      	b.n	800d4c0 <lv_img_cache_set_size+0x48>
 800d4ea:	bf00      	nop
 800d4ec:	200033fc 	.word	0x200033fc
 800d4f0:	08015994 	.word	0x08015994
 800d4f4:	2000051a 	.word	0x2000051a

0800d4f8 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800d4f8:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d4fa:	69cc      	ldr	r4, [r1, #28]
{
 800d4fc:	460d      	mov	r5, r1
    if(user_data) {
 800d4fe:	b19c      	cbz	r4, 800d528 <lv_img_decoder_built_in_close+0x30>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 800d500:	6820      	ldr	r0, [r4, #0]
 800d502:	b120      	cbz	r0, 800d50e <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
 800d504:	f001 fd84 	bl	800f010 <lv_fs_close>
            lv_mem_free(user_data->f);
 800d508:	6820      	ldr	r0, [r4, #0]
 800d50a:	f002 f83f 	bl	800f58c <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 800d50e:	6860      	ldr	r0, [r4, #4]
 800d510:	b108      	cbz	r0, 800d516 <lv_img_decoder_built_in_close+0x1e>
 800d512:	f002 f83b 	bl	800f58c <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800d516:	68a0      	ldr	r0, [r4, #8]
 800d518:	b108      	cbz	r0, 800d51e <lv_img_decoder_built_in_close+0x26>
 800d51a:	f002 f837 	bl	800f58c <lv_mem_free>

        lv_mem_free(user_data);
 800d51e:	4620      	mov	r0, r4
 800d520:	f002 f834 	bl	800f58c <lv_mem_free>

        dsc->user_data = NULL;
 800d524:	2300      	movs	r3, #0
 800d526:	61eb      	str	r3, [r5, #28]
    }
}
 800d528:	bd38      	pop	{r3, r4, r5, pc}

0800d52a <lv_img_decoder_built_in_info>:
{
 800d52a:	b530      	push	{r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800d52c:	4608      	mov	r0, r1
{
 800d52e:	b085      	sub	sp, #20
 800d530:	460d      	mov	r5, r1
 800d532:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800d534:	f7fc fcc6 	bl	8009ec4 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800d538:	b9c8      	cbnz	r0, 800d56e <lv_img_decoder_built_in_info+0x44>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800d53a:	782b      	ldrb	r3, [r5, #0]
 800d53c:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800d540:	1f1a      	subs	r2, r3, #4
 800d542:	2a0a      	cmp	r2, #10
 800d544:	d811      	bhi.n	800d56a <lv_img_decoder_built_in_info+0x40>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800d546:	682a      	ldr	r2, [r5, #0]
 800d548:	6821      	ldr	r1, [r4, #0]
 800d54a:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800d54e:	f362 2194 	bfi	r1, r2, #10, #11
 800d552:	6021      	str	r1, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800d554:	886a      	ldrh	r2, [r5, #2]
 800d556:	8861      	ldrh	r1, [r4, #2]
 800d558:	0952      	lsrs	r2, r2, #5
 800d55a:	f362 114f 	bfi	r1, r2, #5, #11
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800d55e:	7822      	ldrb	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800d560:	8061      	strh	r1, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800d562:	f363 0204 	bfi	r2, r3, #0, #5
 800d566:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 800d568:	2001      	movs	r0, #1
}
 800d56a:	b005      	add	sp, #20
 800d56c:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800d56e:	2801      	cmp	r0, #1
 800d570:	d11d      	bne.n	800d5ae <lv_img_decoder_built_in_info+0x84>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800d572:	2202      	movs	r2, #2
 800d574:	4629      	mov	r1, r5
 800d576:	a802      	add	r0, sp, #8
 800d578:	f001 fd9e 	bl	800f0b8 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800d57c:	b138      	cbz	r0, 800d58e <lv_img_decoder_built_in_info+0x64>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800d57e:	7823      	ldrb	r3, [r4, #0]
 800d580:	331c      	adds	r3, #28
 800d582:	f003 031f 	and.w	r3, r3, #31
 800d586:	2b0a      	cmp	r3, #10
 800d588:	d9ee      	bls.n	800d568 <lv_img_decoder_built_in_info+0x3e>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800d58a:	2000      	movs	r0, #0
 800d58c:	e7ed      	b.n	800d56a <lv_img_decoder_built_in_info+0x40>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800d58e:	ab01      	add	r3, sp, #4
 800d590:	2204      	movs	r2, #4
 800d592:	4621      	mov	r1, r4
 800d594:	a802      	add	r0, sp, #8
 800d596:	f001 fd50 	bl	800f03a <lv_fs_read>
 800d59a:	4605      	mov	r5, r0
            lv_fs_close(&file);
 800d59c:	a802      	add	r0, sp, #8
 800d59e:	f001 fd37 	bl	800f010 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800d5a2:	2d00      	cmp	r5, #0
 800d5a4:	d1f1      	bne.n	800d58a <lv_img_decoder_built_in_info+0x60>
 800d5a6:	9b01      	ldr	r3, [sp, #4]
 800d5a8:	2b04      	cmp	r3, #4
 800d5aa:	d1ee      	bne.n	800d58a <lv_img_decoder_built_in_info+0x60>
 800d5ac:	e7e7      	b.n	800d57e <lv_img_decoder_built_in_info+0x54>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800d5ae:	2802      	cmp	r0, #2
 800d5b0:	d1eb      	bne.n	800d58a <lv_img_decoder_built_in_info+0x60>
        header->w = 1;
 800d5b2:	2001      	movs	r0, #1
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	f360 2394 	bfi	r3, r0, #10, #11
        header->h = 1;
 800d5ba:	f3c3 420f 	ubfx	r2, r3, #16, #16
 800d5be:	f360 124f 	bfi	r2, r0, #5, #11
        header->w = 1;
 800d5c2:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800d5c4:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800d5c6:	220b      	movs	r2, #11
 800d5c8:	f362 0304 	bfi	r3, r2, #0, #5
 800d5cc:	7023      	strb	r3, [r4, #0]
 800d5ce:	e7cc      	b.n	800d56a <lv_img_decoder_built_in_info+0x40>

0800d5d0 <lv_img_decoder_built_in_read_line>:
{
 800d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d5d4:	7b08      	ldrb	r0, [r1, #12]
{
 800d5d6:	4699      	mov	r9, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d5d8:	f000 031f 	and.w	r3, r0, #31
{
 800d5dc:	4614      	mov	r4, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d5de:	1f1a      	subs	r2, r3, #4
{
 800d5e0:	b08b      	sub	sp, #44	; 0x2c
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d5e2:	2a02      	cmp	r2, #2
{
 800d5e4:	460d      	mov	r5, r1
 800d5e6:	f9bd 8050 	ldrsh.w	r8, [sp, #80]	; 0x50
 800d5ea:	9e15      	ldr	r6, [sp, #84]	; 0x54
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d5ec:	d82c      	bhi.n	800d648 <lv_img_decoder_built_in_read_line+0x78>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d5ee:	7a8b      	ldrb	r3, [r1, #10]
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d111      	bne.n	800d618 <lv_img_decoder_built_in_read_line+0x48>
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800d5f4:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d5f8:	69cf      	ldr	r7, [r1, #28]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800d5fa:	f7fc fb69 	bl	8009cd0 <lv_img_cf_get_px_size>

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800d5fe:	68e9      	ldr	r1, [r5, #12]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800d600:	4682      	mov	sl, r0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800d602:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800d606:	fb09 4101 	mla	r1, r9, r1, r4
 800d60a:	4341      	muls	r1, r0
 800d60c:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
 800d60e:	3104      	adds	r1, #4
 800d610:	6838      	ldr	r0, [r7, #0]
 800d612:	f001 fd2f 	bl	800f074 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800d616:	b108      	cbz	r0, 800d61c <lv_img_decoder_built_in_read_line+0x4c>
    lv_res_t res = LV_RES_INV;
 800d618:	2000      	movs	r0, #0
 800d61a:	e012      	b.n	800d642 <lv_img_decoder_built_in_read_line+0x72>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
 800d61c:	f3ca 0ac7 	ubfx	sl, sl, #3, #8
 800d620:	fb08 f80a 	mul.w	r8, r8, sl
    uint32_t br  = 0;
 800d624:	ab0a      	add	r3, sp, #40	; 0x28
 800d626:	f843 0d10 	str.w	r0, [r3, #-16]!
    res = lv_fs_read(user_data->f, buf, btr, &br);
 800d62a:	4642      	mov	r2, r8
 800d62c:	4631      	mov	r1, r6
 800d62e:	6838      	ldr	r0, [r7, #0]
 800d630:	f001 fd03 	bl	800f03a <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800d634:	2800      	cmp	r0, #0
 800d636:	d1ef      	bne.n	800d618 <lv_img_decoder_built_in_read_line+0x48>
        return LV_RES_INV;
 800d638:	9806      	ldr	r0, [sp, #24]
 800d63a:	eba0 0208 	sub.w	r2, r0, r8
 800d63e:	4250      	negs	r0, r2
 800d640:	4150      	adcs	r0, r2
}
 800d642:	b00b      	add	sp, #44	; 0x2c
 800d644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800d648:	f1a3 020b 	sub.w	r2, r3, #11
 800d64c:	2a03      	cmp	r2, #3
 800d64e:	f200 80cb 	bhi.w	800d7e8 <lv_img_decoder_built_in_read_line+0x218>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800d652:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800d656:	aa06      	add	r2, sp, #24
 800d658:	4617      	mov	r7, r2
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800d65a:	f8ad 3010 	strh.w	r3, [sp, #16]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800d65e:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 800d662:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 800d666:	9305      	str	r3, [sp, #20]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800d668:	4bae      	ldr	r3, [pc, #696]	; (800d924 <lv_img_decoder_built_in_read_line+0x354>)
 800d66a:	f103 0e10 	add.w	lr, r3, #16
 800d66e:	4694      	mov	ip, r2
 800d670:	6818      	ldr	r0, [r3, #0]
 800d672:	6859      	ldr	r1, [r3, #4]
 800d674:	3308      	adds	r3, #8
 800d676:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d67a:	4573      	cmp	r3, lr
 800d67c:	4662      	mov	r2, ip
 800d67e:	d1f6      	bne.n	800d66e <lv_img_decoder_built_in_read_line+0x9e>
 800d680:	4633      	mov	r3, r6
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800d682:	2200      	movs	r2, #0
    lv_color_t bg_color = dsc->color;
 800d684:	8929      	ldrh	r1, [r5, #8]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800d686:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    for(i = 0; i < len; i++) {
 800d68a:	b210      	sxth	r0, r2
 800d68c:	4580      	cmp	r8, r0
 800d68e:	f103 0303 	add.w	r3, r3, #3
 800d692:	dc14      	bgt.n	800d6be <lv_img_decoder_built_in_read_line+0xee>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800d694:	7b28      	ldrb	r0, [r5, #12]
 800d696:	f000 001f 	and.w	r0, r0, #31
 800d69a:	f7fc fb19 	bl	8009cd0 <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800d69e:	2301      	movs	r3, #1
 800d6a0:	4083      	lsls	r3, r0
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	9302      	str	r3, [sp, #8]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800d6a8:	7b2b      	ldrb	r3, [r5, #12]
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800d6aa:	4682      	mov	sl, r0
    switch(dsc->header.cf) {
 800d6ac:	f003 031f 	and.w	r3, r3, #31
 800d6b0:	3b0b      	subs	r3, #11
 800d6b2:	2b03      	cmp	r3, #3
 800d6b4:	d85f      	bhi.n	800d776 <lv_img_decoder_built_in_read_line+0x1a6>
 800d6b6:	e8df f003 	tbb	[pc, r3]
 800d6ba:	2c08      	.short	0x2c08
 800d6bc:	5440      	.short	0x5440
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800d6be:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800d6c2:	f803 cc02 	strb.w	ip, [r3, #-2]
 800d6c6:	3201      	adds	r2, #1
 800d6c8:	e7df      	b.n	800d68a <lv_img_decoder_built_in_read_line+0xba>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
            if(dsc->header.w & 0x7) w++;
            ofs += w * y + (x >> 3); /*First pixel*/
 800d6ca:	10e1      	asrs	r1, r4, #3
            pos       = 7 - (x & 0x7);
 800d6cc:	43e4      	mvns	r4, r4
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800d6ce:	68eb      	ldr	r3, [r5, #12]
            pos       = 7 - (x & 0x7);
 800d6d0:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800d6d4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800d6d8:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 800d6da:	075b      	lsls	r3, r3, #29
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800d6dc:	bf0c      	ite	eq
 800d6de:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x7) w++;
 800d6e2:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 800d6e6:	fb09 110b 	mla	r1, r9, fp, r1
            opa_table = alpha1_opa_table;
 800d6ea:	af04      	add	r7, sp, #16
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d6ec:	69eb      	ldr	r3, [r5, #28]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 800d6ee:	4658      	mov	r0, fp
 800d6f0:	9103      	str	r1, [sp, #12]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d6f2:	9301      	str	r3, [sp, #4]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 800d6f4:	f002 f8f2 	bl	800f8dc <_lv_mem_buf_get>
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d6f8:	7aab      	ldrb	r3, [r5, #10]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 800d6fa:	4681      	mov	r9, r0
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d6fc:	9903      	ldr	r1, [sp, #12]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d13d      	bne.n	800d77e <lv_img_decoder_built_in_read_line+0x1ae>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800d702:	686b      	ldr	r3, [r5, #4]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	4419      	add	r1, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800d708:	f1ca 0008 	rsb	r0, sl, #8
        data_tmp = fs_buf;
 800d70c:	2300      	movs	r3, #0
            pos = 8 - px_size;
 800d70e:	b240      	sxtb	r0, r0
 800d710:	e062      	b.n	800d7d8 <lv_img_decoder_built_in_read_line+0x208>
            ofs += w * y + (x >> 2); /*First pixel*/
 800d712:	10a1      	asrs	r1, r4, #2
            pos       = 6 - ((x & 0x3) * 2);
 800d714:	43e4      	mvns	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d716:	68eb      	ldr	r3, [r5, #12]
            pos       = 6 - ((x & 0x3) * 2);
 800d718:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d71c:	f3c3 238a 	ubfx	r3, r3, #10, #11
            if(dsc->header.w & 0x3) w++;
 800d720:	079f      	lsls	r7, r3, #30
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d722:	ea4f 02a3 	mov.w	r2, r3, asr #2
 800d726:	bf0c      	ite	eq
 800d728:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x3) w++;
 800d72c:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
 800d730:	fb09 110b 	mla	r1, r9, fp, r1
            pos       = 6 - ((x & 0x3) * 2);
 800d734:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 800d736:	af05      	add	r7, sp, #20
 800d738:	e7d8      	b.n	800d6ec <lv_img_decoder_built_in_read_line+0x11c>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d73a:	68eb      	ldr	r3, [r5, #12]
            ofs += w * y + (x >> 1); /*First pixel*/
 800d73c:	1061      	asrs	r1, r4, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d73e:	f3c3 238a 	ubfx	r3, r3, #10, #11
            if(dsc->header.w & 0x1) w++;
 800d742:	07d8      	lsls	r0, r3, #31
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d744:	ea4f 0263 	mov.w	r2, r3, asr #1
 800d748:	bf54      	ite	pl
 800d74a:	fa0f fb82 	sxthpl.w	fp, r2
            if(dsc->header.w & 0x1) w++;
 800d74e:	f102 0b01 	addmi.w	fp, r2, #1
            pos       = 4 - ((x & 0x1) * 4);
 800d752:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800d756:	fb09 110b 	mla	r1, r9, fp, r1
            pos       = 4 - ((x & 0x1) * 4);
 800d75a:	bf0c      	ite	eq
 800d75c:	2404      	moveq	r4, #4
 800d75e:	2400      	movne	r4, #0
 800d760:	e7c4      	b.n	800d6ec <lv_img_decoder_built_in_read_line+0x11c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d762:	68e9      	ldr	r1, [r5, #12]
 800d764:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800d768:	fa0f fb81 	sxth.w	fp, r1
            ofs += w * y + x;  /*First pixel*/
 800d76c:	fb09 4101 	mla	r1, r9, r1, r4
            pos = 0;
 800d770:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 800d772:	4627      	mov	r7, r4
 800d774:	e7ba      	b.n	800d6ec <lv_img_decoder_built_in_read_line+0x11c>
    int8_t pos   = 0;
 800d776:	2400      	movs	r4, #0
    uint32_t ofs = 0;
 800d778:	4621      	mov	r1, r4
    lv_coord_t w = 0;
 800d77a:	46a3      	mov	fp, r4
 800d77c:	e7f9      	b.n	800d772 <lv_img_decoder_built_in_read_line+0x1a2>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800d77e:	9b01      	ldr	r3, [sp, #4]
 800d780:	3104      	adds	r1, #4
 800d782:	6818      	ldr	r0, [r3, #0]
 800d784:	f001 fc76 	bl	800f074 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800d788:	9801      	ldr	r0, [sp, #4]
 800d78a:	4649      	mov	r1, r9
 800d78c:	2300      	movs	r3, #0
 800d78e:	465a      	mov	r2, fp
 800d790:	6800      	ldr	r0, [r0, #0]
 800d792:	f001 fc52 	bl	800f03a <lv_fs_read>
        data_tmp = fs_buf;
 800d796:	4649      	mov	r1, r9
 800d798:	e7b6      	b.n	800d708 <lv_img_decoder_built_in_read_line+0x138>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 800d79a:	9a02      	ldr	r2, [sp, #8]
 800d79c:	f891 e000 	ldrb.w	lr, [r1]
 800d7a0:	fa02 fc04 	lsl.w	ip, r2, r4
 800d7a4:	ea0e 020c 	and.w	r2, lr, ip
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800d7a8:	f895 c00c 	ldrb.w	ip, [r5, #12]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 800d7ac:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d7ae:	f00c 0c1f 	and.w	ip, ip, #31
        pos -= px_size;
 800d7b2:	eba4 040a 	sub.w	r4, r4, sl
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d7b6:	f1bc 0f0e 	cmp.w	ip, #14
 800d7ba:	b2d2      	uxtb	r2, r2
        pos -= px_size;
 800d7bc:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d7be:	bf18      	it	ne
 800d7c0:	5cba      	ldrbne	r2, [r7, r2]
        if(pos < 0) {
 800d7c2:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800d7c4:	bfb8      	it	lt
 800d7c6:	4604      	movlt	r4, r0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d7c8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800d7cc:	44b4      	add	ip, r6
 800d7ce:	f88c 2002 	strb.w	r2, [ip, #2]
            data_tmp++;
 800d7d2:	bfb8      	it	lt
 800d7d4:	3101      	addlt	r1, #1
 800d7d6:	3301      	adds	r3, #1
    for(i = 0; i < len; i++) {
 800d7d8:	b21a      	sxth	r2, r3
 800d7da:	4590      	cmp	r8, r2
 800d7dc:	dcdd      	bgt.n	800d79a <lv_img_decoder_built_in_read_line+0x1ca>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
 800d7de:	4648      	mov	r0, r9
            pos = 8 - px_size;
            data_tmp++;
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
 800d7e0:	f001 ff14 	bl	800f60c <_lv_mem_buf_release>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 800d7e4:	2001      	movs	r0, #1
 800d7e6:	e72c      	b.n	800d642 <lv_img_decoder_built_in_read_line+0x72>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800d7e8:	3b07      	subs	r3, #7
 800d7ea:	2b03      	cmp	r3, #3
 800d7ec:	f63f af14 	bhi.w	800d618 <lv_img_decoder_built_in_read_line+0x48>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800d7f0:	f000 001f 	and.w	r0, r0, #31
 800d7f4:	f7fc fa6c 	bl	8009cd0 <lv_img_cf_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	4083      	lsls	r3, r0
 800d7fc:	3b01      	subs	r3, #1
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	9301      	str	r3, [sp, #4]
    switch(dsc->header.cf) {
 800d802:	7b2b      	ldrb	r3, [r5, #12]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800d804:	4682      	mov	sl, r0
    switch(dsc->header.cf) {
 800d806:	f003 031f 	and.w	r3, r3, #31
 800d80a:	3b07      	subs	r3, #7
 800d80c:	2b03      	cmp	r3, #3
 800d80e:	d856      	bhi.n	800d8be <lv_img_decoder_built_in_read_line+0x2ee>
 800d810:	e8df f003 	tbb	[pc, r3]
 800d814:	4b382702 	.word	0x4b382702
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800d818:	68eb      	ldr	r3, [r5, #12]
 800d81a:	f3c3 238a 	ubfx	r3, r3, #10, #11
            if(dsc->header.w & 0x7) w++;
 800d81e:	0759      	lsls	r1, r3, #29
            ofs += w * y + (x >> 3); /*First pixel*/
 800d820:	ea4f 01e4 	mov.w	r1, r4, asr #3
            pos = 7 - (x & 0x7);
 800d824:	ea6f 0404 	mvn.w	r4, r4
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800d828:	ea4f 07e3 	mov.w	r7, r3, asr #3
 800d82c:	bf0c      	ite	eq
 800d82e:	b23f      	sxtheq	r7, r7
            if(dsc->header.w & 0x7) w++;
 800d830:	3701      	addne	r7, #1
            ofs += w * y + (x >> 3); /*First pixel*/
 800d832:	fb09 1107 	mla	r1, r9, r7, r1
            pos = 7 - (x & 0x7);
 800d836:	f004 0407 	and.w	r4, r4, #7
            ofs += 8;                /*Skip the palette*/
 800d83a:	3108      	adds	r1, #8
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 800d83c:	4638      	mov	r0, r7
 800d83e:	9102      	str	r1, [sp, #8]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d840:	f8d5 901c 	ldr.w	r9, [r5, #28]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 800d844:	f002 f84a 	bl	800f8dc <_lv_mem_buf_get>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d848:	7aab      	ldrb	r3, [r5, #10]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 800d84a:	4683      	mov	fp, r0
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d84c:	9902      	ldr	r1, [sp, #8]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d139      	bne.n	800d8c6 <lv_img_decoder_built_in_read_line+0x2f6>
        data_tmp                     = img_dsc->data + ofs;
 800d852:	686b      	ldr	r3, [r5, #4]
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	4419      	add	r1, r3
            pos = 8 - px_size;
 800d858:	f1ca 0708 	rsb	r7, sl, #8
        data_tmp = fs_buf;
 800d85c:	2500      	movs	r5, #0
            pos = 8 - px_size;
 800d85e:	b27f      	sxtb	r7, r7
 800d860:	e05b      	b.n	800d91a <lv_img_decoder_built_in_read_line+0x34a>
            ofs += w * y + (x >> 2); /*First pixel*/
 800d862:	10a1      	asrs	r1, r4, #2
            pos = 6 - ((x & 0x3) * 2);
 800d864:	43e4      	mvns	r4, r4
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d866:	68eb      	ldr	r3, [r5, #12]
            pos = 6 - ((x & 0x3) * 2);
 800d868:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d86c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800d870:	109f      	asrs	r7, r3, #2
            if(dsc->header.w & 0x3) w++;
 800d872:	079a      	lsls	r2, r3, #30
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d874:	bf0c      	ite	eq
 800d876:	b23f      	sxtheq	r7, r7
            if(dsc->header.w & 0x3) w++;
 800d878:	3701      	addne	r7, #1
            ofs += w * y + (x >> 2); /*First pixel*/
 800d87a:	fb09 1107 	mla	r1, r9, r7, r1
            pos = 6 - ((x & 0x3) * 2);
 800d87e:	0064      	lsls	r4, r4, #1
            ofs += 16;               /*Skip the palette*/
 800d880:	3110      	adds	r1, #16
 800d882:	e7db      	b.n	800d83c <lv_img_decoder_built_in_read_line+0x26c>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d884:	68eb      	ldr	r3, [r5, #12]
            ofs += w * y + (x >> 1); /*First pixel*/
 800d886:	1061      	asrs	r1, r4, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d888:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800d88c:	105f      	asrs	r7, r3, #1
            if(dsc->header.w & 0x1) w++;
 800d88e:	07db      	lsls	r3, r3, #31
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d890:	bf54      	ite	pl
 800d892:	b23f      	sxthpl	r7, r7
            if(dsc->header.w & 0x1) w++;
 800d894:	3701      	addmi	r7, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800d896:	fb09 1107 	mla	r1, r9, r7, r1
            pos = 4 - ((x & 0x1) * 4);
 800d89a:	f014 0f01 	tst.w	r4, #1
            ofs += 64;               /*Skip the palette*/
 800d89e:	f101 0140 	add.w	r1, r1, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 800d8a2:	bf0c      	ite	eq
 800d8a4:	2404      	moveq	r4, #4
 800d8a6:	2400      	movne	r4, #0
 800d8a8:	e7c8      	b.n	800d83c <lv_img_decoder_built_in_read_line+0x26c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d8aa:	68e9      	ldr	r1, [r5, #12]
 800d8ac:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800d8b0:	b20f      	sxth	r7, r1
            ofs += w * y + x;  /*First pixel*/
 800d8b2:	fb09 4101 	mla	r1, r9, r1, r4
            pos = 0;
 800d8b6:	2400      	movs	r4, #0
            ofs += 1024;       /*Skip the palette*/
 800d8b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d8bc:	e7be      	b.n	800d83c <lv_img_decoder_built_in_read_line+0x26c>
    uint32_t ofs = 0;
 800d8be:	2100      	movs	r1, #0
    int8_t pos   = 0;
 800d8c0:	460c      	mov	r4, r1
    lv_coord_t w = 0;
 800d8c2:	460f      	mov	r7, r1
 800d8c4:	e7ba      	b.n	800d83c <lv_img_decoder_built_in_read_line+0x26c>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800d8c6:	3104      	adds	r1, #4
 800d8c8:	f8d9 0000 	ldr.w	r0, [r9]
 800d8cc:	f001 fbd2 	bl	800f074 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800d8d0:	4659      	mov	r1, fp
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	463a      	mov	r2, r7
 800d8d6:	f8d9 0000 	ldr.w	r0, [r9]
 800d8da:	f001 fbae 	bl	800f03a <lv_fs_read>
        data_tmp = fs_buf;
 800d8de:	4659      	mov	r1, fp
 800d8e0:	e7ba      	b.n	800d858 <lv_img_decoder_built_in_read_line+0x288>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 800d8e2:	9b01      	ldr	r3, [sp, #4]
 800d8e4:	7808      	ldrb	r0, [r1, #0]
 800d8e6:	40a3      	lsls	r3, r4
 800d8e8:	4018      	ands	r0, r3
 800d8ea:	4120      	asrs	r0, r4
        pos -= px_size;
 800d8ec:	eba4 040a 	sub.w	r4, r4, sl
 800d8f0:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800d8f2:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800d8f4:	bfb8      	it	lt
 800d8f6:	463c      	movlt	r4, r7
        lv_color_t color = user_data->palette[val_act];
 800d8f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d8fc:	b2c0      	uxtb	r0, r0
 800d8fe:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
            data_tmp++;
 800d902:	bfb8      	it	lt
 800d904:	3101      	addlt	r1, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 800d906:	7033      	strb	r3, [r6, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 800d908:	0a1b      	lsrs	r3, r3, #8
 800d90a:	7073      	strb	r3, [r6, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 800d90c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d910:	3501      	adds	r5, #1
 800d912:	5c1b      	ldrb	r3, [r3, r0]
 800d914:	3603      	adds	r6, #3
 800d916:	f806 3c01 	strb.w	r3, [r6, #-1]
    for(i = 0; i < len; i++) {
 800d91a:	b22b      	sxth	r3, r5
 800d91c:	4598      	cmp	r8, r3
 800d91e:	dce0      	bgt.n	800d8e2 <lv_img_decoder_built_in_read_line+0x312>
    _lv_mem_buf_release(fs_buf);
 800d920:	4658      	mov	r0, fp
 800d922:	e75d      	b.n	800d7e0 <lv_img_decoder_built_in_read_line+0x210>
 800d924:	080158c6 	.word	0x080158c6

0800d928 <lv_img_decoder_built_in_open>:
{
 800d928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d92c:	7a8b      	ldrb	r3, [r1, #10]
{
 800d92e:	4606      	mov	r6, r0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d930:	2b01      	cmp	r3, #1
{
 800d932:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d934:	d14b      	bne.n	800d9ce <lv_img_decoder_built_in_open+0xa6>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800d936:	6848      	ldr	r0, [r1, #4]
 800d938:	f001 fc08 	bl	800f14c <lv_fs_get_ext>
 800d93c:	497d      	ldr	r1, [pc, #500]	; (800db34 <lv_img_decoder_built_in_open+0x20c>)
 800d93e:	f7f2 fc05 	bl	800014c <strcmp>
 800d942:	bb60      	cbnz	r0, 800d99e <lv_img_decoder_built_in_open+0x76>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800d944:	2202      	movs	r2, #2
 800d946:	6861      	ldr	r1, [r4, #4]
 800d948:	4668      	mov	r0, sp
 800d94a:	f001 fbb5 	bl	800f0b8 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800d94e:	bb30      	cbnz	r0, 800d99e <lv_img_decoder_built_in_open+0x76>
        if(dsc->user_data == NULL) {
 800d950:	69e3      	ldr	r3, [r4, #28]
 800d952:	b98b      	cbnz	r3, 800d978 <lv_img_decoder_built_in_open+0x50>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800d954:	200c      	movs	r0, #12
 800d956:	f001 fdc9 	bl	800f4ec <lv_mem_alloc>
 800d95a:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
 800d95c:	f001 fb34 	bl	800efc8 <lv_debug_check_null>
 800d960:	69e2      	ldr	r2, [r4, #28]
 800d962:	4603      	mov	r3, r0
 800d964:	b918      	cbnz	r0, 800d96e <lv_img_decoder_built_in_open+0x46>
 800d966:	4874      	ldr	r0, [pc, #464]	; (800db38 <lv_img_decoder_built_in_open+0x210>)
 800d968:	f001 fb32 	bl	800efd0 <lv_debug_log_error>
 800d96c:	e7fe      	b.n	800d96c <lv_img_decoder_built_in_open+0x44>
            if(dsc->user_data == NULL) {
 800d96e:	b1b2      	cbz	r2, 800d99e <lv_img_decoder_built_in_open+0x76>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800d970:	210c      	movs	r1, #12
 800d972:	4610      	mov	r0, r2
 800d974:	f002 f850 	bl	800fa18 <_lv_memset_00>
        user_data->f = lv_mem_alloc(sizeof(f));
 800d978:	2008      	movs	r0, #8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d97a:	69e5      	ldr	r5, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
 800d97c:	f001 fdb6 	bl	800f4ec <lv_mem_alloc>
 800d980:	6028      	str	r0, [r5, #0]
        LV_ASSERT_MEM(user_data->f);
 800d982:	f001 fb21 	bl	800efc8 <lv_debug_check_null>
 800d986:	682a      	ldr	r2, [r5, #0]
 800d988:	4603      	mov	r3, r0
 800d98a:	b918      	cbnz	r0, 800d994 <lv_img_decoder_built_in_open+0x6c>
 800d98c:	486a      	ldr	r0, [pc, #424]	; (800db38 <lv_img_decoder_built_in_open+0x210>)
 800d98e:	f001 fb1f 	bl	800efd0 <lv_debug_log_error>
 800d992:	e7fe      	b.n	800d992 <lv_img_decoder_built_in_open+0x6a>
        if(user_data->f == NULL) {
 800d994:	b92a      	cbnz	r2, 800d9a2 <lv_img_decoder_built_in_open+0x7a>
                lv_img_decoder_built_in_close(decoder, dsc);
 800d996:	4621      	mov	r1, r4
 800d998:	4630      	mov	r0, r6
 800d99a:	f7ff fdad 	bl	800d4f8 <lv_img_decoder_built_in_close>
                return LV_RES_INV;
 800d99e:	2000      	movs	r0, #0
 800d9a0:	e01b      	b.n	800d9da <lv_img_decoder_built_in_open+0xb2>
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	f81d 1003 	ldrb.w	r1, [sp, r3]
 800d9a8:	3301      	adds	r3, #1
    while(len) {
 800d9aa:	2b08      	cmp	r3, #8
        *d8 = *s8;
 800d9ac:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
 800d9b0:	d1f8      	bne.n	800d9a4 <lv_img_decoder_built_in_open+0x7c>
    lv_img_cf_t cf = dsc->header.cf;
 800d9b2:	7b20      	ldrb	r0, [r4, #12]
 800d9b4:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800d9b8:	1f03      	subs	r3, r0, #4
 800d9ba:	2b02      	cmp	r3, #2
 800d9bc:	d810      	bhi.n	800d9e0 <lv_img_decoder_built_in_open+0xb8>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d9be:	7aa3      	ldrb	r3, [r4, #10]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d158      	bne.n	800da76 <lv_img_decoder_built_in_open+0x14e>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800d9c4:	6863      	ldr	r3, [r4, #4]
 800d9c6:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
 800d9c8:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
 800d9ca:	2001      	movs	r0, #1
 800d9cc:	e005      	b.n	800d9da <lv_img_decoder_built_in_open+0xb2>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1ef      	bne.n	800d9b2 <lv_img_decoder_built_in_open+0x8a>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800d9d2:	684b      	ldr	r3, [r1, #4]
 800d9d4:	6898      	ldr	r0, [r3, #8]
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d1eb      	bne.n	800d9b2 <lv_img_decoder_built_in_open+0x8a>
}
 800d9da:	b003      	add	sp, #12
 800d9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800d9e0:	1fc3      	subs	r3, r0, #7
 800d9e2:	2b03      	cmp	r3, #3
 800d9e4:	f200 80a1 	bhi.w	800db2a <lv_img_decoder_built_in_open+0x202>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800d9e8:	f7fc f972 	bl	8009cd0 <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 800d9ec:	69e3      	ldr	r3, [r4, #28]
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800d9ee:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 800d9f0:	b993      	cbnz	r3, 800da18 <lv_img_decoder_built_in_open+0xf0>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800d9f2:	200c      	movs	r0, #12
 800d9f4:	f001 fd7a 	bl	800f4ec <lv_mem_alloc>
 800d9f8:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
 800d9fa:	f001 fae5 	bl	800efc8 <lv_debug_check_null>
 800d9fe:	69e2      	ldr	r2, [r4, #28]
 800da00:	4603      	mov	r3, r0
 800da02:	b918      	cbnz	r0, 800da0c <lv_img_decoder_built_in_open+0xe4>
 800da04:	484c      	ldr	r0, [pc, #304]	; (800db38 <lv_img_decoder_built_in_open+0x210>)
 800da06:	f001 fae3 	bl	800efd0 <lv_debug_log_error>
 800da0a:	e7fe      	b.n	800da0a <lv_img_decoder_built_in_open+0xe2>
            if(dsc->user_data == NULL) {
 800da0c:	2a00      	cmp	r2, #0
 800da0e:	d0c2      	beq.n	800d996 <lv_img_decoder_built_in_open+0x6e>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800da10:	210c      	movs	r1, #12
 800da12:	4610      	mov	r0, r2
 800da14:	f002 f800 	bl	800fa18 <_lv_memset_00>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800da18:	2002      	movs	r0, #2
 800da1a:	40b8      	lsls	r0, r7
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800da1c:	69e5      	ldr	r5, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800da1e:	f001 fd65 	bl	800f4ec <lv_mem_alloc>
 800da22:	6068      	str	r0, [r5, #4]
        LV_ASSERT_MEM(user_data->palette);
 800da24:	f001 fad0 	bl	800efc8 <lv_debug_check_null>
 800da28:	4603      	mov	r3, r0
 800da2a:	b920      	cbnz	r0, 800da36 <lv_img_decoder_built_in_open+0x10e>
 800da2c:	686a      	ldr	r2, [r5, #4]
 800da2e:	4842      	ldr	r0, [pc, #264]	; (800db38 <lv_img_decoder_built_in_open+0x210>)
 800da30:	f001 face 	bl	800efd0 <lv_debug_log_error>
 800da34:	e7fe      	b.n	800da34 <lv_img_decoder_built_in_open+0x10c>
        uint32_t palette_size = 1 << px_size;
 800da36:	2301      	movs	r3, #1
 800da38:	fa03 f707 	lsl.w	r7, r3, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 800da3c:	4638      	mov	r0, r7
 800da3e:	f001 fd55 	bl	800f4ec <lv_mem_alloc>
 800da42:	60a8      	str	r0, [r5, #8]
        LV_ASSERT_MEM(user_data->opa);
 800da44:	f001 fac0 	bl	800efc8 <lv_debug_check_null>
 800da48:	4603      	mov	r3, r0
 800da4a:	b920      	cbnz	r0, 800da56 <lv_img_decoder_built_in_open+0x12e>
 800da4c:	68aa      	ldr	r2, [r5, #8]
 800da4e:	483a      	ldr	r0, [pc, #232]	; (800db38 <lv_img_decoder_built_in_open+0x210>)
 800da50:	f001 fabe 	bl	800efd0 <lv_debug_log_error>
 800da54:	e7fe      	b.n	800da54 <lv_img_decoder_built_in_open+0x12c>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 800da56:	686b      	ldr	r3, [r5, #4]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d09c      	beq.n	800d996 <lv_img_decoder_built_in_open+0x6e>
 800da5c:	68ab      	ldr	r3, [r5, #8]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d099      	beq.n	800d996 <lv_img_decoder_built_in_open+0x6e>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800da62:	7aa3      	ldrb	r3, [r4, #10]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d133      	bne.n	800dad0 <lv_img_decoder_built_in_open+0x1a8>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 800da68:	2104      	movs	r1, #4
 800da6a:	6828      	ldr	r0, [r5, #0]
 800da6c:	f001 fb02 	bl	800f074 <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 800da70:	2600      	movs	r6, #0
 800da72:	42be      	cmp	r6, r7
 800da74:	d101      	bne.n	800da7a <lv_img_decoder_built_in_open+0x152>
            dsc->img_data = NULL;
 800da76:	2300      	movs	r3, #0
 800da78:	e7a6      	b.n	800d9c8 <lv_img_decoder_built_in_open+0xa0>
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 800da7a:	2300      	movs	r3, #0
 800da7c:	2204      	movs	r2, #4
 800da7e:	4669      	mov	r1, sp
 800da80:	6828      	ldr	r0, [r5, #0]
 800da82:	f001 fada 	bl	800f03a <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 800da86:	6868      	ldr	r0, [r5, #4]
 800da88:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800da8c:	f810 3016 	ldrb.w	r3, [r0, r6, lsl #1]
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
 800da90:	f89d e002 	ldrb.w	lr, [sp, #2]
 800da94:	ea4f 1852 	mov.w	r8, r2, lsr #5
 800da98:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 800da9c:	f368 0302 	bfi	r3, r8, #0, #3
 800daa0:	f36e 03c7 	bfi	r3, lr, #3, #5
 800daa4:	f89d 1000 	ldrb.w	r1, [sp]
 800daa8:	eb00 0c46 	add.w	ip, r0, r6, lsl #1
 800daac:	f800 3016 	strb.w	r3, [r0, r6, lsl #1]
 800dab0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800dab4:	08c9      	lsrs	r1, r1, #3
 800dab6:	0892      	lsrs	r2, r2, #2
 800dab8:	f361 0304 	bfi	r3, r1, #0, #5
 800dabc:	f362 1347 	bfi	r3, r2, #5, #3
 800dac0:	f88c 3001 	strb.w	r3, [ip, #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 800dac4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dac8:	68ab      	ldr	r3, [r5, #8]
 800daca:	559a      	strb	r2, [r3, r6]
            for(i = 0; i < palette_size; i++) {
 800dacc:	3601      	adds	r6, #1
 800dace:	e7d0      	b.n	800da72 <lv_img_decoder_built_in_open+0x14a>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800dad0:	6863      	ldr	r3, [r4, #4]
 800dad2:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 800dad4:	2300      	movs	r3, #0
 800dad6:	42bb      	cmp	r3, r7
 800dad8:	f102 0204 	add.w	r2, r2, #4
 800dadc:	d0cb      	beq.n	800da76 <lv_img_decoder_built_in_open+0x14e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800dade:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800dae2:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800dae6:	f81e 1013 	ldrb.w	r1, [lr, r3, lsl #1]
 800daea:	f812 8c02 	ldrb.w	r8, [r2, #-2]
 800daee:	ea4f 1950 	mov.w	r9, r0, lsr #5
 800daf2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800daf6:	f369 0102 	bfi	r1, r9, #0, #3
 800dafa:	f368 01c7 	bfi	r1, r8, #3, #5
 800dafe:	f812 6c04 	ldrb.w	r6, [r2, #-4]
 800db02:	eb0e 0c43 	add.w	ip, lr, r3, lsl #1
 800db06:	f80e 1013 	strb.w	r1, [lr, r3, lsl #1]
 800db0a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800db0e:	08f6      	lsrs	r6, r6, #3
 800db10:	0880      	lsrs	r0, r0, #2
 800db12:	f366 0104 	bfi	r1, r6, #0, #5
 800db16:	f360 1147 	bfi	r1, r0, #5, #3
 800db1a:	f88c 1001 	strb.w	r1, [ip, #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800db1e:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800db22:	68a9      	ldr	r1, [r5, #8]
 800db24:	54c8      	strb	r0, [r1, r3]
            for(i = 0; i < palette_size; i++) {
 800db26:	3301      	adds	r3, #1
 800db28:	e7d5      	b.n	800dad6 <lv_img_decoder_built_in_open+0x1ae>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800db2a:	380b      	subs	r0, #11
 800db2c:	2803      	cmp	r0, #3
 800db2e:	d9a2      	bls.n	800da76 <lv_img_decoder_built_in_open+0x14e>
 800db30:	e731      	b.n	800d996 <lv_img_decoder_built_in_open+0x6e>
 800db32:	bf00      	nop
 800db34:	08015b0b 	.word	0x08015b0b
 800db38:	08015994 	.word	0x08015994

0800db3c <lv_img_decoder_get_info>:
{
 800db3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    header->cf = LV_IMG_CF_UNKNOWN;
 800db40:	2400      	movs	r4, #0
    header->h = 0;
 800db42:	884b      	ldrh	r3, [r1, #2]
{
 800db44:	4607      	mov	r7, r0
    header->h = 0;
 800db46:	f36f 134f 	bfc	r3, #5, #11
 800db4a:	804b      	strh	r3, [r1, #2]
    header->w = 0;
 800db4c:	680b      	ldr	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800db4e:	480f      	ldr	r0, [pc, #60]	; (800db8c <lv_img_decoder_get_info+0x50>)
    header->w = 0;
 800db50:	f36f 2394 	bfc	r3, #10, #11
 800db54:	600b      	str	r3, [r1, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
 800db56:	700c      	strb	r4, [r1, #0]
{
 800db58:	460d      	mov	r5, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800db5a:	f001 fb57 	bl	800f20c <_lv_ll_get_head>
 800db5e:	4606      	mov	r6, r0
 800db60:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800db8c <lv_img_decoder_get_info+0x50>
 800db64:	b916      	cbnz	r6, 800db6c <lv_img_decoder_get_info+0x30>
}
 800db66:	4620      	mov	r0, r4
 800db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
 800db6c:	6834      	ldr	r4, [r6, #0]
 800db6e:	b134      	cbz	r4, 800db7e <lv_img_decoder_get_info+0x42>
            res = d->info_cb(d, src, header);
 800db70:	462a      	mov	r2, r5
 800db72:	4639      	mov	r1, r7
 800db74:	4630      	mov	r0, r6
 800db76:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
 800db78:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 800db7a:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
 800db7c:	d0f3      	beq.n	800db66 <lv_img_decoder_get_info+0x2a>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800db7e:	4631      	mov	r1, r6
 800db80:	4640      	mov	r0, r8
 800db82:	f001 fb49 	bl	800f218 <_lv_ll_get_next>
 800db86:	4606      	mov	r6, r0
 800db88:	e7ec      	b.n	800db64 <lv_img_decoder_get_info+0x28>
 800db8a:	bf00      	nop
 800db8c:	20003348 	.word	0x20003348

0800db90 <lv_img_decoder_open>:
{
 800db90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db94:	4604      	mov	r4, r0
    dsc->color     = color;
 800db96:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
 800db98:	4608      	mov	r0, r1
{
 800db9a:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
 800db9c:	f7fc f992 	bl	8009ec4 <lv_img_src_get_type>
    dsc->user_data = NULL;
 800dba0:	2300      	movs	r3, #0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800dba2:	2801      	cmp	r0, #1
    dsc->src_type  = lv_img_src_get_type(src);
 800dba4:	72a0      	strb	r0, [r4, #10]
    dsc->user_data = NULL;
 800dba6:	61e3      	str	r3, [r4, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800dba8:	d117      	bne.n	800dbda <lv_img_decoder_open+0x4a>
        size_t fnlen = strlen(src);
 800dbaa:	4638      	mov	r0, r7
 800dbac:	f7f2 fad8 	bl	8000160 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 800dbb0:	3001      	adds	r0, #1
 800dbb2:	f001 fc9b 	bl	800f4ec <lv_mem_alloc>
        strcpy((char *)dsc->src, src);
 800dbb6:	4639      	mov	r1, r7
        dsc->src = lv_mem_alloc(fnlen + 1);
 800dbb8:	6060      	str	r0, [r4, #4]
        strcpy((char *)dsc->src, src);
 800dbba:	f007 fa71 	bl	80150a0 <strcpy>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800dbbe:	4816      	ldr	r0, [pc, #88]	; (800dc18 <lv_img_decoder_open+0x88>)
 800dbc0:	f001 fb24 	bl	800f20c <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 800dbc4:	2600      	movs	r6, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800dbc6:	4605      	mov	r5, r0
        dsc->error_msg = NULL;
 800dbc8:	46b0      	mov	r8, r6
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800dbca:	f8df a04c 	ldr.w	sl, [pc, #76]	; 800dc18 <lv_img_decoder_open+0x88>
        res = d->info_cb(d, src, &dsc->header);
 800dbce:	f104 090c 	add.w	r9, r4, #12
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800dbd2:	b925      	cbnz	r5, 800dbde <lv_img_decoder_open+0x4e>
}
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        dsc->src       = src;
 800dbda:	6067      	str	r7, [r4, #4]
 800dbdc:	e7ef      	b.n	800dbbe <lv_img_decoder_open+0x2e>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 800dbde:	682b      	ldr	r3, [r5, #0]
 800dbe0:	b1a3      	cbz	r3, 800dc0c <lv_img_decoder_open+0x7c>
 800dbe2:	686a      	ldr	r2, [r5, #4]
 800dbe4:	b192      	cbz	r2, 800dc0c <lv_img_decoder_open+0x7c>
        res = d->info_cb(d, src, &dsc->header);
 800dbe6:	464a      	mov	r2, r9
 800dbe8:	4639      	mov	r1, r7
 800dbea:	4628      	mov	r0, r5
 800dbec:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 800dbee:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
 800dbf0:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
 800dbf2:	d10b      	bne.n	800dc0c <lv_img_decoder_open+0x7c>
        dsc->error_msg = NULL;
 800dbf4:	f8c4 8018 	str.w	r8, [r4, #24]
        dsc->img_data  = NULL;
 800dbf8:	f8c4 8010 	str.w	r8, [r4, #16]
        dsc->decoder   = d;
 800dbfc:	6025      	str	r5, [r4, #0]
        res = d->open_cb(d, dsc);
 800dbfe:	686b      	ldr	r3, [r5, #4]
 800dc00:	4621      	mov	r1, r4
 800dc02:	4628      	mov	r0, r5
 800dc04:	4798      	blx	r3
        if(res == LV_RES_OK) break;
 800dc06:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
 800dc08:	4606      	mov	r6, r0
        if(res == LV_RES_OK) break;
 800dc0a:	d0e3      	beq.n	800dbd4 <lv_img_decoder_open+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	4650      	mov	r0, sl
 800dc10:	f001 fb02 	bl	800f218 <_lv_ll_get_next>
 800dc14:	4605      	mov	r5, r0
 800dc16:	e7dc      	b.n	800dbd2 <lv_img_decoder_open+0x42>
 800dc18:	20003348 	.word	0x20003348

0800dc1c <lv_img_decoder_read_line>:
{
 800dc1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc1e:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800dc20:	6800      	ldr	r0, [r0, #0]
 800dc22:	6884      	ldr	r4, [r0, #8]
 800dc24:	b144      	cbz	r4, 800dc38 <lv_img_decoder_read_line+0x1c>
 800dc26:	9e06      	ldr	r6, [sp, #24]
 800dc28:	e9cd 3600 	strd	r3, r6, [sp]
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	460a      	mov	r2, r1
 800dc30:	4629      	mov	r1, r5
 800dc32:	47a0      	blx	r4
}
 800dc34:	b002      	add	sp, #8
 800dc36:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 800dc38:	4620      	mov	r0, r4
 800dc3a:	e7fb      	b.n	800dc34 <lv_img_decoder_read_line+0x18>

0800dc3c <lv_img_decoder_close>:
{
 800dc3c:	b510      	push	{r4, lr}
 800dc3e:	4604      	mov	r4, r0
    if(dsc->decoder) {
 800dc40:	6800      	ldr	r0, [r0, #0]
 800dc42:	b158      	cbz	r0, 800dc5c <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800dc44:	68c3      	ldr	r3, [r0, #12]
 800dc46:	b10b      	cbz	r3, 800dc4c <lv_img_decoder_close+0x10>
 800dc48:	4621      	mov	r1, r4
 800dc4a:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800dc4c:	7aa3      	ldrb	r3, [r4, #10]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d104      	bne.n	800dc5c <lv_img_decoder_close+0x20>
            lv_mem_free(dsc->src);
 800dc52:	6860      	ldr	r0, [r4, #4]
 800dc54:	f001 fc9a 	bl	800f58c <lv_mem_free>
            dsc->src = NULL;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	6063      	str	r3, [r4, #4]
}
 800dc5c:	bd10      	pop	{r4, pc}
	...

0800dc60 <lv_img_decoder_create>:
{
 800dc60:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 800dc62:	480a      	ldr	r0, [pc, #40]	; (800dc8c <lv_img_decoder_create+0x2c>)
 800dc64:	f001 fa9b 	bl	800f19e <_lv_ll_ins_head>
 800dc68:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
 800dc6a:	f001 f9ad 	bl	800efc8 <lv_debug_check_null>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	b920      	cbnz	r0, 800dc7c <lv_img_decoder_create+0x1c>
 800dc72:	4622      	mov	r2, r4
 800dc74:	4806      	ldr	r0, [pc, #24]	; (800dc90 <lv_img_decoder_create+0x30>)
 800dc76:	f001 f9ab 	bl	800efd0 <lv_debug_log_error>
 800dc7a:	e7fe      	b.n	800dc7a <lv_img_decoder_create+0x1a>
    if(decoder == NULL) return NULL;
 800dc7c:	b11c      	cbz	r4, 800dc86 <lv_img_decoder_create+0x26>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 800dc7e:	2110      	movs	r1, #16
 800dc80:	4620      	mov	r0, r4
 800dc82:	f001 fec9 	bl	800fa18 <_lv_memset_00>
}
 800dc86:	4620      	mov	r0, r4
 800dc88:	bd10      	pop	{r4, pc}
 800dc8a:	bf00      	nop
 800dc8c:	20003348 	.word	0x20003348
 800dc90:	08015994 	.word	0x08015994

0800dc94 <_lv_img_decoder_init>:
{
 800dc94:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800dc96:	2110      	movs	r1, #16
 800dc98:	480b      	ldr	r0, [pc, #44]	; (800dcc8 <_lv_img_decoder_init+0x34>)
 800dc9a:	f001 fa78 	bl	800f18e <_lv_ll_init>
    decoder = lv_img_decoder_create();
 800dc9e:	f7ff ffdf 	bl	800dc60 <lv_img_decoder_create>
    if(decoder == NULL) {
 800dca2:	b940      	cbnz	r0, 800dcb6 <_lv_img_decoder_init+0x22>
        LV_ASSERT_MEM(decoder);
 800dca4:	f001 f990 	bl	800efc8 <lv_debug_check_null>
 800dca8:	b968      	cbnz	r0, 800dcc6 <_lv_img_decoder_init+0x32>
 800dcaa:	2200      	movs	r2, #0
 800dcac:	2300      	movs	r3, #0
 800dcae:	4807      	ldr	r0, [pc, #28]	; (800dccc <_lv_img_decoder_init+0x38>)
 800dcb0:	f001 f98e 	bl	800efd0 <lv_debug_log_error>
 800dcb4:	e7fe      	b.n	800dcb4 <_lv_img_decoder_init+0x20>
    decoder->info_cb = info_cb;
 800dcb6:	4a06      	ldr	r2, [pc, #24]	; (800dcd0 <_lv_img_decoder_init+0x3c>)
 800dcb8:	6002      	str	r2, [r0, #0]
    decoder->open_cb = open_cb;
 800dcba:	4a06      	ldr	r2, [pc, #24]	; (800dcd4 <_lv_img_decoder_init+0x40>)
 800dcbc:	6042      	str	r2, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800dcbe:	4a06      	ldr	r2, [pc, #24]	; (800dcd8 <_lv_img_decoder_init+0x44>)
 800dcc0:	6082      	str	r2, [r0, #8]
    decoder->close_cb = close_cb;
 800dcc2:	4a06      	ldr	r2, [pc, #24]	; (800dcdc <_lv_img_decoder_init+0x48>)
 800dcc4:	60c2      	str	r2, [r0, #12]
}
 800dcc6:	bd08      	pop	{r3, pc}
 800dcc8:	20003348 	.word	0x20003348
 800dccc:	08015994 	.word	0x08015994
 800dcd0:	0800d52b 	.word	0x0800d52b
 800dcd4:	0800d929 	.word	0x0800d929
 800dcd8:	0800d5d1 	.word	0x0800d5d1
 800dcdc:	0800d4f9 	.word	0x0800d4f9

0800dce0 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 800dce0:	6843      	ldr	r3, [r0, #4]
 800dce2:	4718      	bx	r3

0800dce4 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 800dce4:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800dce6:	6804      	ldr	r4, [r0, #0]
 800dce8:	46a4      	mov	ip, r4
}
 800dcea:	bc10      	pop	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800dcec:	4760      	bx	ip

0800dcee <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 800dcee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	460a      	mov	r2, r1
 800dcf4:	a901      	add	r1, sp, #4
 800dcf6:	f7ff fff5 	bl	800dce4 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 800dcfa:	b108      	cbz	r0, 800dd00 <lv_font_get_glyph_width+0x12>
 800dcfc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
 800dd00:	b005      	add	sp, #20
 800dd02:	f85d fb04 	ldr.w	pc, [sp], #4

0800dd06 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800dd06:	7803      	ldrb	r3, [r0, #0]
 800dd08:	780a      	ldrb	r2, [r1, #0]
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	bf11      	iteee	ne
 800dd0e:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 800dd10:	784b      	ldrbeq	r3, [r1, #1]
 800dd12:	7840      	ldrbeq	r0, [r0, #1]
 800dd14:	1ac0      	subeq	r0, r0, r3

}
 800dd16:	4770      	bx	lr

0800dd18 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800dd18:	8803      	ldrh	r3, [r0, #0]
 800dd1a:	880a      	ldrh	r2, [r1, #0]
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	bf11      	iteee	ne
 800dd20:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 800dd22:	884b      	ldrheq	r3, [r1, #2]
 800dd24:	8840      	ldrheq	r0, [r0, #2]
 800dd26:	1ac0      	subeq	r0, r0, r3
}
 800dd28:	4770      	bx	lr

0800dd2a <get_bits>:
 * @return the read bits
 */
static inline uint8_t get_bits(const uint8_t * in, uint32_t bit_pos, uint8_t len)
{
    uint8_t bit_mask;
    switch(len) {
 800dd2a:	1e53      	subs	r3, r2, #1
{
 800dd2c:	b570      	push	{r4, r5, r6, lr}
    switch(len) {
 800dd2e:	2b07      	cmp	r3, #7
 800dd30:	d822      	bhi.n	800dd78 <get_bits+0x4e>
 800dd32:	e8df f003 	tbb	[pc, r3]
 800dd36:	2604      	.short	0x2604
 800dd38:	21211d1b 	.word	0x21211d1b
 800dd3c:	1f21      	.short	0x1f21
        case 1:
            bit_mask = 0x1;
 800dd3e:	4613      	mov	r3, r2
            break;
        default:
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    }

    uint32_t byte_pos = bit_pos >> 3;
 800dd40:	08cd      	lsrs	r5, r1, #3
    bit_pos = bit_pos & 0x7;
 800dd42:	f001 0107 	and.w	r1, r1, #7

    if(bit_pos + len >= 8) {
 800dd46:	1856      	adds	r6, r2, r1
 800dd48:	2e07      	cmp	r6, #7
 800dd4a:	5d44      	ldrb	r4, [r0, r5]
 800dd4c:	b25b      	sxtb	r3, r3
 800dd4e:	d91a      	bls.n	800dd86 <get_bits+0x5c>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 800dd50:	4428      	add	r0, r5
 800dd52:	7840      	ldrb	r0, [r0, #1]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 800dd54:	f1c1 0110 	rsb	r1, r1, #16
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 800dd58:	eb00 2004 	add.w	r0, r0, r4, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 800dd5c:	b280      	uxth	r0, r0
 800dd5e:	1a89      	subs	r1, r1, r2
 800dd60:	fa40 f101 	asr.w	r1, r0, r1
 800dd64:	ea03 0001 	and.w	r0, r3, r1
    }
    else {
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 800dd68:	b2c0      	uxtb	r0, r0
    }
}
 800dd6a:	bd70      	pop	{r4, r5, r6, pc}
            bit_mask = 0x7;
 800dd6c:	2307      	movs	r3, #7
            break;
 800dd6e:	e7e7      	b.n	800dd40 <get_bits+0x16>
            bit_mask = 0xF;
 800dd70:	230f      	movs	r3, #15
            break;
 800dd72:	e7e5      	b.n	800dd40 <get_bits+0x16>
            bit_mask = 0xFF;
 800dd74:	23ff      	movs	r3, #255	; 0xff
            break;
 800dd76:	e7e3      	b.n	800dd40 <get_bits+0x16>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	4093      	lsls	r3, r2
 800dd7c:	3b01      	subs	r3, #1
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	e7de      	b.n	800dd40 <get_bits+0x16>
            bit_mask = 0x3;
 800dd82:	2303      	movs	r3, #3
 800dd84:	e7dc      	b.n	800dd40 <get_bits+0x16>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 800dd86:	f1c1 0108 	rsb	r1, r1, #8
 800dd8a:	1a89      	subs	r1, r1, r2
 800dd8c:	fa44 f001 	asr.w	r0, r4, r1
 800dd90:	4018      	ands	r0, r3
 800dd92:	e7e9      	b.n	800dd68 <get_bits+0x3e>

0800dd94 <bits_write>:
 * @param len length of bits to write from `val`. (Counted from the LSB).
 * @note `len == 3` will be converted to `len = 4` and `val` will be upscaled too
 */
static inline void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)
{
    if(len == 3) {
 800dd94:	2b03      	cmp	r3, #3
{
 800dd96:	b530      	push	{r4, r5, lr}
    if(len == 3) {
 800dd98:	d10a      	bne.n	800ddb0 <bits_write+0x1c>
        len = 4;
        switch(val) {
 800dd9a:	1e53      	subs	r3, r2, #1
 800dd9c:	2b06      	cmp	r3, #6
 800dd9e:	d82d      	bhi.n	800ddfc <bits_write+0x68>
 800dda0:	e8df f003 	tbb	[pc, r3]
 800dda4:	201d1a04 	.word	0x201d1a04
 800dda8:	2623      	.short	0x2623
 800ddaa:	29          	.byte	0x29
 800ddab:	00          	.byte	0x00
        len = 4;
 800ddac:	2304      	movs	r3, #4
            case 0:
                val = 0;
                break;
            case 1:
                val = 2;
 800ddae:	2202      	movs	r2, #2
    uint16_t byte_pos = bit_pos >> 3;
    bit_pos = bit_pos & 0x7;
    bit_pos = 8 - bit_pos - len;

    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 800ddb0:	f04f 34ff 	mov.w	r4, #4294967295
    bit_pos = bit_pos & 0x7;
 800ddb4:	f001 0507 	and.w	r5, r1, #7
 800ddb8:	f1c5 0508 	rsb	r5, r5, #8
    bit_pos = 8 - bit_pos - len;
 800ddbc:	1aed      	subs	r5, r5, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 800ddbe:	f3c1 01cf 	ubfx	r1, r1, #3, #16
 800ddc2:	fa04 f303 	lsl.w	r3, r4, r3
 800ddc6:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800ddca:	5c44      	ldrb	r4, [r0, r1]
 800ddcc:	40ab      	lsls	r3, r5
 800ddce:	4023      	ands	r3, r4
    out[byte_pos] |= (val << bit_pos);
 800ddd0:	40aa      	lsls	r2, r5
 800ddd2:	431a      	orrs	r2, r3
 800ddd4:	5442      	strb	r2, [r0, r1]
}
 800ddd6:	bd30      	pop	{r4, r5, pc}
        len = 4;
 800ddd8:	2304      	movs	r3, #4
                val = 4;
 800ddda:	461a      	mov	r2, r3
                break;
 800dddc:	e7e8      	b.n	800ddb0 <bits_write+0x1c>
        len = 4;
 800ddde:	2304      	movs	r3, #4
                val = 6;
 800dde0:	2206      	movs	r2, #6
                break;
 800dde2:	e7e5      	b.n	800ddb0 <bits_write+0x1c>
        len = 4;
 800dde4:	4613      	mov	r3, r2
                val = 9;
 800dde6:	2209      	movs	r2, #9
                break;
 800dde8:	e7e2      	b.n	800ddb0 <bits_write+0x1c>
        len = 4;
 800ddea:	2304      	movs	r3, #4
                val = 11;
 800ddec:	220b      	movs	r2, #11
                break;
 800ddee:	e7df      	b.n	800ddb0 <bits_write+0x1c>
        len = 4;
 800ddf0:	2304      	movs	r3, #4
                val = 13;
 800ddf2:	220d      	movs	r2, #13
                break;
 800ddf4:	e7dc      	b.n	800ddb0 <bits_write+0x1c>
        len = 4;
 800ddf6:	2304      	movs	r3, #4
                val = 15;
 800ddf8:	220f      	movs	r2, #15
                break;
 800ddfa:	e7d9      	b.n	800ddb0 <bits_write+0x1c>
        len = 4;
 800ddfc:	2304      	movs	r3, #4
 800ddfe:	e7d7      	b.n	800ddb0 <bits_write+0x1c>

0800de00 <decompress_line>:
{
 800de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }
    else if(rle_state == RLE_STATE_COUNTER) {
        ret = rle_prev_v;
        rle_cnt--;
        if(rle_cnt == 0) {
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800de04:	4b4a      	ldr	r3, [pc, #296]	; (800df30 <decompress_line+0x130>)
{
 800de06:	b085      	sub	sp, #20
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800de08:	f8d3 9000 	ldr.w	r9, [r3]
 800de0c:	4b49      	ldr	r3, [pc, #292]	; (800df34 <decompress_line+0x134>)
    if(rle_state == RLE_STATE_SINGLE) {
 800de0e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800df3c <decompress_line+0x13c>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800de12:	781f      	ldrb	r7, [r3, #0]
 800de14:	1e43      	subs	r3, r0, #1
 800de16:	9301      	str	r3, [sp, #4]
        ret = rle_prev_v;
 800de18:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800df40 <decompress_line+0x140>
 800de1c:	440b      	add	r3, r1
        rle_cnt--;
 800de1e:	f8df b124 	ldr.w	fp, [pc, #292]	; 800df44 <decompress_line+0x144>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800de22:	4d45      	ldr	r5, [pc, #276]	; (800df38 <decompress_line+0x138>)
 800de24:	9302      	str	r3, [sp, #8]
    for(i = 0; i < w; i++) {
 800de26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d102      	bne.n	800de34 <decompress_line+0x34>
}
 800de2e:	b005      	add	sp, #20
 800de30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(rle_state == RLE_STATE_SINGLE) {
 800de34:	f89a 3000 	ldrb.w	r3, [sl]
 800de38:	b9db      	cbnz	r3, 800de72 <decompress_line+0x72>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800de3a:	682e      	ldr	r6, [r5, #0]
 800de3c:	463a      	mov	r2, r7
 800de3e:	4631      	mov	r1, r6
 800de40:	4648      	mov	r0, r9
 800de42:	9303      	str	r3, [sp, #12]
 800de44:	f7ff ff71 	bl	800dd2a <get_bits>
 800de48:	4604      	mov	r4, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
 800de4a:	b14e      	cbz	r6, 800de60 <decompress_line+0x60>
 800de4c:	f898 2000 	ldrb.w	r2, [r8]
 800de50:	9b03      	ldr	r3, [sp, #12]
 800de52:	4282      	cmp	r2, r0
            rle_cnt = 0;
 800de54:	bf02      	ittt	eq
 800de56:	f88b 3000 	strbeq.w	r3, [fp]
            rle_state = RLE_STATE_REPEATE;
 800de5a:	2301      	moveq	r3, #1
 800de5c:	f88a 3000 	strbeq.w	r3, [sl]
        rle_rdp += rle_bpp;
 800de60:	443e      	add	r6, r7
        rle_prev_v = ret;
 800de62:	f888 4000 	strb.w	r4, [r8]
        rle_rdp += rle_bpp;
 800de66:	602e      	str	r6, [r5, #0]
        out[i] = rle_next();
 800de68:	9b01      	ldr	r3, [sp, #4]
 800de6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	e7d9      	b.n	800de26 <decompress_line+0x26>
    else if(rle_state == RLE_STATE_REPEATE) {
 800de72:	2b01      	cmp	r3, #1
 800de74:	d13e      	bne.n	800def4 <decompress_line+0xf4>
        v = get_bits(rle_in, rle_rdp, 1);
 800de76:	682e      	ldr	r6, [r5, #0]
 800de78:	461a      	mov	r2, r3
 800de7a:	4631      	mov	r1, r6
 800de7c:	4648      	mov	r0, r9
 800de7e:	f7ff ff54 	bl	800dd2a <get_bits>
        rle_cnt++;
 800de82:	f89b 2000 	ldrb.w	r2, [fp]
        rle_rdp += 1;
 800de86:	1c73      	adds	r3, r6, #1
        rle_cnt++;
 800de88:	3201      	adds	r2, #1
 800de8a:	b2d2      	uxtb	r2, r2
        if(v == 1) {
 800de8c:	2801      	cmp	r0, #1
        rle_cnt++;
 800de8e:	f88b 2000 	strb.w	r2, [fp]
        rle_rdp += 1;
 800de92:	602b      	str	r3, [r5, #0]
        if(v == 1) {
 800de94:	d11f      	bne.n	800ded6 <decompress_line+0xd6>
            if(rle_cnt == 11) {
 800de96:	2a0b      	cmp	r2, #11
            ret = rle_prev_v;
 800de98:	f898 4000 	ldrb.w	r4, [r8]
            if(rle_cnt == 11) {
 800de9c:	d1e4      	bne.n	800de68 <decompress_line+0x68>
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 800de9e:	2206      	movs	r2, #6
 800dea0:	4619      	mov	r1, r3
 800dea2:	4648      	mov	r0, r9
 800dea4:	f7ff ff41 	bl	800dd2a <get_bits>
                rle_rdp += 6;
 800dea8:	3607      	adds	r6, #7
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 800deaa:	f88b 0000 	strb.w	r0, [fp]
                rle_rdp += 6;
 800deae:	602e      	str	r6, [r5, #0]
                if(rle_cnt != 0) {
 800deb0:	b120      	cbz	r0, 800debc <decompress_line+0xbc>
                    rle_state = RLE_STATE_COUNTER;
 800deb2:	f04f 0302 	mov.w	r3, #2
            rle_state = RLE_STATE_SINGLE;
 800deb6:	f88a 3000 	strb.w	r3, [sl]
 800deba:	e7d5      	b.n	800de68 <decompress_line+0x68>
 800debc:	9003      	str	r0, [sp, #12]
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800debe:	4631      	mov	r1, r6
 800dec0:	463a      	mov	r2, r7
 800dec2:	4648      	mov	r0, r9
 800dec4:	f7ff ff31 	bl	800dd2a <get_bits>
                    rle_rdp += rle_bpp;
 800dec8:	443e      	add	r6, r7
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800deca:	4604      	mov	r4, r0
                    rle_prev_v = ret;
 800decc:	f888 0000 	strb.w	r0, [r8]
                    rle_rdp += rle_bpp;
 800ded0:	602e      	str	r6, [r5, #0]
                    rle_state = RLE_STATE_SINGLE;
 800ded2:	9b03      	ldr	r3, [sp, #12]
 800ded4:	e7ef      	b.n	800deb6 <decompress_line+0xb6>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800ded6:	4619      	mov	r1, r3
 800ded8:	463a      	mov	r2, r7
 800deda:	4648      	mov	r0, r9
 800dedc:	9303      	str	r3, [sp, #12]
 800dede:	f7ff ff24 	bl	800dd2a <get_bits>
            rle_rdp += rle_bpp;
 800dee2:	9b03      	ldr	r3, [sp, #12]
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800dee4:	4604      	mov	r4, r0
            rle_rdp += rle_bpp;
 800dee6:	443b      	add	r3, r7
 800dee8:	602b      	str	r3, [r5, #0]
            rle_prev_v = ret;
 800deea:	f888 0000 	strb.w	r0, [r8]
            rle_state = RLE_STATE_SINGLE;
 800deee:	f04f 0300 	mov.w	r3, #0
 800def2:	e7e0      	b.n	800deb6 <decompress_line+0xb6>
    else if(rle_state == RLE_STATE_COUNTER) {
 800def4:	2b02      	cmp	r3, #2
 800def6:	d119      	bne.n	800df2c <decompress_line+0x12c>
        rle_cnt--;
 800def8:	f89b 6000 	ldrb.w	r6, [fp]
        ret = rle_prev_v;
 800defc:	f898 4000 	ldrb.w	r4, [r8]
        rle_cnt--;
 800df00:	3e01      	subs	r6, #1
 800df02:	b2f6      	uxtb	r6, r6
 800df04:	f88b 6000 	strb.w	r6, [fp]
        if(rle_cnt == 0) {
 800df08:	2e00      	cmp	r6, #0
 800df0a:	d1ad      	bne.n	800de68 <decompress_line+0x68>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800df0c:	682b      	ldr	r3, [r5, #0]
 800df0e:	463a      	mov	r2, r7
 800df10:	4619      	mov	r1, r3
 800df12:	4648      	mov	r0, r9
 800df14:	9303      	str	r3, [sp, #12]
 800df16:	f7ff ff08 	bl	800dd2a <get_bits>
            rle_prev_v = ret;
            rle_rdp += rle_bpp;
 800df1a:	9b03      	ldr	r3, [sp, #12]
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 800df1c:	4604      	mov	r4, r0
            rle_rdp += rle_bpp;
 800df1e:	443b      	add	r3, r7
            rle_prev_v = ret;
 800df20:	f888 0000 	strb.w	r0, [r8]
            rle_rdp += rle_bpp;
 800df24:	602b      	str	r3, [r5, #0]
            rle_state = RLE_STATE_SINGLE;
 800df26:	f88a 6000 	strb.w	r6, [sl]
 800df2a:	e79d      	b.n	800de68 <decompress_line+0x68>
    uint8_t ret = 0;
 800df2c:	2400      	movs	r4, #0
 800df2e:	e79b      	b.n	800de68 <decompress_line+0x68>
 800df30:	20000520 	.word	0x20000520
 800df34:	2000051c 	.word	0x2000051c
 800df38:	20000528 	.word	0x20000528
 800df3c:	2000052c 	.word	0x2000052c
 800df40:	20000524 	.word	0x20000524
 800df44:	2000051d 	.word	0x2000051d

0800df48 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 800df48:	8800      	ldrh	r0, [r0, #0]
 800df4a:	880b      	ldrh	r3, [r1, #0]
}
 800df4c:	1ac0      	subs	r0, r0, r3
 800df4e:	4770      	bx	lr

0800df50 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800df50:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800df52:	6804      	ldr	r4, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800df54:	b085      	sub	sp, #20
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800df56:	69a3      	ldr	r3, [r4, #24]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800df58:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800df5a:	428b      	cmp	r3, r1
 800df5c:	d00b      	beq.n	800df76 <get_glyph_dsc_id.isra.0.part.1+0x26>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800df5e:	2300      	movs	r3, #0
 800df60:	f04f 0c14 	mov.w	ip, #20
 800df64:	8a67      	ldrh	r7, [r4, #18]
 800df66:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	4297      	cmp	r7, r2
 800df6e:	d805      	bhi.n	800df7c <get_glyph_dsc_id.isra.0.part.1+0x2c>
    fdsc->last_letter = letter;
 800df70:	61a5      	str	r5, [r4, #24]
    fdsc->last_glyph_id = 0;
 800df72:	2000      	movs	r0, #0
 800df74:	e011      	b.n	800df9a <get_glyph_dsc_id.isra.0.part.1+0x4a>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800df76:	69e0      	ldr	r0, [r4, #28]
}
 800df78:	b005      	add	sp, #20
 800df7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df7c:	fb0c f603 	mul.w	r6, ip, r3
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800df80:	68a2      	ldr	r2, [r4, #8]
 800df82:	3301      	adds	r3, #1
 800df84:	1991      	adds	r1, r2, r6
 800df86:	5992      	ldr	r2, [r2, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800df88:	8888      	ldrh	r0, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800df8a:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800df8c:	4282      	cmp	r2, r0
 800df8e:	d8ec      	bhi.n	800df6a <get_glyph_dsc_id.isra.0.part.1+0x1a>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800df90:	7c8b      	ldrb	r3, [r1, #18]
 800df92:	b923      	cbnz	r3, 800df9e <get_glyph_dsc_id.isra.0.part.1+0x4e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800df94:	88c8      	ldrh	r0, [r1, #6]
 800df96:	4410      	add	r0, r2
        fdsc->last_letter = letter;
 800df98:	61a5      	str	r5, [r4, #24]
    fdsc->last_glyph_id = 0;
 800df9a:	61e0      	str	r0, [r4, #28]
 800df9c:	e7ec      	b.n	800df78 <get_glyph_dsc_id.isra.0.part.1+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800df9e:	2b01      	cmp	r3, #1
 800dfa0:	d104      	bne.n	800dfac <get_glyph_dsc_id.isra.0.part.1+0x5c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800dfa2:	68cb      	ldr	r3, [r1, #12]
 800dfa4:	5c98      	ldrb	r0, [r3, r2]
 800dfa6:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800dfa8:	4418      	add	r0, r3
 800dfaa:	e7f5      	b.n	800df98 <get_glyph_dsc_id.isra.0.part.1+0x48>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800dfac:	2b02      	cmp	r3, #2
 800dfae:	d112      	bne.n	800dfd6 <get_glyph_dsc_id.isra.0.part.1+0x86>
            uint16_t key = rcp;
 800dfb0:	a804      	add	r0, sp, #16
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800dfb2:	4f15      	ldr	r7, [pc, #84]	; (800e008 <get_glyph_dsc_id.isra.0.part.1+0xb8>)
            uint16_t key = rcp;
 800dfb4:	f820 2d02 	strh.w	r2, [r0, #-2]!
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800dfb8:	8a0a      	ldrh	r2, [r1, #16]
 800dfba:	9700      	str	r7, [sp, #0]
 800dfbc:	6889      	ldr	r1, [r1, #8]
 800dfbe:	f002 fd73 	bl	8010aa8 <_lv_utils_bsearch>
            if(p) {
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d0e8      	beq.n	800df98 <get_glyph_dsc_id.isra.0.part.1+0x48>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
 800dfc6:	68a3      	ldr	r3, [r4, #8]
 800dfc8:	4433      	add	r3, r6
 800dfca:	689a      	ldr	r2, [r3, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800dfcc:	88db      	ldrh	r3, [r3, #6]
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
 800dfce:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800dfd0:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 800dfd4:	e7e0      	b.n	800df98 <get_glyph_dsc_id.isra.0.part.1+0x48>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 800dfd6:	2b03      	cmp	r3, #3
 800dfd8:	d114      	bne.n	800e004 <get_glyph_dsc_id.isra.0.part.1+0xb4>
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800dfda:	4b0b      	ldr	r3, [pc, #44]	; (800e008 <get_glyph_dsc_id.isra.0.part.1+0xb8>)
            uint16_t key = rcp;
 800dfdc:	a804      	add	r0, sp, #16
 800dfde:	f820 2d02 	strh.w	r2, [r0, #-2]!
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 800dfe2:	8a0a      	ldrh	r2, [r1, #16]
 800dfe4:	9300      	str	r3, [sp, #0]
 800dfe6:	6889      	ldr	r1, [r1, #8]
 800dfe8:	2302      	movs	r3, #2
 800dfea:	f002 fd5d 	bl	8010aa8 <_lv_utils_bsearch>
            if(p) {
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d0d2      	beq.n	800df98 <get_glyph_dsc_id.isra.0.part.1+0x48>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
 800dff2:	68a3      	ldr	r3, [r4, #8]
 800dff4:	4433      	add	r3, r6
 800dff6:	689a      	ldr	r2, [r3, #8]
 800dff8:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800dffa:	68da      	ldr	r2, [r3, #12]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800dffc:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800dffe:	5c10      	ldrb	r0, [r2, r0]
 800e000:	88db      	ldrh	r3, [r3, #6]
 800e002:	e7d1      	b.n	800dfa8 <get_glyph_dsc_id.isra.0.part.1+0x58>
        uint32_t glyph_id = 0;
 800e004:	2000      	movs	r0, #0
 800e006:	e7c7      	b.n	800df98 <get_glyph_dsc_id.isra.0.part.1+0x48>
 800e008:	0800df49 	.word	0x0800df49

0800e00c <lv_font_get_bitmap_fmt_txt>:
{
 800e00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
 800e010:	2909      	cmp	r1, #9
{
 800e012:	b089      	sub	sp, #36	; 0x24
    if(unicode_letter == '\t') unicode_letter = ' ';
 800e014:	d004      	beq.n	800e020 <lv_font_get_bitmap_fmt_txt+0x14>
    if(letter == '\0') return 0;
 800e016:	b921      	cbnz	r1, 800e022 <lv_font_get_bitmap_fmt_txt+0x16>
    if(!gid) return NULL;
 800e018:	2000      	movs	r0, #0
}
 800e01a:	b009      	add	sp, #36	; 0x24
 800e01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 800e020:	2120      	movs	r1, #32
 800e022:	f850 5f10 	ldr.w	r5, [r0, #16]!
 800e026:	f7ff ff93 	bl	800df50 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return NULL;
 800e02a:	4607      	mov	r7, r0
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d0f3      	beq.n	800e018 <lv_font_get_bitmap_fmt_txt+0xc>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 800e030:	7d2b      	ldrb	r3, [r5, #20]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800e032:	f8d5 8004 	ldr.w	r8, [r5, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 800e036:	079b      	lsls	r3, r3, #30
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800e038:	eb08 06c0 	add.w	r6, r8, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 800e03c:	d108      	bne.n	800e050 <lv_font_get_bitmap_fmt_txt+0x44>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800e03e:	2e00      	cmp	r6, #0
 800e040:	d0ea      	beq.n	800e018 <lv_font_get_bitmap_fmt_txt+0xc>
 800e042:	f858 3030 	ldr.w	r3, [r8, r0, lsl #3]
 800e046:	6828      	ldr	r0, [r5, #0]
 800e048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e04c:	4418      	add	r0, r3
 800e04e:	e7e4      	b.n	800e01a <lv_font_get_bitmap_fmt_txt+0xe>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
 800e050:	7931      	ldrb	r1, [r6, #4]
 800e052:	7974      	ldrb	r4, [r6, #5]
        if(gsize == 0) return NULL;
 800e054:	434c      	muls	r4, r1
 800e056:	d0df      	beq.n	800e018 <lv_font_get_bitmap_fmt_txt+0xc>
        switch(fdsc->bpp) {
 800e058:	7ceb      	ldrb	r3, [r5, #19]
 800e05a:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800e05e:	3b01      	subs	r3, #1
 800e060:	2b03      	cmp	r3, #3
 800e062:	d805      	bhi.n	800e070 <lv_font_get_bitmap_fmt_txt+0x64>
 800e064:	e8df f003 	tbb	[pc, r3]
 800e068:	6c6c6902 	.word	0x6c6c6902
                buf_size = (gsize + 7) >> 3;
 800e06c:	3407      	adds	r4, #7
 800e06e:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
 800e070:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800e210 <lv_font_get_bitmap_fmt_txt+0x204>
 800e074:	f8d9 0000 	ldr.w	r0, [r9]
 800e078:	f001 faba 	bl	800f5f0 <_lv_mem_get_size>
 800e07c:	42a0      	cmp	r0, r4
 800e07e:	46ca      	mov	sl, r9
 800e080:	d361      	bcc.n	800e146 <lv_font_get_bitmap_fmt_txt+0x13a>
    rle_state = RLE_STATE_SINGLE;
 800e082:	2400      	movs	r4, #0
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 800e084:	7d2b      	ldrb	r3, [r5, #20]
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800e086:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 800e08a:	f003 0303 	and.w	r3, r3, #3
 800e08e:	9303      	str	r3, [sp, #12]
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800e090:	682b      	ldr	r3, [r5, #0]
 800e092:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e096:	441a      	add	r2, r3
 800e098:	f8da 3000 	ldr.w	r3, [sl]
    rle_in = in;
 800e09c:	4956      	ldr	r1, [pc, #344]	; (800e1f8 <lv_font_get_bitmap_fmt_txt+0x1ec>)
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	7973      	ldrb	r3, [r6, #5]
    rle_in = in;
 800e0a2:	600a      	str	r2, [r1, #0]
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800e0a4:	9306      	str	r3, [sp, #24]
                   (uint8_t)fdsc->bpp,
 800e0a6:	7ceb      	ldrb	r3, [r5, #19]
    rle_bpp = bpp;
 800e0a8:	4a54      	ldr	r2, [pc, #336]	; (800e1fc <lv_font_get_bitmap_fmt_txt+0x1f0>)
                   (uint8_t)fdsc->bpp,
 800e0aa:	f3c3 0383 	ubfx	r3, r3, #2, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800e0ae:	fa5f f883 	uxtb.w	r8, r3
    rle_bpp = bpp;
 800e0b2:	7013      	strb	r3, [r2, #0]
    rle_state = RLE_STATE_SINGLE;
 800e0b4:	4b52      	ldr	r3, [pc, #328]	; (800e200 <lv_font_get_bitmap_fmt_txt+0x1f4>)
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800e0b6:	f896 a004 	ldrb.w	sl, [r6, #4]
    rle_state = RLE_STATE_SINGLE;
 800e0ba:	701c      	strb	r4, [r3, #0]
    rle_rdp = 0;
 800e0bc:	4b51      	ldr	r3, [pc, #324]	; (800e204 <lv_font_get_bitmap_fmt_txt+0x1f8>)
    if(bpp == 3) wr_size = 4;
 800e0be:	f1b8 0f03 	cmp.w	r8, #3
    rle_rdp = 0;
 800e0c2:	601c      	str	r4, [r3, #0]
    rle_prev_v = 0;
 800e0c4:	4b50      	ldr	r3, [pc, #320]	; (800e208 <lv_font_get_bitmap_fmt_txt+0x1fc>)
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 800e0c6:	4650      	mov	r0, sl
    rle_prev_v = 0;
 800e0c8:	701c      	strb	r4, [r3, #0]
    rle_cnt = 0;
 800e0ca:	4b50      	ldr	r3, [pc, #320]	; (800e20c <lv_font_get_bitmap_fmt_txt+0x200>)
    if(bpp == 3) wr_size = 4;
 800e0cc:	bf14      	ite	ne
 800e0ce:	46c1      	movne	r9, r8
 800e0d0:	f04f 0904 	moveq.w	r9, #4
    rle_cnt = 0;
 800e0d4:	701c      	strb	r4, [r3, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 800e0d6:	f001 fc01 	bl	800f8dc <_lv_mem_buf_get>
    if(prefilter) {
 800e0da:	9b03      	ldr	r3, [sp, #12]
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 800e0dc:	fa0f f78a 	sxth.w	r7, sl
    if(prefilter) {
 800e0e0:	2b01      	cmp	r3, #1
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 800e0e2:	4605      	mov	r5, r0
    if(prefilter) {
 800e0e4:	d103      	bne.n	800e0ee <lv_font_get_bitmap_fmt_txt+0xe2>
        line_buf2 = _lv_mem_buf_get(w);
 800e0e6:	4650      	mov	r0, sl
 800e0e8:	f001 fbf8 	bl	800f8dc <_lv_mem_buf_get>
 800e0ec:	4604      	mov	r4, r0
    decompress_line(line_buf1, w);
 800e0ee:	462e      	mov	r6, r5
    uint32_t wrp = 0;
 800e0f0:	f04f 0b00 	mov.w	fp, #0
    decompress_line(line_buf1, w);
 800e0f4:	4639      	mov	r1, r7
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	f7ff fe82 	bl	800de00 <decompress_line>
 800e0fc:	b2ab      	uxth	r3, r5
 800e0fe:	9305      	str	r3, [sp, #20]
    for(x = 0; x < w; x++) {
 800e100:	9b05      	ldr	r3, [sp, #20]
 800e102:	1af3      	subs	r3, r6, r3
 800e104:	b21b      	sxth	r3, r3
 800e106:	429f      	cmp	r7, r3
 800e108:	dc33      	bgt.n	800e172 <lv_font_get_bitmap_fmt_txt+0x166>
 800e10a:	fb09 f30a 	mul.w	r3, r9, sl
 800e10e:	9301      	str	r3, [sp, #4]
 800e110:	461e      	mov	r6, r3
    for(y = 1; y < h; y++) {
 800e112:	2301      	movs	r3, #1
 800e114:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e118:	9302      	str	r3, [sp, #8]
 800e11a:	eb05 030a 	add.w	r3, r5, sl
 800e11e:	9307      	str	r3, [sp, #28]
 800e120:	9b06      	ldr	r3, [sp, #24]
 800e122:	9a02      	ldr	r2, [sp, #8]
 800e124:	4293      	cmp	r3, r2
 800e126:	dc2d      	bgt.n	800e184 <lv_font_get_bitmap_fmt_txt+0x178>
    _lv_mem_buf_release(line_buf1);
 800e128:	4628      	mov	r0, r5
 800e12a:	f001 fa6f 	bl	800f60c <_lv_mem_buf_release>
    _lv_mem_buf_release(line_buf2);
 800e12e:	4620      	mov	r0, r4
 800e130:	f001 fa6c 	bl	800f60c <_lv_mem_buf_release>
        return LV_GC_ROOT(_lv_font_decompr_buf);
 800e134:	4b36      	ldr	r3, [pc, #216]	; (800e210 <lv_font_get_bitmap_fmt_txt+0x204>)
 800e136:	6818      	ldr	r0, [r3, #0]
 800e138:	e76f      	b.n	800e01a <lv_font_get_bitmap_fmt_txt+0xe>
                buf_size = (gsize + 3) >> 2;
 800e13a:	3403      	adds	r4, #3
 800e13c:	08a4      	lsrs	r4, r4, #2
                break;
 800e13e:	e797      	b.n	800e070 <lv_font_get_bitmap_fmt_txt+0x64>
                buf_size = (gsize + 1) >> 1;
 800e140:	3401      	adds	r4, #1
 800e142:	0864      	lsrs	r4, r4, #1
                break;
 800e144:	e794      	b.n	800e070 <lv_font_get_bitmap_fmt_txt+0x64>
            LV_GC_ROOT(_lv_font_decompr_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
 800e146:	4621      	mov	r1, r4
 800e148:	f8d9 0000 	ldr.w	r0, [r9]
 800e14c:	f001 fb9a 	bl	800f884 <lv_mem_realloc>
 800e150:	f8c9 0000 	str.w	r0, [r9]
            LV_ASSERT_MEM(LV_GC_ROOT(_lv_font_decompr_buf));
 800e154:	f000 ff38 	bl	800efc8 <lv_debug_check_null>
 800e158:	4603      	mov	r3, r0
 800e15a:	b928      	cbnz	r0, 800e168 <lv_font_get_bitmap_fmt_txt+0x15c>
 800e15c:	f8d9 2000 	ldr.w	r2, [r9]
 800e160:	482c      	ldr	r0, [pc, #176]	; (800e214 <lv_font_get_bitmap_fmt_txt+0x208>)
 800e162:	f000 ff35 	bl	800efd0 <lv_debug_log_error>
 800e166:	e7fe      	b.n	800e166 <lv_font_get_bitmap_fmt_txt+0x15a>
            if(LV_GC_ROOT(_lv_font_decompr_buf) == NULL) return NULL;
 800e168:	f8d9 3000 	ldr.w	r3, [r9]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d188      	bne.n	800e082 <lv_font_get_bitmap_fmt_txt+0x76>
 800e170:	e752      	b.n	800e018 <lv_font_get_bitmap_fmt_txt+0xc>
        bits_write(out, wrp, line_buf1[x], bpp);
 800e172:	4659      	mov	r1, fp
 800e174:	4643      	mov	r3, r8
 800e176:	f816 2b01 	ldrb.w	r2, [r6], #1
 800e17a:	9800      	ldr	r0, [sp, #0]
 800e17c:	f7ff fe0a 	bl	800dd94 <bits_write>
        wrp += wr_size;
 800e180:	44cb      	add	fp, r9
 800e182:	e7bd      	b.n	800e100 <lv_font_get_bitmap_fmt_txt+0xf4>
        if(prefilter) {
 800e184:	9b03      	ldr	r3, [sp, #12]
            decompress_line(line_buf2, w);
 800e186:	4639      	mov	r1, r7
        if(prefilter) {
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d121      	bne.n	800e1d0 <lv_font_get_bitmap_fmt_txt+0x1c4>
            decompress_line(line_buf2, w);
 800e18c:	46b3      	mov	fp, r6
 800e18e:	4620      	mov	r0, r4
 800e190:	f7ff fe36 	bl	800de00 <decompress_line>
 800e194:	1e63      	subs	r3, r4, #1
 800e196:	9304      	str	r3, [sp, #16]
 800e198:	f105 3aff 	add.w	sl, r5, #4294967295
            for(x = 0; x < w; x++) {
 800e19c:	9b07      	ldr	r3, [sp, #28]
 800e19e:	459a      	cmp	sl, r3
 800e1a0:	d106      	bne.n	800e1b0 <lv_font_get_bitmap_fmt_txt+0x1a4>
 800e1a2:	9b01      	ldr	r3, [sp, #4]
 800e1a4:	441e      	add	r6, r3
 800e1a6:	9b02      	ldr	r3, [sp, #8]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	b21b      	sxth	r3, r3
 800e1ac:	9302      	str	r3, [sp, #8]
 800e1ae:	e7b7      	b.n	800e120 <lv_font_get_bitmap_fmt_txt+0x114>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 800e1b0:	9b04      	ldr	r3, [sp, #16]
                bits_write(out, wrp, line_buf1[x], bpp);
 800e1b2:	4659      	mov	r1, fp
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 800e1b4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
                bits_write(out, wrp, line_buf1[x], bpp);
 800e1b8:	9800      	ldr	r0, [sp, #0]
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 800e1ba:	9304      	str	r3, [sp, #16]
 800e1bc:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
                wrp += wr_size;
 800e1c0:	44cb      	add	fp, r9
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 800e1c2:	405a      	eors	r2, r3
 800e1c4:	f88a 2000 	strb.w	r2, [sl]
                bits_write(out, wrp, line_buf1[x], bpp);
 800e1c8:	4643      	mov	r3, r8
 800e1ca:	f7ff fde3 	bl	800dd94 <bits_write>
 800e1ce:	e7e5      	b.n	800e19c <lv_font_get_bitmap_fmt_txt+0x190>
            decompress_line(line_buf1, w);
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	f7ff fe15 	bl	800de00 <decompress_line>
 800e1d6:	46aa      	mov	sl, r5
 800e1d8:	46b3      	mov	fp, r6
            for(x = 0; x < w; x++) {
 800e1da:	9b05      	ldr	r3, [sp, #20]
 800e1dc:	ebaa 0303 	sub.w	r3, sl, r3
 800e1e0:	b21b      	sxth	r3, r3
 800e1e2:	429f      	cmp	r7, r3
 800e1e4:	dddd      	ble.n	800e1a2 <lv_font_get_bitmap_fmt_txt+0x196>
                bits_write(out, wrp, line_buf1[x], bpp);
 800e1e6:	4659      	mov	r1, fp
 800e1e8:	4643      	mov	r3, r8
 800e1ea:	f81a 2b01 	ldrb.w	r2, [sl], #1
 800e1ee:	9800      	ldr	r0, [sp, #0]
 800e1f0:	f7ff fdd0 	bl	800dd94 <bits_write>
                wrp += wr_size;
 800e1f4:	44cb      	add	fp, r9
 800e1f6:	e7f0      	b.n	800e1da <lv_font_get_bitmap_fmt_txt+0x1ce>
 800e1f8:	20000520 	.word	0x20000520
 800e1fc:	2000051c 	.word	0x2000051c
 800e200:	2000052c 	.word	0x2000052c
 800e204:	20000528 	.word	0x20000528
 800e208:	20000524 	.word	0x20000524
 800e20c:	2000051d 	.word	0x2000051d
 800e210:	2000332c 	.word	0x2000332c
 800e214:	08015994 	.word	0x08015994

0800e218 <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
 800e218:	2a09      	cmp	r2, #9
{
 800e21a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e21e:	4681      	mov	r9, r0
 800e220:	460c      	mov	r4, r1
 800e222:	469a      	mov	sl, r3
    if(unicode_letter == '\t') {
 800e224:	d006      	beq.n	800e234 <lv_font_get_glyph_dsc_fmt_txt+0x1c>
    if(letter == '\0') return 0;
 800e226:	2a00      	cmp	r2, #0
 800e228:	d134      	bne.n	800e294 <lv_font_get_glyph_dsc_fmt_txt+0x7c>
    if(!gid) return false;
 800e22a:	2500      	movs	r5, #0
}
 800e22c:	4628      	mov	r0, r5
 800e22e:	b004      	add	sp, #16
 800e230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        is_tab = true;
 800e234:	2501      	movs	r5, #1
        unicode_letter = ' ';
 800e236:	2220      	movs	r2, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800e238:	46c8      	mov	r8, r9
 800e23a:	f858 6f10 	ldr.w	r6, [r8, #16]!
 800e23e:	4611      	mov	r1, r2
 800e240:	4640      	mov	r0, r8
 800e242:	f7ff fe85 	bl	800df50 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800e246:	4607      	mov	r7, r0
 800e248:	2800      	cmp	r0, #0
 800e24a:	d0ee      	beq.n	800e22a <lv_font_get_glyph_dsc_fmt_txt+0x12>
    if(fdsc->kern_dsc) {
 800e24c:	68f3      	ldr	r3, [r6, #12]
 800e24e:	bb1b      	cbnz	r3, 800e298 <lv_font_get_glyph_dsc_fmt_txt+0x80>
    int8_t kvalue = 0;
 800e250:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800e252:	6873      	ldr	r3, [r6, #4]
 800e254:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800e258:	8a33      	ldrh	r3, [r6, #16]
 800e25a:	4343      	muls	r3, r0
    uint32_t adv_w = gdsc->adv_w;
 800e25c:	8878      	ldrh	r0, [r7, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800e25e:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 800e260:	0900      	lsrs	r0, r0, #4
    if(is_tab) adv_w *= 2;
 800e262:	b105      	cbz	r5, 800e266 <lv_font_get_glyph_dsc_fmt_txt+0x4e>
 800e264:	0040      	lsls	r0, r0, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800e266:	3308      	adds	r3, #8
 800e268:	4403      	add	r3, r0
 800e26a:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 800e26c:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 800e26e:	797b      	ldrb	r3, [r7, #5]
 800e270:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
 800e272:	793b      	ldrb	r3, [r7, #4]
 800e274:	8063      	strh	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800e276:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800e27a:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
 800e27c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800e280:	8122      	strh	r2, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 800e282:	7cf2      	ldrb	r2, [r6, #19]
 800e284:	f3c2 0283 	ubfx	r2, r2, #2, #4
 800e288:	72a2      	strb	r2, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 800e28a:	2d00      	cmp	r5, #0
 800e28c:	d061      	beq.n	800e352 <lv_font_get_glyph_dsc_fmt_txt+0x13a>
 800e28e:	005b      	lsls	r3, r3, #1
 800e290:	8063      	strh	r3, [r4, #2]
 800e292:	e7cb      	b.n	800e22c <lv_font_get_glyph_dsc_fmt_txt+0x14>
    bool is_tab = false;
 800e294:	2500      	movs	r5, #0
 800e296:	e7cf      	b.n	800e238 <lv_font_get_glyph_dsc_fmt_txt+0x20>
    if(letter == '\0') return 0;
 800e298:	f1ba 0f00 	cmp.w	sl, #0
 800e29c:	d0d8      	beq.n	800e250 <lv_font_get_glyph_dsc_fmt_txt+0x38>
 800e29e:	4651      	mov	r1, sl
 800e2a0:	4640      	mov	r0, r8
 800e2a2:	f7ff fe55 	bl	800df50 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d0d2      	beq.n	800e250 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
 800e2aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2ae:	f8d3 800c 	ldr.w	r8, [r3, #12]
    if(fdsc->kern_classes == 0) {
 800e2b2:	7cdb      	ldrb	r3, [r3, #19]
 800e2b4:	065b      	lsls	r3, r3, #25
 800e2b6:	d437      	bmi.n	800e328 <lv_font_get_glyph_dsc_fmt_txt+0x110>
        if(kdsc->glyph_ids_size == 0) {
 800e2b8:	f898 300b 	ldrb.w	r3, [r8, #11]
 800e2bc:	f013 0303 	ands.w	r3, r3, #3
 800e2c0:	d119      	bne.n	800e2f6 <lv_font_get_glyph_dsc_fmt_txt+0xde>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800e2c2:	eb07 2300 	add.w	r3, r7, r0, lsl #8
 800e2c6:	a804      	add	r0, sp, #16
            const uint8_t * g_ids = kdsc->glyph_ids;
 800e2c8:	f8d8 9000 	ldr.w	r9, [r8]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800e2cc:	f8d8 2008 	ldr.w	r2, [r8, #8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800e2d0:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800e2d4:	4b20      	ldr	r3, [pc, #128]	; (800e358 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
 800e2d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	4649      	mov	r1, r9
 800e2de:	2302      	movs	r3, #2
 800e2e0:	f002 fbe2 	bl	8010aa8 <_lv_utils_bsearch>
            if(kid_p) {
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d0b4      	beq.n	800e252 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
 800e2e8:	eba0 0009 	sub.w	r0, r0, r9
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 800e2ec:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 800e2ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e2f2:	5618      	ldrsb	r0, [r3, r0]
 800e2f4:	e7ad      	b.n	800e252 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d1aa      	bne.n	800e250 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800e2fa:	eb07 2300 	add.w	r3, r7, r0, lsl #8
 800e2fe:	a804      	add	r0, sp, #16
            const uint16_t * g_ids = kdsc->glyph_ids;
 800e300:	f8d8 9000 	ldr.w	r9, [r8]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800e304:	f8d8 2008 	ldr.w	r2, [r8, #8]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800e308:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800e30c:	4b13      	ldr	r3, [pc, #76]	; (800e35c <lv_font_get_glyph_dsc_fmt_txt+0x144>)
 800e30e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	4649      	mov	r1, r9
 800e316:	2304      	movs	r3, #4
 800e318:	f002 fbc6 	bl	8010aa8 <_lv_utils_bsearch>
            if(kid_p) {
 800e31c:	2800      	cmp	r0, #0
 800e31e:	d098      	beq.n	800e252 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
 800e320:	eba0 0009 	sub.w	r0, r0, r9
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 800e324:	0900      	lsrs	r0, r0, #4
 800e326:	e7e2      	b.n	800e2ee <lv_font_get_glyph_dsc_fmt_txt+0xd6>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800e328:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e32c:	5ddb      	ldrb	r3, [r3, r7]
        if(left_class > 0 && right_class > 0) {
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d08e      	beq.n	800e250 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 800e332:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800e336:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 800e338:	2900      	cmp	r1, #0
 800e33a:	d089      	beq.n	800e250 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 800e33c:	f8d8 2000 	ldr.w	r2, [r8]
 800e340:	f898 000d 	ldrb.w	r0, [r8, #13]
 800e344:	3b01      	subs	r3, #1
 800e346:	440a      	add	r2, r1
 800e348:	fb00 2303 	mla	r3, r0, r3, r2
 800e34c:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
 800e350:	e77f      	b.n	800e252 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
 800e352:	2501      	movs	r5, #1
 800e354:	e76a      	b.n	800e22c <lv_font_get_glyph_dsc_fmt_txt+0x14>
 800e356:	bf00      	nop
 800e358:	0800dd07 	.word	0x0800dd07
 800e35c:	0800dd19 	.word	0x0800dd19

0800e360 <_lv_font_clean_up_fmt_txt>:
{
 800e360:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
 800e362:	4c04      	ldr	r4, [pc, #16]	; (800e374 <_lv_font_clean_up_fmt_txt+0x14>)
 800e364:	6820      	ldr	r0, [r4, #0]
 800e366:	b118      	cbz	r0, 800e370 <_lv_font_clean_up_fmt_txt+0x10>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
 800e368:	f001 f910 	bl	800f58c <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
 800e36c:	2300      	movs	r3, #0
 800e36e:	6023      	str	r3, [r4, #0]
}
 800e370:	bd10      	pop	{r4, pc}
 800e372:	bf00      	nop
 800e374:	2000332c 	.word	0x2000332c

0800e378 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800e378:	b510      	push	{r4, lr}
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 800e37a:	2134      	movs	r1, #52	; 0x34
{
 800e37c:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 800e37e:	f001 fb4b 	bl	800fa18 <_lv_memset_00>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 800e382:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800e386:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 800e388:	23f0      	movs	r3, #240	; 0xf0
    driver->flush_cb         = NULL;
 800e38a:	2200      	movs	r2, #0
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
    driver->dpi = LV_DPI;
 800e38c:	21a0      	movs	r1, #160	; 0xa0
    driver->ver_res          = LV_VER_RES_MAX;
 800e38e:	8063      	strh	r3, [r4, #2]
    driver->rotated          = 0;
 800e390:	7a23      	ldrb	r3, [r4, #8]
    driver->flush_cb         = NULL;
 800e392:	60e2      	str	r2, [r4, #12]
    driver->rotated          = 0;
 800e394:	f362 0341 	bfi	r3, r2, #1, #1
 800e398:	7223      	strb	r3, [r4, #8]
    driver->dpi = LV_DPI;
 800e39a:	8923      	ldrh	r3, [r4, #8]
    driver->buffer           = NULL;
 800e39c:	6062      	str	r2, [r4, #4]
    driver->dpi = LV_DPI;
 800e39e:	f361 038b 	bfi	r3, r1, #2, #10
 800e3a2:	8123      	strh	r3, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	f043 0301 	orr.w	r3, r3, #1
 800e3aa:	7223      	strb	r3, [r4, #8]
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
    driver->gpu_fill_cb  = NULL;
 800e3ac:	f24e 0307 	movw	r3, #57351	; 0xe007
    driver->gpu_blend_cb = NULL;
 800e3b0:	e9c4 220a 	strd	r2, r2, [r4, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
 800e3b4:	8623      	strh	r3, [r4, #48]	; 0x30

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 800e3b6:	6162      	str	r2, [r4, #20]
}
 800e3b8:	bd10      	pop	{r4, pc}

0800e3ba <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800e3ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3bc:	4604      	mov	r4, r0
 800e3be:	460d      	mov	r5, r1
 800e3c0:	4617      	mov	r7, r2
 800e3c2:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
 800e3c4:	2124      	movs	r1, #36	; 0x24
 800e3c6:	f001 fb27 	bl	800fa18 <_lv_memset_00>

    disp_buf->buf1    = buf1;
    disp_buf->buf2    = buf2;
 800e3ca:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->buf_act = disp_buf->buf1;
    disp_buf->size    = size_in_px_cnt;
 800e3ce:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
 800e3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3d4 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 800e3d4:	4b01      	ldr	r3, [pc, #4]	; (800e3dc <lv_disp_get_default+0x8>)
 800e3d6:	6818      	ldr	r0, [r3, #0]
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	20000530 	.word	0x20000530

0800e3e0 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800e3e0:	b910      	cbnz	r0, 800e3e8 <lv_disp_get_hor_res+0x8>
    return disp_def;
 800e3e2:	4b07      	ldr	r3, [pc, #28]	; (800e400 <lv_disp_get_hor_res+0x20>)
 800e3e4:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 800e3e6:	b138      	cbz	r0, 800e3f8 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800e3e8:	7a03      	ldrb	r3, [r0, #8]
 800e3ea:	079b      	lsls	r3, r3, #30
 800e3ec:	bf54      	ite	pl
 800e3ee:	f9b0 0000 	ldrshpl.w	r0, [r0]
 800e3f2:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 800e3f6:	4770      	bx	lr
        return LV_HOR_RES_MAX;
 800e3f8:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
 800e3fc:	4770      	bx	lr
 800e3fe:	bf00      	nop
 800e400:	20000530 	.word	0x20000530

0800e404 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800e404:	b910      	cbnz	r0, 800e40c <lv_disp_get_ver_res+0x8>
    return disp_def;
 800e406:	4b06      	ldr	r3, [pc, #24]	; (800e420 <lv_disp_get_ver_res+0x1c>)
 800e408:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
 800e40a:	b138      	cbz	r0, 800e41c <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800e40c:	7a03      	ldrb	r3, [r0, #8]
 800e40e:	079b      	lsls	r3, r3, #30
 800e410:	bf54      	ite	pl
 800e412:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 800e416:	f9b0 0000 	ldrshmi.w	r0, [r0]
 800e41a:	4770      	bx	lr
        return LV_VER_RES_MAX;
 800e41c:	20f0      	movs	r0, #240	; 0xf0
}
 800e41e:	4770      	bx	lr
 800e420:	20000530 	.word	0x20000530

0800e424 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 800e424:	b910      	cbnz	r0, 800e42c <lv_disp_get_dpi+0x8>
    return disp_def;
 800e426:	4b04      	ldr	r3, [pc, #16]	; (800e438 <lv_disp_get_dpi+0x14>)
 800e428:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 800e42a:	b118      	cbz	r0, 800e434 <lv_disp_get_dpi+0x10>
    return disp->driver.dpi;
 800e42c:	8900      	ldrh	r0, [r0, #8]
 800e42e:	f3c0 0089 	ubfx	r0, r0, #2, #10
 800e432:	4770      	bx	lr
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 800e434:	20a0      	movs	r0, #160	; 0xa0
}
 800e436:	4770      	bx	lr
 800e438:	20000530 	.word	0x20000530

0800e43c <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
 800e43c:	2200      	movs	r2, #0
 800e43e:	6843      	ldr	r3, [r0, #4]
 800e440:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
 800e442:	61da      	str	r2, [r3, #28]
}
 800e444:	4770      	bx	lr

0800e446 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
 800e446:	6840      	ldr	r0, [r0, #4]
 800e448:	4770      	bx	lr

0800e44a <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
 800e44a:	f8b0 017e 	ldrh.w	r0, [r0, #382]	; 0x17e
}
 800e44e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e452:	4770      	bx	lr

0800e454 <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
 800e454:	f8b0 317e 	ldrh.w	r3, [r0, #382]	; 0x17e
 800e458:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e45c:	428a      	cmp	r2, r1
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
 800e45e:	bfaa      	itet	ge
 800e460:	1a52      	subge	r2, r2, r1
        disp->inv_p = 0;
 800e462:	f36f 0309 	bfclt	r3, #0, #10
        disp->inv_p -= num;
 800e466:	f362 0309 	bfige	r3, r2, #0, #10
 800e46a:	f8a0 317e 	strh.w	r3, [r0, #382]	; 0x17e
}
 800e46e:	4770      	bx	lr

0800e470 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800e470:	6843      	ldr	r3, [r0, #4]
 800e472:	6818      	ldr	r0, [r3, #0]
 800e474:	b118      	cbz	r0, 800e47e <lv_disp_is_double_buf+0xe>
 800e476:	6858      	ldr	r0, [r3, #4]
 800e478:	3000      	adds	r0, #0
 800e47a:	bf18      	it	ne
 800e47c:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
 800e47e:	4770      	bx	lr

0800e480 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800e480:	b508      	push	{r3, lr}
 800e482:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800e484:	f7ff fff4 	bl	800e470 <lv_disp_is_double_buf>
 800e488:	b148      	cbz	r0, 800e49e <lv_disp_is_true_double_buf+0x1e>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800e48a:	f9b2 3000 	ldrsh.w	r3, [r2]
 800e48e:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800e492:	4358      	muls	r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800e494:	6853      	ldr	r3, [r2, #4]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	1ac3      	subs	r3, r0, r3
 800e49a:	4258      	negs	r0, r3
 800e49c:	4158      	adcs	r0, r3
        return true;
    }
    else {
        return false;
    }
}
 800e49e:	bd08      	pop	{r3, pc}

0800e4a0 <lv_disp_drv_register>:
{
 800e4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a2:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800e4a4:	4839      	ldr	r0, [pc, #228]	; (800e58c <lv_disp_drv_register+0xec>)
 800e4a6:	f000 fe7a 	bl	800f19e <_lv_ll_ins_head>
    if(!disp) {
 800e4aa:	4604      	mov	r4, r0
 800e4ac:	b958      	cbnz	r0, 800e4c6 <lv_disp_drv_register+0x26>
        LV_ASSERT_MEM(disp);
 800e4ae:	f000 fd8b 	bl	800efc8 <lv_debug_check_null>
 800e4b2:	b110      	cbz	r0, 800e4ba <lv_disp_drv_register+0x1a>
        return NULL;
 800e4b4:	2400      	movs	r4, #0
}
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	2300      	movs	r3, #0
 800e4be:	4834      	ldr	r0, [pc, #208]	; (800e590 <lv_disp_drv_register+0xf0>)
 800e4c0:	f000 fd86 	bl	800efd0 <lv_debug_log_error>
 800e4c4:	e7fe      	b.n	800e4c4 <lv_disp_drv_register+0x24>
    _lv_memset_00(disp, sizeof(lv_disp_t));
 800e4c6:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800e4ca:	f001 faa5 	bl	800fa18 <_lv_memset_00>
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 800e4ce:	2234      	movs	r2, #52	; 0x34
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f001 f8e6 	bl	800f6a4 <_lv_memcpy>
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800e4d8:	214c      	movs	r1, #76	; 0x4c
 800e4da:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800e4de:	f000 fe56 	bl	800f18e <_lv_ll_init>
    disp->last_activity_time = 0;
 800e4e2:	2300      	movs	r3, #0
    if(disp_def == NULL) disp_def = disp;
 800e4e4:	4e2b      	ldr	r6, [pc, #172]	; (800e594 <lv_disp_drv_register+0xf4>)
    disp->last_activity_time = 0;
 800e4e6:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
    if(disp_def == NULL) disp_def = disp;
 800e4ea:	6833      	ldr	r3, [r6, #0]
 800e4ec:	b903      	cbnz	r3, 800e4f0 <lv_disp_drv_register+0x50>
 800e4ee:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 800e4f0:	4623      	mov	r3, r4
 800e4f2:	2203      	movs	r2, #3
 800e4f4:	211e      	movs	r1, #30
 800e4f6:	4828      	ldr	r0, [pc, #160]	; (800e598 <lv_disp_drv_register+0xf8>)
    lv_disp_t * disp_def_tmp = disp_def;
 800e4f8:	6837      	ldr	r7, [r6, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800e4fa:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 800e4fc:	f001 ffda 	bl	80104b4 <lv_task_create>
 800e500:	6360      	str	r0, [r4, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
 800e502:	f000 fd61 	bl	800efc8 <lv_debug_check_null>
 800e506:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e508:	4603      	mov	r3, r0
 800e50a:	b918      	cbnz	r0, 800e514 <lv_disp_drv_register+0x74>
 800e50c:	4820      	ldr	r0, [pc, #128]	; (800e590 <lv_disp_drv_register+0xf0>)
 800e50e:	f000 fd5f 	bl	800efd0 <lv_debug_log_error>
 800e512:	e7fe      	b.n	800e512 <lv_disp_drv_register+0x72>
    if(disp->refr_task == NULL) return NULL;
 800e514:	2a00      	cmp	r2, #0
 800e516:	d0cd      	beq.n	800e4b4 <lv_disp_drv_register+0x14>
    disp->inv_p = 0;
 800e518:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
    disp->last_activity_time = 0;
 800e51c:	2500      	movs	r5, #0
    disp->inv_p = 0;
 800e51e:	f36f 0309 	bfc	r3, #0, #10
 800e522:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
    disp->bg_color = LV_COLOR_WHITE;
 800e526:	4b1d      	ldr	r3, [pc, #116]	; (800e59c <lv_disp_drv_register+0xfc>)
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800e528:	4629      	mov	r1, r5
    disp->bg_color = LV_COLOR_WHITE;
 800e52a:	881b      	ldrh	r3, [r3, #0]
    disp->last_activity_time = 0;
 800e52c:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
    disp->bg_color = LV_COLOR_WHITE;
 800e530:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    disp->bg_opa = LV_OPA_COVER;
 800e534:	23ff      	movs	r3, #255	; 0xff
    disp->bg_img = NULL;
 800e536:	65a5      	str	r5, [r4, #88]	; 0x58
    disp->bg_opa = LV_OPA_COVER;
 800e538:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    disp->prev_scr  = NULL;
 800e53c:	64a5      	str	r5, [r4, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800e53e:	4628      	mov	r0, r5
 800e540:	f7f6 fc94 	bl	8004e6c <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800e544:	4629      	mov	r1, r5
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800e546:	6460      	str	r0, [r4, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800e548:	4628      	mov	r0, r5
 800e54a:	f7f6 fc8f 	bl	8004e6c <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 800e54e:	4629      	mov	r1, r5
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800e550:	64e0      	str	r0, [r4, #76]	; 0x4c
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 800e552:	4628      	mov	r0, r5
 800e554:	f7f6 fc8a 	bl	8004e6c <lv_obj_create>
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 800e558:	4629      	mov	r1, r5
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 800e55a:	6520      	str	r0, [r4, #80]	; 0x50
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 800e55c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e55e:	f7f7 fc68 	bl	8005e32 <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
 800e562:	4629      	mov	r1, r5
 800e564:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e566:	f7f7 fc64 	bl	8005e32 <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
 800e56a:	4629      	mov	r1, r5
 800e56c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e56e:	f7f5 fe5d 	bl	800422c <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
 800e572:	4629      	mov	r1, r5
 800e574:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e576:	f7f5 fe59 	bl	800422c <lv_obj_set_click>
    lv_obj_invalidate(disp->act_scr);
 800e57a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e57c:	f7f6 f9b0 	bl	80048e0 <lv_obj_invalidate>
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800e580:	6b60      	ldr	r0, [r4, #52]	; 0x34
    disp_def = disp_def_tmp; /*Revert the default display*/
 800e582:	6037      	str	r7, [r6, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800e584:	f001 ffb6 	bl	80104f4 <lv_task_ready>
 800e588:	e795      	b.n	800e4b6 <lv_disp_drv_register+0x16>
 800e58a:	bf00      	nop
 800e58c:	2000333c 	.word	0x2000333c
 800e590:	08015994 	.word	0x08015994
 800e594:	20000530 	.word	0x20000530
 800e598:	0800785d 	.word	0x0800785d
 800e59c:	080158d6 	.word	0x080158d6

0800e5a0 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 800e5a0:	b510      	push	{r4, lr}
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
 800e5a2:	211c      	movs	r1, #28
{
 800e5a4:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
 800e5a6:	f001 fa37 	bl	800fa18 <_lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 800e5aa:	2300      	movs	r3, #0
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
 800e5ac:	4a02      	ldr	r2, [pc, #8]	; (800e5b8 <lv_indev_drv_init+0x18>)
    driver->type                 = LV_INDEV_TYPE_NONE;
 800e5ae:	7023      	strb	r3, [r4, #0]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
 800e5b0:	4b02      	ldr	r3, [pc, #8]	; (800e5bc <lv_indev_drv_init+0x1c>)
 800e5b2:	e9c4 2305 	strd	r2, r3, [r4, #20]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
}
 800e5b6:	bd10      	pop	{r4, pc}
 800e5b8:	32030a0a 	.word	0x32030a0a
 800e5bc:	00640190 	.word	0x00640190

0800e5c0 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 800e5c0:	b538      	push	{r3, r4, r5, lr}

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 800e5c2:	68c3      	ldr	r3, [r0, #12]
{
 800e5c4:	4605      	mov	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 800e5c6:	b913      	cbnz	r3, 800e5ce <lv_indev_drv_register+0xe>
 800e5c8:	f7ff ff04 	bl	800e3d4 <lv_disp_get_default>
 800e5cc:	60e8      	str	r0, [r5, #12]

    if(driver->disp == NULL) {
 800e5ce:	68eb      	ldr	r3, [r5, #12]
 800e5d0:	b913      	cbnz	r3, 800e5d8 <lv_indev_drv_register+0x18>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
 800e5d2:	2400      	movs	r4, #0
    indev->btn_points       = NULL;

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);

    return indev;
}
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	bd38      	pop	{r3, r4, r5, pc}
    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 800e5d8:	4814      	ldr	r0, [pc, #80]	; (800e62c <lv_indev_drv_register+0x6c>)
 800e5da:	f000 fde0 	bl	800f19e <_lv_ll_ins_head>
    if(!indev) {
 800e5de:	4604      	mov	r4, r0
 800e5e0:	b948      	cbnz	r0, 800e5f6 <lv_indev_drv_register+0x36>
        LV_ASSERT_MEM(indev);
 800e5e2:	f000 fcf1 	bl	800efc8 <lv_debug_check_null>
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	d1f3      	bne.n	800e5d2 <lv_indev_drv_register+0x12>
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	4810      	ldr	r0, [pc, #64]	; (800e630 <lv_indev_drv_register+0x70>)
 800e5f0:	f000 fcee 	bl	800efd0 <lv_debug_log_error>
 800e5f4:	e7fe      	b.n	800e5f4 <lv_indev_drv_register+0x34>
    _lv_memset_00(indev, sizeof(lv_indev_t));
 800e5f6:	2160      	movs	r1, #96	; 0x60
 800e5f8:	f001 fa0e 	bl	800fa18 <_lv_memset_00>
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
 800e5fc:	221c      	movs	r2, #28
 800e5fe:	4629      	mov	r1, r5
 800e600:	4620      	mov	r0, r4
 800e602:	f001 f84f 	bl	800f6a4 <_lv_memcpy>
    indev->proc.reset_query = 1;
 800e606:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 800e60a:	2204      	movs	r2, #4
    indev->proc.reset_query = 1;
 800e60c:	f043 0302 	orr.w	r3, r3, #2
 800e610:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev->cursor           = NULL;
 800e614:	2300      	movs	r3, #0
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 800e616:	211e      	movs	r1, #30
    indev->group            = NULL;
 800e618:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    indev->btn_points       = NULL;
 800e61c:	65e3      	str	r3, [r4, #92]	; 0x5c
    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 800e61e:	4805      	ldr	r0, [pc, #20]	; (800e634 <lv_indev_drv_register+0x74>)
 800e620:	4623      	mov	r3, r4
 800e622:	f001 ff47 	bl	80104b4 <lv_task_create>
 800e626:	6120      	str	r0, [r4, #16]
    return indev;
 800e628:	e7d4      	b.n	800e5d4 <lv_indev_drv_register+0x14>
 800e62a:	bf00      	nop
 800e62c:	20003330 	.word	0x20003330
 800e630:	08015994 	.word	0x08015994
 800e634:	08003941 	.word	0x08003941

0800e638 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 800e638:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800e63a:	4803      	ldr	r0, [pc, #12]	; (800e648 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 800e63c:	b909      	cbnz	r1, 800e642 <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800e63e:	f000 bde5 	b.w	800f20c <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800e642:	f000 bde9 	b.w	800f218 <_lv_ll_get_next>
 800e646:	bf00      	nop
 800e648:	20003330 	.word	0x20003330

0800e64c <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 800e64c:	b570      	push	{r4, r5, r6, lr}
 800e64e:	460c      	mov	r4, r1
 800e650:	4605      	mov	r5, r0
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
 800e652:	2110      	movs	r1, #16
 800e654:	4620      	mov	r0, r4
 800e656:	f001 f9df 	bl	800fa18 <_lv_memset_00>

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
 800e65a:	782b      	ldrb	r3, [r5, #0]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d10a      	bne.n	800e676 <_lv_indev_read+0x2a>
        data->point.x = indev->proc.types.pointer.act_point.x;
 800e660:	8c2b      	ldrh	r3, [r5, #32]
 800e662:	8023      	strh	r3, [r4, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
 800e664:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800e666:	8063      	strh	r3, [r4, #2]
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
    }

    if(indev->driver.read_cb) {
 800e668:	686b      	ldr	r3, [r5, #4]
 800e66a:	b183      	cbz	r3, 800e68e <_lv_indev_read+0x42>
        LV_LOG_TRACE("idnev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
 800e66c:	4621      	mov	r1, r4
 800e66e:	4628      	mov	r0, r5
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
 800e670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        cont = indev->driver.read_cb(&indev->driver, data);
 800e674:	4718      	bx	r3
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
 800e676:	2b02      	cmp	r3, #2
 800e678:	d102      	bne.n	800e680 <_lv_indev_read+0x34>
        data->key = indev->proc.types.keypad.last_key;
 800e67a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e67c:	6063      	str	r3, [r4, #4]
 800e67e:	e7f3      	b.n	800e668 <_lv_indev_read+0x1c>
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
 800e680:	2b04      	cmp	r3, #4
        data->key = LV_KEY_ENTER;
 800e682:	bf01      	itttt	eq
 800e684:	230a      	moveq	r3, #10
 800e686:	6063      	streq	r3, [r4, #4]
        data->enc_diff = 0;
 800e688:	2300      	moveq	r3, #0
 800e68a:	81a3      	strheq	r3, [r4, #12]
 800e68c:	e7ec      	b.n	800e668 <_lv_indev_read+0x1c>
}
 800e68e:	4618      	mov	r0, r3
 800e690:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e694 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800e694:	2200      	movs	r2, #0
 800e696:	4b03      	ldr	r3, [pc, #12]	; (800e6a4 <lv_tick_inc+0x10>)
 800e698:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 800e69a:	4a03      	ldr	r2, [pc, #12]	; (800e6a8 <lv_tick_inc+0x14>)
 800e69c:	6813      	ldr	r3, [r2, #0]
 800e69e:	4418      	add	r0, r3
 800e6a0:	6010      	str	r0, [r2, #0]
}
 800e6a2:	4770      	bx	lr
 800e6a4:	20000538 	.word	0x20000538
 800e6a8:	20000534 	.word	0x20000534

0800e6ac <lv_tick_get>:
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800e6ac:	f04f 0101 	mov.w	r1, #1
        result        = sys_time;
 800e6b0:	4b03      	ldr	r3, [pc, #12]	; (800e6c0 <lv_tick_get+0x14>)
 800e6b2:	6818      	ldr	r0, [r3, #0]
        tick_irq_flag = 1;
 800e6b4:	4b03      	ldr	r3, [pc, #12]	; (800e6c4 <lv_tick_get+0x18>)
 800e6b6:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
 800e6b8:	781a      	ldrb	r2, [r3, #0]
 800e6ba:	2a00      	cmp	r2, #0
 800e6bc:	d0fb      	beq.n	800e6b6 <lv_tick_get+0xa>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800e6be:	4770      	bx	lr
 800e6c0:	20000534 	.word	0x20000534
 800e6c4:	20000538 	.word	0x20000538

0800e6c8 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800e6c8:	b510      	push	{r4, lr}
 800e6ca:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 800e6cc:	f7ff ffee 	bl	800e6ac <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 800e6d0:	1b00      	subs	r0, r0, r4
 800e6d2:	bd10      	pop	{r4, pc}

0800e6d4 <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 800e6d4:	e9d1 0309 	ldrd	r0, r3, [r1, #36]	; 0x24
 800e6d8:	4298      	cmp	r0, r3
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 800e6da:	bf1a      	itte	ne
 800e6dc:	029b      	lslne	r3, r3, #10
 800e6de:	fb93 f3f0 	sdivne	r3, r3, r0
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 800e6e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 800e6e6:	6988      	ldr	r0, [r1, #24]
 800e6e8:	6a0a      	ldr	r2, [r1, #32]
 800e6ea:	1a12      	subs	r2, r2, r0
 800e6ec:	4353      	muls	r3, r2
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
 800e6ee:	eb00 20a3 	add.w	r0, r0, r3, asr #10

    return (lv_anim_value_t)new_value;
}
 800e6f2:	b200      	sxth	r0, r0
 800e6f4:	4770      	bx	lr
	...

0800e6f8 <anim_mark_list_change>:

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
    anim_list_changed = true;
 800e6f8:	2201      	movs	r2, #1
{
 800e6fa:	b508      	push	{r3, lr}
    anim_list_changed = true;
 800e6fc:	4b07      	ldr	r3, [pc, #28]	; (800e71c <anim_mark_list_change+0x24>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 800e6fe:	4808      	ldr	r0, [pc, #32]	; (800e720 <anim_mark_list_change+0x28>)
    anim_list_changed = true;
 800e700:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 800e702:	f000 fd83 	bl	800f20c <_lv_ll_get_head>
 800e706:	4b07      	ldr	r3, [pc, #28]	; (800e724 <anim_mark_list_change+0x2c>)
 800e708:	4601      	mov	r1, r0
 800e70a:	b920      	cbnz	r0, 800e716 <anim_mark_list_change+0x1e>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 800e70c:	6818      	ldr	r0, [r3, #0]
}
 800e70e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 800e712:	f001 bea3 	b.w	801045c <lv_task_set_prio>
 800e716:	2104      	movs	r1, #4
 800e718:	e7f8      	b.n	800e70c <anim_mark_list_change+0x14>
 800e71a:	bf00      	nop
 800e71c:	20000540 	.word	0x20000540
 800e720:	20003400 	.word	0x20003400
 800e724:	2000053c 	.word	0x2000053c

0800e728 <anim_task>:
{
 800e728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 800e72c:	4850      	ldr	r0, [pc, #320]	; (800e870 <anim_task+0x148>)
{
 800e72e:	b092      	sub	sp, #72	; 0x48
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 800e730:	f000 fd6c 	bl	800f20c <_lv_ll_get_head>
 800e734:	4c4e      	ldr	r4, [pc, #312]	; (800e870 <anim_task+0x148>)
 800e736:	b990      	cbnz	r0, 800e75e <anim_task+0x36>
    uint32_t elaps = lv_tick_elaps(last_task_run);
 800e738:	4d4e      	ldr	r5, [pc, #312]	; (800e874 <anim_task+0x14c>)
        anim_list_changed = false;
 800e73a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800e878 <anim_task+0x150>
    uint32_t elaps = lv_tick_elaps(last_task_run);
 800e73e:	6828      	ldr	r0, [r5, #0]
 800e740:	f7ff ffc2 	bl	800e6c8 <lv_tick_elaps>
 800e744:	4607      	mov	r7, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800e746:	484a      	ldr	r0, [pc, #296]	; (800e870 <anim_task+0x148>)
 800e748:	f000 fd60 	bl	800f20c <_lv_ll_get_head>
 800e74c:	4604      	mov	r4, r0
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800e74e:	4e48      	ldr	r6, [pc, #288]	; (800e870 <anim_task+0x148>)
    while(a != NULL) {
 800e750:	b984      	cbnz	r4, 800e774 <anim_task+0x4c>
    last_task_run = lv_tick_get();
 800e752:	f7ff ffab 	bl	800e6ac <lv_tick_get>
 800e756:	6028      	str	r0, [r5, #0]
}
 800e758:	b012      	add	sp, #72	; 0x48
 800e75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        a->has_run = 0;
 800e75e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 800e762:	4601      	mov	r1, r0
        a->has_run = 0;
 800e764:	f36f 0341 	bfc	r3, #1, #1
 800e768:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 800e76c:	4620      	mov	r0, r4
 800e76e:	f000 fd53 	bl	800f218 <_lv_ll_get_next>
 800e772:	e7e0      	b.n	800e736 <anim_task+0xe>
        anim_list_changed = false;
 800e774:	2300      	movs	r3, #0
 800e776:	f888 3000 	strb.w	r3, [r8]
        if(!a->has_run) {
 800e77a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e77e:	0799      	lsls	r1, r3, #30
 800e780:	d471      	bmi.n	800e866 <anim_task+0x13e>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 800e782:	f043 0302 	orr.w	r3, r3, #2
 800e786:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            int32_t new_act_time = a->act_time + elaps;
 800e78a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if(a->act_time <= 0 && new_act_time >= 0) {
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	dc05      	bgt.n	800e79c <anim_task+0x74>
 800e790:	42fb      	cmn	r3, r7
 800e792:	d403      	bmi.n	800e79c <anim_task+0x74>
                if(a->start_cb) a->start_cb(a);
 800e794:	68a3      	ldr	r3, [r4, #8]
 800e796:	b10b      	cbz	r3, 800e79c <anim_task+0x74>
 800e798:	4620      	mov	r0, r4
 800e79a:	4798      	blx	r3
            a->act_time += elaps;
 800e79c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e79e:	443b      	add	r3, r7
            if(a->act_time >= 0) {
 800e7a0:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 800e7a2:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
 800e7a4:	db3b      	blt.n	800e81e <anim_task+0xf6>
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 800e7a6:	4620      	mov	r0, r4
                if(a->act_time > a->time) a->act_time = a->time;
 800e7a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 800e7aa:	4621      	mov	r1, r4
                if(a->act_time > a->time) a->act_time = a->time;
 800e7ac:	4293      	cmp	r3, r2
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 800e7ae:	f850 3f10 	ldr.w	r3, [r0, #16]!
                if(a->act_time > a->time) a->act_time = a->time;
 800e7b2:	bfc8      	it	gt
 800e7b4:	62a2      	strgt	r2, [r4, #40]	; 0x28
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d039      	beq.n	800e82e <anim_task+0x106>
 800e7ba:	4798      	blx	r3
                if(new_value != a->current) {
 800e7bc:	69e3      	ldr	r3, [r4, #28]
 800e7be:	4283      	cmp	r3, r0
 800e7c0:	d005      	beq.n	800e7ce <anim_task+0xa6>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 800e7c2:	6863      	ldr	r3, [r4, #4]
                    a->current = new_value;
 800e7c4:	61e0      	str	r0, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 800e7c6:	b113      	cbz	r3, 800e7ce <anim_task+0xa6>
 800e7c8:	b201      	sxth	r1, r0
 800e7ca:	6820      	ldr	r0, [r4, #0]
 800e7cc:	4798      	blx	r3
                if(a->act_time >= a->time) {
 800e7ce:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	; 0x24
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	db23      	blt.n	800e81e <anim_task+0xf6>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 800e7d6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800e7da:	f012 0001 	ands.w	r0, r2, #1
 800e7de:	d107      	bne.n	800e7f0 <anim_task+0xc8>
 800e7e0:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 800e7e4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	428b      	cmp	r3, r1
        a->repeat_cnt--;
 800e7ec:	bf98      	it	ls
 800e7ee:	8723      	strhls	r3, [r4, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 800e7f0:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800e7f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e7f4:	b9f1      	cbnz	r1, 800e834 <anim_task+0x10c>
 800e7f6:	b103      	cbz	r3, 800e7fa <anim_task+0xd2>
 800e7f8:	b1e0      	cbz	r0, 800e834 <anim_task+0x10c>
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
 800e7fa:	2244      	movs	r2, #68	; 0x44
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	a801      	add	r0, sp, #4
 800e800:	f000 ff50 	bl	800f6a4 <_lv_memcpy>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 800e804:	4621      	mov	r1, r4
 800e806:	4630      	mov	r0, r6
 800e808:	f000 fd3d 	bl	800f286 <_lv_ll_remove>
        lv_mem_free(a);
 800e80c:	4620      	mov	r0, r4
 800e80e:	f000 febd 	bl	800f58c <lv_mem_free>
        anim_mark_list_change();
 800e812:	f7ff ff71 	bl	800e6f8 <anim_mark_list_change>
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 800e816:	9b04      	ldr	r3, [sp, #16]
 800e818:	b10b      	cbz	r3, 800e81e <anim_task+0xf6>
 800e81a:	a801      	add	r0, sp, #4
 800e81c:	4798      	blx	r3
        if(anim_list_changed)
 800e81e:	f898 3000 	ldrb.w	r3, [r8]
 800e822:	b303      	cbz	r3, 800e866 <anim_task+0x13e>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800e824:	4630      	mov	r0, r6
 800e826:	f000 fcf1 	bl	800f20c <_lv_ll_get_head>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800e82a:	4604      	mov	r4, r0
 800e82c:	e790      	b.n	800e750 <anim_task+0x28>
                else new_value = lv_anim_path_linear(&a->path, a);
 800e82e:	f7ff ff51 	bl	800e6d4 <lv_anim_path_linear>
 800e832:	e7c3      	b.n	800e7bc <anim_task+0x94>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 800e834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e836:	4249      	negs	r1, r1
 800e838:	62a1      	str	r1, [r4, #40]	; 0x28
        if(a->playback_time != 0) {
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d0ef      	beq.n	800e81e <anim_task+0xf6>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 800e83e:	b910      	cbnz	r0, 800e846 <anim_task+0x11e>
 800e840:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e842:	4249      	negs	r1, r1
 800e844:	62a1      	str	r1, [r4, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800e846:	43d2      	mvns	r2, r2
 800e848:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
            tmp      = a->start;
 800e84c:	69a0      	ldr	r0, [r4, #24]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800e84e:	f362 0100 	bfi	r1, r2, #0, #1
            a->start = a->end;
 800e852:	6a22      	ldr	r2, [r4, #32]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800e854:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
            a->start = a->end;
 800e858:	61a2      	str	r2, [r4, #24]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 800e85a:	07ca      	lsls	r2, r1, #31
 800e85c:	bf58      	it	pl
 800e85e:	6be3      	ldrpl	r3, [r4, #60]	; 0x3c
            a->end   = tmp;
 800e860:	6220      	str	r0, [r4, #32]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 800e862:	6263      	str	r3, [r4, #36]	; 0x24
 800e864:	e7db      	b.n	800e81e <anim_task+0xf6>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800e866:	4621      	mov	r1, r4
 800e868:	4630      	mov	r0, r6
 800e86a:	f000 fcd5 	bl	800f218 <_lv_ll_get_next>
 800e86e:	e7dc      	b.n	800e82a <anim_task+0x102>
 800e870:	20003400 	.word	0x20003400
 800e874:	20000544 	.word	0x20000544
 800e878:	20000540 	.word	0x20000540

0800e87c <_lv_anim_core_init>:
{
 800e87c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800e87e:	2144      	movs	r1, #68	; 0x44
 800e880:	480a      	ldr	r0, [pc, #40]	; (800e8ac <_lv_anim_core_init+0x30>)
 800e882:	f000 fc84 	bl	800f18e <_lv_ll_init>
    last_task_run = lv_tick_get();
 800e886:	f7ff ff11 	bl	800e6ac <lv_tick_get>
 800e88a:	4b09      	ldr	r3, [pc, #36]	; (800e8b0 <_lv_anim_core_init+0x34>)
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 800e88c:	2204      	movs	r2, #4
    last_task_run = lv_tick_get();
 800e88e:	6018      	str	r0, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 800e890:	211e      	movs	r1, #30
 800e892:	2300      	movs	r3, #0
 800e894:	4807      	ldr	r0, [pc, #28]	; (800e8b4 <_lv_anim_core_init+0x38>)
 800e896:	f001 fe0d 	bl	80104b4 <lv_task_create>
 800e89a:	4b07      	ldr	r3, [pc, #28]	; (800e8b8 <_lv_anim_core_init+0x3c>)
 800e89c:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
 800e89e:	f7ff ff2b 	bl	800e6f8 <anim_mark_list_change>
    anim_list_changed = false; /*The list has not actually changed*/
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	4b05      	ldr	r3, [pc, #20]	; (800e8bc <_lv_anim_core_init+0x40>)
 800e8a6:	701a      	strb	r2, [r3, #0]
}
 800e8a8:	bd08      	pop	{r3, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20003400 	.word	0x20003400
 800e8b0:	20000544 	.word	0x20000544
 800e8b4:	0800e729 	.word	0x0800e729
 800e8b8:	2000053c 	.word	0x2000053c
 800e8bc:	20000540 	.word	0x20000540

0800e8c0 <lv_anim_init>:
{
 800e8c0:	b510      	push	{r4, lr}
    _lv_memset_00(a, sizeof(lv_anim_t));
 800e8c2:	2144      	movs	r1, #68	; 0x44
{
 800e8c4:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
 800e8c6:	f001 f8a7 	bl	800fa18 <_lv_memset_00>
    a->time    = 500;
 800e8ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e8ce:	6263      	str	r3, [r4, #36]	; 0x24
    a->start   = 0;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
 800e8d4:	2364      	movs	r3, #100	; 0x64
 800e8d6:	6223      	str	r3, [r4, #32]
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800e8d8:	4b08      	ldr	r3, [pc, #32]	; (800e8fc <lv_anim_init+0x3c>)
 800e8da:	781a      	ldrb	r2, [r3, #0]
 800e8dc:	7422      	strb	r2, [r4, #16]
 800e8de:	785a      	ldrb	r2, [r3, #1]
 800e8e0:	7462      	strb	r2, [r4, #17]
 800e8e2:	789a      	ldrb	r2, [r3, #2]
 800e8e4:	78db      	ldrb	r3, [r3, #3]
 800e8e6:	74a2      	strb	r2, [r4, #18]
 800e8e8:	74e3      	strb	r3, [r4, #19]
    a->repeat_cnt = 1;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	8723      	strh	r3, [r4, #56]	; 0x38
    a->early_apply = 1;
 800e8ee:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800e8f2:	f043 0301 	orr.w	r3, r3, #1
 800e8f6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800e8fa:	bd10      	pop	{r4, pc}
 800e8fc:	080197b4 	.word	0x080197b4

0800e900 <lv_anim_del>:
{
 800e900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e904:	4680      	mov	r8, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800e906:	4811      	ldr	r0, [pc, #68]	; (800e94c <lv_anim_del+0x4c>)
{
 800e908:	460e      	mov	r6, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800e90a:	f000 fc7f 	bl	800f20c <_lv_ll_get_head>
    bool del = false;
 800e90e:	2500      	movs	r5, #0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800e910:	4604      	mov	r4, r0
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800e912:	4f0e      	ldr	r7, [pc, #56]	; (800e94c <lv_anim_del+0x4c>)
    while(a != NULL) {
 800e914:	b914      	cbnz	r4, 800e91c <lv_anim_del+0x1c>
}
 800e916:	4628      	mov	r0, r5
 800e918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800e91c:	4621      	mov	r1, r4
 800e91e:	4638      	mov	r0, r7
 800e920:	f000 fc7a 	bl	800f218 <_lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800e924:	6823      	ldr	r3, [r4, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800e926:	4681      	mov	r9, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800e928:	4543      	cmp	r3, r8
 800e92a:	d10d      	bne.n	800e948 <lv_anim_del+0x48>
 800e92c:	6863      	ldr	r3, [r4, #4]
 800e92e:	42b3      	cmp	r3, r6
 800e930:	d000      	beq.n	800e934 <lv_anim_del+0x34>
 800e932:	b94e      	cbnz	r6, 800e948 <lv_anim_del+0x48>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 800e934:	4621      	mov	r1, r4
 800e936:	4638      	mov	r0, r7
 800e938:	f000 fca5 	bl	800f286 <_lv_ll_remove>
            lv_mem_free(a);
 800e93c:	4620      	mov	r0, r4
 800e93e:	f000 fe25 	bl	800f58c <lv_mem_free>
            del = true;
 800e942:	2501      	movs	r5, #1
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
 800e944:	f7ff fed8 	bl	800e6f8 <anim_mark_list_change>
            del = true;
 800e948:	464c      	mov	r4, r9
 800e94a:	e7e3      	b.n	800e914 <lv_anim_del+0x14>
 800e94c:	20003400 	.word	0x20003400

0800e950 <lv_anim_start>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 800e950:	6841      	ldr	r1, [r0, #4]
{
 800e952:	b538      	push	{r3, r4, r5, lr}
 800e954:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 800e956:	b111      	cbz	r1, 800e95e <lv_anim_start+0xe>
 800e958:	6800      	ldr	r0, [r0, #0]
 800e95a:	f7ff ffd1 	bl	800e900 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 800e95e:	4817      	ldr	r0, [pc, #92]	; (800e9bc <lv_anim_start+0x6c>)
 800e960:	f000 fd3a 	bl	800f3d8 <_lv_ll_is_empty>
 800e964:	b120      	cbz	r0, 800e970 <lv_anim_start+0x20>
        last_task_run = lv_tick_get() - 1;
 800e966:	f7ff fea1 	bl	800e6ac <lv_tick_get>
 800e96a:	4b15      	ldr	r3, [pc, #84]	; (800e9c0 <lv_anim_start+0x70>)
 800e96c:	3801      	subs	r0, #1
 800e96e:	6018      	str	r0, [r3, #0]
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 800e970:	4812      	ldr	r0, [pc, #72]	; (800e9bc <lv_anim_start+0x6c>)
 800e972:	f000 fc14 	bl	800f19e <_lv_ll_ins_head>
 800e976:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
 800e978:	f000 fb26 	bl	800efc8 <lv_debug_check_null>
 800e97c:	4603      	mov	r3, r0
 800e97e:	b920      	cbnz	r0, 800e98a <lv_anim_start+0x3a>
 800e980:	4622      	mov	r2, r4
 800e982:	4810      	ldr	r0, [pc, #64]	; (800e9c4 <lv_anim_start+0x74>)
 800e984:	f000 fb24 	bl	800efd0 <lv_debug_log_error>
 800e988:	e7fe      	b.n	800e988 <lv_anim_start+0x38>
    if(new_anim == NULL) return;
 800e98a:	b1ac      	cbz	r4, 800e9b8 <lv_anim_start+0x68>
    a->time_orig = a->time;
 800e98c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 800e98e:	2244      	movs	r2, #68	; 0x44
    a->time_orig = a->time;
 800e990:	63eb      	str	r3, [r5, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 800e992:	4629      	mov	r1, r5
 800e994:	4620      	mov	r0, r4
 800e996:	f000 fe85 	bl	800f6a4 <_lv_memcpy>
    if(new_anim->early_apply) {
 800e99a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800e99e:	07db      	lsls	r3, r3, #31
 800e9a0:	d506      	bpl.n	800e9b0 <lv_anim_start+0x60>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
 800e9a2:	6863      	ldr	r3, [r4, #4]
 800e9a4:	b123      	cbz	r3, 800e9b0 <lv_anim_start+0x60>
 800e9a6:	6820      	ldr	r0, [r4, #0]
 800e9a8:	b110      	cbz	r0, 800e9b0 <lv_anim_start+0x60>
 800e9aa:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 800e9ae:	4798      	blx	r3
}
 800e9b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    anim_mark_list_change();
 800e9b4:	f7ff bea0 	b.w	800e6f8 <anim_mark_list_change>
}
 800e9b8:	bd38      	pop	{r3, r4, r5, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20003400 	.word	0x20003400
 800e9c0:	20000544 	.word	0x20000544
 800e9c4:	08015994 	.word	0x08015994

0800e9c8 <lv_anim_get>:
{
 800e9c8:	b570      	push	{r4, r5, r6, lr}
 800e9ca:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 800e9cc:	4808      	ldr	r0, [pc, #32]	; (800e9f0 <lv_anim_get+0x28>)
{
 800e9ce:	460d      	mov	r5, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 800e9d0:	f000 fc1c 	bl	800f20c <_lv_ll_get_head>
 800e9d4:	4e06      	ldr	r6, [pc, #24]	; (800e9f0 <lv_anim_get+0x28>)
 800e9d6:	b900      	cbnz	r0, 800e9da <lv_anim_get+0x12>
}
 800e9d8:	bd70      	pop	{r4, r5, r6, pc}
        if(a->var == var && a->exec_cb == exec_cb) {
 800e9da:	6803      	ldr	r3, [r0, #0]
 800e9dc:	42a3      	cmp	r3, r4
 800e9de:	d102      	bne.n	800e9e6 <lv_anim_get+0x1e>
 800e9e0:	6843      	ldr	r3, [r0, #4]
 800e9e2:	42ab      	cmp	r3, r5
 800e9e4:	d0f8      	beq.n	800e9d8 <lv_anim_get+0x10>
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 800e9e6:	4601      	mov	r1, r0
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	f000 fc15 	bl	800f218 <_lv_ll_get_next>
 800e9ee:	e7f2      	b.n	800e9d6 <lv_anim_get+0xe>
 800e9f0:	20003400 	.word	0x20003400

0800e9f4 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 800e9f4:	1a89      	subs	r1, r1, r2
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800e9f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 800e9fa:	2900      	cmp	r1, #0
 800e9fc:	bfb8      	it	lt
 800e9fe:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800ea00:	434a      	muls	r2, r1
 800ea02:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
 800ea06:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800ea0a:	da04      	bge.n	800ea16 <lv_anim_speed_to_time+0x22>
        time++;
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	bf08      	it	eq
 800ea10:	2001      	moveq	r0, #1
}
 800ea12:	b280      	uxth	r0, r0
 800ea14:	4770      	bx	lr
    if(time > UINT16_MAX) time = UINT16_MAX;
 800ea16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ea1a:	e7fa      	b.n	800ea12 <lv_anim_speed_to_time+0x1e>

0800ea1c <lv_point_within_circle>:
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800ea1c:	2302      	movs	r3, #2
 800ea1e:	f9b0 2000 	ldrsh.w	r2, [r0]
{
 800ea22:	b530      	push	{r4, r5, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800ea24:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800ea28:	1aa4      	subs	r4, r4, r2
 800ea2a:	fb94 f4f3 	sdiv	r4, r4, r3
    /* Circle center */
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
 800ea2e:	880b      	ldrh	r3, [r1, #0]
    lv_coord_t cx = area->x1 + r;
 800ea30:	b2a5      	uxth	r5, r4
    lv_coord_t px = p->x - cx;
 800ea32:	1a9b      	subs	r3, r3, r2
    lv_coord_t py = p->y - cy;
 800ea34:	884a      	ldrh	r2, [r1, #2]
 800ea36:	8841      	ldrh	r1, [r0, #2]
    lv_coord_t px = p->x - cx;
 800ea38:	1b5b      	subs	r3, r3, r5
    lv_coord_t py = p->y - cy;
 800ea3a:	1a52      	subs	r2, r2, r1
 800ea3c:	1b52      	subs	r2, r2, r5

    int32_t r_sqrd = r * r;
    int32_t dist = (px * px) + (py * py);
 800ea3e:	b212      	sxth	r2, r2
 800ea40:	4352      	muls	r2, r2
 800ea42:	b21b      	sxth	r3, r3
    int32_t r_sqrd = r * r;
 800ea44:	4364      	muls	r4, r4
    int32_t dist = (px * px) + (py * py);
 800ea46:	fb03 2303 	mla	r3, r3, r3, r2

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
 800ea4a:	429c      	cmp	r4, r3
 800ea4c:	bfb4      	ite	lt
 800ea4e:	2000      	movlt	r0, #0
 800ea50:	2001      	movge	r0, #1
 800ea52:	bd30      	pop	{r4, r5, pc}

0800ea54 <lv_area_set>:
    area_p->x2 = x2;
 800ea54:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800ea56:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 800ea5a:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800ea5c:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 800ea5e:	80c3      	strh	r3, [r0, #6]
}
 800ea60:	4770      	bx	lr

0800ea62 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 800ea62:	8803      	ldrh	r3, [r0, #0]
 800ea64:	3901      	subs	r1, #1
 800ea66:	4419      	add	r1, r3
 800ea68:	8081      	strh	r1, [r0, #4]
}
 800ea6a:	4770      	bx	lr

0800ea6c <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 800ea6c:	8843      	ldrh	r3, [r0, #2]
 800ea6e:	3901      	subs	r1, #1
 800ea70:	4419      	add	r1, r3
 800ea72:	80c1      	strh	r1, [r0, #6]
}
 800ea74:	4770      	bx	lr

0800ea76 <_lv_area_set_pos>:
{
 800ea76:	b570      	push	{r4, r5, r6, lr}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ea78:	88c3      	ldrh	r3, [r0, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ea7a:	8884      	ldrh	r4, [r0, #4]
 800ea7c:	8806      	ldrh	r6, [r0, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ea7e:	8845      	ldrh	r5, [r0, #2]
    area_p->x1   = x;
 800ea80:	8001      	strh	r1, [r0, #0]
    area_p->y1   = y;
 800ea82:	8042      	strh	r2, [r0, #2]
    area_p->x2 = area_p->x1 + w - 1;
 800ea84:	4421      	add	r1, r4
    area_p->y2 = area_p->y1 + h - 1;
 800ea86:	441a      	add	r2, r3
    area_p->x2 = area_p->x1 + w - 1;
 800ea88:	1b89      	subs	r1, r1, r6
    area_p->y2 = area_p->y1 + h - 1;
 800ea8a:	1b52      	subs	r2, r2, r5
    area_p->x2 = area_p->x1 + w - 1;
 800ea8c:	8081      	strh	r1, [r0, #4]
    area_p->y2 = area_p->y1 + h - 1;
 800ea8e:	80c2      	strh	r2, [r0, #6]
}
 800ea90:	bd70      	pop	{r4, r5, r6, pc}

0800ea92 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800ea92:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ea96:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800ea9a:	1ad2      	subs	r2, r2, r3
 800ea9c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800eaa0:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800eaa4:	1a18      	subs	r0, r3, r0
 800eaa6:	3001      	adds	r0, #1
}
 800eaa8:	fb02 0000 	mla	r0, r2, r0, r0
 800eaac:	4770      	bx	lr

0800eaae <_lv_area_intersect>:
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800eaae:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 800eab2:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800eab4:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800eab8:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800eabc:	429d      	cmp	r5, r3
 800eabe:	bfb8      	it	lt
 800eac0:	461d      	movlt	r5, r3
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800eac2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800eac6:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800eaca:	42a3      	cmp	r3, r4
 800eacc:	bfb8      	it	lt
 800eace:	4623      	movlt	r3, r4
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800ead0:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800ead4:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800ead8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800eadc:	42b4      	cmp	r4, r6
 800eade:	bfa8      	it	ge
 800eae0:	4634      	movge	r4, r6
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800eae2:	428a      	cmp	r2, r1
 800eae4:	bfa8      	it	ge
 800eae6:	460a      	movge	r2, r1
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800eae8:	42a5      	cmp	r5, r4
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800eaea:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800eaec:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800eaee:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800eaf0:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800eaf2:	dc04      	bgt.n	800eafe <_lv_area_intersect+0x50>
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	bfcc      	ite	gt
 800eaf8:	2000      	movgt	r0, #0
 800eafa:	2001      	movle	r0, #1
}
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 800eafe:	2000      	movs	r0, #0
 800eb00:	e7fc      	b.n	800eafc <_lv_area_intersect+0x4e>

0800eb02 <_lv_area_join>:
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800eb02:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 800eb06:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800eb08:	f9b1 4000 	ldrsh.w	r4, [r1]
 800eb0c:	42a3      	cmp	r3, r4
 800eb0e:	bfa8      	it	ge
 800eb10:	4623      	movge	r3, r4
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800eb12:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800eb16:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800eb18:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800eb1c:	42a3      	cmp	r3, r4
 800eb1e:	bfa8      	it	ge
 800eb20:	4623      	movge	r3, r4
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800eb22:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800eb26:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800eb28:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800eb2c:	42a3      	cmp	r3, r4
 800eb2e:	bfb8      	it	lt
 800eb30:	4623      	movlt	r3, r4
 800eb32:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800eb34:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800eb38:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	bfb8      	it	lt
 800eb40:	4613      	movlt	r3, r2
 800eb42:	80c3      	strh	r3, [r0, #6]
}
 800eb44:	bd10      	pop	{r4, pc}

0800eb46 <_lv_area_is_point_on>:
{
 800eb46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800eb4a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800eb4e:	f9b0 4000 	ldrsh.w	r4, [r0]
{
 800eb52:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800eb54:	42a3      	cmp	r3, r4
{
 800eb56:	4689      	mov	r9, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800eb58:	f2c0 8086 	blt.w	800ec68 <_lv_area_is_point_on+0x122>
 800eb5c:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 800eb60:	455b      	cmp	r3, fp
 800eb62:	f300 8081 	bgt.w	800ec68 <_lv_area_is_point_on+0x122>
 800eb66:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800eb6a:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 800eb6e:	4555      	cmp	r5, sl
 800eb70:	db7a      	blt.n	800ec68 <_lv_area_is_point_on+0x122>
 800eb72:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800eb76:	429d      	cmp	r5, r3
 800eb78:	dc76      	bgt.n	800ec68 <_lv_area_is_point_on+0x122>
    if(radius <= 0) {
 800eb7a:	2a00      	cmp	r2, #0
 800eb7c:	dc03      	bgt.n	800eb86 <_lv_area_is_point_on+0x40>
        return true;
 800eb7e:	2001      	movs	r0, #1
}
 800eb80:	b005      	add	sp, #20
 800eb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 800eb86:	f04f 0e02 	mov.w	lr, #2
 800eb8a:	b29e      	uxth	r6, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eb8c:	fa1f f58b 	uxth.w	r5, fp
 800eb90:	b2a7      	uxth	r7, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eb92:	fa1f f88a 	uxth.w	r8, sl
    corner_area.x1 = a_p->x1;
 800eb96:	f8ad 4008 	strh.w	r4, [sp, #8]
 800eb9a:	f106 0c01 	add.w	ip, r6, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eb9e:	1c6c      	adds	r4, r5, #1
 800eba0:	1be4      	subs	r4, r4, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eba2:	ebac 0c08 	sub.w	ip, ip, r8
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 800eba6:	b220      	sxth	r0, r4
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 800eba8:	fa0f fc8c 	sxth.w	ip, ip
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
 800ebac:	fb90 f4fe 	sdiv	r4, r0, lr
 800ebb0:	fb9c f0fe 	sdiv	r0, ip, lr
    corner_area.x2 = a_p->x1 + radius;
 800ebb4:	4284      	cmp	r4, r0
 800ebb6:	bfa8      	it	ge
 800ebb8:	4604      	movge	r4, r0
 800ebba:	42a2      	cmp	r2, r4
 800ebbc:	bfa8      	it	ge
 800ebbe:	4622      	movge	r2, r4
 800ebc0:	b294      	uxth	r4, r2
    corner_area.y2 = a_p->y1 + radius;
 800ebc2:	44a0      	add	r8, r4
    corner_area.x2 = a_p->x1 + radius;
 800ebc4:	4427      	add	r7, r4
    corner_area.y2 = a_p->y1 + radius;
 800ebc6:	fa1f f888 	uxth.w	r8, r8
 800ebca:	9301      	str	r3, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800ebcc:	2200      	movs	r2, #0
    corner_area.y2 = a_p->y1 + radius;
 800ebce:	fa0f f388 	sxth.w	r3, r8
    corner_area.x2 = a_p->x1 + radius;
 800ebd2:	b2bf      	uxth	r7, r7
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800ebd4:	a802      	add	r0, sp, #8
    corner_area.y2 = a_p->y1 + radius;
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	f8ad 300e 	strh.w	r3, [sp, #14]
    corner_area.x2 = a_p->x1 + radius;
 800ebdc:	f8ad 700c 	strh.w	r7, [sp, #12]
    corner_area.y1 = a_p->y1;
 800ebe0:	f8ad a00a 	strh.w	sl, [sp, #10]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800ebe4:	f7ff ffaf 	bl	800eb46 <_lv_area_is_point_on>
 800ebe8:	9b01      	ldr	r3, [sp, #4]
 800ebea:	4602      	mov	r2, r0
 800ebec:	b130      	cbz	r0, 800ebfc <_lv_area_is_point_on+0xb6>
        corner_area.x2 += radius;
 800ebee:	4427      	add	r7, r4
 800ebf0:	f8ad 700c 	strh.w	r7, [sp, #12]
        corner_area.y2 += radius;
 800ebf4:	4444      	add	r4, r8
 800ebf6:	f8ad 400e 	strh.w	r4, [sp, #14]
 800ebfa:	e011      	b.n	800ec20 <_lv_area_is_point_on+0xda>
    corner_area.y1 = a_p->y2 - radius;
 800ebfc:	1b36      	subs	r6, r6, r4
 800ebfe:	b2b6      	uxth	r6, r6
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800ec00:	4649      	mov	r1, r9
 800ec02:	a802      	add	r0, sp, #8
    corner_area.y1 = a_p->y2 - radius;
 800ec04:	f8ad 600a 	strh.w	r6, [sp, #10]
    corner_area.y2 = a_p->y2;
 800ec08:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800ec0c:	f7ff ff9b 	bl	800eb46 <_lv_area_is_point_on>
 800ec10:	4602      	mov	r2, r0
 800ec12:	b150      	cbz	r0, 800ec2a <_lv_area_is_point_on+0xe4>
        corner_area.x2 += radius;
 800ec14:	4427      	add	r7, r4
 800ec16:	f8ad 700c 	strh.w	r7, [sp, #12]
        corner_area.y1 -= radius;
 800ec1a:	1b34      	subs	r4, r6, r4
 800ec1c:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
 800ec20:	4649      	mov	r1, r9
 800ec22:	a802      	add	r0, sp, #8
 800ec24:	f7ff fefa 	bl	800ea1c <lv_point_within_circle>
 800ec28:	e7aa      	b.n	800eb80 <_lv_area_is_point_on+0x3a>
    corner_area.x1 = a_p->x2 - radius;
 800ec2a:	1b2d      	subs	r5, r5, r4
 800ec2c:	b2ad      	uxth	r5, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800ec2e:	4649      	mov	r1, r9
 800ec30:	a802      	add	r0, sp, #8
    corner_area.x1 = a_p->x2 - radius;
 800ec32:	f8ad 5008 	strh.w	r5, [sp, #8]
    corner_area.x2 = a_p->x2;
 800ec36:	f8ad b00c 	strh.w	fp, [sp, #12]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800ec3a:	f7ff ff84 	bl	800eb46 <_lv_area_is_point_on>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	b118      	cbz	r0, 800ec4a <_lv_area_is_point_on+0x104>
        corner_area.x1 -= radius;
 800ec42:	1b2d      	subs	r5, r5, r4
 800ec44:	f8ad 5008 	strh.w	r5, [sp, #8]
 800ec48:	e7e7      	b.n	800ec1a <_lv_area_is_point_on+0xd4>
    corner_area.y2 = a_p->y1 + radius;
 800ec4a:	9b00      	ldr	r3, [sp, #0]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800ec4c:	4649      	mov	r1, r9
 800ec4e:	a802      	add	r0, sp, #8
    corner_area.y1 = a_p->y1;
 800ec50:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
 800ec54:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800ec58:	f7ff ff75 	bl	800eb46 <_lv_area_is_point_on>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d08e      	beq.n	800eb7e <_lv_area_is_point_on+0x38>
        corner_area.x1 -= radius;
 800ec60:	1b2d      	subs	r5, r5, r4
 800ec62:	f8ad 5008 	strh.w	r5, [sp, #8]
 800ec66:	e7c5      	b.n	800ebf4 <_lv_area_is_point_on+0xae>
        return false;
 800ec68:	2000      	movs	r0, #0
 800ec6a:	e789      	b.n	800eb80 <_lv_area_is_point_on+0x3a>

0800ec6c <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800ec6c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ec70:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	dc14      	bgt.n	800eca2 <_lv_area_is_on+0x36>
 800ec78:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800ec7c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	db0e      	blt.n	800eca2 <_lv_area_is_on+0x36>
 800ec84:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ec88:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	dc08      	bgt.n	800eca2 <_lv_area_is_on+0x36>
 800ec90:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ec94:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800ec98:	4298      	cmp	r0, r3
 800ec9a:	bfb4      	ite	lt
 800ec9c:	2000      	movlt	r0, #0
 800ec9e:	2001      	movge	r0, #1
 800eca0:	4770      	bx	lr
        return false;
 800eca2:	2000      	movs	r0, #0
}
 800eca4:	4770      	bx	lr

0800eca6 <_lv_area_is_in>:
{
 800eca6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800ecaa:	f9b1 3000 	ldrsh.w	r3, [r1]
 800ecae:	f9b0 7000 	ldrsh.w	r7, [r0]
{
 800ecb2:	4605      	mov	r5, r0
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800ecb4:	42bb      	cmp	r3, r7
{
 800ecb6:	460c      	mov	r4, r1
 800ecb8:	4616      	mov	r6, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800ecba:	dc23      	bgt.n	800ed04 <_lv_area_is_in+0x5e>
 800ecbc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ecc0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	db1d      	blt.n	800ed04 <_lv_area_is_in+0x5e>
 800ecc8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800eccc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	dc17      	bgt.n	800ed04 <_lv_area_is_in+0x5e>
 800ecd4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ecd8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800ecdc:	4298      	cmp	r0, r3
 800ecde:	bfcc      	ite	gt
 800ece0:	2000      	movgt	r0, #0
 800ece2:	2001      	movle	r0, #1
    if(radius == 0) return is_in;
 800ece4:	b15e      	cbz	r6, 800ecfe <_lv_area_is_in+0x58>
    p.y = ain_p->y1;
 800ece6:	886b      	ldrh	r3, [r5, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800ece8:	4632      	mov	r2, r6
 800ecea:	a901      	add	r1, sp, #4
 800ecec:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 800ecee:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 800ecf2:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800ecf6:	f7ff ff26 	bl	800eb46 <_lv_area_is_point_on>
 800ecfa:	b928      	cbnz	r0, 800ed08 <_lv_area_is_in+0x62>
 800ecfc:	2000      	movs	r0, #0
}
 800ecfe:	b002      	add	sp, #8
 800ed00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_in = false;
 800ed04:	2000      	movs	r0, #0
 800ed06:	e7ed      	b.n	800ece4 <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
 800ed08:	f9b5 8004 	ldrsh.w	r8, [r5, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800ed0c:	4632      	mov	r2, r6
 800ed0e:	a901      	add	r1, sp, #4
 800ed10:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 800ed12:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800ed16:	f7ff ff16 	bl	800eb46 <_lv_area_is_point_on>
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	d0ee      	beq.n	800ecfc <_lv_area_is_in+0x56>
    p.y = ain_p->y2;
 800ed1e:	88eb      	ldrh	r3, [r5, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800ed20:	4632      	mov	r2, r6
 800ed22:	a901      	add	r1, sp, #4
 800ed24:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 800ed26:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y2;
 800ed2a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800ed2e:	f7ff ff0a 	bl	800eb46 <_lv_area_is_point_on>
 800ed32:	2800      	cmp	r0, #0
 800ed34:	d0e2      	beq.n	800ecfc <_lv_area_is_in+0x56>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800ed36:	4632      	mov	r2, r6
 800ed38:	a901      	add	r1, sp, #4
 800ed3a:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 800ed3c:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800ed40:	f7ff ff01 	bl	800eb46 <_lv_area_is_point_on>
 800ed44:	e7db      	b.n	800ecfe <_lv_area_is_in+0x58>

0800ed46 <_lv_area_align>:
{
 800ed46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed48:	8804      	ldrh	r4, [r0, #0]
    switch(align) {
 800ed4a:	2a14      	cmp	r2, #20
 800ed4c:	d839      	bhi.n	800edc2 <_lv_area_align+0x7c>
 800ed4e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ed52:	0015      	.short	0x0015
 800ed54:	00400035 	.word	0x00400035
 800ed58:	00590052 	.word	0x00590052
 800ed5c:	00710061 	.word	0x00710061
 800ed60:	00810078 	.word	0x00810078
 800ed64:	008f0088 	.word	0x008f0088
 800ed68:	00a6009f 	.word	0x00a6009f
 800ed6c:	00bc00ac 	.word	0x00bc00ac
 800ed70:	00c800c3 	.word	0x00c800c3
 800ed74:	00d200cd 	.word	0x00d200cd
 800ed78:	00d800d5 	.word	0x00d800d5
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800ed7c:	2602      	movs	r6, #2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ed7e:	8885      	ldrh	r5, [r0, #4]
 800ed80:	888a      	ldrh	r2, [r1, #4]
 800ed82:	880f      	ldrh	r7, [r1, #0]
 800ed84:	3501      	adds	r5, #1
 800ed86:	3201      	adds	r2, #1
 800ed88:	1b2d      	subs	r5, r5, r4
 800ed8a:	1bd2      	subs	r2, r2, r7
 800ed8c:	b22d      	sxth	r5, r5
 800ed8e:	b212      	sxth	r2, r2
 800ed90:	fb92 f2f6 	sdiv	r2, r2, r6
 800ed94:	fb95 f5f6 	sdiv	r5, r5, r6
 800ed98:	1aad      	subs	r5, r5, r2
 800ed9a:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ed9c:	88c2      	ldrh	r2, [r0, #6]
 800ed9e:	8845      	ldrh	r5, [r0, #2]
 800eda0:	3201      	adds	r2, #1
 800eda2:	1b52      	subs	r2, r2, r5
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 800eda4:	b212      	sxth	r2, r2
 800eda6:	88cd      	ldrh	r5, [r1, #6]
 800eda8:	8849      	ldrh	r1, [r1, #2]
 800edaa:	3501      	adds	r5, #1
 800edac:	1a69      	subs	r1, r5, r1
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 800edae:	b209      	sxth	r1, r1
 800edb0:	fb92 f2f6 	sdiv	r2, r2, r6
 800edb4:	fb91 f1f6 	sdiv	r1, r1, r6
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 800edb8:	1a52      	subs	r2, r2, r1
 800edba:	e001      	b.n	800edc0 <_lv_area_align+0x7a>
            res->x = 0;
 800edbc:	2200      	movs	r2, #0
 800edbe:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 800edc0:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
 800edc2:	881a      	ldrh	r2, [r3, #0]
    res->y += base->y1;
 800edc4:	8841      	ldrh	r1, [r0, #2]
    res->x += base->x1;
 800edc6:	4414      	add	r4, r2
    res->y += base->y1;
 800edc8:	885a      	ldrh	r2, [r3, #2]
    res->x += base->x1;
 800edca:	801c      	strh	r4, [r3, #0]
    res->y += base->y1;
 800edcc:	440a      	add	r2, r1
 800edce:	805a      	strh	r2, [r3, #2]
}
 800edd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800edd2:	2602      	movs	r6, #2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800edd4:	888d      	ldrh	r5, [r1, #4]
 800edd6:	8882      	ldrh	r2, [r0, #4]
 800edd8:	8809      	ldrh	r1, [r1, #0]
 800edda:	3201      	adds	r2, #1
 800eddc:	3501      	adds	r5, #1
 800edde:	1b12      	subs	r2, r2, r4
 800ede0:	1a69      	subs	r1, r5, r1
 800ede2:	b212      	sxth	r2, r2
 800ede4:	b209      	sxth	r1, r1
 800ede6:	fb92 f2f6 	sdiv	r2, r2, r6
 800edea:	fb91 f1f6 	sdiv	r1, r1, r6
 800edee:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base);
 800edf0:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 800edf2:	2200      	movs	r2, #0
 800edf4:	e7e4      	b.n	800edc0 <_lv_area_align+0x7a>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800edf6:	880a      	ldrh	r2, [r1, #0]
 800edf8:	8889      	ldrh	r1, [r1, #4]
 800edfa:	1a52      	subs	r2, r2, r1
 800edfc:	8881      	ldrh	r1, [r0, #4]
 800edfe:	440a      	add	r2, r1
 800ee00:	1b12      	subs	r2, r2, r4
 800ee02:	e7f5      	b.n	800edf0 <_lv_area_align+0xaa>
            res->x = 0;
 800ee04:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base);
 800ee06:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 800ee08:	884a      	ldrh	r2, [r1, #2]
 800ee0a:	88c9      	ldrh	r1, [r1, #6]
 800ee0c:	1a52      	subs	r2, r2, r1
 800ee0e:	88c1      	ldrh	r1, [r0, #6]
 800ee10:	440a      	add	r2, r1
 800ee12:	e048      	b.n	800eea6 <_lv_area_align+0x160>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800ee14:	2602      	movs	r6, #2
 800ee16:	8882      	ldrh	r2, [r0, #4]
 800ee18:	888d      	ldrh	r5, [r1, #4]
 800ee1a:	880f      	ldrh	r7, [r1, #0]
 800ee1c:	3201      	adds	r2, #1
 800ee1e:	3501      	adds	r5, #1
 800ee20:	1b12      	subs	r2, r2, r4
 800ee22:	1bed      	subs	r5, r5, r7
 800ee24:	b212      	sxth	r2, r2
 800ee26:	b22d      	sxth	r5, r5
 800ee28:	fb92 f2f6 	sdiv	r2, r2, r6
 800ee2c:	fb95 f5f6 	sdiv	r5, r5, r6
 800ee30:	1b52      	subs	r2, r2, r5
 800ee32:	e7e8      	b.n	800ee06 <_lv_area_align+0xc0>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800ee34:	888d      	ldrh	r5, [r1, #4]
 800ee36:	880a      	ldrh	r2, [r1, #0]
 800ee38:	1b52      	subs	r2, r2, r5
 800ee3a:	8885      	ldrh	r5, [r0, #4]
 800ee3c:	442a      	add	r2, r5
 800ee3e:	1b12      	subs	r2, r2, r4
 800ee40:	e7e1      	b.n	800ee06 <_lv_area_align+0xc0>
            res->x = 0;
 800ee42:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base);
 800ee44:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ee46:	88c2      	ldrh	r2, [r0, #6]
 800ee48:	8845      	ldrh	r5, [r0, #2]
 800ee4a:	3201      	adds	r2, #1
 800ee4c:	1b52      	subs	r2, r2, r5
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 800ee4e:	b212      	sxth	r2, r2
 800ee50:	2602      	movs	r6, #2
 800ee52:	e7a8      	b.n	800eda6 <_lv_area_align+0x60>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800ee54:	888d      	ldrh	r5, [r1, #4]
 800ee56:	880a      	ldrh	r2, [r1, #0]
 800ee58:	1b52      	subs	r2, r2, r5
 800ee5a:	8885      	ldrh	r5, [r0, #4]
 800ee5c:	442a      	add	r2, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ee5e:	1b12      	subs	r2, r2, r4
 800ee60:	e7f0      	b.n	800ee44 <_lv_area_align+0xfe>
            res->x = 0;
 800ee62:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800ee64:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ee66:	88ca      	ldrh	r2, [r1, #6]
 800ee68:	8849      	ldrh	r1, [r1, #2]
 800ee6a:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
 800ee6c:	43d2      	mvns	r2, r2
 800ee6e:	e7a7      	b.n	800edc0 <_lv_area_align+0x7a>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800ee70:	2602      	movs	r6, #2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ee72:	8882      	ldrh	r2, [r0, #4]
 800ee74:	888d      	ldrh	r5, [r1, #4]
 800ee76:	880f      	ldrh	r7, [r1, #0]
 800ee78:	3201      	adds	r2, #1
 800ee7a:	3501      	adds	r5, #1
 800ee7c:	1b12      	subs	r2, r2, r4
 800ee7e:	1bed      	subs	r5, r5, r7
 800ee80:	b212      	sxth	r2, r2
 800ee82:	b22d      	sxth	r5, r5
 800ee84:	fb92 f2f6 	sdiv	r2, r2, r6
 800ee88:	fb95 f5f6 	sdiv	r5, r5, r6
 800ee8c:	1b52      	subs	r2, r2, r5
 800ee8e:	e7e9      	b.n	800ee64 <_lv_area_align+0x11e>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800ee90:	888d      	ldrh	r5, [r1, #4]
 800ee92:	880a      	ldrh	r2, [r1, #0]
 800ee94:	1b52      	subs	r2, r2, r5
 800ee96:	8885      	ldrh	r5, [r0, #4]
 800ee98:	442a      	add	r2, r5
 800ee9a:	1b12      	subs	r2, r2, r4
 800ee9c:	e7e2      	b.n	800ee64 <_lv_area_align+0x11e>
            res->x = 0;
 800ee9e:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800eea0:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eea2:	88c2      	ldrh	r2, [r0, #6]
 800eea4:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 800eea6:	8841      	ldrh	r1, [r0, #2]
 800eea8:	e786      	b.n	800edb8 <_lv_area_align+0x72>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 800eeaa:	2602      	movs	r6, #2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eeac:	888d      	ldrh	r5, [r1, #4]
 800eeae:	8882      	ldrh	r2, [r0, #4]
 800eeb0:	8809      	ldrh	r1, [r1, #0]
 800eeb2:	3201      	adds	r2, #1
 800eeb4:	3501      	adds	r5, #1
 800eeb6:	1b12      	subs	r2, r2, r4
 800eeb8:	1a69      	subs	r1, r5, r1
 800eeba:	b212      	sxth	r2, r2
 800eebc:	b209      	sxth	r1, r1
 800eebe:	fb92 f2f6 	sdiv	r2, r2, r6
 800eec2:	fb91 f1f6 	sdiv	r1, r1, r6
 800eec6:	1a52      	subs	r2, r2, r1
 800eec8:	e7ea      	b.n	800eea0 <_lv_area_align+0x15a>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 800eeca:	880a      	ldrh	r2, [r1, #0]
 800eecc:	8889      	ldrh	r1, [r1, #4]
 800eece:	1a52      	subs	r2, r2, r1
 800eed0:	8881      	ldrh	r1, [r0, #4]
 800eed2:	440a      	add	r2, r1
 800eed4:	1b12      	subs	r2, r2, r4
 800eed6:	e7e3      	b.n	800eea0 <_lv_area_align+0x15a>
 800eed8:	888a      	ldrh	r2, [r1, #4]
 800eeda:	8809      	ldrh	r1, [r1, #0]
 800eedc:	1a52      	subs	r2, r2, r1
            res->x = -lv_area_get_width(to_align);
 800eede:	43d2      	mvns	r2, r2
 800eee0:	e786      	b.n	800edf0 <_lv_area_align+0xaa>
 800eee2:	888a      	ldrh	r2, [r1, #4]
 800eee4:	880d      	ldrh	r5, [r1, #0]
 800eee6:	1b52      	subs	r2, r2, r5
            res->x = -lv_area_get_width(to_align);
 800eee8:	43d2      	mvns	r2, r2
 800eeea:	e7ab      	b.n	800ee44 <_lv_area_align+0xfe>
 800eeec:	888a      	ldrh	r2, [r1, #4]
 800eeee:	880d      	ldrh	r5, [r1, #0]
 800eef0:	1b52      	subs	r2, r2, r5
            res->x = -lv_area_get_width(to_align);
 800eef2:	43d2      	mvns	r2, r2
 800eef4:	e787      	b.n	800ee06 <_lv_area_align+0xc0>
 800eef6:	8882      	ldrh	r2, [r0, #4]
 800eef8:	3201      	adds	r2, #1
 800eefa:	e781      	b.n	800ee00 <_lv_area_align+0xba>
 800eefc:	8882      	ldrh	r2, [r0, #4]
 800eefe:	3201      	adds	r2, #1
 800ef00:	e7ad      	b.n	800ee5e <_lv_area_align+0x118>
 800ef02:	8882      	ldrh	r2, [r0, #4]
 800ef04:	3201      	adds	r2, #1
 800ef06:	e79a      	b.n	800ee3e <_lv_area_align+0xf8>

0800ef08 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800ef08:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800ef0a:	f3c1 03c4 	ubfx	r3, r1, #3, #5
 800ef0e:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
 800ef12:	4373      	muls	r3, r6
 800ef14:	f3c0 04c4 	ubfx	r4, r0, #3, #5
 800ef18:	fb02 3404 	mla	r4, r2, r4, r3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ef1c:	f000 0707 	and.w	r7, r0, #7
 800ef20:	f3c0 3342 	ubfx	r3, r0, #13, #3
 800ef24:	f001 0c07 	and.w	ip, r1, #7
 800ef28:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ef2c:	f3c1 3742 	ubfx	r7, r1, #13, #3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800ef30:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ef34:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800ef38:	f3c1 2104 	ubfx	r1, r1, #8, #5
 800ef3c:	4371      	muls	r1, r6
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ef3e:	4377      	muls	r7, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800ef40:	f3c0 2004 	ubfx	r0, r0, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ef44:	fb02 7303 	mla	r3, r2, r3, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800ef48:	fb02 1200 	mla	r2, r2, r0, r1
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800ef4c:	f04f 0000 	mov.w	r0, #0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ef50:	3380      	adds	r3, #128	; 0x80
 800ef52:	436b      	muls	r3, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800ef54:	3480      	adds	r4, #128	; 0x80
 800ef56:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800ef58:	3280      	adds	r2, #128	; 0x80
 800ef5a:	436a      	muls	r2, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ef5c:	0e99      	lsrs	r1, r3, #26
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800ef5e:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    return ret;
 800ef62:	f361 0002 	bfi	r0, r1, #0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800ef66:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    return ret;
 800ef6a:	f364 00c7 	bfi	r0, r4, #3, #5
 800ef6e:	f362 200c 	bfi	r0, r2, #8, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800ef72:	0ddb      	lsrs	r3, r3, #23
    return ret;
 800ef74:	f363 304f 	bfi	r0, r3, #13, #3
}
 800ef78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef7a <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
 800ef7a:	0783      	lsls	r3, r0, #30
{
 800ef7c:	b510      	push	{r4, lr}
 800ef7e:	b28c      	uxth	r4, r1
        *buf = color;
 800ef80:	bf1c      	itt	ne
 800ef82:	f820 1b02 	strhne.w	r1, [r0], #2
        buf++;
        px_num--;
 800ef86:	f102 32ff 	addne.w	r2, r2, #4294967295
    }

    uint32_t c32 = color.full + (color.full << 16);
 800ef8a:	eb04 4304 	add.w	r3, r4, r4, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 800ef8e:	2a10      	cmp	r2, #16
 800ef90:	4601      	mov	r1, r0
 800ef92:	f100 0020 	add.w	r0, r0, #32
 800ef96:	d804      	bhi.n	800efa2 <lv_color_fill+0x28>
 800ef98:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        px_num -= 16;
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
 800ef9c:	4291      	cmp	r1, r2
 800ef9e:	d10a      	bne.n	800efb6 <lv_color_fill+0x3c>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
 800efa0:	bd10      	pop	{r4, pc}
        *buf32 = c32;
 800efa2:	e940 3308 	strd	r3, r3, [r0, #-32]
        *buf32 = c32;
 800efa6:	e940 3306 	strd	r3, r3, [r0, #-24]
        *buf32 = c32;
 800efaa:	e940 3304 	strd	r3, r3, [r0, #-16]
        *buf32 = c32;
 800efae:	e940 3302 	strd	r3, r3, [r0, #-8]
        px_num -= 16;
 800efb2:	3a10      	subs	r2, #16
 800efb4:	e7eb      	b.n	800ef8e <lv_color_fill+0x14>
        *buf = color;
 800efb6:	f821 4b02 	strh.w	r4, [r1], #2
 800efba:	e7ef      	b.n	800ef9c <lv_color_fill+0x22>

0800efbc <lv_color_darken>:
}


lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
 800efbc:	460a      	mov	r2, r1
 800efbe:	4601      	mov	r1, r0
 800efc0:	f04f 0000 	mov.w	r0, #0
 800efc4:	f7ff bfa0 	b.w	800ef08 <lv_color_mix>

0800efc8 <lv_debug_check_null>:
bool lv_debug_check_null(const void * p)
{
    if(p) return true;

    return false;
}
 800efc8:	3000      	adds	r0, #0
 800efca:	bf18      	it	ne
 800efcc:	2001      	movne	r0, #1
 800efce:	4770      	bx	lr

0800efd0 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
 800efd0:	b510      	push	{r4, lr}
 800efd2:	b0c0      	sub	sp, #256	; 0x100
 800efd4:	4604      	mov	r4, r0
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
 800efd6:	f7f1 f8c3 	bl	8000160 <strlen>
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
 800efda:	28e5      	cmp	r0, #229	; 0xe5
    size_t msg_len = strlen(msg);
 800efdc:	4602      	mov	r2, r0
    if(msg_len < 230) {
 800efde:	d803      	bhi.n	800efe8 <lv_debug_log_error+0x18>
        char buf[255];
        char * bufp = buf;

        /*Add the function name*/
        _lv_memcpy(bufp, msg, msg_len);
 800efe0:	4621      	mov	r1, r4
 800efe2:	4668      	mov	r0, sp
 800efe4:	f000 fb5e 	bl	800f6a4 <_lv_memcpy>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
 800efe8:	b040      	add	sp, #256	; 0x100
 800efea:	bd10      	pop	{r4, pc}

0800efec <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 800efec:	1c42      	adds	r2, r0, #1
 800efee:	4610      	mov	r0, r2

    while(*path != '\0') {
 800eff0:	f812 3b01 	ldrb.w	r3, [r2], #1
 800eff4:	b12b      	cbz	r3, 800f002 <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800eff6:	2b3a      	cmp	r3, #58	; 0x3a
 800eff8:	d0f9      	beq.n	800efee <lv_fs_get_real_path+0x2>
 800effa:	2b5c      	cmp	r3, #92	; 0x5c
 800effc:	d0f7      	beq.n	800efee <lv_fs_get_real_path+0x2>
 800effe:	2b2f      	cmp	r3, #47	; 0x2f
 800f000:	d0f5      	beq.n	800efee <lv_fs_get_real_path+0x2>
            break;
        }
    }

    return path;
}
 800f002:	4770      	bx	lr

0800f004 <_lv_fs_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 800f004:	2144      	movs	r1, #68	; 0x44
 800f006:	4801      	ldr	r0, [pc, #4]	; (800f00c <_lv_fs_init+0x8>)
 800f008:	f000 b8c1 	b.w	800f18e <_lv_ll_init>
 800f00c:	200033d4 	.word	0x200033d4

0800f010 <lv_fs_close>:
{
 800f010:	b538      	push	{r3, r4, r5, lr}
 800f012:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 800f014:	6840      	ldr	r0, [r0, #4]
 800f016:	b160      	cbz	r0, 800f032 <lv_fs_close+0x22>
    if(file_p->drv->close_cb == NULL) {
 800f018:	6903      	ldr	r3, [r0, #16]
 800f01a:	b163      	cbz	r3, 800f036 <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800f01c:	6821      	ldr	r1, [r4, #0]
 800f01e:	4798      	blx	r3
 800f020:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 800f022:	6820      	ldr	r0, [r4, #0]
 800f024:	f000 fab2 	bl	800f58c <lv_mem_free>
    file_p->file_d = NULL;
 800f028:	2300      	movs	r3, #0
    file_p->drv    = NULL;
 800f02a:	e9c4 3300 	strd	r3, r3, [r4]
}
 800f02e:	4628      	mov	r0, r5
 800f030:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 800f032:	250b      	movs	r5, #11
 800f034:	e7fb      	b.n	800f02e <lv_fs_close+0x1e>
        return LV_FS_RES_NOT_IMP;
 800f036:	2509      	movs	r5, #9
 800f038:	e7f9      	b.n	800f02e <lv_fs_close+0x1e>

0800f03a <lv_fs_read>:
{
 800f03a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f03c:	4606      	mov	r6, r0
 800f03e:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
 800f040:	461c      	mov	r4, r3
 800f042:	b10b      	cbz	r3, 800f048 <lv_fs_read+0xe>
 800f044:	2300      	movs	r3, #0
 800f046:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800f048:	6870      	ldr	r0, [r6, #4]
 800f04a:	b178      	cbz	r0, 800f06c <lv_fs_read+0x32>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800f04c:	6985      	ldr	r5, [r0, #24]
 800f04e:	b17d      	cbz	r5, 800f070 <lv_fs_read+0x36>
    uint32_t br_tmp = 0;
 800f050:	2700      	movs	r7, #0
 800f052:	ab04      	add	r3, sp, #16
 800f054:	f843 7d04 	str.w	r7, [r3, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	4613      	mov	r3, r2
 800f05c:	460a      	mov	r2, r1
 800f05e:	6831      	ldr	r1, [r6, #0]
 800f060:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 800f062:	b10c      	cbz	r4, 800f068 <lv_fs_read+0x2e>
 800f064:	9b03      	ldr	r3, [sp, #12]
 800f066:	6023      	str	r3, [r4, #0]
}
 800f068:	b005      	add	sp, #20
 800f06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800f06c:	200b      	movs	r0, #11
 800f06e:	e7fb      	b.n	800f068 <lv_fs_read+0x2e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800f070:	2009      	movs	r0, #9
 800f072:	e7f9      	b.n	800f068 <lv_fs_read+0x2e>

0800f074 <lv_fs_seek>:
    if(file_p->drv == NULL) {
 800f074:	6843      	ldr	r3, [r0, #4]
{
 800f076:	b410      	push	{r4}
 800f078:	460a      	mov	r2, r1
    if(file_p->drv == NULL) {
 800f07a:	b133      	cbz	r3, 800f08a <lv_fs_seek+0x16>
    if(file_p->drv->seek_cb == NULL) {
 800f07c:	6a1c      	ldr	r4, [r3, #32]
 800f07e:	b13c      	cbz	r4, 800f090 <lv_fs_seek+0x1c>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800f080:	6801      	ldr	r1, [r0, #0]
 800f082:	4618      	mov	r0, r3
 800f084:	4623      	mov	r3, r4
}
 800f086:	bc10      	pop	{r4}
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800f088:	4718      	bx	r3
        return LV_FS_RES_INV_PARAM;
 800f08a:	200b      	movs	r0, #11
}
 800f08c:	bc10      	pop	{r4}
 800f08e:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 800f090:	2009      	movs	r0, #9
 800f092:	e7fb      	b.n	800f08c <lv_fs_seek+0x18>

0800f094 <lv_fs_get_drv>:
{
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 800f098:	4806      	ldr	r0, [pc, #24]	; (800f0b4 <lv_fs_get_drv+0x20>)
 800f09a:	f000 f8b7 	bl	800f20c <_lv_ll_get_head>
 800f09e:	4d05      	ldr	r5, [pc, #20]	; (800f0b4 <lv_fs_get_drv+0x20>)
 800f0a0:	b900      	cbnz	r0, 800f0a4 <lv_fs_get_drv+0x10>
}
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}
        if(drv->letter == letter) {
 800f0a4:	7803      	ldrb	r3, [r0, #0]
 800f0a6:	42a3      	cmp	r3, r4
 800f0a8:	d0fb      	beq.n	800f0a2 <lv_fs_get_drv+0xe>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 800f0aa:	4601      	mov	r1, r0
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	f000 f8b3 	bl	800f218 <_lv_ll_get_next>
 800f0b2:	e7f5      	b.n	800f0a0 <lv_fs_get_drv+0xc>
 800f0b4:	200033d4 	.word	0x200033d4

0800f0b8 <lv_fs_open>:
    file_p->drv    = NULL;
 800f0b8:	2300      	movs	r3, #0
{
 800f0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0be:	4604      	mov	r4, r0
 800f0c0:	4690      	mov	r8, r2
    file_p->file_d = NULL;
 800f0c2:	e9c0 3300 	strd	r3, r3, [r0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800f0c6:	460d      	mov	r5, r1
 800f0c8:	2900      	cmp	r1, #0
 800f0ca:	d038      	beq.n	800f13e <lv_fs_open+0x86>
    file_p->drv = lv_fs_get_drv(letter);
 800f0cc:	7808      	ldrb	r0, [r1, #0]
 800f0ce:	f7ff ffe1 	bl	800f094 <lv_fs_get_drv>
 800f0d2:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 800f0d4:	b920      	cbnz	r0, 800f0e0 <lv_fs_open+0x28>
        return LV_FS_RES_NOT_EX;
 800f0d6:	2503      	movs	r5, #3
        file_p->file_d = NULL;
 800f0d8:	6020      	str	r0, [r4, #0]
}
 800f0da:	4628      	mov	r0, r5
 800f0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(file_p->drv->ready_cb != NULL) {
 800f0e0:	6883      	ldr	r3, [r0, #8]
 800f0e2:	b12b      	cbz	r3, 800f0f0 <lv_fs_open+0x38>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 800f0e4:	4798      	blx	r3
 800f0e6:	b918      	cbnz	r0, 800f0f0 <lv_fs_open+0x38>
            file_p->file_d = NULL;
 800f0e8:	e9c4 0000 	strd	r0, r0, [r4]
            return LV_FS_RES_HW_ERR;
 800f0ec:	2501      	movs	r5, #1
 800f0ee:	e7f4      	b.n	800f0da <lv_fs_open+0x22>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800f0f0:	6863      	ldr	r3, [r4, #4]
 800f0f2:	8858      	ldrh	r0, [r3, #2]
 800f0f4:	f000 f9fa 	bl	800f4ec <lv_mem_alloc>
 800f0f8:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
 800f0fa:	f7ff ff65 	bl	800efc8 <lv_debug_check_null>
 800f0fe:	6821      	ldr	r1, [r4, #0]
 800f100:	4603      	mov	r3, r0
 800f102:	b920      	cbnz	r0, 800f10e <lv_fs_open+0x56>
 800f104:	460a      	mov	r2, r1
 800f106:	4810      	ldr	r0, [pc, #64]	; (800f148 <lv_fs_open+0x90>)
 800f108:	f7ff ff62 	bl	800efd0 <lv_debug_log_error>
 800f10c:	e7fe      	b.n	800f10c <lv_fs_open+0x54>
    if(file_p->file_d == NULL) {
 800f10e:	b911      	cbnz	r1, 800f116 <lv_fs_open+0x5e>
        file_p->drv = NULL;
 800f110:	6061      	str	r1, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 800f112:	250a      	movs	r5, #10
 800f114:	e7e1      	b.n	800f0da <lv_fs_open+0x22>
    if(file_p->drv->open_cb == NULL) {
 800f116:	6867      	ldr	r7, [r4, #4]
 800f118:	68fe      	ldr	r6, [r7, #12]
 800f11a:	b196      	cbz	r6, 800f142 <lv_fs_open+0x8a>
    const char * real_path = lv_fs_get_real_path(path);
 800f11c:	4628      	mov	r0, r5
 800f11e:	f7ff ff65 	bl	800efec <lv_fs_get_real_path>
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800f122:	4643      	mov	r3, r8
 800f124:	4602      	mov	r2, r0
 800f126:	4638      	mov	r0, r7
 800f128:	47b0      	blx	r6
    if(res != LV_FS_RES_OK) {
 800f12a:	4605      	mov	r5, r0
 800f12c:	2800      	cmp	r0, #0
 800f12e:	d0d4      	beq.n	800f0da <lv_fs_open+0x22>
        lv_mem_free(file_p->file_d);
 800f130:	6820      	ldr	r0, [r4, #0]
 800f132:	f000 fa2b 	bl	800f58c <lv_mem_free>
        file_p->file_d = NULL;
 800f136:	2300      	movs	r3, #0
        file_p->drv    = NULL;
 800f138:	e9c4 3300 	strd	r3, r3, [r4]
 800f13c:	e7cd      	b.n	800f0da <lv_fs_open+0x22>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800f13e:	250b      	movs	r5, #11
 800f140:	e7cb      	b.n	800f0da <lv_fs_open+0x22>
        return LV_FS_RES_NOT_IMP;
 800f142:	2509      	movs	r5, #9
 800f144:	e7c9      	b.n	800f0da <lv_fs_open+0x22>
 800f146:	bf00      	nop
 800f148:	08015994 	.word	0x08015994

0800f14c <lv_fs_get_ext>:
{
 800f14c:	b510      	push	{r4, lr}
 800f14e:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 800f150:	f7f1 f806 	bl	8000160 <strlen>
 800f154:	4420      	add	r0, r4
 800f156:	42a0      	cmp	r0, r4
 800f158:	eba0 0304 	sub.w	r3, r0, r4
 800f15c:	d00a      	beq.n	800f174 <lv_fs_get_ext+0x28>
        if(fn[i] == '.') {
 800f15e:	f810 2901 	ldrb.w	r2, [r0], #-1
 800f162:	2a2e      	cmp	r2, #46	; 0x2e
 800f164:	d102      	bne.n	800f16c <lv_fs_get_ext+0x20>
            return &fn[i + 1];
 800f166:	1c58      	adds	r0, r3, #1
 800f168:	4420      	add	r0, r4
}
 800f16a:	bd10      	pop	{r4, pc}
        else if(fn[i] == '/' || fn[i] == '\\') {
 800f16c:	2a2f      	cmp	r2, #47	; 0x2f
 800f16e:	d001      	beq.n	800f174 <lv_fs_get_ext+0x28>
 800f170:	2a5c      	cmp	r2, #92	; 0x5c
 800f172:	d1f0      	bne.n	800f156 <lv_fs_get_ext+0xa>
            return ""; /*No extension if a '\' or '/' found*/
 800f174:	4800      	ldr	r0, [pc, #0]	; (800f178 <lv_fs_get_ext+0x2c>)
 800f176:	e7f8      	b.n	800f16a <lv_fs_get_ext+0x1e>
 800f178:	0801993b 	.word	0x0801993b

0800f17c <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800f17c:	b109      	cbz	r1, 800f182 <node_set_prev.isra.0+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 800f17e:	6803      	ldr	r3, [r0, #0]
 800f180:	50ca      	str	r2, [r1, r3]
}
 800f182:	4770      	bx	lr

0800f184 <node_set_next.isra.1>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800f184:	b111      	cbz	r1, 800f18c <node_set_next.isra.1+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 800f186:	6803      	ldr	r3, [r0, #0]
 800f188:	4419      	add	r1, r3
 800f18a:	604a      	str	r2, [r1, #4]
}
 800f18c:	4770      	bx	lr

0800f18e <_lv_ll_init>:
    ll_p->head = NULL;
 800f18e:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 800f190:	3103      	adds	r1, #3
 800f192:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
 800f196:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
 800f19a:	6001      	str	r1, [r0, #0]
}
 800f19c:	4770      	bx	lr

0800f19e <_lv_ll_ins_head>:
{
 800f19e:	b538      	push	{r3, r4, r5, lr}
 800f1a0:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800f1a2:	6800      	ldr	r0, [r0, #0]
 800f1a4:	3008      	adds	r0, #8
 800f1a6:	f000 f9a1 	bl	800f4ec <lv_mem_alloc>
    if(n_new != NULL) {
 800f1aa:	4605      	mov	r5, r0
 800f1ac:	b180      	cbz	r0, 800f1d0 <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800f1ae:	4601      	mov	r1, r0
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f7ff ffe2 	bl	800f17c <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800f1b8:	6862      	ldr	r2, [r4, #4]
 800f1ba:	f7ff ffe3 	bl	800f184 <node_set_next.isra.1>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800f1be:	6861      	ldr	r1, [r4, #4]
 800f1c0:	b111      	cbz	r1, 800f1c8 <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
 800f1c2:	462a      	mov	r2, r5
 800f1c4:	f7ff ffda 	bl	800f17c <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800f1c8:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800f1ca:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800f1cc:	b903      	cbnz	r3, 800f1d0 <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
 800f1ce:	60a5      	str	r5, [r4, #8]
}
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	bd38      	pop	{r3, r4, r5, pc}

0800f1d4 <_lv_ll_ins_tail>:
{
 800f1d4:	b538      	push	{r3, r4, r5, lr}
 800f1d6:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800f1d8:	6800      	ldr	r0, [r0, #0]
 800f1da:	3008      	adds	r0, #8
 800f1dc:	f000 f986 	bl	800f4ec <lv_mem_alloc>
    if(n_new != NULL) {
 800f1e0:	4605      	mov	r5, r0
 800f1e2:	b188      	cbz	r0, 800f208 <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800f1e4:	4601      	mov	r1, r0
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f7ff ffcb 	bl	800f184 <node_set_next.isra.1>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 800f1ee:	4629      	mov	r1, r5
 800f1f0:	68a2      	ldr	r2, [r4, #8]
 800f1f2:	f7ff ffc3 	bl	800f17c <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800f1f6:	68a1      	ldr	r1, [r4, #8]
 800f1f8:	b111      	cbz	r1, 800f200 <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
 800f1fa:	462a      	mov	r2, r5
 800f1fc:	f7ff ffc2 	bl	800f184 <node_set_next.isra.1>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800f200:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800f202:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800f204:	b903      	cbnz	r3, 800f208 <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
 800f206:	6065      	str	r5, [r4, #4]
}
 800f208:	4628      	mov	r0, r5
 800f20a:	bd38      	pop	{r3, r4, r5, pc}

0800f20c <_lv_ll_get_head>:
    if(ll_p != NULL) {
 800f20c:	b100      	cbz	r0, 800f210 <_lv_ll_get_head+0x4>
        head = ll_p->head;
 800f20e:	6840      	ldr	r0, [r0, #4]
}
 800f210:	4770      	bx	lr

0800f212 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
 800f212:	b100      	cbz	r0, 800f216 <_lv_ll_get_tail+0x4>
        tail = ll_p->tail;
 800f214:	6880      	ldr	r0, [r0, #8]
}
 800f216:	4770      	bx	lr

0800f218 <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
 800f218:	b110      	cbz	r0, 800f220 <_lv_ll_get_next+0x8>
    return *((lv_ll_node_t **)n_act_d);
 800f21a:	6803      	ldr	r3, [r0, #0]
 800f21c:	4419      	add	r1, r3
 800f21e:	6848      	ldr	r0, [r1, #4]
}
 800f220:	4770      	bx	lr

0800f222 <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
 800f222:	b108      	cbz	r0, 800f228 <_lv_ll_get_prev+0x6>
    return *((lv_ll_node_t **)n_act_d);
 800f224:	6803      	ldr	r3, [r0, #0]
 800f226:	58c8      	ldr	r0, [r1, r3]
}
 800f228:	4770      	bx	lr

0800f22a <_lv_ll_ins_prev>:
{
 800f22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22c:	460e      	mov	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 800f22e:	4605      	mov	r5, r0
 800f230:	b328      	cbz	r0, 800f27e <_lv_ll_ins_prev+0x54>
 800f232:	b331      	cbz	r1, 800f282 <_lv_ll_ins_prev+0x58>
    if(_lv_ll_get_head(ll_p) == n_act) {
 800f234:	6843      	ldr	r3, [r0, #4]
 800f236:	4299      	cmp	r1, r3
 800f238:	d103      	bne.n	800f242 <_lv_ll_ins_prev+0x18>
}
 800f23a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        n_new = _lv_ll_ins_head(ll_p);
 800f23e:	f7ff bfae 	b.w	800f19e <_lv_ll_ins_head>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800f242:	6800      	ldr	r0, [r0, #0]
 800f244:	3008      	adds	r0, #8
 800f246:	f000 f951 	bl	800f4ec <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 800f24a:	4604      	mov	r4, r0
 800f24c:	b1a8      	cbz	r0, 800f27a <_lv_ll_ins_prev+0x50>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
 800f24e:	4631      	mov	r1, r6
 800f250:	4628      	mov	r0, r5
 800f252:	f7ff ffe6 	bl	800f222 <_lv_ll_get_prev>
 800f256:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 800f258:	4601      	mov	r1, r0
 800f25a:	4622      	mov	r2, r4
 800f25c:	4628      	mov	r0, r5
 800f25e:	f7ff ff91 	bl	800f184 <node_set_next.isra.1>
        node_set_prev(ll_p, n_new, n_prev);
 800f262:	463a      	mov	r2, r7
 800f264:	4621      	mov	r1, r4
 800f266:	f7ff ff89 	bl	800f17c <node_set_prev.isra.0>
        node_set_prev(ll_p, n_act, n_new);
 800f26a:	4622      	mov	r2, r4
 800f26c:	4631      	mov	r1, r6
 800f26e:	f7ff ff85 	bl	800f17c <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, n_act);
 800f272:	4632      	mov	r2, r6
 800f274:	4621      	mov	r1, r4
 800f276:	f7ff ff85 	bl	800f184 <node_set_next.isra.1>
}
 800f27a:	4620      	mov	r0, r4
 800f27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
 800f27e:	4604      	mov	r4, r0
 800f280:	e7fb      	b.n	800f27a <_lv_ll_ins_prev+0x50>
 800f282:	460c      	mov	r4, r1
 800f284:	e7f9      	b.n	800f27a <_lv_ll_ins_prev+0x50>

0800f286 <_lv_ll_remove>:
{
 800f286:	b570      	push	{r4, r5, r6, lr}
 800f288:	460a      	mov	r2, r1
    if(ll_p != NULL) {
 800f28a:	4604      	mov	r4, r0
 800f28c:	b308      	cbz	r0, 800f2d2 <_lv_ll_remove+0x4c>
    if(_lv_ll_get_head(ll_p) == node_p) {
 800f28e:	6843      	ldr	r3, [r0, #4]
 800f290:	4299      	cmp	r1, r3
 800f292:	d10e      	bne.n	800f2b2 <_lv_ll_remove+0x2c>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 800f294:	4611      	mov	r1, r2
 800f296:	4620      	mov	r0, r4
 800f298:	f7ff ffbe 	bl	800f218 <_lv_ll_get_next>
 800f29c:	4601      	mov	r1, r0
 800f29e:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 800f2a0:	b908      	cbnz	r0, 800f2a6 <_lv_ll_remove+0x20>
            ll_p->tail = NULL;
 800f2a2:	60a0      	str	r0, [r4, #8]
}
 800f2a4:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 800f2a6:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
 800f2a8:	4620      	mov	r0, r4
}
 800f2aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 800f2ae:	f7ff bf65 	b.w	800f17c <node_set_prev.isra.0>
 800f2b2:	f7ff ffb6 	bl	800f222 <_lv_ll_get_prev>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 800f2b6:	68a3      	ldr	r3, [r4, #8]
 800f2b8:	4601      	mov	r1, r0
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d10b      	bne.n	800f2d6 <_lv_ll_remove+0x50>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 800f2be:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 800f2c0:	b908      	cbnz	r0, 800f2c6 <_lv_ll_remove+0x40>
            ll_p->head = NULL;
 800f2c2:	6060      	str	r0, [r4, #4]
 800f2c4:	e7ee      	b.n	800f2a4 <_lv_ll_remove+0x1e>
            node_set_next(ll_p, ll_p->tail, NULL);
 800f2c6:	4620      	mov	r0, r4
}
 800f2c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	f7ff bf59 	b.w	800f184 <node_set_next.isra.1>
    if(_lv_ll_get_head(ll_p) == node_p) {
 800f2d2:	2900      	cmp	r1, #0
 800f2d4:	d0de      	beq.n	800f294 <_lv_ll_remove+0xe>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f7ff ffa2 	bl	800f222 <_lv_ll_get_prev>
 800f2de:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f7ff ff99 	bl	800f218 <_lv_ll_get_next>
 800f2e6:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	4631      	mov	r1, r6
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f7ff ff49 	bl	800f184 <node_set_next.isra.1>
        node_set_prev(ll_p, n_next, n_prev);
 800f2f2:	4632      	mov	r2, r6
 800f2f4:	4629      	mov	r1, r5
 800f2f6:	e7d7      	b.n	800f2a8 <_lv_ll_remove+0x22>

0800f2f8 <_lv_ll_chg_list>:
{
 800f2f8:	b570      	push	{r4, r5, r6, lr}
 800f2fa:	461e      	mov	r6, r3
 800f2fc:	460c      	mov	r4, r1
    _lv_ll_remove(ll_ori_p, node);
 800f2fe:	4611      	mov	r1, r2
{
 800f300:	4615      	mov	r5, r2
    _lv_ll_remove(ll_ori_p, node);
 800f302:	f7ff ffc0 	bl	800f286 <_lv_ll_remove>
    if(head) {
 800f306:	b18e      	cbz	r6, 800f32c <_lv_ll_chg_list+0x34>
        node_set_prev(ll_new_p, node, NULL);
 800f308:	4629      	mov	r1, r5
 800f30a:	2200      	movs	r2, #0
 800f30c:	4620      	mov	r0, r4
 800f30e:	f7ff ff35 	bl	800f17c <node_set_prev.isra.0>
        node_set_next(ll_new_p, node, ll_new_p->head);
 800f312:	6862      	ldr	r2, [r4, #4]
 800f314:	f7ff ff36 	bl	800f184 <node_set_next.isra.1>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800f318:	6861      	ldr	r1, [r4, #4]
 800f31a:	b111      	cbz	r1, 800f322 <_lv_ll_chg_list+0x2a>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 800f31c:	462a      	mov	r2, r5
 800f31e:	f7ff ff2d 	bl	800f17c <node_set_prev.isra.0>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800f322:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 800f324:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800f326:	b903      	cbnz	r3, 800f32a <_lv_ll_chg_list+0x32>
            ll_new_p->tail = node;
 800f328:	60a5      	str	r5, [r4, #8]
}
 800f32a:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 800f32c:	4629      	mov	r1, r5
 800f32e:	68a2      	ldr	r2, [r4, #8]
 800f330:	4620      	mov	r0, r4
 800f332:	f7ff ff23 	bl	800f17c <node_set_prev.isra.0>
        node_set_next(ll_new_p, node, NULL);
 800f336:	4632      	mov	r2, r6
 800f338:	f7ff ff24 	bl	800f184 <node_set_next.isra.1>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 800f33c:	68a1      	ldr	r1, [r4, #8]
 800f33e:	b111      	cbz	r1, 800f346 <_lv_ll_chg_list+0x4e>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 800f340:	462a      	mov	r2, r5
 800f342:	f7ff ff1f 	bl	800f184 <node_set_next.isra.1>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800f346:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 800f348:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1ed      	bne.n	800f32a <_lv_ll_chg_list+0x32>
            ll_new_p->head = node;
 800f34e:	6065      	str	r5, [r4, #4]
}
 800f350:	e7eb      	b.n	800f32a <_lv_ll_chg_list+0x32>

0800f352 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
 800f352:	4291      	cmp	r1, r2
{
 800f354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f356:	4605      	mov	r5, r0
 800f358:	460c      	mov	r4, r1
 800f35a:	4616      	mov	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 800f35c:	d006      	beq.n	800f36c <_lv_ll_move_before+0x1a>
    if(n_after != NULL)
 800f35e:	b132      	cbz	r2, 800f36e <_lv_ll_move_before+0x1c>
        n_before = _lv_ll_get_prev(ll_p, n_after);
 800f360:	4611      	mov	r1, r2
 800f362:	f7ff ff5e 	bl	800f222 <_lv_ll_get_prev>
    if(n_act == n_before) return; /*Already before `n_after`*/
 800f366:	4284      	cmp	r4, r0
        n_before = _lv_ll_get_prev(ll_p, n_after);
 800f368:	4607      	mov	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 800f36a:	d11e      	bne.n	800f3aa <_lv_ll_move_before+0x58>
}
 800f36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 800f36e:	b100      	cbz	r0, 800f372 <_lv_ll_move_before+0x20>
        tail = ll_p->tail;
 800f370:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 800f372:	42a6      	cmp	r6, r4
 800f374:	d0fa      	beq.n	800f36c <_lv_ll_move_before+0x1a>
    _lv_ll_remove(ll_p, n_act);
 800f376:	4621      	mov	r1, r4
 800f378:	4628      	mov	r0, r5
 800f37a:	f7ff ff84 	bl	800f286 <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
 800f37e:	4628      	mov	r0, r5
 800f380:	4622      	mov	r2, r4
 800f382:	4631      	mov	r1, r6
 800f384:	f7ff fefe 	bl	800f184 <node_set_next.isra.1>
    node_set_prev(ll_p, n_act, n_before);
 800f388:	4632      	mov	r2, r6
 800f38a:	4621      	mov	r1, r4
 800f38c:	f7ff fef6 	bl	800f17c <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
 800f390:	4622      	mov	r2, r4
 800f392:	2100      	movs	r1, #0
 800f394:	f7ff fef2 	bl	800f17c <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
 800f398:	2200      	movs	r2, #0
 800f39a:	4621      	mov	r1, r4
 800f39c:	f7ff fef2 	bl	800f184 <node_set_next.isra.1>
    if(n_after == NULL) ll_p->tail = n_act;
 800f3a0:	60ac      	str	r4, [r5, #8]
    if(n_before == NULL) ll_p->head = n_act;
 800f3a2:	2e00      	cmp	r6, #0
 800f3a4:	d1e2      	bne.n	800f36c <_lv_ll_move_before+0x1a>
 800f3a6:	606c      	str	r4, [r5, #4]
 800f3a8:	e7e0      	b.n	800f36c <_lv_ll_move_before+0x1a>
    _lv_ll_remove(ll_p, n_act);
 800f3aa:	4621      	mov	r1, r4
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	f7ff ff6a 	bl	800f286 <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	4622      	mov	r2, r4
 800f3b6:	4639      	mov	r1, r7
 800f3b8:	f7ff fee4 	bl	800f184 <node_set_next.isra.1>
    node_set_prev(ll_p, n_act, n_before);
 800f3bc:	463a      	mov	r2, r7
 800f3be:	4621      	mov	r1, r4
 800f3c0:	f7ff fedc 	bl	800f17c <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
 800f3c4:	4631      	mov	r1, r6
 800f3c6:	4622      	mov	r2, r4
 800f3c8:	f7ff fed8 	bl	800f17c <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
 800f3cc:	4632      	mov	r2, r6
 800f3ce:	4621      	mov	r1, r4
 800f3d0:	f7ff fed8 	bl	800f184 <node_set_next.isra.1>
 800f3d4:	463e      	mov	r6, r7
 800f3d6:	e7e4      	b.n	800f3a2 <_lv_ll_move_before+0x50>

0800f3d8 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 800f3d8:	b130      	cbz	r0, 800f3e8 <_lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 800f3da:	6843      	ldr	r3, [r0, #4]
 800f3dc:	b933      	cbnz	r3, 800f3ec <_lv_ll_is_empty+0x14>
 800f3de:	6880      	ldr	r0, [r0, #8]
 800f3e0:	fab0 f080 	clz	r0, r0
 800f3e4:	0940      	lsrs	r0, r0, #5
 800f3e6:	4770      	bx	lr
    if(ll_p == NULL) return true;
 800f3e8:	2001      	movs	r0, #1
 800f3ea:	4770      	bx	lr
    return false;
 800f3ec:	2000      	movs	r0, #0
}
 800f3ee:	4770      	bx	lr

0800f3f0 <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 800f3f0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800f3f4:	fb90 f2f3 	sdiv	r2, r0, r3
 800f3f8:	fb02 0013 	mls	r0, r2, r3, r0
 800f3fc:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 800f3fe:	2800      	cmp	r0, #0
 800f400:	bfbc      	itt	lt
 800f402:	18c0      	addlt	r0, r0, r3
 800f404:	b200      	sxthlt	r0, r0

    if(angle < 90) {
 800f406:	2859      	cmp	r0, #89	; 0x59
 800f408:	4b0e      	ldr	r3, [pc, #56]	; (800f444 <_lv_trigo_sin+0x54>)
 800f40a:	dc02      	bgt.n	800f412 <_lv_trigo_sin+0x22>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
 800f40c:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 800f410:	4770      	bx	lr
    else if(angle >= 90 && angle < 180) {
 800f412:	b280      	uxth	r0, r0
 800f414:	f1a0 025a 	sub.w	r2, r0, #90	; 0x5a
 800f418:	2a59      	cmp	r2, #89	; 0x59
 800f41a:	d803      	bhi.n	800f424 <_lv_trigo_sin+0x34>
        angle = 180 - angle;
 800f41c:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 800f420:	b280      	uxth	r0, r0
 800f422:	e7f3      	b.n	800f40c <_lv_trigo_sin+0x1c>
    }
    else if(angle >= 180 && angle < 270) {
 800f424:	f1a0 02b4 	sub.w	r2, r0, #180	; 0xb4
 800f428:	b292      	uxth	r2, r2
 800f42a:	2a59      	cmp	r2, #89	; 0x59
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 800f42c:	bf85      	ittet	hi
 800f42e:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 800f432:	b280      	uxthhi	r0, r0
        ret   = -sin0_90_table[angle];
 800f434:	f833 0012 	ldrhls.w	r0, [r3, r2, lsl #1]
        ret   = -sin0_90_table[angle];
 800f438:	f833 0010 	ldrhhi.w	r0, [r3, r0, lsl #1]
 800f43c:	4240      	negs	r0, r0
 800f43e:	b200      	sxth	r0, r0
    }

    return ret;
}
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	080197bc 	.word	0x080197bc

0800f448 <_lv_sqrt>:
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/

    uint32_t root = 0;
 800f448:	2300      	movs	r3, #0
{
 800f44a:	b530      	push	{r4, r5, lr}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
 800f44c:	0200      	lsls	r0, r0, #8
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
 800f44e:	18d4      	adds	r4, r2, r3
        if((uint32_t)trial * trial <= x) root = trial;
 800f450:	fb04 f504 	mul.w	r5, r4, r4
 800f454:	4285      	cmp	r5, r0
 800f456:	bf98      	it	ls
 800f458:	4623      	movls	r3, r4
        mask = mask >> 1;
    } while(mask);
 800f45a:	0852      	lsrs	r2, r2, #1
 800f45c:	d1f7      	bne.n	800f44e <_lv_sqrt+0x6>

    q->i = (uint32_t) root >> 4;
 800f45e:	091a      	lsrs	r2, r3, #4
    q->f = (uint32_t)(root & 0xf) << 4;
 800f460:	011b      	lsls	r3, r3, #4
 800f462:	b2db      	uxtb	r3, r3
    q->i = (uint32_t) root >> 4;
 800f464:	800a      	strh	r2, [r1, #0]
    q->f = (uint32_t)(root & 0xf) << 4;
 800f466:	804b      	strh	r3, [r1, #2]
}
 800f468:	bd30      	pop	{r4, r5, pc}
	...

0800f46c <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800f46c:	4b07      	ldr	r3, [pc, #28]	; (800f48c <ent_get_next+0x20>)
 800f46e:	681b      	ldr	r3, [r3, #0]
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800f470:	b150      	cbz	r0, 800f488 <ent_get_next+0x1c>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800f472:	6801      	ldr	r1, [r0, #0]
        uint8_t * data = &act_e->first_data;
 800f474:	1d02      	adds	r2, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800f476:	eb02 0251 	add.w	r2, r2, r1, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800f47a:	1d11      	adds	r1, r2, #4
 800f47c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800f480:	4299      	cmp	r1, r3
 800f482:	bf34      	ite	cc
 800f484:	4613      	movcc	r3, r2
 800f486:	2300      	movcs	r3, #0
    }

    return next_e;
}
 800f488:	4618      	mov	r0, r3
 800f48a:	4770      	bx	lr
 800f48c:	20000570 	.word	0x20000570

0800f490 <ent_trunc>:
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    size = (size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    size = (size + 3) & (~0x3);
 800f490:	3103      	adds	r1, #3
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800f492:	6803      	ldr	r3, [r0, #0]
    size = (size + 3) & (~0x3);
 800f494:	f021 0103 	bic.w	r1, r1, #3
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800f498:	f3c3 035e 	ubfx	r3, r3, #1, #31
 800f49c:	1d0a      	adds	r2, r1, #4
 800f49e:	4293      	cmp	r3, r2
{
 800f4a0:	b510      	push	{r4, lr}
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800f4a2:	d011      	beq.n	800f4c8 <ent_trunc+0x38>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800f4a4:	428b      	cmp	r3, r1
 800f4a6:	d00a      	beq.n	800f4be <ent_trunc+0x2e>
        uint8_t * e_data             = &e->first_data;
 800f4a8:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
 800f4aa:	5c54      	ldrb	r4, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800f4ac:	3b04      	subs	r3, #4
        after_new_e->header.s.used   = 0;
 800f4ae:	f36f 0400 	bfc	r4, #0, #1
 800f4b2:	5454      	strb	r4, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800f4b4:	5854      	ldr	r4, [r2, r1]
 800f4b6:	1a5b      	subs	r3, r3, r1
 800f4b8:	f363 045f 	bfi	r4, r3, #1, #31
 800f4bc:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = (uint32_t)size;
 800f4be:	6803      	ldr	r3, [r0, #0]
 800f4c0:	f361 035f 	bfi	r3, r1, #1, #31
 800f4c4:	6003      	str	r3, [r0, #0]
}
 800f4c6:	bd10      	pop	{r4, pc}
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	e7f8      	b.n	800f4be <ent_trunc+0x2e>

0800f4cc <_lv_mem_init>:
    mem_max_size = 0;
 800f4cc:	2100      	movs	r1, #0
    work_mem = (uint8_t *)work_mem_int;
 800f4ce:	4b04      	ldr	r3, [pc, #16]	; (800f4e0 <_lv_mem_init+0x14>)
 800f4d0:	4a04      	ldr	r2, [pc, #16]	; (800f4e4 <_lv_mem_init+0x18>)
 800f4d2:	6013      	str	r3, [r2, #0]
    mem_max_size = 0;
 800f4d4:	4a04      	ldr	r2, [pc, #16]	; (800f4e8 <_lv_mem_init+0x1c>)
 800f4d6:	6011      	str	r1, [r2, #0]
    full->header.s.used = 0;
 800f4d8:	f643 72f8 	movw	r2, #16376	; 0x3ff8
 800f4dc:	601a      	str	r2, [r3, #0]
}
 800f4de:	4770      	bx	lr
 800f4e0:	20000574 	.word	0x20000574
 800f4e4:	20000570 	.word	0x20000570
 800f4e8:	2000056c 	.word	0x2000056c

0800f4ec <lv_mem_alloc>:
{
 800f4ec:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) {
 800f4ee:	b318      	cbz	r0, 800f538 <lv_mem_alloc+0x4c>
    lv_mem_ent_t * e = NULL;
 800f4f0:	2400      	movs	r4, #0
    size = (size + 3) & (~0x3);
 800f4f2:	3003      	adds	r0, #3
 800f4f4:	f020 0503 	bic.w	r5, r0, #3
        e = ent_get_next(e);
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f7ff ffb7 	bl	800f46c <ent_get_next>
        if(e != NULL) {
 800f4fe:	4604      	mov	r4, r0
 800f500:	b1c8      	cbz	r0, 800f536 <lv_mem_alloc+0x4a>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800f502:	7803      	ldrb	r3, [r0, #0]
 800f504:	07db      	lsls	r3, r3, #31
 800f506:	d4f7      	bmi.n	800f4f8 <lv_mem_alloc+0xc>
 800f508:	6803      	ldr	r3, [r0, #0]
 800f50a:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 800f50e:	d8f3      	bhi.n	800f4f8 <lv_mem_alloc+0xc>
        ent_trunc(e, size);
 800f510:	4629      	mov	r1, r5
 800f512:	f7ff ffbd 	bl	800f490 <ent_trunc>
        e->header.s.used = 1;
 800f516:	7803      	ldrb	r3, [r0, #0]
 800f518:	f043 0301 	orr.w	r3, r3, #1
 800f51c:	f800 3b04 	strb.w	r3, [r0], #4
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 800f520:	4b06      	ldr	r3, [pc, #24]	; (800f53c <lv_mem_alloc+0x50>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	4298      	cmp	r0, r3
 800f526:	d906      	bls.n	800f536 <lv_mem_alloc+0x4a>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
 800f528:	1aed      	subs	r5, r5, r3
 800f52a:	4b05      	ldr	r3, [pc, #20]	; (800f540 <lv_mem_alloc+0x54>)
 800f52c:	4405      	add	r5, r0
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	4295      	cmp	r5, r2
 800f532:	d900      	bls.n	800f536 <lv_mem_alloc+0x4a>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
 800f534:	601d      	str	r5, [r3, #0]
}
 800f536:	bd38      	pop	{r3, r4, r5, pc}
        return &zero_mem;
 800f538:	4802      	ldr	r0, [pc, #8]	; (800f544 <lv_mem_alloc+0x58>)
 800f53a:	e7fc      	b.n	800f536 <lv_mem_alloc+0x4a>
 800f53c:	20000570 	.word	0x20000570
 800f540:	2000056c 	.word	0x2000056c
 800f544:	20002574 	.word	0x20002574

0800f548 <lv_mem_defrag>:
        next_e = (lv_mem_ent_t *)work_mem;
 800f548:	4b0f      	ldr	r3, [pc, #60]	; (800f588 <lv_mem_defrag+0x40>)
{
 800f54a:	b510      	push	{r4, lr}
        next_e = (lv_mem_ent_t *)work_mem;
 800f54c:	681c      	ldr	r4, [r3, #0]
        while(e_free != NULL) {
 800f54e:	b904      	cbnz	r4, 800f552 <lv_mem_defrag+0xa>
}
 800f550:	bd10      	pop	{r4, pc}
 800f552:	4620      	mov	r0, r4
 800f554:	f7ff ff8a 	bl	800f46c <ent_get_next>
            if(e_free->header.s.used != 0) {
 800f558:	7823      	ldrb	r3, [r4, #0]
 800f55a:	07da      	lsls	r2, r3, #31
 800f55c:	d510      	bpl.n	800f580 <lv_mem_defrag+0x38>
{
 800f55e:	4604      	mov	r4, r0
 800f560:	e7f5      	b.n	800f54e <lv_mem_defrag+0x6>
            if(e_next->header.s.used == 0) {
 800f562:	7803      	ldrb	r3, [r0, #0]
 800f564:	07db      	lsls	r3, r3, #31
 800f566:	d4fa      	bmi.n	800f55e <lv_mem_defrag+0x16>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
 800f568:	6823      	ldr	r3, [r4, #0]
 800f56a:	6801      	ldr	r1, [r0, #0]
 800f56c:	f3c3 025e 	ubfx	r2, r3, #1, #31
 800f570:	3204      	adds	r2, #4
 800f572:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800f576:	f362 035f 	bfi	r3, r2, #1, #31
 800f57a:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
 800f57c:	f7ff ff76 	bl	800f46c <ent_get_next>
        while(e_next != NULL) {
 800f580:	2800      	cmp	r0, #0
 800f582:	d1ee      	bne.n	800f562 <lv_mem_defrag+0x1a>
 800f584:	e7e4      	b.n	800f550 <lv_mem_defrag+0x8>
 800f586:	bf00      	nop
 800f588:	20000570 	.word	0x20000570

0800f58c <lv_mem_free>:
    if(data == &zero_mem) return;
 800f58c:	4b16      	ldr	r3, [pc, #88]	; (800f5e8 <lv_mem_free+0x5c>)
{
 800f58e:	b510      	push	{r4, lr}
    if(data == &zero_mem) return;
 800f590:	4298      	cmp	r0, r3
{
 800f592:	4604      	mov	r4, r0
    if(data == &zero_mem) return;
 800f594:	d011      	beq.n	800f5ba <lv_mem_free+0x2e>
    if(data == NULL) return;
 800f596:	b180      	cbz	r0, 800f5ba <lv_mem_free+0x2e>
    e->header.s.used = 0;
 800f598:	f810 3c04 	ldrb.w	r3, [r0, #-4]
    full_defrag_cnt++;
 800f59c:	4a13      	ldr	r2, [pc, #76]	; (800f5ec <lv_mem_free+0x60>)
    e->header.s.used = 0;
 800f59e:	f36f 0300 	bfc	r3, #0, #1
 800f5a2:	f800 3c04 	strb.w	r3, [r0, #-4]
    full_defrag_cnt++;
 800f5a6:	8813      	ldrh	r3, [r2, #0]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	b29b      	uxth	r3, r3
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 800f5ac:	2b0f      	cmp	r3, #15
    full_defrag_cnt++;
 800f5ae:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 800f5b0:	d814      	bhi.n	800f5dc <lv_mem_free+0x50>
        e_next = ent_get_next(e);
 800f5b2:	3804      	subs	r0, #4
            e_next = ent_get_next(e_next);
 800f5b4:	f7ff ff5a 	bl	800f46c <ent_get_next>
        while(e_next != NULL) {
 800f5b8:	b900      	cbnz	r0, 800f5bc <lv_mem_free+0x30>
}
 800f5ba:	bd10      	pop	{r4, pc}
            if(e_next->header.s.used == 0) {
 800f5bc:	7803      	ldrb	r3, [r0, #0]
 800f5be:	07db      	lsls	r3, r3, #31
 800f5c0:	d4fb      	bmi.n	800f5ba <lv_mem_free+0x2e>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800f5c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f5c6:	6801      	ldr	r1, [r0, #0]
 800f5c8:	f3c3 025e 	ubfx	r2, r3, #1, #31
 800f5cc:	3204      	adds	r2, #4
 800f5ce:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800f5d2:	f362 035f 	bfi	r3, r2, #1, #31
 800f5d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5da:	e7eb      	b.n	800f5b4 <lv_mem_free+0x28>
        full_defrag_cnt = 0;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        full_defrag_cnt = 0;
 800f5e2:	8013      	strh	r3, [r2, #0]
        lv_mem_defrag();
 800f5e4:	f7ff bfb0 	b.w	800f548 <lv_mem_defrag>
 800f5e8:	20002574 	.word	0x20002574
 800f5ec:	20000548 	.word	0x20000548

0800f5f0 <_lv_mem_get_size>:
    if(data == NULL) return 0;
 800f5f0:	b140      	cbz	r0, 800f604 <_lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
 800f5f2:	4b05      	ldr	r3, [pc, #20]	; (800f608 <_lv_mem_get_size+0x18>)
 800f5f4:	4298      	cmp	r0, r3
 800f5f6:	d004      	beq.n	800f602 <_lv_mem_get_size+0x12>
    return e->header.s.d_size;
 800f5f8:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800f5fc:	f3c0 005e 	ubfx	r0, r0, #1, #31
 800f600:	4770      	bx	lr
    if(data == NULL) return 0;
 800f602:	2000      	movs	r0, #0
}
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop
 800f608:	20002574 	.word	0x20002574

0800f60c <_lv_mem_buf_release>:
        if(mem_buf_small[i].p == p) {
 800f60c:	4b11      	ldr	r3, [pc, #68]	; (800f654 <_lv_mem_buf_release+0x48>)
{
 800f60e:	b510      	push	{r4, lr}
        if(mem_buf_small[i].p == p) {
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	4290      	cmp	r0, r2
 800f614:	d00a      	beq.n	800f62c <_lv_mem_buf_release+0x20>
 800f616:	689a      	ldr	r2, [r3, #8]
 800f618:	4290      	cmp	r0, r2
 800f61a:	d109      	bne.n	800f630 <_lv_mem_buf_release+0x24>
 800f61c:	2201      	movs	r2, #1
            mem_buf_small[i].used = 0;
 800f61e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f622:	799a      	ldrb	r2, [r3, #6]
 800f624:	f36f 0200 	bfc	r2, #0, #1
 800f628:	719a      	strb	r2, [r3, #6]
}
 800f62a:	bd10      	pop	{r4, pc}
        if(mem_buf_small[i].p == p) {
 800f62c:	2200      	movs	r2, #0
 800f62e:	e7f6      	b.n	800f61e <_lv_mem_buf_release+0x12>
 800f630:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
 800f632:	4a09      	ldr	r2, [pc, #36]	; (800f658 <_lv_mem_buf_release+0x4c>)
 800f634:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800f638:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f63c:	4284      	cmp	r4, r0
 800f63e:	d104      	bne.n	800f64a <_lv_mem_buf_release+0x3e>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 800f640:	798b      	ldrb	r3, [r1, #6]
 800f642:	f36f 0300 	bfc	r3, #0, #1
 800f646:	718b      	strb	r3, [r1, #6]
            return;
 800f648:	e7ef      	b.n	800f62a <_lv_mem_buf_release+0x1e>
 800f64a:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800f64c:	2b10      	cmp	r3, #16
 800f64e:	d1f1      	bne.n	800f634 <_lv_mem_buf_release+0x28>
 800f650:	e7eb      	b.n	800f62a <_lv_mem_buf_release+0x1e>
 800f652:	bf00      	nop
 800f654:	2000004c 	.word	0x2000004c
 800f658:	20003354 	.word	0x20003354

0800f65c <_lv_mem_buf_free_all>:
{
 800f65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        mem_buf_small[i].used = 0;
 800f65e:	2400      	movs	r4, #0
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 800f660:	4626      	mov	r6, r4
        mem_buf_small[i].used = 0;
 800f662:	4b0e      	ldr	r3, [pc, #56]	; (800f69c <_lv_mem_buf_free_all+0x40>)
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
 800f664:	4d0e      	ldr	r5, [pc, #56]	; (800f6a0 <_lv_mem_buf_free_all+0x44>)
        mem_buf_small[i].used = 0;
 800f666:	799a      	ldrb	r2, [r3, #6]
 800f668:	f36f 0200 	bfc	r2, #0, #1
 800f66c:	719a      	strb	r2, [r3, #6]
 800f66e:	7b9a      	ldrb	r2, [r3, #14]
 800f670:	f36f 0200 	bfc	r2, #0, #1
 800f674:	739a      	strb	r2, [r3, #14]
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
 800f676:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 800f67a:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
 800f67e:	b140      	cbz	r0, 800f692 <_lv_mem_buf_free_all+0x36>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
 800f680:	f7ff ff84 	bl	800f58c <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 800f684:	f845 6034 	str.w	r6, [r5, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 800f688:	79bb      	ldrb	r3, [r7, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
 800f68a:	80be      	strh	r6, [r7, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 800f68c:	f366 0300 	bfi	r3, r6, #0, #1
 800f690:	71bb      	strb	r3, [r7, #6]
 800f692:	3401      	adds	r4, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800f694:	2c10      	cmp	r4, #16
 800f696:	d1ee      	bne.n	800f676 <_lv_mem_buf_free_all+0x1a>
}
 800f698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f69a:	bf00      	nop
 800f69c:	2000004c 	.word	0x2000004c
 800f6a0:	20003354 	.word	0x20003354

0800f6a4 <_lv_memcpy>:
{
 800f6a4:	b570      	push	{r4, r5, r6, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 800f6a6:	f000 0503 	and.w	r5, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 800f6aa:	f001 0603 	and.w	r6, r1, #3
    if(s_align != d_align) {
 800f6ae:	42b5      	cmp	r5, r6
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 800f6b0:	4604      	mov	r4, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 800f6b2:	460b      	mov	r3, r1
    if(s_align != d_align) {
 800f6b4:	f040 8098 	bne.w	800f7e8 <_lv_memcpy+0x144>
    if(d_align) {
 800f6b8:	2d00      	cmp	r5, #0
 800f6ba:	f040 80a8 	bne.w	800f80e <_lv_memcpy+0x16a>
    uint8_t * d8 = dst;
 800f6be:	4605      	mov	r5, r0
 800f6c0:	462b      	mov	r3, r5
    while(len > 32) {
 800f6c2:	2a20      	cmp	r2, #32
 800f6c4:	461c      	mov	r4, r3
 800f6c6:	f101 0520 	add.w	r5, r1, #32
 800f6ca:	f103 0320 	add.w	r3, r3, #32
 800f6ce:	f200 80af 	bhi.w	800f830 <_lv_memcpy+0x18c>
    while(len > 4) {
 800f6d2:	2a04      	cmp	r2, #4
 800f6d4:	460e      	mov	r6, r1
 800f6d6:	f240 809f 	bls.w	800f818 <_lv_memcpy+0x174>
        COPY32;
 800f6da:	f851 3b04 	ldr.w	r3, [r1], #4
        len -= 4;
 800f6de:	3a04      	subs	r2, #4
        COPY32;
 800f6e0:	f844 3b04 	str.w	r3, [r4], #4
 800f6e4:	e7f5      	b.n	800f6d2 <_lv_memcpy+0x2e>
            REPEAT8(COPY8);
 800f6e6:	f813 1c20 	ldrb.w	r1, [r3, #-32]
            len -= 32;
 800f6ea:	3a20      	subs	r2, #32
            REPEAT8(COPY8);
 800f6ec:	f804 1c20 	strb.w	r1, [r4, #-32]
 800f6f0:	f813 1c1f 	ldrb.w	r1, [r3, #-31]
 800f6f4:	f804 1c1f 	strb.w	r1, [r4, #-31]
 800f6f8:	f813 1c1e 	ldrb.w	r1, [r3, #-30]
 800f6fc:	f804 1c1e 	strb.w	r1, [r4, #-30]
 800f700:	f813 1c1d 	ldrb.w	r1, [r3, #-29]
 800f704:	f804 1c1d 	strb.w	r1, [r4, #-29]
 800f708:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f70c:	f804 1c1c 	strb.w	r1, [r4, #-28]
 800f710:	f813 1c1b 	ldrb.w	r1, [r3, #-27]
 800f714:	f804 1c1b 	strb.w	r1, [r4, #-27]
 800f718:	f813 1c1a 	ldrb.w	r1, [r3, #-26]
 800f71c:	f804 1c1a 	strb.w	r1, [r4, #-26]
 800f720:	f813 1c19 	ldrb.w	r1, [r3, #-25]
 800f724:	f804 1c19 	strb.w	r1, [r4, #-25]
            REPEAT8(COPY8);
 800f728:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800f72c:	f804 1c18 	strb.w	r1, [r4, #-24]
 800f730:	f813 1c17 	ldrb.w	r1, [r3, #-23]
 800f734:	f804 1c17 	strb.w	r1, [r4, #-23]
 800f738:	f813 1c16 	ldrb.w	r1, [r3, #-22]
 800f73c:	f804 1c16 	strb.w	r1, [r4, #-22]
 800f740:	f813 1c15 	ldrb.w	r1, [r3, #-21]
 800f744:	f804 1c15 	strb.w	r1, [r4, #-21]
 800f748:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800f74c:	f804 1c14 	strb.w	r1, [r4, #-20]
 800f750:	f813 1c13 	ldrb.w	r1, [r3, #-19]
 800f754:	f804 1c13 	strb.w	r1, [r4, #-19]
 800f758:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 800f75c:	f804 1c12 	strb.w	r1, [r4, #-18]
 800f760:	f813 1c11 	ldrb.w	r1, [r3, #-17]
 800f764:	f804 1c11 	strb.w	r1, [r4, #-17]
            REPEAT8(COPY8);
 800f768:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 800f76c:	f804 1c10 	strb.w	r1, [r4, #-16]
 800f770:	f813 1c0f 	ldrb.w	r1, [r3, #-15]
 800f774:	f804 1c0f 	strb.w	r1, [r4, #-15]
 800f778:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 800f77c:	f804 1c0e 	strb.w	r1, [r4, #-14]
 800f780:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 800f784:	f804 1c0d 	strb.w	r1, [r4, #-13]
 800f788:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 800f78c:	f804 1c0c 	strb.w	r1, [r4, #-12]
 800f790:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 800f794:	f804 1c0b 	strb.w	r1, [r4, #-11]
 800f798:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 800f79c:	f804 1c0a 	strb.w	r1, [r4, #-10]
 800f7a0:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 800f7a4:	f804 1c09 	strb.w	r1, [r4, #-9]
            REPEAT8(COPY8);
 800f7a8:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 800f7ac:	f804 1c08 	strb.w	r1, [r4, #-8]
 800f7b0:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 800f7b4:	f804 1c07 	strb.w	r1, [r4, #-7]
 800f7b8:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 800f7bc:	f804 1c06 	strb.w	r1, [r4, #-6]
 800f7c0:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 800f7c4:	f804 1c05 	strb.w	r1, [r4, #-5]
 800f7c8:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 800f7cc:	f804 1c04 	strb.w	r1, [r4, #-4]
 800f7d0:	f813 1c03 	ldrb.w	r1, [r3, #-3]
 800f7d4:	f804 1c03 	strb.w	r1, [r4, #-3]
 800f7d8:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 800f7dc:	f804 1c02 	strb.w	r1, [r4, #-2]
 800f7e0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f7e4:	f804 1c01 	strb.w	r1, [r4, #-1]
        while(len > 32) {
 800f7e8:	2a20      	cmp	r2, #32
 800f7ea:	461d      	mov	r5, r3
 800f7ec:	4621      	mov	r1, r4
 800f7ee:	f103 0320 	add.w	r3, r3, #32
 800f7f2:	f104 0420 	add.w	r4, r4, #32
 800f7f6:	f63f af76 	bhi.w	800f6e6 <_lv_memcpy+0x42>
 800f7fa:	1e6b      	subs	r3, r5, #1
 800f7fc:	440a      	add	r2, r1
        while(len) {
 800f7fe:	4291      	cmp	r1, r2
 800f800:	d100      	bne.n	800f804 <_lv_memcpy+0x160>
}
 800f802:	bd70      	pop	{r4, r5, r6, pc}
            COPY8
 800f804:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800f808:	f801 4b01 	strb.w	r4, [r1], #1
 800f80c:	e7f7      	b.n	800f7fe <_lv_memcpy+0x15a>
        d_align = ALIGN_MASK + 1 - d_align;
 800f80e:	f1c5 0504 	rsb	r5, r5, #4
 800f812:	4405      	add	r5, r0
 800f814:	461e      	mov	r6, r3
        while(d_align && len) {
 800f816:	b912      	cbnz	r2, 800f81e <_lv_memcpy+0x17a>
 800f818:	1e73      	subs	r3, r6, #1
 800f81a:	4422      	add	r2, r4
 800f81c:	e02f      	b.n	800f87e <_lv_memcpy+0x1da>
            COPY8;
 800f81e:	f813 1b01 	ldrb.w	r1, [r3], #1
            len--;
 800f822:	3a01      	subs	r2, #1
            COPY8;
 800f824:	f804 1b01 	strb.w	r1, [r4], #1
        while(d_align && len) {
 800f828:	42ac      	cmp	r4, r5
            COPY8;
 800f82a:	4619      	mov	r1, r3
        while(d_align && len) {
 800f82c:	d1f2      	bne.n	800f814 <_lv_memcpy+0x170>
 800f82e:	e747      	b.n	800f6c0 <_lv_memcpy+0x1c>
        REPEAT8(COPY32)
 800f830:	f855 1c20 	ldr.w	r1, [r5, #-32]
        len -= 32;
 800f834:	3a20      	subs	r2, #32
        REPEAT8(COPY32)
 800f836:	f843 1c20 	str.w	r1, [r3, #-32]
 800f83a:	f855 1c1c 	ldr.w	r1, [r5, #-28]
 800f83e:	f843 1c1c 	str.w	r1, [r3, #-28]
 800f842:	f855 1c18 	ldr.w	r1, [r5, #-24]
 800f846:	f843 1c18 	str.w	r1, [r3, #-24]
 800f84a:	f855 1c14 	ldr.w	r1, [r5, #-20]
 800f84e:	f843 1c14 	str.w	r1, [r3, #-20]
 800f852:	f855 1c10 	ldr.w	r1, [r5, #-16]
 800f856:	f843 1c10 	str.w	r1, [r3, #-16]
 800f85a:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800f85e:	f843 1c0c 	str.w	r1, [r3, #-12]
 800f862:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800f866:	f843 1c08 	str.w	r1, [r3, #-8]
 800f86a:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800f86e:	f843 1c04 	str.w	r1, [r3, #-4]
        len -= 32;
 800f872:	4629      	mov	r1, r5
 800f874:	e725      	b.n	800f6c2 <_lv_memcpy+0x1e>
        COPY8
 800f876:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f87a:	f804 1b01 	strb.w	r1, [r4], #1
    while(len) {
 800f87e:	4294      	cmp	r4, r2
 800f880:	d1f9      	bne.n	800f876 <_lv_memcpy+0x1d2>
 800f882:	e7be      	b.n	800f802 <_lv_memcpy+0x15e>

0800f884 <lv_mem_realloc>:
    new_size = (new_size + 3) & (~0x3);
 800f884:	3103      	adds	r1, #3
{
 800f886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + 3) & (~0x3);
 800f888:	f021 0503 	bic.w	r5, r1, #3
    if(data_p != NULL) {
 800f88c:	4604      	mov	r4, r0
 800f88e:	b128      	cbz	r0, 800f89c <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
 800f890:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
 800f894:	f013 0f01 	tst.w	r3, #1
 800f898:	bf08      	it	eq
 800f89a:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
 800f89c:	4620      	mov	r0, r4
 800f89e:	f7ff fea7 	bl	800f5f0 <_lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800f8a2:	4285      	cmp	r5, r0
    uint32_t old_size = _lv_mem_get_size(data_p);
 800f8a4:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800f8a6:	d004      	beq.n	800f8b2 <lv_mem_realloc+0x2e>
    if(new_size < old_size) {
 800f8a8:	d205      	bcs.n	800f8b6 <lv_mem_realloc+0x32>
        ent_trunc(e, new_size);
 800f8aa:	4629      	mov	r1, r5
 800f8ac:	1f20      	subs	r0, r4, #4
 800f8ae:	f7ff fdef 	bl	800f490 <ent_trunc>
 800f8b2:	4626      	mov	r6, r4
 800f8b4:	e010      	b.n	800f8d8 <lv_mem_realloc+0x54>
    new_p = lv_mem_alloc(new_size);
 800f8b6:	4628      	mov	r0, r5
 800f8b8:	f7ff fe18 	bl	800f4ec <lv_mem_alloc>
    if(new_p == NULL) {
 800f8bc:	4606      	mov	r6, r0
 800f8be:	b158      	cbz	r0, 800f8d8 <lv_mem_realloc+0x54>
    if(data_p != NULL) {
 800f8c0:	b154      	cbz	r4, 800f8d8 <lv_mem_realloc+0x54>
        if(old_size != 0) {
 800f8c2:	b14f      	cbz	r7, 800f8d8 <lv_mem_realloc+0x54>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800f8c4:	42bd      	cmp	r5, r7
 800f8c6:	462a      	mov	r2, r5
 800f8c8:	4621      	mov	r1, r4
 800f8ca:	bf28      	it	cs
 800f8cc:	463a      	movcs	r2, r7
 800f8ce:	f7ff fee9 	bl	800f6a4 <_lv_memcpy>
            lv_mem_free(data_p);
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f7ff fe5a 	bl	800f58c <lv_mem_free>
}
 800f8d8:	4630      	mov	r0, r6
 800f8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f8dc <_lv_mem_buf_get>:
{
 800f8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
 800f8de:	b190      	cbz	r0, 800f906 <_lv_mem_buf_get+0x2a>
    if(size <= MEM_BUF_SMALL_SIZE) {
 800f8e0:	2810      	cmp	r0, #16
 800f8e2:	d811      	bhi.n	800f908 <_lv_mem_buf_get+0x2c>
            if(mem_buf_small[i].used == 0) {
 800f8e4:	4a30      	ldr	r2, [pc, #192]	; (800f9a8 <_lv_mem_buf_get+0xcc>)
 800f8e6:	7993      	ldrb	r3, [r2, #6]
 800f8e8:	f013 0301 	ands.w	r3, r3, #1
 800f8ec:	d003      	beq.n	800f8f6 <_lv_mem_buf_get+0x1a>
 800f8ee:	7b93      	ldrb	r3, [r2, #14]
 800f8f0:	07db      	lsls	r3, r3, #31
 800f8f2:	d409      	bmi.n	800f908 <_lv_mem_buf_get+0x2c>
 800f8f4:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
 800f8f6:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 800f8fa:	7981      	ldrb	r1, [r0, #6]
 800f8fc:	f041 0101 	orr.w	r1, r1, #1
 800f900:	7181      	strb	r1, [r0, #6]
                return mem_buf_small[i].p;
 800f902:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
}
 800f906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 800f908:	4928      	ldr	r1, [pc, #160]	; (800f9ac <_lv_mem_buf_get+0xd0>)
            if(mem_buf_small[i].used == 0) {
 800f90a:	2200      	movs	r2, #0
 800f90c:	f04f 33ff 	mov.w	r3, #4294967295
 800f910:	460d      	mov	r5, r1
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 800f912:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800f916:	79a7      	ldrb	r7, [r4, #6]
 800f918:	463e      	mov	r6, r7
 800f91a:	07ff      	lsls	r7, r7, #31
 800f91c:	d412      	bmi.n	800f944 <_lv_mem_buf_get+0x68>
 800f91e:	88a7      	ldrh	r7, [r4, #4]
 800f920:	4287      	cmp	r7, r0
 800f922:	d30f      	bcc.n	800f944 <_lv_mem_buf_get+0x68>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
 800f924:	d105      	bne.n	800f932 <_lv_mem_buf_get+0x56>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 800f926:	f046 0301 	orr.w	r3, r6, #1
 800f92a:	71a3      	strb	r3, [r4, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
 800f92c:	f851 0032 	ldr.w	r0, [r1, r2, lsl #3]
 800f930:	e7e9      	b.n	800f906 <_lv_mem_buf_get+0x2a>
            else if(i_guess < 0) {
 800f932:	1c5e      	adds	r6, r3, #1
 800f934:	d101      	bne.n	800f93a <_lv_mem_buf_get+0x5e>
                i_guess = i;
 800f936:	b253      	sxtb	r3, r2
 800f938:	e004      	b.n	800f944 <_lv_mem_buf_get+0x68>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
 800f93a:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800f93e:	88a4      	ldrh	r4, [r4, #4]
 800f940:	42bc      	cmp	r4, r7
 800f942:	d8f8      	bhi.n	800f936 <_lv_mem_buf_get+0x5a>
 800f944:	3201      	adds	r2, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800f946:	2a10      	cmp	r2, #16
 800f948:	d1e3      	bne.n	800f912 <_lv_mem_buf_get+0x36>
    if(i_guess >= 0) {
 800f94a:	1c5c      	adds	r4, r3, #1
 800f94c:	d008      	beq.n	800f960 <_lv_mem_buf_get+0x84>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
 800f94e:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 800f952:	798a      	ldrb	r2, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
 800f954:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
 800f958:	f042 0201 	orr.w	r2, r2, #1
 800f95c:	718a      	strb	r2, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
 800f95e:	e7d2      	b.n	800f906 <_lv_mem_buf_get+0x2a>
 800f960:	2400      	movs	r4, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
 800f962:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f966:	7999      	ldrb	r1, [r3, #6]
 800f968:	460a      	mov	r2, r1
 800f96a:	07c9      	lsls	r1, r1, #31
 800f96c:	d412      	bmi.n	800f994 <_lv_mem_buf_get+0xb8>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 800f96e:	f042 0201 	orr.w	r2, r2, #1
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
 800f972:	8098      	strh	r0, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
 800f974:	4601      	mov	r1, r0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 800f976:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
 800f978:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 800f97c:	f7ff ff82 	bl	800f884 <lv_mem_realloc>
 800f980:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
            if(LV_GC_ROOT(_lv_mem_buf[i]).p == NULL) {
 800f984:	2800      	cmp	r0, #0
 800f986:	d1be      	bne.n	800f906 <_lv_mem_buf_get+0x2a>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new  buffer (increase your LV_MEM_SIZE/heap size", 0x00);
 800f988:	2200      	movs	r2, #0
 800f98a:	2300      	movs	r3, #0
 800f98c:	4808      	ldr	r0, [pc, #32]	; (800f9b0 <_lv_mem_buf_get+0xd4>)
 800f98e:	f7ff fb1f 	bl	800efd0 <lv_debug_log_error>
 800f992:	e7fe      	b.n	800f992 <_lv_mem_buf_get+0xb6>
 800f994:	3401      	adds	r4, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800f996:	2c10      	cmp	r4, #16
 800f998:	d1e3      	bne.n	800f962 <_lv_mem_buf_get+0x86>
    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_DRAW_BUF_MAX_NUM.", 0x00);
 800f99a:	2200      	movs	r2, #0
 800f99c:	2300      	movs	r3, #0
 800f99e:	4805      	ldr	r0, [pc, #20]	; (800f9b4 <_lv_mem_buf_get+0xd8>)
 800f9a0:	f7ff fb16 	bl	800efd0 <lv_debug_log_error>
 800f9a4:	e7fe      	b.n	800f9a4 <_lv_mem_buf_get+0xc8>
 800f9a6:	bf00      	nop
 800f9a8:	2000004c 	.word	0x2000004c
 800f9ac:	20003354 	.word	0x20003354
 800f9b0:	08019872 	.word	0x08019872
 800f9b4:	080198c3 	.word	0x080198c3

0800f9b8 <_lv_memset>:
    if(d_align) {
 800f9b8:	f010 0303 	ands.w	r3, r0, #3
{
 800f9bc:	b510      	push	{r4, lr}
    if(d_align) {
 800f9be:	d009      	beq.n	800f9d4 <_lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
 800f9c0:	f1c3 0304 	rsb	r3, r3, #4
 800f9c4:	4403      	add	r3, r0
        while(d_align && len) {
 800f9c6:	b12a      	cbz	r2, 800f9d4 <_lv_memset+0x1c>
            *d8 = v;
 800f9c8:	f800 1b01 	strb.w	r1, [r0], #1
        while(d_align && len) {
 800f9cc:	4298      	cmp	r0, r3
            len--;
 800f9ce:	f102 32ff 	add.w	r2, r2, #4294967295
        while(d_align && len) {
 800f9d2:	d1f8      	bne.n	800f9c6 <_lv_memset+0xe>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
 800f9d4:	eb01 2301 	add.w	r3, r1, r1, lsl #8
 800f9d8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800f9dc:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
 800f9e0:	2a20      	cmp	r2, #32
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	f100 0020 	add.w	r0, r0, #32
 800f9e8:	d805      	bhi.n	800f9f6 <_lv_memset+0x3e>
    while(len > 4) {
 800f9ea:	2a04      	cmp	r2, #4
 800f9ec:	d80d      	bhi.n	800fa0a <_lv_memset+0x52>
 800f9ee:	4422      	add	r2, r4
    while(len) {
 800f9f0:	4294      	cmp	r4, r2
 800f9f2:	d10e      	bne.n	800fa12 <_lv_memset+0x5a>
}
 800f9f4:	bd10      	pop	{r4, pc}
        SET32(v32);
 800f9f6:	e940 3308 	strd	r3, r3, [r0, #-32]
        SET32(v32);
 800f9fa:	e940 3306 	strd	r3, r3, [r0, #-24]
        SET32(v32);
 800f9fe:	e940 3304 	strd	r3, r3, [r0, #-16]
        SET32(v32);
 800fa02:	e940 3302 	strd	r3, r3, [r0, #-8]
        len -= 32;
 800fa06:	3a20      	subs	r2, #32
 800fa08:	e7ea      	b.n	800f9e0 <_lv_memset+0x28>
        SET32(v32);
 800fa0a:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
 800fa0e:	3a04      	subs	r2, #4
 800fa10:	e7eb      	b.n	800f9ea <_lv_memset+0x32>
        *d8 = v;
 800fa12:	f804 1b01 	strb.w	r1, [r4], #1
 800fa16:	e7eb      	b.n	800f9f0 <_lv_memset+0x38>

0800fa18 <_lv_memset_00>:
    if(d_align) {
 800fa18:	f010 0303 	ands.w	r3, r0, #3
 800fa1c:	d10d      	bne.n	800fa3a <_lv_memset_00+0x22>
 800fa1e:	4603      	mov	r3, r0
        SET32(0);
 800fa20:	2200      	movs	r2, #0
    while(len > 32) {
 800fa22:	2920      	cmp	r1, #32
 800fa24:	4618      	mov	r0, r3
 800fa26:	f103 0320 	add.w	r3, r3, #32
 800fa2a:	d815      	bhi.n	800fa58 <_lv_memset_00+0x40>
        SET32(0);
 800fa2c:	2300      	movs	r3, #0
    while(len > 4) {
 800fa2e:	2904      	cmp	r1, #4
 800fa30:	d908      	bls.n	800fa44 <_lv_memset_00+0x2c>
        SET32(0);
 800fa32:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 800fa36:	3904      	subs	r1, #4
 800fa38:	e7f9      	b.n	800fa2e <_lv_memset_00+0x16>
            *d8 = 0x00;
 800fa3a:	2200      	movs	r2, #0
        d_align = ALIGN_MASK + 1 - d_align;
 800fa3c:	f1c3 0304 	rsb	r3, r3, #4
 800fa40:	4403      	add	r3, r0
        while(d_align && len) {
 800fa42:	b911      	cbnz	r1, 800fa4a <_lv_memset_00+0x32>
 800fa44:	4401      	add	r1, r0
        *d8 = 0;
 800fa46:	2300      	movs	r3, #0
 800fa48:	e012      	b.n	800fa70 <_lv_memset_00+0x58>
            *d8 = 0x00;
 800fa4a:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 800fa4e:	4298      	cmp	r0, r3
            len--;
 800fa50:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 800fa54:	d1f5      	bne.n	800fa42 <_lv_memset_00+0x2a>
 800fa56:	e7e2      	b.n	800fa1e <_lv_memset_00+0x6>
        SET32(0);
 800fa58:	e943 2208 	strd	r2, r2, [r3, #-32]
        SET32(0);
 800fa5c:	e943 2206 	strd	r2, r2, [r3, #-24]
        SET32(0);
 800fa60:	e943 2204 	strd	r2, r2, [r3, #-16]
        SET32(0);
 800fa64:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 800fa68:	3920      	subs	r1, #32
 800fa6a:	e7da      	b.n	800fa22 <_lv_memset_00+0xa>
        *d8 = 0;
 800fa6c:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 800fa70:	4288      	cmp	r0, r1
 800fa72:	d1fb      	bne.n	800fa6c <_lv_memset_00+0x54>
}
 800fa74:	4770      	bx	lr

0800fa76 <_lv_memset_ff>:
    if(d_align) {
 800fa76:	f010 0303 	ands.w	r3, r0, #3
 800fa7a:	d10f      	bne.n	800fa9c <_lv_memset_ff+0x26>
 800fa7c:	4603      	mov	r3, r0
        SET32(0xFFFFFFFF);
 800fa7e:	f04f 32ff 	mov.w	r2, #4294967295
    while(len > 32) {
 800fa82:	2920      	cmp	r1, #32
 800fa84:	4618      	mov	r0, r3
 800fa86:	f103 0320 	add.w	r3, r3, #32
 800fa8a:	d816      	bhi.n	800faba <_lv_memset_ff+0x44>
        SET32(0xFFFFFFFF);
 800fa8c:	f04f 33ff 	mov.w	r3, #4294967295
    while(len > 4) {
 800fa90:	2904      	cmp	r1, #4
 800fa92:	d908      	bls.n	800faa6 <_lv_memset_ff+0x30>
        SET32(0xFFFFFFFF);
 800fa94:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 800fa98:	3904      	subs	r1, #4
 800fa9a:	e7f9      	b.n	800fa90 <_lv_memset_ff+0x1a>
            *d8 = 0xFF;
 800fa9c:	22ff      	movs	r2, #255	; 0xff
        d_align = ALIGN_MASK + 1 - d_align;
 800fa9e:	f1c3 0304 	rsb	r3, r3, #4
 800faa2:	4403      	add	r3, r0
        while(d_align && len) {
 800faa4:	b911      	cbnz	r1, 800faac <_lv_memset_ff+0x36>
 800faa6:	4401      	add	r1, r0
        *d8 = 0xFF;
 800faa8:	23ff      	movs	r3, #255	; 0xff
 800faaa:	e012      	b.n	800fad2 <_lv_memset_ff+0x5c>
            *d8 = 0xFF;
 800faac:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 800fab0:	4298      	cmp	r0, r3
            len--;
 800fab2:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 800fab6:	d1f5      	bne.n	800faa4 <_lv_memset_ff+0x2e>
 800fab8:	e7e0      	b.n	800fa7c <_lv_memset_ff+0x6>
        SET32(0xFFFFFFFF);
 800faba:	e943 2208 	strd	r2, r2, [r3, #-32]
        SET32(0xFFFFFFFF);
 800fabe:	e943 2206 	strd	r2, r2, [r3, #-24]
        SET32(0xFFFFFFFF);
 800fac2:	e943 2204 	strd	r2, r2, [r3, #-16]
        SET32(0xFFFFFFFF);
 800fac6:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 800faca:	3920      	subs	r1, #32
 800facc:	e7d9      	b.n	800fa82 <_lv_memset_ff+0xc>
        *d8 = 0xFF;
 800face:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 800fad2:	4288      	cmp	r0, r1
 800fad4:	d1fb      	bne.n	800face <_lv_memset_ff+0x58>
}
 800fad6:	4770      	bx	lr

0800fad8 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
 800fad8:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
 800fada:	bf38      	it	cc
 800fadc:	5488      	strbcc	r0, [r1, r2]
    }
}
 800fade:	4770      	bx	lr

0800fae0 <_out_null>:
{
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
 800fae0:	4770      	bx	lr

0800fae2 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800fae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae6:	b085      	sub	sp, #20
 800fae8:	469a      	mov	sl, r3
 800faea:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 800faee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800faf0:	e9cd 0101 	strd	r0, r1, [sp, #4]
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
 800faf4:	f013 0702 	ands.w	r7, r3, #2
{
 800faf8:	4691      	mov	r9, r2
 800fafa:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800fafe:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    if(!(flags & FLAGS_LEFT)) {
 800fb02:	9703      	str	r7, [sp, #12]
 800fb04:	d11d      	bne.n	800fb42 <_ntoa_format+0x60>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800fb06:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fb08:	f003 0701 	and.w	r7, r3, #1
 800fb0c:	b13e      	cbz	r6, 800fb1e <_ntoa_format+0x3c>
 800fb0e:	b137      	cbz	r7, 800fb1e <_ntoa_format+0x3c>
 800fb10:	b910      	cbnz	r0, 800fb18 <_ntoa_format+0x36>
 800fb12:	f013 0f0c 	tst.w	r3, #12
 800fb16:	d002      	beq.n	800fb1e <_ntoa_format+0x3c>
            width--;
 800fb18:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fb1a:	3e01      	subs	r6, #1
 800fb1c:	9613      	str	r6, [sp, #76]	; 0x4c
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 800fb1e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800fb22:	e004      	b.n	800fb2e <_ntoa_format+0x4c>
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800fb24:	2c20      	cmp	r4, #32
 800fb26:	d004      	beq.n	800fb32 <_ntoa_format+0x50>
            buf[len++] = '0';
 800fb28:	f805 c004 	strb.w	ip, [r5, r4]
 800fb2c:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800fb2e:	42a1      	cmp	r1, r4
 800fb30:	d8f8      	bhi.n	800fb24 <_ntoa_format+0x42>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 800fb32:	f04f 0c30 	mov.w	ip, #48	; 0x30
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800fb36:	b127      	cbz	r7, 800fb42 <_ntoa_format+0x60>
 800fb38:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fb3a:	42a6      	cmp	r6, r4
 800fb3c:	d901      	bls.n	800fb42 <_ntoa_format+0x60>
 800fb3e:	2c20      	cmp	r4, #32
 800fb40:	d133      	bne.n	800fbaa <_ntoa_format+0xc8>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
 800fb42:	06de      	lsls	r6, r3, #27
 800fb44:	d518      	bpl.n	800fb78 <_ntoa_format+0x96>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800fb46:	055f      	lsls	r7, r3, #21
 800fb48:	d434      	bmi.n	800fbb4 <_ntoa_format+0xd2>
 800fb4a:	b39c      	cbz	r4, 800fbb4 <_ntoa_format+0xd2>
 800fb4c:	428c      	cmp	r4, r1
 800fb4e:	d002      	beq.n	800fb56 <_ntoa_format+0x74>
 800fb50:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fb52:	428c      	cmp	r4, r1
 800fb54:	d12e      	bne.n	800fbb4 <_ntoa_format+0xd2>
            len--;
            if(len && (base == 16U)) {
 800fb56:	1e61      	subs	r1, r4, #1
 800fb58:	d02b      	beq.n	800fbb2 <_ntoa_format+0xd0>
 800fb5a:	2a10      	cmp	r2, #16
 800fb5c:	d164      	bne.n	800fc28 <_ntoa_format+0x146>
                len--;
 800fb5e:	3c02      	subs	r4, #2
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800fb60:	069e      	lsls	r6, r3, #26
 800fb62:	d42f      	bmi.n	800fbc4 <_ntoa_format+0xe2>
 800fb64:	2c1f      	cmp	r4, #31
 800fb66:	d80d      	bhi.n	800fb84 <_ntoa_format+0xa2>
            buf[len++] = 'x';
 800fb68:	2278      	movs	r2, #120	; 0x78
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'b';
 800fb6a:	552a      	strb	r2, [r5, r4]
 800fb6c:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
 800fb6e:	2c1f      	cmp	r4, #31
 800fb70:	d808      	bhi.n	800fb84 <_ntoa_format+0xa2>
            buf[len++] = '0';
 800fb72:	2230      	movs	r2, #48	; 0x30
 800fb74:	552a      	strb	r2, [r5, r4]
 800fb76:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
 800fb78:	2c20      	cmp	r4, #32
 800fb7a:	d003      	beq.n	800fb84 <_ntoa_format+0xa2>
        if(negative) {
 800fb7c:	b330      	cbz	r0, 800fbcc <_ntoa_format+0xea>
            buf[len++] = '-';
 800fb7e:	222d      	movs	r2, #45	; 0x2d
        }
        else if(flags & FLAGS_PLUS) {
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
            buf[len++] = ' ';
 800fb80:	552a      	strb	r2, [r5, r4]
 800fb82:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800fb84:	079b      	lsls	r3, r3, #30
 800fb86:	464f      	mov	r7, r9
 800fb88:	d037      	beq.n	800fbfa <_ntoa_format+0x118>
 800fb8a:	eb05 0804 	add.w	r8, r5, r4
 800fb8e:	eb07 0b08 	add.w	fp, r7, r8
    while(len) {
 800fb92:	45a8      	cmp	r8, r5
 800fb94:	ebab 0208 	sub.w	r2, fp, r8
 800fb98:	d132      	bne.n	800fc00 <_ntoa_format+0x11e>
    if(flags & FLAGS_LEFT) {
 800fb9a:	9b03      	ldr	r3, [sp, #12]
 800fb9c:	19e2      	adds	r2, r4, r7
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d13c      	bne.n	800fc1c <_ntoa_format+0x13a>
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 800fba2:	4610      	mov	r0, r2
 800fba4:	b005      	add	sp, #20
 800fba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buf[len++] = '0';
 800fbaa:	f805 c004 	strb.w	ip, [r5, r4]
 800fbae:	3401      	adds	r4, #1
 800fbb0:	e7c1      	b.n	800fb36 <_ntoa_format+0x54>
 800fbb2:	460c      	mov	r4, r1
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800fbb4:	2a10      	cmp	r2, #16
 800fbb6:	d0d3      	beq.n	800fb60 <_ntoa_format+0x7e>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800fbb8:	2a02      	cmp	r2, #2
 800fbba:	d1d8      	bne.n	800fb6e <_ntoa_format+0x8c>
 800fbbc:	2c1f      	cmp	r4, #31
 800fbbe:	d8e1      	bhi.n	800fb84 <_ntoa_format+0xa2>
            buf[len++] = 'b';
 800fbc0:	2262      	movs	r2, #98	; 0x62
 800fbc2:	e7d2      	b.n	800fb6a <_ntoa_format+0x88>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800fbc4:	2c1f      	cmp	r4, #31
 800fbc6:	d8dd      	bhi.n	800fb84 <_ntoa_format+0xa2>
            buf[len++] = 'X';
 800fbc8:	2258      	movs	r2, #88	; 0x58
 800fbca:	e7ce      	b.n	800fb6a <_ntoa_format+0x88>
        else if(flags & FLAGS_PLUS) {
 800fbcc:	0759      	lsls	r1, r3, #29
 800fbce:	d501      	bpl.n	800fbd4 <_ntoa_format+0xf2>
            buf[len++] = '+';  // ignore the space if the '+' exists
 800fbd0:	222b      	movs	r2, #43	; 0x2b
 800fbd2:	e7d5      	b.n	800fb80 <_ntoa_format+0x9e>
        else if(flags & FLAGS_SPACE) {
 800fbd4:	071a      	lsls	r2, r3, #28
 800fbd6:	d5d5      	bpl.n	800fb84 <_ntoa_format+0xa2>
            buf[len++] = ' ';
 800fbd8:	2220      	movs	r2, #32
 800fbda:	e7d1      	b.n	800fb80 <_ntoa_format+0x9e>
            out(' ', buffer, idx++, maxlen);
 800fbdc:	f107 0801 	add.w	r8, r7, #1
 800fbe0:	463a      	mov	r2, r7
 800fbe2:	4653      	mov	r3, sl
 800fbe4:	9f01      	ldr	r7, [sp, #4]
 800fbe6:	9902      	ldr	r1, [sp, #8]
 800fbe8:	2020      	movs	r0, #32
 800fbea:	47b8      	blx	r7
 800fbec:	4647      	mov	r7, r8
        for(i = len; i < width; i++) {
 800fbee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fbf0:	eb0b 0307 	add.w	r3, fp, r7
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d8f1      	bhi.n	800fbdc <_ntoa_format+0xfa>
 800fbf8:	e7c7      	b.n	800fb8a <_ntoa_format+0xa8>
 800fbfa:	eba4 0b09 	sub.w	fp, r4, r9
 800fbfe:	e7f6      	b.n	800fbee <_ntoa_format+0x10c>
        out(buf[--len], buffer, idx++, maxlen);
 800fc00:	4653      	mov	r3, sl
 800fc02:	9902      	ldr	r1, [sp, #8]
 800fc04:	f818 0d01 	ldrb.w	r0, [r8, #-1]!
 800fc08:	9e01      	ldr	r6, [sp, #4]
 800fc0a:	47b0      	blx	r6
 800fc0c:	e7c1      	b.n	800fb92 <_ntoa_format+0xb0>
            out(' ', buffer, idx++, maxlen);
 800fc0e:	1c54      	adds	r4, r2, #1
 800fc10:	4653      	mov	r3, sl
 800fc12:	9902      	ldr	r1, [sp, #8]
 800fc14:	2020      	movs	r0, #32
 800fc16:	9d01      	ldr	r5, [sp, #4]
 800fc18:	47a8      	blx	r5
 800fc1a:	4622      	mov	r2, r4
        while(idx - start_idx < width) {
 800fc1c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fc1e:	eba2 0309 	sub.w	r3, r2, r9
 800fc22:	4299      	cmp	r1, r3
 800fc24:	d8f3      	bhi.n	800fc0e <_ntoa_format+0x12c>
 800fc26:	e7bc      	b.n	800fba2 <_ntoa_format+0xc0>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800fc28:	2a02      	cmp	r2, #2
 800fc2a:	460c      	mov	r4, r1
 800fc2c:	d19f      	bne.n	800fb6e <_ntoa_format+0x8c>
 800fc2e:	e7c7      	b.n	800fbc0 <_ntoa_format+0xde>

0800fc30 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800fc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc34:	b090      	sub	sp, #64	; 0x40
 800fc36:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800fc38:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800fc3c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 800fc3e:	b90d      	cbnz	r5, 800fc44 <_ntoa_long+0x14>
        flags &= ~FLAGS_HASH;
 800fc40:	f027 0710 	bic.w	r7, r7, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 800fc44:	057c      	lsls	r4, r7, #21
 800fc46:	d500      	bpl.n	800fc4a <_ntoa_long+0x1a>
 800fc48:	b385      	cbz	r5, 800fcac <_ntoa_long+0x7c>
 800fc4a:	f017 0f20 	tst.w	r7, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800fc4e:	f04f 0600 	mov.w	r6, #0
 800fc52:	bf14      	ite	ne
 800fc54:	f04f 0837 	movne.w	r8, #55	; 0x37
 800fc58:	f04f 0857 	moveq.w	r8, #87	; 0x57
            const char digit = (char)(value % base);
 800fc5c:	fbb5 fefc 	udiv	lr, r5, ip
 800fc60:	fb0c 5e1e 	mls	lr, ip, lr, r5
            value /= base;
 800fc64:	fbb5 f5fc 	udiv	r5, r5, ip
            const char digit = (char)(value % base);
 800fc68:	fa5f f48e 	uxtb.w	r4, lr
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800fc6c:	f1be 0f09 	cmp.w	lr, #9
 800fc70:	bf94      	ite	ls
 800fc72:	3430      	addls	r4, #48	; 0x30
 800fc74:	4444      	addhi	r4, r8
 800fc76:	3601      	adds	r6, #1
 800fc78:	f10d 0e20 	add.w	lr, sp, #32
 800fc7c:	b2e4      	uxtb	r4, r4
 800fc7e:	44b6      	add	lr, r6
 800fc80:	f80e 4c01 	strb.w	r4, [lr, #-1]
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800fc84:	b10d      	cbz	r5, 800fc8a <_ntoa_long+0x5a>
 800fc86:	2e20      	cmp	r6, #32
 800fc88:	d1e8      	bne.n	800fc5c <_ntoa_long+0x2c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800fc8a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800fc8c:	9706      	str	r7, [sp, #24]
 800fc8e:	9405      	str	r4, [sp, #20]
 800fc90:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800fc92:	e9cd c403 	strd	ip, r4, [sp, #12]
 800fc96:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 800fc9a:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800fc9e:	ac08      	add	r4, sp, #32
 800fca0:	9400      	str	r4, [sp, #0]
 800fca2:	f7ff ff1e 	bl	800fae2 <_ntoa_format>
}
 800fca6:	b010      	add	sp, #64	; 0x40
 800fca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = 0U;
 800fcac:	462e      	mov	r6, r5
 800fcae:	e7ec      	b.n	800fc8a <_ntoa_long+0x5a>

0800fcb0 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800fcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb4:	b093      	sub	sp, #76	; 0x4c
 800fcb6:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800fcb8:	4607      	mov	r7, r0
 800fcba:	4688      	mov	r8, r1
 800fcbc:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800fcc0:	469a      	mov	sl, r3
 800fcc2:	e9dd 6320 	ldrd	r6, r3, [sp, #128]	; 0x80
 800fcc6:	9309      	str	r3, [sp, #36]	; 0x24
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 800fcc8:	ea50 0301 	orrs.w	r3, r0, r1
        flags &= ~FLAGS_HASH;
 800fccc:	bf08      	it	eq
 800fcce:	f025 0510 	biceq.w	r5, r5, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 800fcd2:	056b      	lsls	r3, r5, #21
{
 800fcd4:	4691      	mov	r9, r2
    if(!(flags & FLAGS_PRECISION) || value) {
 800fcd6:	d502      	bpl.n	800fcde <_ntoa_long_long+0x2e>
 800fcd8:	ea50 0301 	orrs.w	r3, r0, r1
 800fcdc:	d033      	beq.n	800fd46 <_ntoa_long_long+0x96>
 800fcde:	f015 0f20 	tst.w	r5, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800fce2:	f04f 0400 	mov.w	r4, #0
 800fce6:	bf14      	ite	ne
 800fce8:	f04f 0b37 	movne.w	fp, #55	; 0x37
 800fcec:	f04f 0b57 	moveq.w	fp, #87	; 0x57
 800fcf0:	4632      	mov	r2, r6
 800fcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcf4:	f7f0 fa3c 	bl	8000170 <__aeabi_uldivmod>
 800fcf8:	468c      	mov	ip, r1
            const char digit = (char)(value % base);
 800fcfa:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800fcfc:	2a09      	cmp	r2, #9
 800fcfe:	bf94      	ite	ls
 800fd00:	3230      	addls	r2, #48	; 0x30
 800fd02:	445a      	addhi	r2, fp
 800fd04:	3401      	adds	r4, #1
 800fd06:	a90a      	add	r1, sp, #40	; 0x28
 800fd08:	4421      	add	r1, r4
 800fd0a:	b2d2      	uxtb	r2, r2
 800fd0c:	f801 2c01 	strb.w	r2, [r1, #-1]
            value /= base;
 800fd10:	4661      	mov	r1, ip
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800fd12:	ea50 0301 	orrs.w	r3, r0, r1
 800fd16:	d001      	beq.n	800fd1c <_ntoa_long_long+0x6c>
 800fd18:	2c20      	cmp	r4, #32
 800fd1a:	d1e9      	bne.n	800fcf0 <_ntoa_long_long+0x40>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800fd1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fd1e:	9506      	str	r5, [sp, #24]
 800fd20:	9305      	str	r3, [sp, #20]
 800fd22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd24:	464a      	mov	r2, r9
 800fd26:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800fd2a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800fd2e:	4641      	mov	r1, r8
 800fd30:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800fd34:	ab0a      	add	r3, sp, #40	; 0x28
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	4638      	mov	r0, r7
 800fd3a:	4653      	mov	r3, sl
 800fd3c:	f7ff fed1 	bl	800fae2 <_ntoa_format>
}
 800fd40:	b013      	add	sp, #76	; 0x4c
 800fd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t len = 0U;
 800fd46:	2400      	movs	r4, #0
 800fd48:	e7e8      	b.n	800fd1c <_ntoa_long_long+0x6c>
	...

0800fd4c <_vsnprintf.constprop.0>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 800fd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd50:	4691      	mov	r9, r2
 800fd52:	461e      	mov	r6, r3
{
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
 800fd54:	4ab5      	ldr	r2, [pc, #724]	; (801002c <_vsnprintf.constprop.0+0x2e0>)
 800fd56:	4bb6      	ldr	r3, [pc, #728]	; (8010030 <_vsnprintf.constprop.0+0x2e4>)
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 800fd58:	460f      	mov	r7, r1
    if(!buffer) {
 800fd5a:	4680      	mov	r8, r0
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	bf0c      	ite	eq
 800fd60:	4693      	moveq	fp, r2
 800fd62:	469b      	movne	fp, r3
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
 800fd64:	2500      	movs	r5, #0
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 800fd66:	b08f      	sub	sp, #60	; 0x3c
    while(*format) {
 800fd68:	f899 0000 	ldrb.w	r0, [r9]
 800fd6c:	b960      	cbnz	r0, 800fd88 <_vsnprintf.constprop.0+0x3c>
                break;
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800fd6e:	42bd      	cmp	r5, r7
 800fd70:	bf2c      	ite	cs
 800fd72:	f107 32ff 	addcs.w	r2, r7, #4294967295
 800fd76:	462a      	movcc	r2, r5
 800fd78:	463b      	mov	r3, r7
 800fd7a:	4641      	mov	r1, r8
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	47d8      	blx	fp

    // return written chars without terminating \0
    return (int)idx;
}
 800fd80:	4628      	mov	r0, r5
 800fd82:	b00f      	add	sp, #60	; 0x3c
 800fd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(*format != '%') {
 800fd88:	2825      	cmp	r0, #37	; 0x25
 800fd8a:	f109 0901 	add.w	r9, r9, #1
 800fd8e:	d006      	beq.n	800fd9e <_vsnprintf.constprop.0+0x52>
                out(*format, buffer, idx++, maxlen);
 800fd90:	462a      	mov	r2, r5
 800fd92:	1c6c      	adds	r4, r5, #1
 800fd94:	463b      	mov	r3, r7
 800fd96:	4641      	mov	r1, r8
 800fd98:	47d8      	blx	fp
 800fd9a:	4625      	mov	r5, r4
 800fd9c:	e7e4      	b.n	800fd68 <_vsnprintf.constprop.0+0x1c>
        flags = 0U;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	e006      	b.n	800fdb0 <_vsnprintf.constprop.0+0x64>
            switch(*format) {
 800fda2:	2a2d      	cmp	r2, #45	; 0x2d
 800fda4:	d015      	beq.n	800fdd2 <_vsnprintf.constprop.0+0x86>
 800fda6:	2a30      	cmp	r2, #48	; 0x30
 800fda8:	d10c      	bne.n	800fdc4 <_vsnprintf.constprop.0+0x78>
                    flags |= FLAGS_ZEROPAD;
 800fdaa:	f043 0301 	orr.w	r3, r3, #1
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 800fdae:	4689      	mov	r9, r1
            switch(*format) {
 800fdb0:	4649      	mov	r1, r9
 800fdb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdb6:	2a2b      	cmp	r2, #43	; 0x2b
 800fdb8:	d00e      	beq.n	800fdd8 <_vsnprintf.constprop.0+0x8c>
 800fdba:	d8f2      	bhi.n	800fda2 <_vsnprintf.constprop.0+0x56>
 800fdbc:	2a20      	cmp	r2, #32
 800fdbe:	d00e      	beq.n	800fdde <_vsnprintf.constprop.0+0x92>
 800fdc0:	2a23      	cmp	r2, #35	; 0x23
 800fdc2:	d00f      	beq.n	800fde4 <_vsnprintf.constprop.0+0x98>
        if(_is_digit(*format)) {
 800fdc4:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800fdc8:	2809      	cmp	r0, #9
 800fdca:	d82c      	bhi.n	800fe26 <_vsnprintf.constprop.0+0xda>
    unsigned int i = 0U;
 800fdcc:	2200      	movs	r2, #0
 800fdce:	920a      	str	r2, [sp, #40]	; 0x28
 800fdd0:	e012      	b.n	800fdf8 <_vsnprintf.constprop.0+0xac>
                    flags |= FLAGS_LEFT;
 800fdd2:	f043 0302 	orr.w	r3, r3, #2
 800fdd6:	e7ea      	b.n	800fdae <_vsnprintf.constprop.0+0x62>
                    flags |= FLAGS_PLUS;
 800fdd8:	f043 0304 	orr.w	r3, r3, #4
 800fddc:	e7e7      	b.n	800fdae <_vsnprintf.constprop.0+0x62>
                    flags |= FLAGS_SPACE;
 800fdde:	f043 0308 	orr.w	r3, r3, #8
 800fde2:	e7e4      	b.n	800fdae <_vsnprintf.constprop.0+0x62>
                    flags |= FLAGS_HASH;
 800fde4:	f043 0310 	orr.w	r3, r3, #16
 800fde8:	e7e1      	b.n	800fdae <_vsnprintf.constprop.0+0x62>
 800fdea:	240a      	movs	r4, #10
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800fdec:	4689      	mov	r9, r1
 800fdee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fdf0:	fb04 2200 	mla	r2, r4, r0, r2
 800fdf4:	3a30      	subs	r2, #48	; 0x30
 800fdf6:	920a      	str	r2, [sp, #40]	; 0x28
    while(_is_digit(**str)) {
 800fdf8:	4649      	mov	r1, r9
 800fdfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdfe:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800fe02:	2809      	cmp	r0, #9
 800fe04:	d9f1      	bls.n	800fdea <_vsnprintf.constprop.0+0x9e>
        if(*format == '.') {
 800fe06:	f899 2000 	ldrb.w	r2, [r9]
 800fe0a:	2a2e      	cmp	r2, #46	; 0x2e
 800fe0c:	d13c      	bne.n	800fe88 <_vsnprintf.constprop.0+0x13c>
            if(_is_digit(*format)) {
 800fe0e:	f899 1001 	ldrb.w	r1, [r9, #1]
 800fe12:	f109 0201 	add.w	r2, r9, #1
 800fe16:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 800fe1a:	2809      	cmp	r0, #9
            flags |= FLAGS_PRECISION;
 800fe1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
            if(_is_digit(*format)) {
 800fe20:	d829      	bhi.n	800fe76 <_vsnprintf.constprop.0+0x12a>
    unsigned int i = 0U;
 800fe22:	2400      	movs	r4, #0
 800fe24:	e014      	b.n	800fe50 <_vsnprintf.constprop.0+0x104>
        else if(*format == '*') {
 800fe26:	2a2a      	cmp	r2, #42	; 0x2a
 800fe28:	d10a      	bne.n	800fe40 <_vsnprintf.constprop.0+0xf4>
            const int w = va_arg(va, int);
 800fe2a:	6832      	ldr	r2, [r6, #0]
 800fe2c:	1d30      	adds	r0, r6, #4
            if(w < 0) {
 800fe2e:	2a00      	cmp	r2, #0
                width = (unsigned int) - w;
 800fe30:	bfbc      	itt	lt
 800fe32:	4252      	neglt	r2, r2
                flags |= FLAGS_LEFT;    // reverse padding
 800fe34:	f043 0302 	orrlt.w	r3, r3, #2
                width = (unsigned int)w;
 800fe38:	920a      	str	r2, [sp, #40]	; 0x28
            const int w = va_arg(va, int);
 800fe3a:	4606      	mov	r6, r0
 800fe3c:	4689      	mov	r9, r1
 800fe3e:	e7e2      	b.n	800fe06 <_vsnprintf.constprop.0+0xba>
        width = 0U;
 800fe40:	2200      	movs	r2, #0
 800fe42:	920a      	str	r2, [sp, #40]	; 0x28
 800fe44:	e7df      	b.n	800fe06 <_vsnprintf.constprop.0+0xba>
 800fe46:	220a      	movs	r2, #10
 800fe48:	fb02 1404 	mla	r4, r2, r4, r1
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	3c30      	subs	r4, #48	; 0x30
    while(_is_digit(**str)) {
 800fe50:	4610      	mov	r0, r2
 800fe52:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fe56:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
 800fe5a:	f1bc 0f09 	cmp.w	ip, #9
 800fe5e:	d9f2      	bls.n	800fe46 <_vsnprintf.constprop.0+0xfa>
        switch(*format) {
 800fe60:	7811      	ldrb	r1, [r2, #0]
 800fe62:	1c50      	adds	r0, r2, #1
 800fe64:	296c      	cmp	r1, #108	; 0x6c
 800fe66:	d019      	beq.n	800fe9c <_vsnprintf.constprop.0+0x150>
 800fe68:	d811      	bhi.n	800fe8e <_vsnprintf.constprop.0+0x142>
 800fe6a:	2968      	cmp	r1, #104	; 0x68
 800fe6c:	d01d      	beq.n	800feaa <_vsnprintf.constprop.0+0x15e>
 800fe6e:	296a      	cmp	r1, #106	; 0x6a
 800fe70:	d02f      	beq.n	800fed2 <_vsnprintf.constprop.0+0x186>
 800fe72:	4610      	mov	r0, r2
 800fe74:	e01e      	b.n	800feb4 <_vsnprintf.constprop.0+0x168>
            else if(*format == '*') {
 800fe76:	292a      	cmp	r1, #42	; 0x2a
 800fe78:	d107      	bne.n	800fe8a <_vsnprintf.constprop.0+0x13e>
                precision = prec > 0 ? (unsigned int)prec : 0U;
 800fe7a:	6834      	ldr	r4, [r6, #0]
                format++;
 800fe7c:	f109 0202 	add.w	r2, r9, #2
                precision = prec > 0 ? (unsigned int)prec : 0U;
 800fe80:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                const int prec = (int)va_arg(va, int);
 800fe84:	3604      	adds	r6, #4
 800fe86:	e7eb      	b.n	800fe60 <_vsnprintf.constprop.0+0x114>
        if(*format == '.') {
 800fe88:	464a      	mov	r2, r9
        precision = 0U;
 800fe8a:	2400      	movs	r4, #0
 800fe8c:	e7e8      	b.n	800fe60 <_vsnprintf.constprop.0+0x114>
        switch(*format) {
 800fe8e:	2974      	cmp	r1, #116	; 0x74
 800fe90:	d001      	beq.n	800fe96 <_vsnprintf.constprop.0+0x14a>
 800fe92:	297a      	cmp	r1, #122	; 0x7a
 800fe94:	d1ed      	bne.n	800fe72 <_vsnprintf.constprop.0+0x126>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fe96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe9a:	e00b      	b.n	800feb4 <_vsnprintf.constprop.0+0x168>
                if(*format == 'l') {
 800fe9c:	7851      	ldrb	r1, [r2, #1]
 800fe9e:	296c      	cmp	r1, #108	; 0x6c
 800fea0:	d1f9      	bne.n	800fe96 <_vsnprintf.constprop.0+0x14a>
                    flags |= FLAGS_LONG_LONG;
 800fea2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
                    format++;
 800fea6:	1c90      	adds	r0, r2, #2
 800fea8:	e004      	b.n	800feb4 <_vsnprintf.constprop.0+0x168>
                if(*format == 'h') {
 800feaa:	7851      	ldrb	r1, [r2, #1]
 800feac:	2968      	cmp	r1, #104	; 0x68
 800feae:	d00d      	beq.n	800fecc <_vsnprintf.constprop.0+0x180>
                flags |= FLAGS_SHORT;
 800feb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        switch(*format) {
 800feb4:	4681      	mov	r9, r0
 800feb6:	f819 0b01 	ldrb.w	r0, [r9], #1
 800feba:	2869      	cmp	r0, #105	; 0x69
 800febc:	d01d      	beq.n	800fefa <_vsnprintf.constprop.0+0x1ae>
 800febe:	d856      	bhi.n	800ff6e <_vsnprintf.constprop.0+0x222>
 800fec0:	2862      	cmp	r0, #98	; 0x62
 800fec2:	d109      	bne.n	800fed8 <_vsnprintf.constprop.0+0x18c>
                        base =  2U;
 800fec4:	2202      	movs	r2, #2
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800fec6:	f023 030c 	bic.w	r3, r3, #12
 800feca:	e01e      	b.n	800ff0a <_vsnprintf.constprop.0+0x1be>
                    flags |= FLAGS_CHAR;
 800fecc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fed0:	e7e9      	b.n	800fea6 <_vsnprintf.constprop.0+0x15a>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fed6:	e7ed      	b.n	800feb4 <_vsnprintf.constprop.0+0x168>
        switch(*format) {
 800fed8:	d809      	bhi.n	800feee <_vsnprintf.constprop.0+0x1a2>
 800feda:	2825      	cmp	r0, #37	; 0x25
 800fedc:	f43f af58 	beq.w	800fd90 <_vsnprintf.constprop.0+0x44>
 800fee0:	2858      	cmp	r0, #88	; 0x58
 800fee2:	f47f af55 	bne.w	800fd90 <_vsnprintf.constprop.0+0x44>
                        flags |= FLAGS_UPPERCASE;
 800fee6:	f043 0320 	orr.w	r3, r3, #32
                        base = 16U;
 800feea:	2210      	movs	r2, #16
 800feec:	e7eb      	b.n	800fec6 <_vsnprintf.constprop.0+0x17a>
        switch(*format) {
 800feee:	2863      	cmp	r0, #99	; 0x63
 800fef0:	f000 80b1 	beq.w	8010056 <_vsnprintf.constprop.0+0x30a>
 800fef4:	2864      	cmp	r0, #100	; 0x64
 800fef6:	f47f af4b 	bne.w	800fd90 <_vsnprintf.constprop.0+0x44>
                    if((*format != 'i') && (*format != 'd')) {
 800fefa:	2869      	cmp	r0, #105	; 0x69
                        flags &= ~FLAGS_HASH;   // no hash for dec format
 800fefc:	f023 0310 	bic.w	r3, r3, #16
                        base = 10U;
 800ff00:	f04f 020a 	mov.w	r2, #10
                    if((*format != 'i') && (*format != 'd')) {
 800ff04:	d001      	beq.n	800ff0a <_vsnprintf.constprop.0+0x1be>
 800ff06:	2864      	cmp	r0, #100	; 0x64
 800ff08:	d1dd      	bne.n	800fec6 <_vsnprintf.constprop.0+0x17a>
                    if(flags & FLAGS_PRECISION) {
 800ff0a:	0559      	lsls	r1, r3, #21
                        flags &= ~FLAGS_ZEROPAD;
 800ff0c:	bf48      	it	mi
 800ff0e:	f023 0301 	bicmi.w	r3, r3, #1
                    if((*format == 'i') || (*format == 'd')) {
 800ff12:	2869      	cmp	r0, #105	; 0x69
 800ff14:	f403 7100 	and.w	r1, r3, #512	; 0x200
 800ff18:	d001      	beq.n	800ff1e <_vsnprintf.constprop.0+0x1d2>
 800ff1a:	2864      	cmp	r0, #100	; 0x64
 800ff1c:	d167      	bne.n	800ffee <_vsnprintf.constprop.0+0x2a2>
                        if(flags & FLAGS_LONG_LONG) {
 800ff1e:	2900      	cmp	r1, #0
 800ff20:	d043      	beq.n	800ffaa <_vsnprintf.constprop.0+0x25e>
                            const long long value = va_arg(va, long long);
 800ff22:	3607      	adds	r6, #7
 800ff24:	f026 0607 	bic.w	r6, r6, #7
 800ff28:	e9d6 1000 	ldrd	r1, r0, [r6]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 800ff2c:	9308      	str	r3, [sp, #32]
 800ff2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff30:	2900      	cmp	r1, #0
 800ff32:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800ff36:	f04f 0300 	mov.w	r3, #0
 800ff3a:	9204      	str	r2, [sp, #16]
 800ff3c:	9305      	str	r3, [sp, #20]
 800ff3e:	460a      	mov	r2, r1
 800ff40:	ea4f 73d0 	mov.w	r3, r0, lsr #31
 800ff44:	f170 0100 	sbcs.w	r1, r0, #0
 800ff48:	9302      	str	r3, [sp, #8]
                            const long long value = va_arg(va, long long);
 800ff4a:	f106 0a08 	add.w	sl, r6, #8
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 800ff4e:	4603      	mov	r3, r0
 800ff50:	da02      	bge.n	800ff58 <_vsnprintf.constprop.0+0x20c>
 800ff52:	4252      	negs	r2, r2
 800ff54:	eb60 0340 	sbc.w	r3, r0, r0, lsl #1
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800ff58:	e9cd 2300 	strd	r2, r3, [sp]
 800ff5c:	4641      	mov	r1, r8
 800ff5e:	463b      	mov	r3, r7
 800ff60:	462a      	mov	r2, r5
 800ff62:	4658      	mov	r0, fp
 800ff64:	f7ff fea4 	bl	800fcb0 <_ntoa_long_long>
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800ff68:	4605      	mov	r5, r0
        out = _out_null;
 800ff6a:	4656      	mov	r6, sl
 800ff6c:	e6fc      	b.n	800fd68 <_vsnprintf.constprop.0+0x1c>
        switch(*format) {
 800ff6e:	2873      	cmp	r0, #115	; 0x73
 800ff70:	f000 80a6 	beq.w	80100c0 <_vsnprintf.constprop.0+0x374>
 800ff74:	d813      	bhi.n	800ff9e <_vsnprintf.constprop.0+0x252>
 800ff76:	286f      	cmp	r0, #111	; 0x6f
 800ff78:	d101      	bne.n	800ff7e <_vsnprintf.constprop.0+0x232>
                        base =  8U;
 800ff7a:	2208      	movs	r2, #8
 800ff7c:	e7a3      	b.n	800fec6 <_vsnprintf.constprop.0+0x17a>
        switch(*format) {
 800ff7e:	2870      	cmp	r0, #112	; 0x70
 800ff80:	f47f af06 	bne.w	800fd90 <_vsnprintf.constprop.0+0x44>
                    flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800ff84:	f043 0321 	orr.w	r3, r3, #33	; 0x21
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
 800ff88:	9305      	str	r3, [sp, #20]
 800ff8a:	2308      	movs	r3, #8
 800ff8c:	2210      	movs	r2, #16
 800ff8e:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800ff92:	2300      	movs	r3, #0
 800ff94:	f106 0a04 	add.w	sl, r6, #4
 800ff98:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ff9c:	e042      	b.n	8010024 <_vsnprintf.constprop.0+0x2d8>
        switch(*format) {
 800ff9e:	2875      	cmp	r0, #117	; 0x75
 800ffa0:	d0ab      	beq.n	800fefa <_vsnprintf.constprop.0+0x1ae>
 800ffa2:	2878      	cmp	r0, #120	; 0x78
 800ffa4:	f47f aef4 	bne.w	800fd90 <_vsnprintf.constprop.0+0x44>
 800ffa8:	e79f      	b.n	800feea <_vsnprintf.constprop.0+0x19e>
                        else if(flags & FLAGS_LONG) {
 800ffaa:	05d9      	lsls	r1, r3, #23
 800ffac:	f106 0a04 	add.w	sl, r6, #4
 800ffb0:	d513      	bpl.n	800ffda <_vsnprintf.constprop.0+0x28e>
                            const long value = va_arg(va, long);
 800ffb2:	6831      	ldr	r1, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
 800ffb4:	9305      	str	r3, [sp, #20]
 800ffb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffb8:	2900      	cmp	r1, #0
 800ffba:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800ffbe:	ea4f 73d1 	mov.w	r3, r1, lsr #31
 800ffc2:	9202      	str	r2, [sp, #8]
 800ffc4:	9301      	str	r3, [sp, #4]
 800ffc6:	bfb8      	it	lt
 800ffc8:	4249      	neglt	r1, r1
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800ffca:	9100      	str	r1, [sp, #0]
 800ffcc:	463b      	mov	r3, r7
 800ffce:	462a      	mov	r2, r5
 800ffd0:	4641      	mov	r1, r8
 800ffd2:	4658      	mov	r0, fp
 800ffd4:	f7ff fe2c 	bl	800fc30 <_ntoa_long>
 800ffd8:	e7c6      	b.n	800ff68 <_vsnprintf.constprop.0+0x21c>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 800ffda:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ffde:	6831      	ldr	r1, [r6, #0]
 800ffe0:	d001      	beq.n	800ffe6 <_vsnprintf.constprop.0+0x29a>
 800ffe2:	b2c9      	uxtb	r1, r1
 800ffe4:	e7e6      	b.n	800ffb4 <_vsnprintf.constprop.0+0x268>
                                                                                                                                       int) : va_arg(va, int);
 800ffe6:	061e      	lsls	r6, r3, #24
 800ffe8:	bf48      	it	mi
 800ffea:	b209      	sxthmi	r1, r1
 800ffec:	e7e2      	b.n	800ffb4 <_vsnprintf.constprop.0+0x268>
                        if(flags & FLAGS_LONG_LONG) {
 800ffee:	b179      	cbz	r1, 8010010 <_vsnprintf.constprop.0+0x2c4>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800fff0:	9308      	str	r3, [sp, #32]
 800fff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fff4:	3607      	adds	r6, #7
 800fff6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800fffa:	2300      	movs	r3, #0
 800fffc:	f026 0607 	bic.w	r6, r6, #7
 8010000:	9204      	str	r2, [sp, #16]
 8010002:	9305      	str	r3, [sp, #20]
 8010004:	9302      	str	r3, [sp, #8]
 8010006:	f106 0a08 	add.w	sl, r6, #8
 801000a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801000e:	e7a3      	b.n	800ff58 <_vsnprintf.constprop.0+0x20c>
                        else if(flags & FLAGS_LONG) {
 8010010:	05d8      	lsls	r0, r3, #23
 8010012:	f106 0a04 	add.w	sl, r6, #4
 8010016:	d50d      	bpl.n	8010034 <_vsnprintf.constprop.0+0x2e8>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8010018:	9305      	str	r3, [sp, #20]
 801001a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801001c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010020:	e9cd 4303 	strd	r4, r3, [sp, #12]
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
 8010024:	6833      	ldr	r3, [r6, #0]
 8010026:	9300      	str	r3, [sp, #0]
 8010028:	e7d0      	b.n	800ffcc <_vsnprintf.constprop.0+0x280>
 801002a:	bf00      	nop
 801002c:	0800fae1 	.word	0x0800fae1
 8010030:	0800fad9 	.word	0x0800fad9
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8010034:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010038:	6831      	ldr	r1, [r6, #0]
 801003a:	d008      	beq.n	801004e <_vsnprintf.constprop.0+0x302>
 801003c:	b2c9      	uxtb	r1, r1
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 801003e:	9305      	str	r3, [sp, #20]
 8010040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010042:	9202      	str	r2, [sp, #8]
 8010044:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8010048:	2300      	movs	r3, #0
 801004a:	9301      	str	r3, [sp, #4]
 801004c:	e7bd      	b.n	800ffca <_vsnprintf.constprop.0+0x27e>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 801004e:	0618      	lsls	r0, r3, #24
 8010050:	bf48      	it	mi
 8010052:	b289      	uxthmi	r1, r1
 8010054:	e7f3      	b.n	801003e <_vsnprintf.constprop.0+0x2f2>
                    if(!(flags & FLAGS_LEFT)) {
 8010056:	f013 0302 	ands.w	r3, r3, #2
 801005a:	930c      	str	r3, [sp, #48]	; 0x30
 801005c:	d026      	beq.n	80100ac <_vsnprintf.constprop.0+0x360>
                    unsigned int l = 1U;
 801005e:	2301      	movs	r3, #1
                    if(!(flags & FLAGS_LEFT)) {
 8010060:	46aa      	mov	sl, r5
                    unsigned int l = 1U;
 8010062:	930b      	str	r3, [sp, #44]	; 0x2c
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8010064:	1d33      	adds	r3, r6, #4
 8010066:	930d      	str	r3, [sp, #52]	; 0x34
 8010068:	4652      	mov	r2, sl
 801006a:	463b      	mov	r3, r7
 801006c:	4641      	mov	r1, r8
 801006e:	7830      	ldrb	r0, [r6, #0]
 8010070:	47d8      	blx	fp
                    if(flags & FLAGS_LEFT) {
 8010072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8010074:	f10a 0501 	add.w	r5, sl, #1
                    if(flags & FLAGS_LEFT) {
 8010078:	b143      	cbz	r3, 801008c <_vsnprintf.constprop.0+0x340>
 801007a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801007c:	3b01      	subs	r3, #1
 801007e:	eba3 0a0a 	sub.w	sl, r3, sl
                        while(l++ < width) {
 8010082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010084:	eb05 030a 	add.w	r3, r5, sl
 8010088:	4293      	cmp	r3, r2
 801008a:	d311      	bcc.n	80100b0 <_vsnprintf.constprop.0+0x364>
                    const char * p = va_arg(va, char *);
 801008c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801008e:	e66b      	b.n	800fd68 <_vsnprintf.constprop.0+0x1c>
                            out(' ', buffer, idx++, maxlen);
 8010090:	463b      	mov	r3, r7
 8010092:	4652      	mov	r2, sl
 8010094:	4641      	mov	r1, r8
 8010096:	2020      	movs	r0, #32
 8010098:	47d8      	blx	fp
 801009a:	1ca3      	adds	r3, r4, #2
 801009c:	930b      	str	r3, [sp, #44]	; 0x2c
                        while(l++ < width) {
 801009e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100a0:	eb05 0a04 	add.w	sl, r5, r4
 80100a4:	3401      	adds	r4, #1
 80100a6:	429c      	cmp	r4, r3
 80100a8:	d3f2      	bcc.n	8010090 <_vsnprintf.constprop.0+0x344>
 80100aa:	e7db      	b.n	8010064 <_vsnprintf.constprop.0+0x318>
                    if(!(flags & FLAGS_LEFT)) {
 80100ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80100ae:	e7f4      	b.n	801009a <_vsnprintf.constprop.0+0x34e>
                            out(' ', buffer, idx++, maxlen);
 80100b0:	462a      	mov	r2, r5
 80100b2:	1c6c      	adds	r4, r5, #1
 80100b4:	463b      	mov	r3, r7
 80100b6:	4641      	mov	r1, r8
 80100b8:	2020      	movs	r0, #32
 80100ba:	47d8      	blx	fp
 80100bc:	4625      	mov	r5, r4
 80100be:	e7e0      	b.n	8010082 <_vsnprintf.constprop.0+0x336>
                    const char * p = va_arg(va, char *);
 80100c0:	1d32      	adds	r2, r6, #4
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 80100c2:	2c00      	cmp	r4, #0
                    const char * p = va_arg(va, char *);
 80100c4:	6836      	ldr	r6, [r6, #0]
 80100c6:	920d      	str	r2, [sp, #52]	; 0x34
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 80100c8:	bf14      	ite	ne
 80100ca:	4622      	movne	r2, r4
 80100cc:	f04f 32ff 	moveq.w	r2, #4294967295
 80100d0:	46b2      	mov	sl, r6
 80100d2:	4432      	add	r2, r6
    for(s = str; *s && maxsize--; ++s);
 80100d4:	f89a 1000 	ldrb.w	r1, [sl]
 80100d8:	b109      	cbz	r1, 80100de <_vsnprintf.constprop.0+0x392>
 80100da:	4552      	cmp	r2, sl
 80100dc:	d10f      	bne.n	80100fe <_vsnprintf.constprop.0+0x3b2>
                    if(flags & FLAGS_PRECISION) {
 80100de:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
    return (unsigned int)(s - str);
 80100e2:	ebaa 0a06 	sub.w	sl, sl, r6
                    if(flags & FLAGS_PRECISION) {
 80100e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80100e8:	d002      	beq.n	80100f0 <_vsnprintf.constprop.0+0x3a4>
                        l = (l < precision ? l : precision);
 80100ea:	45a2      	cmp	sl, r4
 80100ec:	bf28      	it	cs
 80100ee:	46a2      	movcs	sl, r4
                    if(!(flags & FLAGS_LEFT)) {
 80100f0:	f013 0302 	ands.w	r3, r3, #2
 80100f4:	930c      	str	r3, [sp, #48]	; 0x30
 80100f6:	d011      	beq.n	801011c <_vsnprintf.constprop.0+0x3d0>
 80100f8:	462a      	mov	r2, r5
 80100fa:	1b95      	subs	r5, r2, r6
 80100fc:	e015      	b.n	801012a <_vsnprintf.constprop.0+0x3de>
    for(s = str; *s && maxsize--; ++s);
 80100fe:	f10a 0a01 	add.w	sl, sl, #1
 8010102:	e7e7      	b.n	80100d4 <_vsnprintf.constprop.0+0x388>
                            out(' ', buffer, idx++, maxlen);
 8010104:	463b      	mov	r3, r7
 8010106:	4641      	mov	r1, r8
 8010108:	2020      	movs	r0, #32
 801010a:	47d8      	blx	fp
                        while(l++ < width) {
 801010c:	4653      	mov	r3, sl
 801010e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010110:	18ea      	adds	r2, r5, r3
 8010112:	4299      	cmp	r1, r3
 8010114:	f103 0a01 	add.w	sl, r3, #1
 8010118:	d8f4      	bhi.n	8010104 <_vsnprintf.constprop.0+0x3b8>
 801011a:	e7ee      	b.n	80100fa <_vsnprintf.constprop.0+0x3ae>
                    if(!(flags & FLAGS_LEFT)) {
 801011c:	4653      	mov	r3, sl
 801011e:	1aed      	subs	r5, r5, r3
 8010120:	e7f5      	b.n	801010e <_vsnprintf.constprop.0+0x3c2>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8010122:	461c      	mov	r4, r3
                        out(*(p++), buffer, idx++, maxlen);
 8010124:	463b      	mov	r3, r7
 8010126:	4641      	mov	r1, r8
 8010128:	47d8      	blx	fp
 801012a:	19aa      	adds	r2, r5, r6
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 801012c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8010130:	b128      	cbz	r0, 801013e <_vsnprintf.constprop.0+0x3f2>
 8010132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010134:	2b00      	cmp	r3, #0
 8010136:	d0f5      	beq.n	8010124 <_vsnprintf.constprop.0+0x3d8>
 8010138:	1e63      	subs	r3, r4, #1
 801013a:	2c00      	cmp	r4, #0
 801013c:	d1f1      	bne.n	8010122 <_vsnprintf.constprop.0+0x3d6>
                    if(flags & FLAGS_LEFT) {
 801013e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010140:	4615      	mov	r5, r2
 8010142:	2b00      	cmp	r3, #0
 8010144:	d0a2      	beq.n	801008c <_vsnprintf.constprop.0+0x340>
 8010146:	ebaa 0a02 	sub.w	sl, sl, r2
 801014a:	e006      	b.n	801015a <_vsnprintf.constprop.0+0x40e>
                            out(' ', buffer, idx++, maxlen);
 801014c:	462a      	mov	r2, r5
 801014e:	1c6e      	adds	r6, r5, #1
 8010150:	463b      	mov	r3, r7
 8010152:	4641      	mov	r1, r8
 8010154:	2020      	movs	r0, #32
 8010156:	47d8      	blx	fp
 8010158:	4635      	mov	r5, r6
                        while(l++ < width) {
 801015a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801015c:	eb0a 0305 	add.w	r3, sl, r5
 8010160:	4293      	cmp	r3, r2
 8010162:	d3f3      	bcc.n	801014c <_vsnprintf.constprop.0+0x400>
 8010164:	e792      	b.n	801008c <_vsnprintf.constprop.0+0x340>
 8010166:	bf00      	nop

08010168 <lv_vsnprintf>:
    return ret;
}

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
    return _vsnprintf(_out_buffer, buffer, count, format, va);
 8010168:	f7ff bdf0 	b.w	800fd4c <_vsnprintf.constprop.0>

0801016c <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
 801016c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 801016e:	2118      	movs	r1, #24
 8010170:	4804      	ldr	r0, [pc, #16]	; (8010184 <_lv_task_core_init+0x18>)
 8010172:	f7ff f80c 	bl	800f18e <_lv_ll_init>

    task_list_changed = false;
 8010176:	2200      	movs	r2, #0
 8010178:	4b03      	ldr	r3, [pc, #12]	; (8010188 <_lv_task_core_init+0x1c>)
 801017a:	701a      	strb	r2, [r3, #0]
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 801017c:	2201      	movs	r2, #1
 801017e:	4b03      	ldr	r3, [pc, #12]	; (801018c <_lv_task_core_init+0x20>)
 8010180:	701a      	strb	r2, [r3, #0]
}
 8010182:	bd08      	pop	{r3, pc}
 8010184:	20003320 	.word	0x20003320
 8010188:	2000258f 	.word	0x2000258f
 801018c:	2000258c 	.word	0x2000258c

08010190 <lv_task_create_basic>:
{
 8010190:	b570      	push	{r4, r5, r6, lr}
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8010192:	482a      	ldr	r0, [pc, #168]	; (801023c <lv_task_create_basic+0xac>)
 8010194:	f7ff f83a 	bl	800f20c <_lv_ll_get_head>
    if(NULL == tmp) {
 8010198:	4605      	mov	r5, r0
 801019a:	b198      	cbz	r0, 80101c4 <lv_task_create_basic+0x34>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 801019c:	4c27      	ldr	r4, [pc, #156]	; (801023c <lv_task_create_basic+0xac>)
            if(tmp->prio <= DEF_PRIO) {
 801019e:	7d2b      	ldrb	r3, [r5, #20]
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 80101a0:	4629      	mov	r1, r5
            if(tmp->prio <= DEF_PRIO) {
 80101a2:	f003 0307 	and.w	r3, r3, #7
 80101a6:	2b03      	cmp	r3, #3
 80101a8:	d81d      	bhi.n	80101e6 <lv_task_create_basic+0x56>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 80101aa:	4824      	ldr	r0, [pc, #144]	; (801023c <lv_task_create_basic+0xac>)
 80101ac:	f7ff f83d 	bl	800f22a <_lv_ll_ins_prev>
 80101b0:	4604      	mov	r4, r0
                LV_ASSERT_MEM(new_task);
 80101b2:	f7fe ff09 	bl	800efc8 <lv_debug_check_null>
 80101b6:	4603      	mov	r3, r0
 80101b8:	b988      	cbnz	r0, 80101de <lv_task_create_basic+0x4e>
 80101ba:	4622      	mov	r2, r4
 80101bc:	4820      	ldr	r0, [pc, #128]	; (8010240 <lv_task_create_basic+0xb0>)
 80101be:	f7fe ff07 	bl	800efd0 <lv_debug_log_error>
 80101c2:	e7fe      	b.n	80101c2 <lv_task_create_basic+0x32>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 80101c4:	481d      	ldr	r0, [pc, #116]	; (801023c <lv_task_create_basic+0xac>)
 80101c6:	f7fe ffea 	bl	800f19e <_lv_ll_ins_head>
 80101ca:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_task);
 80101cc:	f7fe fefc 	bl	800efc8 <lv_debug_check_null>
 80101d0:	4603      	mov	r3, r0
 80101d2:	b920      	cbnz	r0, 80101de <lv_task_create_basic+0x4e>
 80101d4:	4622      	mov	r2, r4
 80101d6:	481a      	ldr	r0, [pc, #104]	; (8010240 <lv_task_create_basic+0xb0>)
 80101d8:	f7fe fefa 	bl	800efd0 <lv_debug_log_error>
 80101dc:	e7fe      	b.n	80101dc <lv_task_create_basic+0x4c>
        if(new_task == NULL) return NULL;
 80101de:	b9b4      	cbnz	r4, 801020e <lv_task_create_basic+0x7e>
 80101e0:	2400      	movs	r4, #0
}
 80101e2:	4620      	mov	r0, r4
 80101e4:	bd70      	pop	{r4, r5, r6, pc}
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 80101e6:	4620      	mov	r0, r4
 80101e8:	f7ff f816 	bl	800f218 <_lv_ll_get_next>
        } while(tmp != NULL);
 80101ec:	4605      	mov	r5, r0
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d1d5      	bne.n	801019e <lv_task_create_basic+0xe>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 80101f2:	4812      	ldr	r0, [pc, #72]	; (801023c <lv_task_create_basic+0xac>)
 80101f4:	f7fe ffee 	bl	800f1d4 <_lv_ll_ins_tail>
 80101f8:	4604      	mov	r4, r0
            LV_ASSERT_MEM(new_task);
 80101fa:	f7fe fee5 	bl	800efc8 <lv_debug_check_null>
 80101fe:	2800      	cmp	r0, #0
 8010200:	d1ed      	bne.n	80101de <lv_task_create_basic+0x4e>
 8010202:	4622      	mov	r2, r4
 8010204:	462b      	mov	r3, r5
 8010206:	480e      	ldr	r0, [pc, #56]	; (8010240 <lv_task_create_basic+0xb0>)
 8010208:	f7fe fee2 	bl	800efd0 <lv_debug_log_error>
 801020c:	e7fe      	b.n	801020c <lv_task_create_basic+0x7c>
    task_list_changed = true;
 801020e:	2501      	movs	r5, #1
 8010210:	4b0c      	ldr	r3, [pc, #48]	; (8010244 <lv_task_create_basic+0xb4>)
    new_task->prio    = DEF_PRIO;
 8010212:	2203      	movs	r2, #3
    task_list_changed = true;
 8010214:	701d      	strb	r5, [r3, #0]
    new_task->period  = DEF_PERIOD;
 8010216:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801021a:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 801021c:	7d23      	ldrb	r3, [r4, #20]
    new_task->task_cb = NULL;
 801021e:	2600      	movs	r6, #0
    new_task->prio    = DEF_PRIO;
 8010220:	f362 0302 	bfi	r3, r2, #0, #3
 8010224:	7523      	strb	r3, [r4, #20]
    new_task->repeat_count = -1;
 8010226:	f04f 33ff 	mov.w	r3, #4294967295
    new_task->task_cb = NULL;
 801022a:	60a6      	str	r6, [r4, #8]
    new_task->repeat_count = -1;
 801022c:	6123      	str	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
 801022e:	f7fe fa3d 	bl	800e6ac <lv_tick_get>
    task_created = true;
 8010232:	4b05      	ldr	r3, [pc, #20]	; (8010248 <lv_task_create_basic+0xb8>)
    new_task->last_run = lv_tick_get();
 8010234:	6060      	str	r0, [r4, #4]
    new_task->user_data = NULL;
 8010236:	60e6      	str	r6, [r4, #12]
    task_created = true;
 8010238:	701d      	strb	r5, [r3, #0]
    return new_task;
 801023a:	e7d2      	b.n	80101e2 <lv_task_create_basic+0x52>
 801023c:	20003320 	.word	0x20003320
 8010240:	08015994 	.word	0x08015994
 8010244:	2000258f 	.word	0x2000258f
 8010248:	2000258d 	.word	0x2000258d

0801024c <lv_task_del>:
{
 801024c:	b538      	push	{r3, r4, r5, lr}
 801024e:	4604      	mov	r4, r0
    task_list_changed = true;
 8010250:	2501      	movs	r5, #1
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
 8010252:	4601      	mov	r1, r0
 8010254:	4807      	ldr	r0, [pc, #28]	; (8010274 <lv_task_del+0x28>)
 8010256:	f7ff f816 	bl	800f286 <_lv_ll_remove>
    task_list_changed = true;
 801025a:	4b07      	ldr	r3, [pc, #28]	; (8010278 <lv_task_del+0x2c>)
    lv_mem_free(task);
 801025c:	4620      	mov	r0, r4
    task_list_changed = true;
 801025e:	701d      	strb	r5, [r3, #0]
    lv_mem_free(task);
 8010260:	f7ff f994 	bl	800f58c <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 8010264:	4b05      	ldr	r3, [pc, #20]	; (801027c <lv_task_del+0x30>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	42a3      	cmp	r3, r4
 801026a:	bf04      	itt	eq
 801026c:	4b04      	ldreq	r3, [pc, #16]	; (8010280 <lv_task_del+0x34>)
 801026e:	701d      	strbeq	r5, [r3, #0]
}
 8010270:	bd38      	pop	{r3, r4, r5, pc}
 8010272:	bf00      	nop
 8010274:	20003320 	.word	0x20003320
 8010278:	2000258f 	.word	0x2000258f
 801027c:	200033f0 	.word	0x200033f0
 8010280:	2000258e 	.word	0x2000258e

08010284 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 8010284:	b538      	push	{r3, r4, r5, lr}
 8010286:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 8010288:	6840      	ldr	r0, [r0, #4]
 801028a:	f7fe fa1d 	bl	800e6c8 <lv_tick_elaps>
    if(elp >= task->period)
 801028e:	6823      	ldr	r3, [r4, #0]
 8010290:	4298      	cmp	r0, r3
 8010292:	d31c      	bcc.n	80102ce <lv_task_exec+0x4a>
        task->last_run = lv_tick_get();
 8010294:	f7fe fa0a 	bl	800e6ac <lv_tick_get>
        task_deleted   = false;
 8010298:	2200      	movs	r2, #0
 801029a:	4d0e      	ldr	r5, [pc, #56]	; (80102d4 <lv_task_exec+0x50>)
        task_created   = false;
 801029c:	490e      	ldr	r1, [pc, #56]	; (80102d8 <lv_task_exec+0x54>)
        task_deleted   = false;
 801029e:	702a      	strb	r2, [r5, #0]
        task_created   = false;
 80102a0:	700a      	strb	r2, [r1, #0]
        if(task->task_cb) task->task_cb(task);
 80102a2:	68a2      	ldr	r2, [r4, #8]
        task->last_run = lv_tick_get();
 80102a4:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
 80102a6:	b10a      	cbz	r2, 80102ac <lv_task_exec+0x28>
 80102a8:	4620      	mov	r0, r4
 80102aa:	4790      	blx	r2
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 80102ac:	782b      	ldrb	r3, [r5, #0]
 80102ae:	b10b      	cbz	r3, 80102b4 <lv_task_exec+0x30>
                lv_task_del(task);
 80102b0:	2001      	movs	r0, #1
}
 80102b2:	bd38      	pop	{r3, r4, r5, pc}
            if(task->repeat_count > 0) {
 80102b4:	6923      	ldr	r3, [r4, #16]
 80102b6:	2b00      	cmp	r3, #0
                task->repeat_count--;
 80102b8:	bfc4      	itt	gt
 80102ba:	f103 33ff 	addgt.w	r3, r3, #4294967295
 80102be:	6123      	strgt	r3, [r4, #16]
            if(task->repeat_count == 0) {
 80102c0:	6923      	ldr	r3, [r4, #16]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d1f4      	bne.n	80102b0 <lv_task_exec+0x2c>
                lv_task_del(task);
 80102c6:	4620      	mov	r0, r4
 80102c8:	f7ff ffc0 	bl	801024c <lv_task_del>
 80102cc:	e7f0      	b.n	80102b0 <lv_task_exec+0x2c>
    bool exec = false;
 80102ce:	2000      	movs	r0, #0
 80102d0:	e7ef      	b.n	80102b2 <lv_task_exec+0x2e>
 80102d2:	bf00      	nop
 80102d4:	2000258e 	.word	0x2000258e
 80102d8:	2000258d 	.word	0x2000258d

080102dc <lv_task_handler>:
    if(already_running) return 1;
 80102dc:	4b53      	ldr	r3, [pc, #332]	; (801042c <lv_task_handler+0x150>)
{
 80102de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return 1;
 80102e2:	781c      	ldrb	r4, [r3, #0]
 80102e4:	2001      	movs	r0, #1
 80102e6:	b924      	cbnz	r4, 80102f2 <lv_task_handler+0x16>
    if(lv_task_run == false) {
 80102e8:	4a51      	ldr	r2, [pc, #324]	; (8010430 <lv_task_handler+0x154>)
    already_running = true;
 80102ea:	7018      	strb	r0, [r3, #0]
    if(lv_task_run == false) {
 80102ec:	7812      	ldrb	r2, [r2, #0]
 80102ee:	b91a      	cbnz	r2, 80102f8 <lv_task_handler+0x1c>
        already_running = false; /*Release mutex*/
 80102f0:	701a      	strb	r2, [r3, #0]
}
 80102f2:	b003      	add	sp, #12
 80102f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
 80102f8:	f7fe f9d8 	bl	800e6ac <lv_tick_get>
        task_deleted             = false;
 80102fc:	46a2      	mov	sl, r4
    handler_start = lv_tick_get();
 80102fe:	4b4d      	ldr	r3, [pc, #308]	; (8010434 <lv_task_handler+0x158>)
        task_deleted             = false;
 8010300:	4f4d      	ldr	r7, [pc, #308]	; (8010438 <lv_task_handler+0x15c>)
    handler_start = lv_tick_get();
 8010302:	6018      	str	r0, [r3, #0]
 8010304:	9301      	str	r3, [sp, #4]
        task_created             = false;
 8010306:	4d4d      	ldr	r5, [pc, #308]	; (801043c <lv_task_handler+0x160>)
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8010308:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8010454 <lv_task_handler+0x178>
 801030c:	484c      	ldr	r0, [pc, #304]	; (8010440 <lv_task_handler+0x164>)
        task_deleted             = false;
 801030e:	f887 a000 	strb.w	sl, [r7]
        task_created             = false;
 8010312:	f885 a000 	strb.w	sl, [r5]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8010316:	f7fe ff79 	bl	800f20c <_lv_ll_get_head>
 801031a:	4646      	mov	r6, r8
            if(task_list_changed) {
 801031c:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8010458 <lv_task_handler+0x17c>
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8010320:	f8c8 0000 	str.w	r0, [r8]
        while(LV_GC_ROOT(_lv_task_act)) {
 8010324:	6831      	ldr	r1, [r6, #0]
 8010326:	2900      	cmp	r1, #0
 8010328:	d133      	bne.n	8010392 <lv_task_handler+0xb6>
    busy_time += lv_tick_elaps(handler_start);
 801032a:	9b01      	ldr	r3, [sp, #4]
 801032c:	4c45      	ldr	r4, [pc, #276]	; (8010444 <lv_task_handler+0x168>)
 801032e:	6818      	ldr	r0, [r3, #0]
 8010330:	f7fe f9ca 	bl	800e6c8 <lv_tick_elaps>
 8010334:	6823      	ldr	r3, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8010336:	4d44      	ldr	r5, [pc, #272]	; (8010448 <lv_task_handler+0x16c>)
    busy_time += lv_tick_elaps(handler_start);
 8010338:	4418      	add	r0, r3
 801033a:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 801033c:	6828      	ldr	r0, [r5, #0]
 801033e:	f7fe f9c3 	bl	800e6c8 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8010342:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8010346:	d315      	bcc.n	8010374 <lv_task_handler+0x98>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 8010348:	2364      	movs	r3, #100	; 0x64
 801034a:	6822      	ldr	r2, [r4, #0]
 801034c:	4353      	muls	r3, r2
 801034e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010352:	fbb3 f3f2 	udiv	r3, r3, r2
 8010356:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 8010358:	2b64      	cmp	r3, #100	; 0x64
 801035a:	bf8c      	ite	hi
 801035c:	2300      	movhi	r3, #0
 801035e:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
 8010362:	4a3a      	ldr	r2, [pc, #232]	; (801044c <lv_task_handler+0x170>)
 8010364:	bf98      	it	ls
 8010366:	b2db      	uxtbls	r3, r3
 8010368:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 801036a:	2300      	movs	r3, #0
 801036c:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 801036e:	f7fe f99d 	bl	800e6ac <lv_tick_get>
 8010372:	6028      	str	r0, [r5, #0]
    time_till_next = LV_NO_TASK_READY;
 8010374:	f04f 33ff 	mov.w	r3, #4294967295
 8010378:	4d35      	ldr	r5, [pc, #212]	; (8010450 <lv_task_handler+0x174>)
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801037a:	4831      	ldr	r0, [pc, #196]	; (8010440 <lv_task_handler+0x164>)
    time_till_next = LV_NO_TASK_READY;
 801037c:	602b      	str	r3, [r5, #0]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801037e:	f7fe ff45 	bl	800f20c <_lv_ll_get_head>
 8010382:	4604      	mov	r4, r0
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 8010384:	4e2e      	ldr	r6, [pc, #184]	; (8010440 <lv_task_handler+0x164>)
    while(next) {
 8010386:	2c00      	cmp	r4, #0
 8010388:	d13b      	bne.n	8010402 <lv_task_handler+0x126>
    already_running = false; /*Release the mutex*/
 801038a:	4b28      	ldr	r3, [pc, #160]	; (801042c <lv_task_handler+0x150>)
    return time_till_next;
 801038c:	6828      	ldr	r0, [r5, #0]
    already_running = false; /*Release the mutex*/
 801038e:	701c      	strb	r4, [r3, #0]
    return time_till_next;
 8010390:	e7af      	b.n	80102f2 <lv_task_handler+0x16>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8010392:	482b      	ldr	r0, [pc, #172]	; (8010440 <lv_task_handler+0x164>)
 8010394:	f7fe ff40 	bl	800f218 <_lv_ll_get_next>
 8010398:	4683      	mov	fp, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 801039a:	6830      	ldr	r0, [r6, #0]
 801039c:	7d03      	ldrb	r3, [r0, #20]
 801039e:	f013 0207 	ands.w	r2, r3, #7
 80103a2:	d0c2      	beq.n	801032a <lv_task_handler+0x4e>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 80103a4:	42a0      	cmp	r0, r4
 80103a6:	d103      	bne.n	80103b0 <lv_task_handler+0xd4>
                LV_GC_ROOT(_lv_task_act) = next;
 80103a8:	f8c6 b000 	str.w	fp, [r6]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 80103ac:	2400      	movs	r4, #0
                continue; /*Load the next task*/
 80103ae:	e7b9      	b.n	8010324 <lv_task_handler+0x48>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 80103b0:	2a05      	cmp	r2, #5
 80103b2:	d10e      	bne.n	80103d2 <lv_task_handler+0xf6>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 80103b4:	f7ff ff66 	bl	8010284 <lv_task_exec>
            if(task_created || task_deleted) {
 80103b8:	782b      	ldrb	r3, [r5, #0]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1b5      	bne.n	801032a <lv_task_handler+0x4e>
 80103be:	783b      	ldrb	r3, [r7, #0]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d1b2      	bne.n	801032a <lv_task_handler+0x4e>
            if(task_list_changed) {
 80103c4:	f899 2000 	ldrb.w	r2, [r9]
 80103c8:	b1c2      	cbz	r2, 80103fc <lv_task_handler+0x120>
                task_list_changed = false;
 80103ca:	f889 3000 	strb.w	r3, [r9]
                task_interrupter = NULL;
 80103ce:	461c      	mov	r4, r3
 80103d0:	e799      	b.n	8010306 <lv_task_handler+0x2a>
            else if(task_interrupter) {
 80103d2:	b134      	cbz	r4, 80103e2 <lv_task_handler+0x106>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 80103d4:	7d22      	ldrb	r2, [r4, #20]
 80103d6:	f003 0307 	and.w	r3, r3, #7
 80103da:	f002 0207 	and.w	r2, r2, #7
 80103de:	4293      	cmp	r3, r2
 80103e0:	d9ea      	bls.n	80103b8 <lv_task_handler+0xdc>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 80103e2:	f7ff ff4f 	bl	8010284 <lv_task_exec>
 80103e6:	2800      	cmp	r0, #0
 80103e8:	d0e6      	beq.n	80103b8 <lv_task_handler+0xdc>
                    if(!task_created && !task_deleted) {
 80103ea:	782b      	ldrb	r3, [r5, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d19c      	bne.n	801032a <lv_task_handler+0x4e>
 80103f0:	783b      	ldrb	r3, [r7, #0]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d1e3      	bne.n	80103be <lv_task_handler+0xe2>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 80103f6:	f8d8 4000 	ldr.w	r4, [r8]
 80103fa:	e784      	b.n	8010306 <lv_task_handler+0x2a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 80103fc:	f8c6 b000 	str.w	fp, [r6]
 8010400:	e790      	b.n	8010324 <lv_task_handler+0x48>
        if(next->prio != LV_TASK_PRIO_OFF) {
 8010402:	7d23      	ldrb	r3, [r4, #20]
 8010404:	075b      	lsls	r3, r3, #29
 8010406:	d00b      	beq.n	8010420 <lv_task_handler+0x144>
    uint32_t elp = lv_tick_elaps(task->last_run);
 8010408:	6860      	ldr	r0, [r4, #4]
 801040a:	f7fe f95d 	bl	800e6c8 <lv_tick_elaps>
    if(elp >= task->period)
 801040e:	6823      	ldr	r3, [r4, #0]
 8010410:	4298      	cmp	r0, r3
        return 0;
 8010412:	bf2c      	ite	cs
 8010414:	2000      	movcs	r0, #0
    return task->period - elp;
 8010416:	1a18      	subcc	r0, r3, r0
            if(delay < time_till_next)
 8010418:	682b      	ldr	r3, [r5, #0]
 801041a:	4283      	cmp	r3, r0
                time_till_next = delay;
 801041c:	bf88      	it	hi
 801041e:	6028      	strhi	r0, [r5, #0]
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 8010420:	4621      	mov	r1, r4
 8010422:	4630      	mov	r0, r6
 8010424:	f7fe fef8 	bl	800f218 <_lv_ll_get_next>
 8010428:	4604      	mov	r4, r0
 801042a:	e7ac      	b.n	8010386 <lv_task_handler+0xaa>
 801042c:	20002578 	.word	0x20002578
 8010430:	2000258c 	.word	0x2000258c
 8010434:	20002580 	.word	0x20002580
 8010438:	2000258e 	.word	0x2000258e
 801043c:	2000258d 	.word	0x2000258d
 8010440:	20003320 	.word	0x20003320
 8010444:	2000257c 	.word	0x2000257c
 8010448:	20002588 	.word	0x20002588
 801044c:	20002584 	.word	0x20002584
 8010450:	20002590 	.word	0x20002590
 8010454:	200033f0 	.word	0x200033f0
 8010458:	2000258f 	.word	0x2000258f

0801045c <lv_task_set_prio>:
    if(task->prio == prio) return;
 801045c:	7d03      	ldrb	r3, [r0, #20]
{
 801045e:	b570      	push	{r4, r5, r6, lr}
    if(task->prio == prio) return;
 8010460:	f003 0307 	and.w	r3, r3, #7
 8010464:	428b      	cmp	r3, r1
{
 8010466:	4604      	mov	r4, r0
 8010468:	460d      	mov	r5, r1
    if(task->prio == prio) return;
 801046a:	d017      	beq.n	801049c <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 801046c:	480f      	ldr	r0, [pc, #60]	; (80104ac <lv_task_set_prio+0x50>)
 801046e:	f7fe fecd 	bl	800f20c <_lv_ll_get_head>
 8010472:	4602      	mov	r2, r0
 8010474:	4e0d      	ldr	r6, [pc, #52]	; (80104ac <lv_task_set_prio+0x50>)
 8010476:	b132      	cbz	r2, 8010486 <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 8010478:	7d13      	ldrb	r3, [r2, #20]
 801047a:	f003 0307 	and.w	r3, r3, #7
 801047e:	429d      	cmp	r5, r3
 8010480:	db0d      	blt.n	801049e <lv_task_set_prio+0x42>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 8010482:	42a2      	cmp	r2, r4
 8010484:	d003      	beq.n	801048e <lv_task_set_prio+0x32>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 8010486:	4621      	mov	r1, r4
 8010488:	4808      	ldr	r0, [pc, #32]	; (80104ac <lv_task_set_prio+0x50>)
 801048a:	f7fe ff62 	bl	800f352 <_lv_ll_move_before>
    task_list_changed = true;
 801048e:	2201      	movs	r2, #1
 8010490:	4b07      	ldr	r3, [pc, #28]	; (80104b0 <lv_task_set_prio+0x54>)
 8010492:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
 8010494:	7d23      	ldrb	r3, [r4, #20]
 8010496:	f365 0302 	bfi	r3, r5, #0, #3
 801049a:	7523      	strb	r3, [r4, #20]
}
 801049c:	bd70      	pop	{r4, r5, r6, pc}
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 801049e:	4611      	mov	r1, r2
 80104a0:	4630      	mov	r0, r6
 80104a2:	f7fe feb9 	bl	800f218 <_lv_ll_get_next>
 80104a6:	4602      	mov	r2, r0
 80104a8:	e7e5      	b.n	8010476 <lv_task_set_prio+0x1a>
 80104aa:	bf00      	nop
 80104ac:	20003320 	.word	0x20003320
 80104b0:	2000258f 	.word	0x2000258f

080104b4 <lv_task_create>:
{
 80104b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b8:	461d      	mov	r5, r3
 80104ba:	460f      	mov	r7, r1
 80104bc:	4616      	mov	r6, r2
 80104be:	4680      	mov	r8, r0
    lv_task_t * new_task = lv_task_create_basic();
 80104c0:	f7ff fe66 	bl	8010190 <lv_task_create_basic>
 80104c4:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_task);
 80104c6:	f7fe fd7f 	bl	800efc8 <lv_debug_check_null>
 80104ca:	4603      	mov	r3, r0
 80104cc:	b920      	cbnz	r0, 80104d8 <lv_task_create+0x24>
 80104ce:	4622      	mov	r2, r4
 80104d0:	4807      	ldr	r0, [pc, #28]	; (80104f0 <lv_task_create+0x3c>)
 80104d2:	f7fe fd7d 	bl	800efd0 <lv_debug_log_error>
 80104d6:	e7fe      	b.n	80104d6 <lv_task_create+0x22>
    if(new_task == NULL) return NULL;
 80104d8:	b13c      	cbz	r4, 80104ea <lv_task_create+0x36>
    task->task_cb = task_cb;
 80104da:	f8c4 8008 	str.w	r8, [r4, #8]
    task->period = period;
 80104de:	6027      	str	r7, [r4, #0]
    lv_task_set_prio(new_task, prio);
 80104e0:	4631      	mov	r1, r6
 80104e2:	4620      	mov	r0, r4
 80104e4:	f7ff ffba 	bl	801045c <lv_task_set_prio>
    new_task->user_data = user_data;
 80104e8:	60e5      	str	r5, [r4, #12]
}
 80104ea:	4620      	mov	r0, r4
 80104ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104f0:	08015994 	.word	0x08015994

080104f4 <lv_task_ready>:
{
 80104f4:	b510      	push	{r4, lr}
 80104f6:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 80104f8:	f7fe f8d8 	bl	800e6ac <lv_tick_get>
 80104fc:	6823      	ldr	r3, [r4, #0]
 80104fe:	43db      	mvns	r3, r3
 8010500:	4403      	add	r3, r0
 8010502:	6063      	str	r3, [r4, #4]
}
 8010504:	bd10      	pop	{r4, pc}
	...

08010508 <lv_task_get_idle>:
}
 8010508:	4b01      	ldr	r3, [pc, #4]	; (8010510 <lv_task_get_idle+0x8>)
 801050a:	7818      	ldrb	r0, [r3, #0]
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop
 8010510:	20002584 	.word	0x20002584

08010514 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 8010514:	7803      	ldrb	r3, [r0, #0]
 8010516:	061a      	lsls	r2, r3, #24
 8010518:	d50e      	bpl.n	8010538 <lv_txt_utf8_size+0x24>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
 801051a:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 801051e:	2ac0      	cmp	r2, #192	; 0xc0
 8010520:	d00c      	beq.n	801053c <lv_txt_utf8_size+0x28>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
 8010522:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010526:	2ae0      	cmp	r2, #224	; 0xe0
 8010528:	d00a      	beq.n	8010540 <lv_txt_utf8_size+0x2c>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
 801052a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801052e:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
 8010530:	bf0c      	ite	eq
 8010532:	2004      	moveq	r0, #4
 8010534:	2000      	movne	r0, #0
 8010536:	4770      	bx	lr
        return 1;
 8010538:	2001      	movs	r0, #1
 801053a:	4770      	bx	lr
        return 2;
 801053c:	2002      	movs	r0, #2
 801053e:	4770      	bx	lr
        return 3;
 8010540:	2003      	movs	r0, #3
}
 8010542:	4770      	bx	lr

08010544 <lv_txt_utf8_next>:
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8010544:	2300      	movs	r3, #0
{
 8010546:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
 8010548:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 801054a:	b901      	cbnz	r1, 801054e <lv_txt_utf8_next+0xa>
 801054c:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 801054e:	680a      	ldr	r2, [r1, #0]
 8010550:	5c83      	ldrb	r3, [r0, r2]
 8010552:	1c54      	adds	r4, r2, #1
 8010554:	061d      	lsls	r5, r3, #24
 8010556:	d403      	bmi.n	8010560 <lv_txt_utf8_next+0x1c>
        result = txt[*i];
 8010558:	4618      	mov	r0, r3
        (*i)++;
 801055a:	600c      	str	r4, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 801055c:	b002      	add	sp, #8
 801055e:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 8010560:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 8010564:	2dc0      	cmp	r5, #192	; 0xc0
 8010566:	d110      	bne.n	801058a <lv_txt_utf8_next+0x46>
            (*i)++;
 8010568:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801056a:	5d00      	ldrb	r0, [r0, r4]
 801056c:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8010570:	2c80      	cmp	r4, #128	; 0x80
 8010572:	d001      	beq.n	8010578 <lv_txt_utf8_next+0x34>
    uint32_t result = 0;
 8010574:	2000      	movs	r0, #0
 8010576:	e7f1      	b.n	801055c <lv_txt_utf8_next+0x18>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8010578:	019b      	lsls	r3, r3, #6
 801057a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 801057e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8010582:	4418      	add	r0, r3
            (*i)++;
 8010584:	3202      	adds	r2, #2
            (*i)++;
 8010586:	600a      	str	r2, [r1, #0]
 8010588:	e7e8      	b.n	801055c <lv_txt_utf8_next+0x18>
        else if((txt[*i] & 0xF0) == 0xE0) {
 801058a:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 801058e:	2de0      	cmp	r5, #224	; 0xe0
 8010590:	d117      	bne.n	80105c2 <lv_txt_utf8_next+0x7e>
            (*i)++;
 8010592:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8010594:	5d04      	ldrb	r4, [r0, r4]
 8010596:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 801059a:	2d80      	cmp	r5, #128	; 0x80
 801059c:	d1ea      	bne.n	8010574 <lv_txt_utf8_next+0x30>
            (*i)++;
 801059e:	1c95      	adds	r5, r2, #2
 80105a0:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80105a2:	5d45      	ldrb	r5, [r0, r5]
 80105a4:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 80105a8:	2880      	cmp	r0, #128	; 0x80
 80105aa:	d1e3      	bne.n	8010574 <lv_txt_utf8_next+0x30>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80105ac:	0318      	lsls	r0, r3, #12
 80105ae:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
 80105b0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80105b4:	01a3      	lsls	r3, r4, #6
 80105b6:	4428      	add	r0, r5
 80105b8:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
 80105bc:	4418      	add	r0, r3
            (*i)++;
 80105be:	3203      	adds	r2, #3
 80105c0:	e7e1      	b.n	8010586 <lv_txt_utf8_next+0x42>
        else if((txt[*i] & 0xF8) == 0xF0) {
 80105c2:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
 80105c6:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
 80105c8:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 80105ca:	d1d3      	bne.n	8010574 <lv_txt_utf8_next+0x30>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80105cc:	5d04      	ldrb	r4, [r0, r4]
 80105ce:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 80105d2:	2d80      	cmp	r5, #128	; 0x80
 80105d4:	d1ce      	bne.n	8010574 <lv_txt_utf8_next+0x30>
            (*i)++;
 80105d6:	1c95      	adds	r5, r2, #2
 80105d8:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80105da:	5d45      	ldrb	r5, [r0, r5]
 80105dc:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 80105e0:	2e80      	cmp	r6, #128	; 0x80
 80105e2:	d1c7      	bne.n	8010574 <lv_txt_utf8_next+0x30>
            (*i)++;
 80105e4:	1cd6      	adds	r6, r2, #3
 80105e6:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80105e8:	5d86      	ldrb	r6, [r0, r6]
 80105ea:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 80105ee:	2880      	cmp	r0, #128	; 0x80
 80105f0:	d1c0      	bne.n	8010574 <lv_txt_utf8_next+0x30>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 80105f2:	049b      	lsls	r3, r3, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80105f4:	0320      	lsls	r0, r4, #12
 80105f6:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 80105fa:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80105fe:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8010600:	01a8      	lsls	r0, r5, #6
 8010602:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 8010606:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 801060a:	4430      	add	r0, r6
 801060c:	4418      	add	r0, r3
            (*i)++;
 801060e:	3204      	adds	r2, #4
 8010610:	e7b9      	b.n	8010586 <lv_txt_utf8_next+0x42>
	...

08010614 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8010614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 8010618:	2400      	movs	r4, #0
{
 801061a:	4607      	mov	r7, r0
 801061c:	460e      	mov	r6, r1
    for(i = 0; i < utf8_id; i++) {
 801061e:	4625      	mov	r5, r4
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8010620:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8010644 <lv_txt_utf8_get_byte_id+0x30>
    for(i = 0; i < utf8_id; i++) {
 8010624:	42b5      	cmp	r5, r6
 8010626:	d102      	bne.n	801062e <lv_txt_utf8_get_byte_id+0x1a>
        byte_cnt += c_size > 0 ? c_size : 1;
    }

    return byte_cnt;
}
 8010628:	4620      	mov	r0, r4
 801062a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 801062e:	1938      	adds	r0, r7, r4
 8010630:	f8d8 3000 	ldr.w	r3, [r8]
 8010634:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
 8010636:	2800      	cmp	r0, #0
 8010638:	bf08      	it	eq
 801063a:	2001      	moveq	r0, #1
    for(i = 0; i < utf8_id; i++) {
 801063c:	3501      	adds	r5, #1
        byte_cnt += c_size > 0 ? c_size : 1;
 801063e:	4404      	add	r4, r0
 8010640:	e7f0      	b.n	8010624 <lv_txt_utf8_get_byte_id+0x10>
 8010642:	bf00      	nop
 8010644:	2000006c 	.word	0x2000006c

08010648 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8010648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t i        = 0;
 801064c:	2400      	movs	r4, #0
{
 801064e:	4607      	mov	r7, r0
 8010650:	460e      	mov	r6, r1
    uint32_t i        = 0;
 8010652:	ad02      	add	r5, sp, #8
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8010654:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8010678 <lv_txt_utf8_get_char_id+0x30>
    uint32_t i        = 0;
 8010658:	f845 4d04 	str.w	r4, [r5, #-4]!
    while(i < byte_id) {
 801065c:	9b01      	ldr	r3, [sp, #4]
 801065e:	42b3      	cmp	r3, r6
 8010660:	d303      	bcc.n	801066a <lv_txt_utf8_get_char_id+0x22>
        char_cnt++;
    }

    return char_cnt;
}
 8010662:	4620      	mov	r0, r4
 8010664:	b002      	add	sp, #8
 8010666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 801066a:	f8d8 3000 	ldr.w	r3, [r8]
 801066e:	4629      	mov	r1, r5
 8010670:	4638      	mov	r0, r7
 8010672:	4798      	blx	r3
        char_cnt++;
 8010674:	3401      	adds	r4, #1
 8010676:	e7f1      	b.n	801065c <lv_txt_utf8_get_char_id+0x14>
 8010678:	20000064 	.word	0x20000064

0801067c <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 801067c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 801067e:	2400      	movs	r4, #0
{
 8010680:	4606      	mov	r6, r0
    uint32_t i   = 0;
 8010682:	ad02      	add	r5, sp, #8

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
 8010684:	4f07      	ldr	r7, [pc, #28]	; (80106a4 <lv_txt_utf8_get_length+0x28>)
    uint32_t i   = 0;
 8010686:	f845 4d04 	str.w	r4, [r5, #-4]!
    while(txt[i] != '\0') {
 801068a:	9b01      	ldr	r3, [sp, #4]
 801068c:	5cf3      	ldrb	r3, [r6, r3]
 801068e:	b913      	cbnz	r3, 8010696 <lv_txt_utf8_get_length+0x1a>
        len++;
    }

    return len;
}
 8010690:	4620      	mov	r0, r4
 8010692:	b003      	add	sp, #12
 8010694:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i);
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	4629      	mov	r1, r5
 801069a:	4630      	mov	r0, r6
 801069c:	4798      	blx	r3
        len++;
 801069e:	3401      	adds	r4, #1
 80106a0:	e7f3      	b.n	801068a <lv_txt_utf8_get_length+0xe>
 80106a2:	bf00      	nop
 80106a4:	20000064 	.word	0x20000064

080106a8 <lv_txt_utf8_prev>:
{
 80106a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106aa:	4606      	mov	r6, r0
 80106ac:	460d      	mov	r5, r1
    (*i)--;
 80106ae:	2404      	movs	r4, #4
 80106b0:	680b      	ldr	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 80106b2:	4f0d      	ldr	r7, [pc, #52]	; (80106e8 <lv_txt_utf8_prev+0x40>)
    (*i)--;
 80106b4:	3b01      	subs	r3, #1
 80106b6:	600b      	str	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 80106b8:	6828      	ldr	r0, [r5, #0]
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	4430      	add	r0, r6
 80106be:	4798      	blx	r3
 80106c0:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 80106c2:	b948      	cbnz	r0, 80106d8 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 80106c4:	b12b      	cbz	r3, 80106d2 <lv_txt_utf8_prev+0x2a>
 80106c6:	3c01      	subs	r4, #1
                (*i)--;
 80106c8:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 80106ca:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
                (*i)--;
 80106ce:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 80106d0:	d1f2      	bne.n	80106b8 <lv_txt_utf8_prev+0x10>
 80106d2:	2000      	movs	r0, #0
}
 80106d4:	b003      	add	sp, #12
 80106d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 80106d8:	a902      	add	r1, sp, #8
 80106da:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 80106de:	4b03      	ldr	r3, [pc, #12]	; (80106ec <lv_txt_utf8_prev+0x44>)
 80106e0:	4630      	mov	r0, r6
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	4798      	blx	r3
 80106e6:	e7f5      	b.n	80106d4 <lv_txt_utf8_prev+0x2c>
 80106e8:	2000006c 	.word	0x2000006c
 80106ec:	20000064 	.word	0x20000064

080106f0 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80106f0:	2923      	cmp	r1, #35	; 0x23
{
 80106f2:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80106f4:	d118      	bne.n	8010728 <_lv_txt_is_cmd+0x38>
 80106f6:	7803      	ldrb	r3, [r0, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 80106f8:	b91b      	cbnz	r3, 8010702 <_lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_PAR;
 80106fa:	2301      	movs	r3, #1
 80106fc:	7003      	strb	r3, [r0, #0]
            ret    = true;
 80106fe:	2001      	movs	r0, #1
 8010700:	e004      	b.n	801070c <_lv_txt_is_cmd+0x1c>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 8010702:	2b01      	cmp	r3, #1
 8010704:	f04f 0000 	mov.w	r0, #0
 8010708:	d10a      	bne.n	8010720 <_lv_txt_is_cmd+0x30>
            *state = LV_TXT_CMD_STATE_WAIT;
 801070a:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 801070c:	7813      	ldrb	r3, [r2, #0]
 801070e:	2b01      	cmp	r3, #1
 8010710:	d105      	bne.n	801071e <_lv_txt_is_cmd+0x2e>
        if(c == ' ') {
 8010712:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8010714:	bf08      	it	eq
 8010716:	2102      	moveq	r1, #2
        ret = true;
 8010718:	4618      	mov	r0, r3
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 801071a:	bf08      	it	eq
 801071c:	7011      	strbeq	r1, [r2, #0]
}
 801071e:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_IN) {
 8010720:	2b02      	cmp	r3, #2
 8010722:	d1f3      	bne.n	801070c <_lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_WAIT;
 8010724:	7010      	strb	r0, [r2, #0]
 8010726:	e7ea      	b.n	80106fe <_lv_txt_is_cmd+0xe>
    bool ret = false;
 8010728:	2000      	movs	r0, #0
 801072a:	e7ef      	b.n	801070c <_lv_txt_is_cmd+0x1c>

0801072c <_lv_txt_get_width>:
{
 801072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010730:	4688      	mov	r8, r1
 8010732:	b085      	sub	sp, #20
 8010734:	4617      	mov	r7, r2
 8010736:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
 8010738:	4605      	mov	r5, r0
 801073a:	2400      	movs	r4, #0
 801073c:	2800      	cmp	r0, #0
 801073e:	d03e      	beq.n	80107be <_lv_txt_get_width+0x92>
    if(font == NULL) return 0;
 8010740:	2a00      	cmp	r2, #0
 8010742:	d03e      	beq.n	80107c2 <_lv_txt_get_width+0x96>
    uint32_t i                   = 0;
 8010744:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8010746:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
 801074a:	bb89      	cbnz	r1, 80107b0 <_lv_txt_get_width+0x84>
    lv_coord_t width             = 0;
 801074c:	460c      	mov	r4, r1
}
 801074e:	4620      	mov	r0, r4
 8010750:	b005      	add	sp, #20
 8010752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 8010756:	f8da 3000 	ldr.w	r3, [sl]
 801075a:	a903      	add	r1, sp, #12
 801075c:	4628      	mov	r0, r5
 801075e:	4798      	blx	r3
 8010760:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 8010762:	9803      	ldr	r0, [sp, #12]
 8010764:	f8da 3000 	ldr.w	r3, [sl]
 8010768:	2100      	movs	r1, #0
 801076a:	4428      	add	r0, r5
 801076c:	4798      	blx	r3
 801076e:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8010770:	f1b9 0f00 	cmp.w	r9, #0
 8010774:	d10e      	bne.n	8010794 <_lv_txt_get_width+0x68>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8010776:	4659      	mov	r1, fp
 8010778:	4638      	mov	r0, r7
 801077a:	f7fd fab8 	bl	800dcee <lv_font_get_glyph_width>
            if(char_width > 0) {
 801077e:	b203      	sxth	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	dc11      	bgt.n	80107a8 <_lv_txt_get_width+0x7c>
        while(i < length) {
 8010784:	9b03      	ldr	r3, [sp, #12]
 8010786:	4598      	cmp	r8, r3
 8010788:	d8e5      	bhi.n	8010756 <_lv_txt_get_width+0x2a>
        if(width > 0) {
 801078a:	2c00      	cmp	r4, #0
 801078c:	dddf      	ble.n	801074e <_lv_txt_get_width+0x22>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 801078e:	1ba4      	subs	r4, r4, r6
 8010790:	b224      	sxth	r4, r4
 8010792:	e7dc      	b.n	801074e <_lv_txt_get_width+0x22>
 8010794:	9001      	str	r0, [sp, #4]
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8010796:	4659      	mov	r1, fp
 8010798:	f10d 000b 	add.w	r0, sp, #11
 801079c:	f7ff ffa8 	bl	80106f0 <_lv_txt_is_cmd>
 80107a0:	9a01      	ldr	r2, [sp, #4]
 80107a2:	2800      	cmp	r0, #0
 80107a4:	d0e7      	beq.n	8010776 <_lv_txt_get_width+0x4a>
 80107a6:	e7ed      	b.n	8010784 <_lv_txt_get_width+0x58>
                width += letter_space;
 80107a8:	4434      	add	r4, r6
 80107aa:	4404      	add	r4, r0
 80107ac:	b224      	sxth	r4, r4
 80107ae:	e7e9      	b.n	8010784 <_lv_txt_get_width+0x58>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80107b0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 80107b4:	f8df a010 	ldr.w	sl, [pc, #16]	; 80107c8 <_lv_txt_get_width+0x9c>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80107b8:	f009 0901 	and.w	r9, r9, #1
 80107bc:	e7e2      	b.n	8010784 <_lv_txt_get_width+0x58>
    if(txt == NULL) return 0;
 80107be:	4604      	mov	r4, r0
 80107c0:	e7c5      	b.n	801074e <_lv_txt_get_width+0x22>
 80107c2:	4614      	mov	r4, r2
 80107c4:	e7c3      	b.n	801074e <_lv_txt_get_width+0x22>
 80107c6:	bf00      	nop
 80107c8:	20000064 	.word	0x20000064

080107cc <_lv_txt_get_next_line>:
{
 80107cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d0:	b091      	sub	sp, #68	; 0x44
 80107d2:	469a      	mov	sl, r3
 80107d4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80107d8:	9104      	str	r1, [sp, #16]
 80107da:	9206      	str	r2, [sp, #24]
 80107dc:	9305      	str	r3, [sp, #20]
    if(txt == NULL) return 0;
 80107de:	4607      	mov	r7, r0
 80107e0:	b190      	cbz	r0, 8010808 <_lv_txt_get_next_line+0x3c>
    if(font == NULL) return 0;
 80107e2:	2900      	cmp	r1, #0
 80107e4:	f000 80d2 	beq.w	801098c <_lv_txt_get_next_line+0x1c0>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
 80107e8:	9b05      	ldr	r3, [sp, #20]
 80107ea:	f013 0312 	ands.w	r3, r3, #18
 80107ee:	d00e      	beq.n	801080e <_lv_txt_get_next_line+0x42>
 80107f0:	4602      	mov	r2, r0
 80107f2:	1bd0      	subs	r0, r2, r7
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 80107f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80107f8:	2b0a      	cmp	r3, #10
 80107fa:	f000 80c9 	beq.w	8010990 <_lv_txt_get_next_line+0x1c4>
 80107fe:	2b0d      	cmp	r3, #13
 8010800:	f000 80c6 	beq.w	8010990 <_lv_txt_get_next_line+0x1c4>
 8010804:	2b00      	cmp	r3, #0
 8010806:	d1f4      	bne.n	80107f2 <_lv_txt_get_next_line+0x26>
}
 8010808:	b011      	add	sp, #68	; 0x44
 801080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801080e:	9a05      	ldr	r2, [sp, #20]
    letter = _lv_txt_encoded_next(txt, &i_next);
 8010810:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010998 <_lv_txt_get_next_line+0x1cc>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8010814:	f012 0202 	ands.w	r2, r2, #2
 8010818:	9207      	str	r2, [sp, #28]
 801081a:	f647 4218 	movw	r2, #31768	; 0x7c18
 801081e:	bf18      	it	ne
 8010820:	4692      	movne	sl, r2
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8010822:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    uint32_t i = 0;                                        /* Iterating index into txt */
 8010826:	930d      	str	r3, [sp, #52]	; 0x34
    while(txt[i] != '\0' && max_width > 0) {
 8010828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801082a:	9301      	str	r3, [sp, #4]
 801082c:	18fb      	adds	r3, r7, r3
 801082e:	9302      	str	r3, [sp, #8]
 8010830:	9b01      	ldr	r3, [sp, #4]
 8010832:	5cfb      	ldrb	r3, [r7, r3]
 8010834:	2b00      	cmp	r3, #0
 8010836:	f000 808d 	beq.w	8010954 <_lv_txt_get_next_line+0x188>
 801083a:	f1ba 0f00 	cmp.w	sl, #0
 801083e:	f340 8089 	ble.w	8010954 <_lv_txt_get_next_line+0x188>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8010842:	f647 4318 	movw	r3, #31768	; 0x7c18
 8010846:	9a07      	ldr	r2, [sp, #28]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 8010848:	2400      	movs	r4, #0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801084a:	2a00      	cmp	r2, #0
 801084c:	bf08      	it	eq
 801084e:	4653      	moveq	r3, sl
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 8010850:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8010854:	9309      	str	r3, [sp, #36]	; 0x24
    letter = _lv_txt_encoded_next(txt, &i_next);
 8010856:	a90e      	add	r1, sp, #56	; 0x38
 8010858:	f8db 3000 	ldr.w	r3, [fp]
 801085c:	9802      	ldr	r0, [sp, #8]
 801085e:	4798      	blx	r3
    i_next_next = i_next;
 8010860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
 8010862:	4681      	mov	r9, r0
    i_next_next = i_next;
 8010864:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
 8010866:	f04f 38ff 	mov.w	r8, #4294967295
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
 801086a:	4625      	mov	r5, r4
    uint32_t letter_next = 0; /* Letter at i_next */
 801086c:	4623      	mov	r3, r4
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 801086e:	4626      	mov	r6, r4
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8010870:	9a05      	ldr	r2, [sp, #20]
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
 8010872:	9403      	str	r4, [sp, #12]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8010874:	f002 0201 	and.w	r2, r2, #1
 8010878:	920a      	str	r2, [sp, #40]	; 0x28
    while(txt[i] != '\0') {
 801087a:	9a02      	ldr	r2, [sp, #8]
 801087c:	5d92      	ldrb	r2, [r2, r6]
 801087e:	b93a      	cbnz	r2, 8010890 <_lv_txt_get_next_line+0xc4>
    if(break_index == NO_BREAK_FOUND) {
 8010880:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010884:	d052      	beq.n	801092c <_lv_txt_get_next_line+0x160>
    if(force) return break_index;
 8010886:	9b01      	ldr	r3, [sp, #4]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d16c      	bne.n	8010966 <_lv_txt_get_next_line+0x19a>
 801088c:	4646      	mov	r6, r8
 801088e:	e055      	b.n	801093c <_lv_txt_get_next_line+0x170>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8010890:	f8db 3000 	ldr.w	r3, [fp]
 8010894:	a90f      	add	r1, sp, #60	; 0x3c
 8010896:	9802      	ldr	r0, [sp, #8]
 8010898:	4798      	blx	r3
        word_len++;
 801089a:	9a03      	ldr	r2, [sp, #12]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 801089c:	4603      	mov	r3, r0
        word_len++;
 801089e:	3201      	adds	r2, #1
 80108a0:	9208      	str	r2, [sp, #32]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 80108a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108a4:	b172      	cbz	r2, 80108c4 <_lv_txt_get_next_line+0xf8>
 80108a6:	900b      	str	r0, [sp, #44]	; 0x2c
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 80108a8:	4649      	mov	r1, r9
 80108aa:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 80108ae:	f7ff ff1f 	bl	80106f0 <_lv_txt_is_cmd>
 80108b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108b4:	b130      	cbz	r0, 80108c4 <_lv_txt_get_next_line+0xf8>
        i_next = i_next_next;
 80108b6:	e9dd 620e 	ldrd	r6, r2, [sp, #56]	; 0x38
 80108ba:	920e      	str	r2, [sp, #56]	; 0x38
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 80108bc:	9a08      	ldr	r2, [sp, #32]
 80108be:	4699      	mov	r9, r3
 80108c0:	9203      	str	r2, [sp, #12]
 80108c2:	e7da      	b.n	801087a <_lv_txt_get_next_line+0xae>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 80108c4:	461a      	mov	r2, r3
 80108c6:	4649      	mov	r1, r9
 80108c8:	9804      	ldr	r0, [sp, #16]
 80108ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80108cc:	f7fd fa0f 	bl	800dcee <lv_font_get_glyph_width>
        cur_w += letter_w;
 80108d0:	4405      	add	r5, r0
        if(letter_w > 0) {
 80108d2:	b200      	sxth	r0, r0
 80108d4:	2800      	cmp	r0, #0
            cur_w += letter_space;
 80108d6:	bfc8      	it	gt
 80108d8:	9a06      	ldrgt	r2, [sp, #24]
        cur_w += letter_w;
 80108da:	b2ad      	uxth	r5, r5
            cur_w += letter_space;
 80108dc:	bfc4      	itt	gt
 80108de:	18ad      	addgt	r5, r5, r2
 80108e0:	b2ad      	uxthgt	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 80108e2:	f1b8 3fff 	cmp.w	r8, #4294967295
        if(letter_w > 0) {
 80108e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108e8:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 80108ea:	d105      	bne.n	80108f8 <_lv_txt_get_next_line+0x12c>
 80108ec:	9a06      	ldr	r2, [sp, #24]
 80108ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108f0:	1aaa      	subs	r2, r5, r2
 80108f2:	428a      	cmp	r2, r1
 80108f4:	bfc8      	it	gt
 80108f6:	46b0      	movgt	r8, r6
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 80108f8:	f1b9 0f0a 	cmp.w	r9, #10
 80108fc:	d010      	beq.n	8010920 <_lv_txt_get_next_line+0x154>
 80108fe:	f1b9 0f0d 	cmp.w	r9, #13
 8010902:	d00d      	beq.n	8010920 <_lv_txt_get_next_line+0x154>
 8010904:	2200      	movs	r2, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8010906:	4823      	ldr	r0, [pc, #140]	; (8010994 <_lv_txt_get_next_line+0x1c8>)
 8010908:	b2d1      	uxtb	r1, r2
 801090a:	5c41      	ldrb	r1, [r0, r1]
 801090c:	b921      	cbnz	r1, 8010918 <_lv_txt_get_next_line+0x14c>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 801090e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010912:	bf08      	it	eq
 8010914:	462c      	moveq	r4, r5
 8010916:	e7ce      	b.n	80108b6 <_lv_txt_get_next_line+0xea>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8010918:	4589      	cmp	r9, r1
 801091a:	f102 0201 	add.w	r2, r2, #1
 801091e:	d1f2      	bne.n	8010906 <_lv_txt_get_next_line+0x13a>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8010920:	2e00      	cmp	r6, #0
 8010922:	d1ad      	bne.n	8010880 <_lv_txt_get_next_line+0xb4>
 8010924:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010928:	d1ad      	bne.n	8010886 <_lv_txt_get_next_line+0xba>
 801092a:	462c      	mov	r4, r5
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 801092c:	9a03      	ldr	r2, [sp, #12]
 801092e:	b122      	cbz	r2, 801093a <_lv_txt_get_next_line+0x16e>
 8010930:	f1b9 0f0d 	cmp.w	r9, #13
 8010934:	d102      	bne.n	801093c <_lv_txt_get_next_line+0x170>
 8010936:	2b0a      	cmp	r3, #10
 8010938:	d100      	bne.n	801093c <_lv_txt_get_next_line+0x170>
 801093a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
        max_width -= word_w;
 801093c:	ebaa 0a04 	sub.w	sl, sl, r4
 8010940:	fa0f fa8a 	sxth.w	sl, sl
 8010944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if(advance == 0) {
 8010946:	b98e      	cbnz	r6, 801096c <_lv_txt_get_next_line+0x1a0>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
 8010948:	b95b      	cbnz	r3, 8010962 <_lv_txt_get_next_line+0x196>
 801094a:	4b13      	ldr	r3, [pc, #76]	; (8010998 <_lv_txt_get_next_line+0x1cc>)
 801094c:	a90d      	add	r1, sp, #52	; 0x34
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	4638      	mov	r0, r7
 8010952:	4798      	blx	r3
    if(i == 0) {
 8010954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010956:	b923      	cbnz	r3, 8010962 <_lv_txt_get_next_line+0x196>
        _lv_txt_encoded_next(txt, &i);
 8010958:	4b0f      	ldr	r3, [pc, #60]	; (8010998 <_lv_txt_get_next_line+0x1cc>)
 801095a:	a90d      	add	r1, sp, #52	; 0x34
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	4638      	mov	r0, r7
 8010960:	4798      	blx	r3
    return i;
 8010962:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010964:	e750      	b.n	8010808 <_lv_txt_get_next_line+0x3c>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
 8010966:	2400      	movs	r4, #0
    return 0;
 8010968:	4626      	mov	r6, r4
 801096a:	e7e7      	b.n	801093c <_lv_txt_get_next_line+0x170>
        i += advance;
 801096c:	441e      	add	r6, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
 801096e:	783b      	ldrb	r3, [r7, #0]
        i += advance;
 8010970:	960d      	str	r6, [sp, #52]	; 0x34
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8010972:	2b0a      	cmp	r3, #10
 8010974:	d0ee      	beq.n	8010954 <_lv_txt_get_next_line+0x188>
 8010976:	2b0d      	cmp	r3, #13
 8010978:	d0ec      	beq.n	8010954 <_lv_txt_get_next_line+0x188>
        if(txt[i] == '\n' || txt[i] == '\r') {
 801097a:	5dbb      	ldrb	r3, [r7, r6]
 801097c:	2b0a      	cmp	r3, #10
 801097e:	d002      	beq.n	8010986 <_lv_txt_get_next_line+0x1ba>
 8010980:	2b0d      	cmp	r3, #13
 8010982:	f47f af51 	bne.w	8010828 <_lv_txt_get_next_line+0x5c>
            i++;  /* Include the following newline in the current line */
 8010986:	3601      	adds	r6, #1
 8010988:	960d      	str	r6, [sp, #52]	; 0x34
 801098a:	e7e3      	b.n	8010954 <_lv_txt_get_next_line+0x188>
    if(txt == NULL) return 0;
 801098c:	9804      	ldr	r0, [sp, #16]
 801098e:	e73b      	b.n	8010808 <_lv_txt_get_next_line+0x3c>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8010990:	3001      	adds	r0, #1
 8010992:	e739      	b.n	8010808 <_lv_txt_get_next_line+0x3c>
 8010994:	080198f1 	.word	0x080198f1
 8010998:	20000064 	.word	0x20000064

0801099c <_lv_txt_get_size>:
{
 801099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_res->x = 0;
 80109a0:	2500      	movs	r5, #0
{
 80109a2:	b087      	sub	sp, #28
 80109a4:	4604      	mov	r4, r0
 80109a6:	4616      	mov	r6, r2
 80109a8:	9304      	str	r3, [sp, #16]
 80109aa:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 80109ae:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80109b2:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    size_res->x = 0;
 80109b6:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 80109b8:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 80109ba:	4689      	mov	r9, r1
 80109bc:	b321      	cbz	r1, 8010a08 <_lv_txt_get_size+0x6c>
    if(font == NULL) return;
 80109be:	b31a      	cbz	r2, 8010a08 <_lv_txt_get_size+0x6c>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80109c0:	f647 4318 	movw	r3, #31768	; 0x7c18
 80109c4:	f01b 0f02 	tst.w	fp, #2
 80109c8:	bf18      	it	ne
 80109ca:	469a      	movne	sl, r3
    uint16_t letter_height = lv_font_get_line_height(font);
 80109cc:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80109d0:	9303      	str	r3, [sp, #12]
 80109d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80109d6:	9302      	str	r3, [sp, #8]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80109d8:	443b      	add	r3, r7
 80109da:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 80109dc:	f819 3005 	ldrb.w	r3, [r9, r5]
 80109e0:	eb09 0805 	add.w	r8, r9, r5
 80109e4:	b99b      	cbnz	r3, 8010a0e <_lv_txt_get_size+0x72>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 80109e6:	b155      	cbz	r5, 80109fe <_lv_txt_get_size+0x62>
 80109e8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80109ec:	2b0a      	cmp	r3, #10
 80109ee:	d001      	beq.n	80109f4 <_lv_txt_get_size+0x58>
 80109f0:	2b0d      	cmp	r3, #13
 80109f2:	d104      	bne.n	80109fe <_lv_txt_get_size+0x62>
        size_res->y += letter_height + line_space;
 80109f4:	9b02      	ldr	r3, [sp, #8]
 80109f6:	8862      	ldrh	r2, [r4, #2]
 80109f8:	443b      	add	r3, r7
 80109fa:	4413      	add	r3, r2
 80109fc:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 80109fe:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010a02:	bb23      	cbnz	r3, 8010a4e <_lv_txt_get_size+0xb2>
        size_res->y = letter_height;
 8010a04:	9b03      	ldr	r3, [sp, #12]
 8010a06:	8063      	strh	r3, [r4, #2]
}
 8010a08:	b007      	add	sp, #28
 8010a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8010a0e:	4653      	mov	r3, sl
 8010a10:	9a04      	ldr	r2, [sp, #16]
 8010a12:	4631      	mov	r1, r6
 8010a14:	f8cd b000 	str.w	fp, [sp]
 8010a18:	4640      	mov	r0, r8
 8010a1a:	f7ff fed7 	bl	80107cc <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8010a1e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010a22:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8010a24:	4601      	mov	r1, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8010a26:	4413      	add	r3, r2
 8010a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8010a2c:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8010a2e:	d2eb      	bcs.n	8010a08 <_lv_txt_get_size+0x6c>
            size_res->y += line_space;
 8010a30:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 8010a32:	f8cd b000 	str.w	fp, [sp]
 8010a36:	9b04      	ldr	r3, [sp, #16]
 8010a38:	4632      	mov	r2, r6
 8010a3a:	4640      	mov	r0, r8
 8010a3c:	f7ff fe76 	bl	801072c <_lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 8010a40:	f9b4 3000 	ldrsh.w	r3, [r4]
 8010a44:	4298      	cmp	r0, r3
 8010a46:	bfb8      	it	lt
 8010a48:	4618      	movlt	r0, r3
 8010a4a:	8020      	strh	r0, [r4, #0]
 8010a4c:	e7c6      	b.n	80109dc <_lv_txt_get_size+0x40>
        size_res->y -= line_space;
 8010a4e:	1bdf      	subs	r7, r3, r7
 8010a50:	8067      	strh	r7, [r4, #2]
 8010a52:	e7d9      	b.n	8010a08 <_lv_txt_get_size+0x6c>

08010a54 <_lv_txt_set_text_vfmt>:
{
 8010a54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 8010a58:	460b      	mov	r3, r1
    va_copy(ap_copy, ap);
 8010a5a:	9101      	str	r1, [sp, #4]
{
 8010a5c:	460d      	mov	r5, r1
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 8010a5e:	2100      	movs	r1, #0
 8010a60:	4602      	mov	r2, r0
{
 8010a62:	4607      	mov	r7, r0
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 8010a64:	4608      	mov	r0, r1
 8010a66:	f7ff fb7f 	bl	8010168 <lv_vsnprintf>
    text = lv_mem_alloc(len + 1);
 8010a6a:	1c46      	adds	r6, r0, #1
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 8010a6c:	4680      	mov	r8, r0
    text = lv_mem_alloc(len + 1);
 8010a6e:	4630      	mov	r0, r6
 8010a70:	f7fe fd3c 	bl	800f4ec <lv_mem_alloc>
 8010a74:	4604      	mov	r4, r0
    LV_ASSERT_MEM(text);
 8010a76:	f7fe faa7 	bl	800efc8 <lv_debug_check_null>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	b920      	cbnz	r0, 8010a88 <_lv_txt_set_text_vfmt+0x34>
 8010a7e:	4622      	mov	r2, r4
 8010a80:	4808      	ldr	r0, [pc, #32]	; (8010aa4 <_lv_txt_set_text_vfmt+0x50>)
 8010a82:	f7fe faa5 	bl	800efd0 <lv_debug_log_error>
 8010a86:	e7fe      	b.n	8010a86 <_lv_txt_set_text_vfmt+0x32>
    if(text == NULL) {
 8010a88:	b144      	cbz	r4, 8010a9c <_lv_txt_set_text_vfmt+0x48>
    text[len] = 0; /* Ensure NULL termination */
 8010a8a:	2300      	movs	r3, #0
    lv_vsnprintf(text, len + 1, fmt, ap);
 8010a8c:	463a      	mov	r2, r7
    text[len] = 0; /* Ensure NULL termination */
 8010a8e:	f804 3008 	strb.w	r3, [r4, r8]
    lv_vsnprintf(text, len + 1, fmt, ap);
 8010a92:	4631      	mov	r1, r6
 8010a94:	462b      	mov	r3, r5
 8010a96:	4620      	mov	r0, r4
 8010a98:	f7ff fb66 	bl	8010168 <lv_vsnprintf>
}
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	b002      	add	sp, #8
 8010aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa4:	08015994 	.word	0x08015994

08010aa8 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8010aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aac:	4681      	mov	r9, r0
 8010aae:	4688      	mov	r8, r1
 8010ab0:	4614      	mov	r4, r2
 8010ab2:	469a      	mov	sl, r3
 8010ab4:	9d08      	ldr	r5, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8010ab6:	b90c      	cbnz	r4, 8010abc <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 8010ab8:	4626      	mov	r6, r4
 8010aba:	e010      	b.n	8010ade <_lv_utils_bsearch+0x36>
        middle += (n / 2) * size;
 8010abc:	0867      	lsrs	r7, r4, #1
 8010abe:	fb0a 8607 	mla	r6, sl, r7, r8
        if((c = (*cmp)(key, middle)) > 0) {
 8010ac2:	4648      	mov	r0, r9
 8010ac4:	4631      	mov	r1, r6
 8010ac6:	47a8      	blx	r5
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	dd07      	ble.n	8010adc <_lv_utils_bsearch+0x34>
 8010acc:	43e4      	mvns	r4, r4
 8010ace:	f004 0401 	and.w	r4, r4, #1
            n    = (n / 2) - ((n & 1) == 0);
 8010ad2:	1b3f      	subs	r7, r7, r4
            base = (middle += size);
 8010ad4:	eb06 080a 	add.w	r8, r6, sl
{
 8010ad8:	463c      	mov	r4, r7
 8010ada:	e7ec      	b.n	8010ab6 <_lv_utils_bsearch+0xe>
        else if(c < 0) {
 8010adc:	d1fc      	bne.n	8010ad8 <_lv_utils_bsearch+0x30>
}
 8010ade:	4630      	mov	r0, r6
 8010ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010ae4 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
 8010ae4:	b570      	push	{r4, r5, r6, lr}
 8010ae6:	4604      	mov	r4, r0
    if(th->base) {
 8010ae8:	6880      	ldr	r0, [r0, #8]
{
 8010aea:	460d      	mov	r5, r1
 8010aec:	4616      	mov	r6, r2
    if(th->base) {
 8010aee:	b108      	cbz	r0, 8010af4 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
 8010af0:	f7ff fff8 	bl	8010ae4 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
 8010af4:	6863      	ldr	r3, [r4, #4]
 8010af6:	b123      	cbz	r3, 8010b02 <apply_theme+0x1e>
        th->apply_xcb(obj, name);
 8010af8:	4631      	mov	r1, r6
 8010afa:	4628      	mov	r0, r5
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
 8010afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_xcb(obj, name);
 8010b00:	4718      	bx	r3
    else if(th->apply_cb) {
 8010b02:	6823      	ldr	r3, [r4, #0]
 8010b04:	b133      	cbz	r3, 8010b14 <apply_theme+0x30>
        th->apply_cb(act_theme, obj, name);
 8010b06:	4804      	ldr	r0, [pc, #16]	; (8010b18 <apply_theme+0x34>)
 8010b08:	4632      	mov	r2, r6
 8010b0a:	4629      	mov	r1, r5
}
 8010b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_cb(act_theme, obj, name);
 8010b10:	6800      	ldr	r0, [r0, #0]
 8010b12:	4718      	bx	r3
}
 8010b14:	bd70      	pop	{r4, r5, r6, pc}
 8010b16:	bf00      	nop
 8010b18:	20002594 	.word	0x20002594

08010b1c <lv_theme_set_act>:
    act_theme = th;
 8010b1c:	4b01      	ldr	r3, [pc, #4]	; (8010b24 <lv_theme_set_act+0x8>)
 8010b1e:	6018      	str	r0, [r3, #0]
}
 8010b20:	4770      	bx	lr
 8010b22:	bf00      	nop
 8010b24:	20002594 	.word	0x20002594

08010b28 <lv_theme_apply>:
{
 8010b28:	b538      	push	{r3, r4, r5, lr}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
    switch(name) {
 8010b2a:	1e4b      	subs	r3, r1, #1
{
 8010b2c:	4604      	mov	r4, r0
 8010b2e:	460d      	mov	r5, r1
    switch(name) {
 8010b30:	2b0c      	cmp	r3, #12
 8010b32:	d80c      	bhi.n	8010b4e <lv_theme_apply+0x26>
 8010b34:	e8df f003 	tbb	[pc, r3]
 8010b38:	07130707 	.word	0x07130707
 8010b3c:	07070707 	.word	0x07070707
 8010b40:	27191922 	.word	0x27191922
 8010b44:	07          	.byte	0x07
 8010b45:	00          	.byte	0x00
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 8010b46:	2100      	movs	r1, #0
#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
 8010b48:	4620      	mov	r0, r4
 8010b4a:	f7f3 fdd5 	bl	80046f8 <lv_obj_clean_style_list>
    apply_theme(act_theme, obj, name);
 8010b4e:	4b14      	ldr	r3, [pc, #80]	; (8010ba0 <lv_theme_apply+0x78>)
 8010b50:	462a      	mov	r2, r5
 8010b52:	4621      	mov	r1, r4
 8010b54:	6818      	ldr	r0, [r3, #0]
}
 8010b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(act_theme, obj, name);
 8010b5a:	f7ff bfc3 	b.w	8010ae4 <apply_theme>
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
 8010b5e:	2100      	movs	r1, #0
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 8010b60:	4620      	mov	r0, r4
 8010b62:	f7f3 fdc9 	bl	80046f8 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
 8010b66:	2101      	movs	r1, #1
 8010b68:	e7ee      	b.n	8010b48 <lv_theme_apply+0x20>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	f7f3 fdc4 	bl	80046f8 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
 8010b70:	2101      	movs	r1, #1
 8010b72:	4620      	mov	r0, r4
 8010b74:	f7f3 fdc0 	bl	80046f8 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
 8010b78:	2102      	movs	r1, #2
 8010b7a:	e7e5      	b.n	8010b48 <lv_theme_apply+0x20>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
 8010b7c:	2100      	movs	r1, #0
 8010b7e:	f7f3 fdbb 	bl	80046f8 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 8010b82:	2140      	movs	r1, #64	; 0x40
 8010b84:	e7ec      	b.n	8010b60 <lv_theme_apply+0x38>
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
 8010b86:	2100      	movs	r1, #0
 8010b88:	f7f3 fdb6 	bl	80046f8 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
 8010b8c:	2142      	movs	r1, #66	; 0x42
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f7f3 fdb2 	bl	80046f8 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 8010b94:	2141      	movs	r1, #65	; 0x41
 8010b96:	4620      	mov	r0, r4
 8010b98:	f7f3 fdae 	bl	80046f8 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
 8010b9c:	2140      	movs	r1, #64	; 0x40
 8010b9e:	e7d3      	b.n	8010b48 <lv_theme_apply+0x20>
 8010ba0:	20002594 	.word	0x20002594

08010ba4 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
 8010ba4:	4b01      	ldr	r3, [pc, #4]	; (8010bac <lv_theme_get_font_normal+0x8>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
}
 8010ba8:	6958      	ldr	r0, [r3, #20]
 8010baa:	4770      	bx	lr
 8010bac:	20002594 	.word	0x20002594

08010bb0 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010bb0:	8883      	ldrh	r3, [r0, #4]
 8010bb2:	8800      	ldrh	r0, [r0, #0]
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	1a18      	subs	r0, r3, r0
}
 8010bb8:	b200      	sxth	r0, r0
 8010bba:	4770      	bx	lr

08010bbc <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010bbc:	88c3      	ldrh	r3, [r0, #6]
 8010bbe:	8840      	ldrh	r0, [r0, #2]
 8010bc0:	3301      	adds	r3, #1
 8010bc2:	1a18      	subs	r0, r3, r0
}
 8010bc4:	b200      	sxth	r0, r0
 8010bc6:	4770      	bx	lr

08010bc8 <lv_bar_anim_ready>:
    var->anim_state    = value;
    lv_obj_invalidate(var->bar);
}

static void lv_bar_anim_ready(lv_anim_t * a)
{
 8010bc8:	b510      	push	{r4, lr}
    lv_bar_anim_t * var = a->var;
 8010bca:	6804      	ldr	r4, [r0, #0]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(var->bar);
 8010bcc:	6820      	ldr	r0, [r4, #0]
 8010bce:	f7f5 fa33 	bl	8006038 <lv_obj_get_ext_attr>
    var->anim_state = LV_BAR_ANIM_STATE_INV;
 8010bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010bd6:	8123      	strh	r3, [r4, #8]
    if(var == &ext->cur_value_anim)
 8010bd8:	f100 0314 	add.w	r3, r0, #20
 8010bdc:	429c      	cmp	r4, r3
 8010bde:	d106      	bne.n	8010bee <lv_bar_anim_ready+0x26>
        ext->cur_value = var->anim_end;
 8010be0:	8b43      	ldrh	r3, [r0, #26]
 8010be2:	8003      	strh	r3, [r0, #0]
    else if(var == &ext->start_value_anim)
        ext->start_value = var->anim_end;
    lv_obj_invalidate(var->bar);
 8010be4:	6820      	ldr	r0, [r4, #0]
}
 8010be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(var->bar);
 8010bea:	f7f3 be79 	b.w	80048e0 <lv_obj_invalidate>
    else if(var == &ext->start_value_anim)
 8010bee:	f100 0320 	add.w	r3, r0, #32
 8010bf2:	429c      	cmp	r4, r3
        ext->start_value = var->anim_end;
 8010bf4:	bf04      	itt	eq
 8010bf6:	8cc3      	ldrheq	r3, [r0, #38]	; 0x26
 8010bf8:	80c3      	strheq	r3, [r0, #6]
 8010bfa:	e7f3      	b.n	8010be4 <lv_bar_anim_ready+0x1c>

08010bfc <lv_bar_anim>:
    var->anim_state    = value;
 8010bfc:	8101      	strh	r1, [r0, #8]
    lv_obj_invalidate(var->bar);
 8010bfe:	6800      	ldr	r0, [r0, #0]
 8010c00:	f7f3 be6e 	b.w	80048e0 <lv_obj_invalidate>

08010c04 <lv_bar_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 8010c04:	2908      	cmp	r1, #8
{
 8010c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	460d      	mov	r5, r1
 8010c0e:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 8010c10:	d124      	bne.n	8010c5c <lv_bar_signal+0x58>
        info->result = lv_bar_get_style(bar, info->part);
 8010c12:	7815      	ldrb	r5, [r2, #0]
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
 8010c14:	f7fe f9d8 	bl	800efc8 <lv_debug_check_null>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	b920      	cbnz	r0, 8010c26 <lv_bar_signal+0x22>
 8010c1c:	4622      	mov	r2, r4
 8010c1e:	4827      	ldr	r0, [pc, #156]	; (8010cbc <lv_bar_signal+0xb8>)
 8010c20:	f7fe f9d6 	bl	800efd0 <lv_debug_log_error>
 8010c24:	e7fe      	b.n	8010c24 <lv_bar_signal+0x20>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8010c26:	4620      	mov	r0, r4
 8010c28:	f7f5 fa06 	bl	8006038 <lv_obj_get_ext_attr>
    switch(part) {
 8010c2c:	b15d      	cbz	r5, 8010c46 <lv_bar_signal+0x42>
 8010c2e:	2d01      	cmp	r5, #1
 8010c30:	d012      	beq.n	8010c58 <lv_bar_signal+0x54>
        info->result = lv_bar_get_style(bar, info->part);
 8010c32:	2300      	movs	r3, #0
 8010c34:	607b      	str	r3, [r7, #4]
        else return ancestor_signal(bar, sign, param);
 8010c36:	4b22      	ldr	r3, [pc, #136]	; (8010cc0 <lv_bar_signal+0xbc>)
 8010c38:	463a      	mov	r2, r7
 8010c3a:	4620      	mov	r0, r4
}
 8010c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(bar, sign, param);
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	2108      	movs	r1, #8
 8010c44:	4718      	bx	r3
            style_dsc_p = &bar->style_list;
 8010c46:	f104 0028 	add.w	r0, r4, #40	; 0x28
        info->result = lv_bar_get_style(bar, info->part);
 8010c4a:	6078      	str	r0, [r7, #4]
        if(info->result != NULL) return LV_RES_OK;
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	d0f2      	beq.n	8010c36 <lv_bar_signal+0x32>
 8010c50:	2601      	movs	r6, #1
}
 8010c52:	4630      	mov	r0, r6
 8010c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            style_dsc_p = &ext->style_indic;
 8010c58:	3030      	adds	r0, #48	; 0x30
 8010c5a:	e7f6      	b.n	8010c4a <lv_bar_signal+0x46>
    res = ancestor_signal(bar, sign, param);
 8010c5c:	4b18      	ldr	r3, [pc, #96]	; (8010cc0 <lv_bar_signal+0xbc>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8010c62:	2801      	cmp	r0, #1
    res = ancestor_signal(bar, sign, param);
 8010c64:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 8010c66:	d1f4      	bne.n	8010c52 <lv_bar_signal+0x4e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8010c68:	2d07      	cmp	r5, #7
 8010c6a:	d105      	bne.n	8010c78 <lv_bar_signal+0x74>
 8010c6c:	4638      	mov	r0, r7
}
 8010c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8010c72:	4914      	ldr	r1, [pc, #80]	; (8010cc4 <lv_bar_signal+0xc0>)
 8010c74:	f7f5 bad2 	b.w	800621c <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8010c78:	2d06      	cmp	r5, #6
 8010c7a:	d10a      	bne.n	8010c92 <lv_bar_signal+0x8e>
        indic_size = lv_obj_get_draw_rect_ext_pad_size(bar, LV_BAR_PART_INDIC);
 8010c7c:	4601      	mov	r1, r0
 8010c7e:	4620      	mov	r0, r4
 8010c80:	f7f6 fa58 	bl	8007134 <lv_obj_get_draw_rect_ext_pad_size>
        bar->ext_draw_pad = LV_MATH_MAX(bar->ext_draw_pad, indic_size);
 8010c84:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 8010c88:	4298      	cmp	r0, r3
 8010c8a:	bfb8      	it	lt
 8010c8c:	4618      	movlt	r0, r3
 8010c8e:	8660      	strh	r0, [r4, #50]	; 0x32
 8010c90:	e7df      	b.n	8010c52 <lv_bar_signal+0x4e>
    if(sign == LV_SIGNAL_CLEANUP) {
 8010c92:	2d00      	cmp	r5, #0
 8010c94:	d1dc      	bne.n	8010c50 <lv_bar_signal+0x4c>
        lv_obj_clean_style_list(bar, LV_BAR_PART_INDIC);
 8010c96:	4601      	mov	r1, r0
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f7f3 fd2d 	bl	80046f8 <lv_obj_clean_style_list>
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	f7f5 f9ca 	bl	8006038 <lv_obj_get_ext_attr>
 8010ca4:	4604      	mov	r4, r0
        lv_anim_del(&ext->cur_value_anim, NULL);
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	3014      	adds	r0, #20
 8010caa:	f7fd fe29 	bl	800e900 <lv_anim_del>
        lv_anim_del(&ext->start_value_anim, NULL);
 8010cae:	4629      	mov	r1, r5
 8010cb0:	f104 0020 	add.w	r0, r4, #32
 8010cb4:	f7fd fe24 	bl	800e900 <lv_anim_del>
 8010cb8:	e7cb      	b.n	8010c52 <lv_bar_signal+0x4e>
 8010cba:	bf00      	nop
 8010cbc:	080158e8 	.word	0x080158e8
 8010cc0:	2000259c 	.word	0x2000259c
 8010cc4:	080198f9 	.word	0x080198f9

08010cc8 <lv_bar_set_value_with_anim>:

static void lv_bar_set_value_with_anim(lv_obj_t * bar, int16_t new_value, int16_t * value_ptr,
                                       lv_bar_anim_t * anim_info, lv_anim_enable_t en)
{
 8010cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cca:	b093      	sub	sp, #76	; 0x4c
 8010ccc:	461c      	mov	r4, r3
 8010cce:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8010cd2:	460d      	mov	r5, r1
 8010cd4:	4616      	mov	r6, r2
    if(en == LV_ANIM_OFF) {
 8010cd6:	b923      	cbnz	r3, 8010ce2 <lv_bar_set_value_with_anim+0x1a>
        *value_ptr = new_value;
 8010cd8:	8031      	strh	r1, [r6, #0]
        lv_obj_invalidate(bar);
 8010cda:	f7f3 fe01 	bl	80048e0 <lv_obj_invalidate>
        lv_anim_set_values(&a, LV_BAR_ANIM_STATE_START, LV_BAR_ANIM_STATE_END);
        lv_anim_set_ready_cb(&a, lv_bar_anim_ready);
        lv_anim_set_time(&a, ext->anim_time);
        lv_anim_start(&a);
    }
}
 8010cde:	b013      	add	sp, #76	; 0x4c
 8010ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8010ce2:	f7f5 f9a9 	bl	8006038 <lv_obj_get_ext_attr>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 8010ce6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
        lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8010cea:	4607      	mov	r7, r0
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 8010cec:	3301      	adds	r3, #1
            anim_info->anim_start = *value_ptr;
 8010cee:	bf0c      	ite	eq
 8010cf0:	f9b6 3000 	ldrsheq.w	r3, [r6]
            anim_info->anim_start = anim_info->anim_end;
 8010cf4:	88e3      	ldrhne	r3, [r4, #6]
        lv_anim_del(anim_info, NULL);
 8010cf6:	2100      	movs	r1, #0
            anim_info->anim_start = anim_info->anim_end;
 8010cf8:	80a3      	strh	r3, [r4, #4]
            anim_info->anim_end   = new_value;
 8010cfa:	80e5      	strh	r5, [r4, #6]
        lv_anim_del(anim_info, NULL);
 8010cfc:	4620      	mov	r0, r4
        *value_ptr = new_value;
 8010cfe:	8035      	strh	r5, [r6, #0]
        lv_anim_del(anim_info, NULL);
 8010d00:	f7fd fdfe 	bl	800e900 <lv_anim_del>
        lv_anim_init(&a);
 8010d04:	a801      	add	r0, sp, #4
 8010d06:	f7fd fddb 	bl	800e8c0 <lv_anim_init>
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 8010d0a:	4b09      	ldr	r3, [pc, #36]	; (8010d30 <lv_bar_set_value_with_anim+0x68>)
        lv_anim_start(&a);
 8010d0c:	a801      	add	r0, sp, #4
 8010d0e:	9302      	str	r3, [sp, #8]
 * @param start the start value
 * @param end the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, lv_anim_value_t start, lv_anim_value_t end)
{
    a->start = start;
 8010d10:	2300      	movs	r3, #0
    a->current = start;
 8010d12:	e9cd 3307 	strd	r3, r3, [sp, #28]
    a->end   = end;
 8010d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d1a:	9309      	str	r3, [sp, #36]	; 0x24
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8010d1c:	4b05      	ldr	r3, [pc, #20]	; (8010d34 <lv_bar_set_value_with_anim+0x6c>)
    a->var     = var;
 8010d1e:	9401      	str	r4, [sp, #4]
    a->ready_cb = ready_cb;
 8010d20:	9304      	str	r3, [sp, #16]
    a->time     = duration;
 8010d22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010d26:	930a      	str	r3, [sp, #40]	; 0x28
 8010d28:	f7fd fe12 	bl	800e950 <lv_anim_start>
}
 8010d2c:	e7d7      	b.n	8010cde <lv_bar_set_value_with_anim+0x16>
 8010d2e:	bf00      	nop
 8010d30:	08010bfd 	.word	0x08010bfd
 8010d34:	08010bc9 	.word	0x08010bc9

08010d38 <lv_bar_design>:
{
 8010d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8010d3c:	2a02      	cmp	r2, #2
{
 8010d3e:	b0b1      	sub	sp, #196	; 0xc4
 8010d40:	4605      	mov	r5, r0
 8010d42:	4688      	mov	r8, r1
 8010d44:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK) {
 8010d46:	d105      	bne.n	8010d54 <lv_bar_design+0x1c>
        return ancestor_design_f(bar, clip_area, mode);
 8010d48:	4b89      	ldr	r3, [pc, #548]	; (8010f70 <lv_bar_design+0x238>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4798      	blx	r3
}
 8010d4e:	b031      	add	sp, #196	; 0xc4
 8010d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8010d54:	2a00      	cmp	r2, #0
 8010d56:	f040 80e8 	bne.w	8010f2a <lv_bar_design+0x1f2>
    lv_draw_rect_dsc_init(&draw_dsc);
 8010d5a:	a81b      	add	r0, sp, #108	; 0x6c
 8010d5c:	f7fb f928 	bl	800bfb0 <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 8010d60:	2233      	movs	r2, #51	; 0x33
 8010d62:	4621      	mov	r1, r4
 8010d64:	4628      	mov	r0, r5
 8010d66:	f7f4 fb9b 	bl	80054a0 <_lv_obj_get_style_int>
    if(lv_obj_get_style_border_post(bar, LV_BAR_PART_BG)) {
 8010d6a:	b108      	cbz	r0, 8010d70 <lv_bar_design+0x38>
        draw_dsc.border_opa = LV_OPA_TRANSP;
 8010d6c:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
    draw_dsc.value_opa = LV_OPA_TRANSP;
 8010d70:	f04f 0a00 	mov.w	sl, #0
    lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
 8010d74:	aa1b      	add	r2, sp, #108	; 0x6c
 8010d76:	4651      	mov	r1, sl
 8010d78:	4628      	mov	r0, r5
    draw_dsc.value_opa = LV_OPA_TRANSP;
 8010d7a:	f88d a0b0 	strb.w	sl, [sp, #176]	; 0xb0
    lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
 8010d7e:	f7f5 fa5b 	bl	8006238 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
 8010d82:	f105 0310 	add.w	r3, r5, #16
 8010d86:	4618      	mov	r0, r3
 8010d88:	aa1b      	add	r2, sp, #108	; 0x6c
 8010d8a:	4641      	mov	r1, r8
 8010d8c:	9303      	str	r3, [sp, #12]
 8010d8e:	f7fb f933 	bl	800bff8 <lv_draw_rect>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8010d92:	4628      	mov	r0, r5
 8010d94:	f7f5 f950 	bl	8006038 <lv_obj_get_ext_attr>
 8010d98:	4604      	mov	r4, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(bar);
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	f7f4 f85c 	bl	8004e58 <lv_obj_get_base_dir>
 8010da0:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t objw = lv_obj_get_width(bar);
 8010da2:	4628      	mov	r0, r5
 8010da4:	f7f3 fc30 	bl	8004608 <lv_obj_get_width>
 8010da8:	4606      	mov	r6, r0
    lv_coord_t objh = lv_obj_get_height(bar);
 8010daa:	4628      	mov	r0, r5
 8010dac:	f7f3 fc3a 	bl	8004624 <lv_obj_get_height>
    if(ext->type == LV_BAR_TYPE_SYMMETRICAL && ext->min_value < 0 && ext->max_value > 0 &&
 8010db0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    int32_t range = ext->max_value - ext->min_value;
 8010db4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010db8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    if(ext->type == LV_BAR_TYPE_SYMMETRICAL && ext->min_value < 0 && ext->max_value > 0 &&
 8010dbc:	f002 0203 	and.w	r2, r2, #3
 8010dc0:	2a01      	cmp	r2, #1
    lv_coord_t objh = lv_obj_get_height(bar);
 8010dc2:	4607      	mov	r7, r0
    int32_t range = ext->max_value - ext->min_value;
 8010dc4:	eba1 0903 	sub.w	r9, r1, r3
    if(ext->type == LV_BAR_TYPE_SYMMETRICAL && ext->min_value < 0 && ext->max_value > 0 &&
 8010dc8:	d174      	bne.n	8010eb4 <lv_bar_design+0x17c>
 8010dca:	4553      	cmp	r3, sl
 8010dcc:	da72      	bge.n	8010eb4 <lv_bar_design+0x17c>
 8010dce:	4551      	cmp	r1, sl
 8010dd0:	dd70      	ble.n	8010eb4 <lv_bar_design+0x17c>
 8010dd2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010dd6:	1ad2      	subs	r2, r2, r3
 8010dd8:	4253      	negs	r3, r2
 8010dda:	4153      	adcs	r3, r2
 8010ddc:	9302      	str	r3, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8010dde:	2212      	movs	r2, #18
 8010de0:	2100      	movs	r1, #0
 8010de2:	4628      	mov	r0, r5
 8010de4:	f7f4 fb5c 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8010de8:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8010dea:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8010dec:	2100      	movs	r1, #0
 8010dee:	4628      	mov	r0, r5
 8010df0:	f7f4 fb56 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8010df4:	2210      	movs	r2, #16
 8010df6:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8010df8:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	f7f4 fb50 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8010e00:	2211      	movs	r2, #17
 8010e02:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8010e04:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8010e06:	4628      	mov	r0, r5
 8010e08:	f7f4 fb4a 	bl	80054a0 <_lv_obj_get_style_int>
    lv_area_copy(&ext->indic_area, &bar->coords);
 8010e0c:	f104 0308 	add.w	r3, r4, #8
 8010e10:	9301      	str	r3, [sp, #4]
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
 8010e12:	461a      	mov	r2, r3
 8010e14:	9b04      	ldr	r3, [sp, #16]
 8010e16:	f105 010f 	add.w	r1, r5, #15
 8010e1a:	f104 0c10 	add.w	ip, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 8010e1e:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 8010e22:	f802 eb01 	strb.w	lr, [r2], #1
    while(len) {
 8010e26:	4562      	cmp	r2, ip
 8010e28:	d1f9      	bne.n	8010e1e <lv_bar_design+0xe6>
    ext->indic_area.x1 += bg_left;
 8010e2a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	449c      	add	ip, r3
 8010e32:	9304      	str	r3, [sp, #16]
    ext->indic_area.x2 -= bg_right;
 8010e34:	fa1f f38b 	uxth.w	r3, fp
 8010e38:	9305      	str	r3, [sp, #20]
 8010e3a:	9a05      	ldr	r2, [sp, #20]
 8010e3c:	89a3      	ldrh	r3, [r4, #12]
    ext->indic_area.x1 += bg_left;
 8010e3e:	fa1f fc8c 	uxth.w	ip, ip
    ext->indic_area.x2 -= bg_right;
 8010e42:	1a9b      	subs	r3, r3, r2
    ext->indic_area.y1 += bg_top;
 8010e44:	fa1f f28a 	uxth.w	r2, sl
 8010e48:	9206      	str	r2, [sp, #24]
 8010e4a:	9906      	ldr	r1, [sp, #24]
 8010e4c:	8962      	ldrh	r2, [r4, #10]
    ext->indic_area.x2 -= bg_right;
 8010e4e:	b29b      	uxth	r3, r3
    ext->indic_area.y1 += bg_top;
 8010e50:	440a      	add	r2, r1
 8010e52:	b291      	uxth	r1, r2
    ext->indic_area.y2 -= bg_bottom;
 8010e54:	b282      	uxth	r2, r0
 8010e56:	9207      	str	r2, [sp, #28]
 8010e58:	9807      	ldr	r0, [sp, #28]
 8010e5a:	89e2      	ldrh	r2, [r4, #14]
    if(hor && lv_area_get_height(&ext->indic_area) < LV_BAR_SIZE_MIN) {
 8010e5c:	42be      	cmp	r6, r7
    ext->indic_area.y2 -= bg_bottom;
 8010e5e:	eba2 0200 	sub.w	r2, r2, r0
 8010e62:	b292      	uxth	r2, r2
    ext->indic_area.x1 += bg_left;
 8010e64:	f8a4 c008 	strh.w	ip, [r4, #8]
    ext->indic_area.x2 -= bg_right;
 8010e68:	81a3      	strh	r3, [r4, #12]
    ext->indic_area.y1 += bg_top;
 8010e6a:	8161      	strh	r1, [r4, #10]
    ext->indic_area.y2 -= bg_bottom;
 8010e6c:	81e2      	strh	r2, [r4, #14]
    if(hor && lv_area_get_height(&ext->indic_area) < LV_BAR_SIZE_MIN) {
 8010e6e:	db24      	blt.n	8010eba <lv_bar_design+0x182>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010e70:	3201      	adds	r2, #1
 8010e72:	1a52      	subs	r2, r2, r1
 8010e74:	b212      	sxth	r2, r2
 8010e76:	2a03      	cmp	r2, #3
 8010e78:	dc09      	bgt.n	8010e8e <lv_bar_design+0x156>
        ext->indic_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
 8010e7a:	2302      	movs	r3, #2
 8010e7c:	fb97 f3f3 	sdiv	r3, r7, r3
 8010e80:	8a6a      	ldrh	r2, [r5, #18]
 8010e82:	4413      	add	r3, r2
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	1e9a      	subs	r2, r3, #2
        ext->indic_area.y2 = ext->indic_area.y1 + LV_BAR_SIZE_MIN;
 8010e88:	3302      	adds	r3, #2
        ext->indic_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
 8010e8a:	8162      	strh	r2, [r4, #10]
        ext->indic_area.y2 = ext->indic_area.y1 + LV_BAR_SIZE_MIN;
 8010e8c:	81e3      	strh	r3, [r4, #14]
    lv_coord_t anim_length = hor ? indicw : indich;
 8010e8e:	42be      	cmp	r6, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e94:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010e98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e9c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8010ea0:	da6a      	bge.n	8010f78 <lv_bar_design+0x240>
 8010ea2:	3101      	adds	r1, #1
 8010ea4:	1a89      	subs	r1, r1, r2
 8010ea6:	b209      	sxth	r1, r1
        axis1 = &ext->indic_area.y1;
 8010ea8:	f104 000a 	add.w	r0, r4, #10
        axis2 = &ext->indic_area.y2;
 8010eac:	f104 0c0e 	add.w	ip, r4, #14
        indic_length_calc = lv_area_get_height;
 8010eb0:	4b30      	ldr	r3, [pc, #192]	; (8010f74 <lv_bar_design+0x23c>)
 8010eb2:	e068      	b.n	8010f86 <lv_bar_design+0x24e>
    bool sym = false;
 8010eb4:	f8cd a008 	str.w	sl, [sp, #8]
 8010eb8:	e791      	b.n	8010dde <lv_bar_design+0xa6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010eba:	3301      	adds	r3, #1
 8010ebc:	eba3 0c0c 	sub.w	ip, r3, ip
    else if(!hor && lv_area_get_width(&ext->indic_area) < LV_BAR_SIZE_MIN) {
 8010ec0:	fa0f fc8c 	sxth.w	ip, ip
 8010ec4:	f1bc 0f03 	cmp.w	ip, #3
 8010ec8:	dce1      	bgt.n	8010e8e <lv_bar_design+0x156>
        ext->indic_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
 8010eca:	2302      	movs	r3, #2
 8010ecc:	fb96 f3f3 	sdiv	r3, r6, r3
 8010ed0:	8a2a      	ldrh	r2, [r5, #16]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	1e9a      	subs	r2, r3, #2
        ext->indic_area.x2 = ext->indic_area.x1 + LV_BAR_SIZE_MIN;
 8010ed8:	3302      	adds	r3, #2
        ext->indic_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
 8010eda:	8122      	strh	r2, [r4, #8]
        ext->indic_area.x2 = ext->indic_area.x1 + LV_BAR_SIZE_MIN;
 8010edc:	81a3      	strh	r3, [r4, #12]
 8010ede:	e7d6      	b.n	8010e8e <lv_bar_design+0x156>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (ext->start_value - ext->min_value)) / range;
 8010ee0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010ee4:	eba2 020b 	sub.w	r2, r2, fp
 8010ee8:	434a      	muls	r2, r1
 8010eea:	fb92 f2f9 	sdiv	r2, r2, r9
 8010eee:	e06d      	b.n	8010fcc <lv_bar_design+0x294>
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (ext->cur_value - ext->min_value)) / range;
 8010ef0:	f9b4 3000 	ldrsh.w	r3, [r4]
 8010ef4:	eba3 0e0b 	sub.w	lr, r3, fp
 8010ef8:	fb01 fe0e 	mul.w	lr, r1, lr
 8010efc:	fb9e fef9 	sdiv	lr, lr, r9
 8010f00:	e085      	b.n	801100e <lv_bar_design+0x2d6>
 8010f02:	3201      	adds	r2, #1
 8010f04:	eba2 020c 	sub.w	r2, r2, ip
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8010f08:	b212      	sxth	r2, r2
 8010f0a:	2a03      	cmp	r2, #3
 8010f0c:	f300 8149 	bgt.w	80111a2 <lv_bar_design+0x46a>
        mask_indic_max_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
 8010f10:	2302      	movs	r3, #2
 8010f12:	fb96 f6f3 	sdiv	r6, r6, r3
 8010f16:	8a2b      	ldrh	r3, [r5, #16]
 8010f18:	441e      	add	r6, r3
 8010f1a:	b2b6      	uxth	r6, r6
 8010f1c:	1eb3      	subs	r3, r6, #2
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 8010f1e:	3602      	adds	r6, #2
        mask_indic_max_area.x1 = bar->coords.x1 + (objw / 2) - (LV_BAR_SIZE_MIN / 2);
 8010f20:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 8010f24:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8010f28:	e13b      	b.n	80111a2 <lv_bar_design+0x46a>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8010f2a:	2a01      	cmp	r2, #1
 8010f2c:	d001      	beq.n	8010f32 <lv_bar_design+0x1fa>
    return LV_DESIGN_RES_OK;
 8010f2e:	2000      	movs	r0, #0
 8010f30:	e70d      	b.n	8010d4e <lv_bar_design+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 8010f32:	2233      	movs	r2, #51	; 0x33
 8010f34:	2100      	movs	r1, #0
 8010f36:	f7f4 fab3 	bl	80054a0 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(bar, LV_OBJ_PART_MAIN)) {
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	d0f7      	beq.n	8010f2e <lv_bar_design+0x1f6>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8010f3e:	2400      	movs	r4, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 8010f40:	a81b      	add	r0, sp, #108	; 0x6c
 8010f42:	f7fb f835 	bl	800bfb0 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(bar, LV_OBJ_PART_MAIN, &draw_dsc);
 8010f46:	aa1b      	add	r2, sp, #108	; 0x6c
 8010f48:	4621      	mov	r1, r4
 8010f4a:	4628      	mov	r0, r5
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8010f4c:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 8010f50:	f88d 40a2 	strb.w	r4, [sp, #162]	; 0xa2
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8010f54:	f88d 408a 	strb.w	r4, [sp, #138]	; 0x8a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8010f58:	f88d 4096 	strb.w	r4, [sp, #150]	; 0x96
            draw_dsc.value_opa = LV_OPA_TRANSP;
 8010f5c:	f88d 40b0 	strb.w	r4, [sp, #176]	; 0xb0
            lv_obj_init_draw_rect_dsc(bar, LV_OBJ_PART_MAIN, &draw_dsc);
 8010f60:	f7f5 f96a 	bl	8006238 <lv_obj_init_draw_rect_dsc>
            lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
 8010f64:	aa1b      	add	r2, sp, #108	; 0x6c
 8010f66:	4641      	mov	r1, r8
 8010f68:	f105 0010 	add.w	r0, r5, #16
 8010f6c:	e15e      	b.n	801122c <lv_bar_design+0x4f4>
 8010f6e:	bf00      	nop
 8010f70:	20002598 	.word	0x20002598
 8010f74:	08010bbd 	.word	0x08010bbd
 8010f78:	1c59      	adds	r1, r3, #1
 8010f7a:	1a09      	subs	r1, r1, r0
        indic_length_calc = lv_area_get_width;
 8010f7c:	4bb7      	ldr	r3, [pc, #732]	; (801125c <lv_bar_design+0x524>)
        axis1 = &ext->indic_area.x1;
 8010f7e:	9801      	ldr	r0, [sp, #4]
 8010f80:	b209      	sxth	r1, r1
        axis2 = &ext->indic_area.x2;
 8010f82:	f104 0c0c 	add.w	ip, r4, #12
    if(LV_BAR_IS_ANIMATING(ext->start_value_anim)) {
 8010f86:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
        indic_length_calc = lv_area_get_height;
 8010f8a:	9308      	str	r3, [sp, #32]
    if(LV_BAR_IS_ANIMATING(ext->start_value_anim)) {
 8010f8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010f90:	f9b4 b002 	ldrsh.w	fp, [r4, #2]
 8010f94:	d0a4      	beq.n	8010ee0 <lv_bar_design+0x1a8>
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_start - ext->min_value)) / range;
 8010f96:	f9b4 e024 	ldrsh.w	lr, [r4, #36]	; 0x24
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_end - ext->min_value)) / range;
 8010f9a:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_start - ext->min_value)) / range;
 8010f9e:	ebae 0e0b 	sub.w	lr, lr, fp
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_end - ext->min_value)) / range;
 8010fa2:	eba3 030b 	sub.w	r3, r3, fp
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_start - ext->min_value)) / range;
 8010fa6:	fb01 fe0e 	mul.w	lr, r1, lr
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_end - ext->min_value)) / range;
 8010faa:	434b      	muls	r3, r1
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_start - ext->min_value)) / range;
 8010fac:	fb9e fef9 	sdiv	lr, lr, r9
            (int32_t)((int32_t)anim_length * (ext->start_value_anim.anim_end - ext->min_value)) / range;
 8010fb0:	fb93 f3f9 	sdiv	r3, r3, r9
        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * ext->start_value_anim.anim_state) /
 8010fb4:	fa0f f28e 	sxth.w	r2, lr
 8010fb8:	b21b      	sxth	r3, r3
 8010fba:	1a9b      	subs	r3, r3, r2
 8010fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010fc0:	fb0a fa03 	mul.w	sl, sl, r3
 8010fc4:	fb9a faf2 	sdiv	sl, sl, r2
        anim_start_value_x += anim_start_value_start_x;
 8010fc8:	eb0a 020e 	add.w	r2, sl, lr
    if(LV_BAR_IS_ANIMATING(ext->cur_value_anim)) {
 8010fcc:	f9b4 a01c 	ldrsh.w	sl, [r4, #28]
        anim_start_value_x = (int32_t)((int32_t)anim_length * (ext->start_value - ext->min_value)) / range;
 8010fd0:	b212      	sxth	r2, r2
    if(LV_BAR_IS_ANIMATING(ext->cur_value_anim)) {
 8010fd2:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010fd6:	d08b      	beq.n	8010ef0 <lv_bar_design+0x1b8>
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_start - ext->min_value)) / range;
 8010fd8:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_end - ext->min_value)) / range;
 8010fdc:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_start - ext->min_value)) / range;
 8010fe0:	ebae 0e0b 	sub.w	lr, lr, fp
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_end - ext->min_value)) / range;
 8010fe4:	eba3 030b 	sub.w	r3, r3, fp
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_start - ext->min_value)) / range;
 8010fe8:	fb01 fe0e 	mul.w	lr, r1, lr
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_end - ext->min_value)) / range;
 8010fec:	434b      	muls	r3, r1
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_start - ext->min_value)) / range;
 8010fee:	fb9e fef9 	sdiv	lr, lr, r9
            (int32_t)((int32_t)anim_length * (ext->cur_value_anim.anim_end - ext->min_value)) / range;
 8010ff2:	fb93 f3f9 	sdiv	r3, r3, r9
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 8010ff6:	fa0f fb8e 	sxth.w	fp, lr
 8010ffa:	b21b      	sxth	r3, r3
 8010ffc:	eba3 030b 	sub.w	r3, r3, fp
 8011000:	fb0a fa03 	mul.w	sl, sl, r3
                                                      ext->cur_value_anim.anim_state) /
 8011004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011008:	fb9a faf3 	sdiv	sl, sl, r3
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 801100c:	44d6      	add	lr, sl
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (ext->cur_value - ext->min_value)) / range;
 801100e:	fa0f fe8e 	sxth.w	lr, lr
    if(hor && base_dir == LV_BIDI_DIR_RTL) {
 8011012:	42be      	cmp	r6, r7
 8011014:	fa1f fa8e 	uxth.w	sl, lr
 8011018:	fa1f fb82 	uxth.w	fp, r2
 801101c:	f2c0 8109 	blt.w	8011232 <lv_bar_design+0x4fa>
 8011020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011022:	2b01      	cmp	r3, #1
 8011024:	d109      	bne.n	801103a <lv_bar_design+0x302>
        anim_start_value_x = -anim_start_value_x;
 8011026:	4603      	mov	r3, r0
 8011028:	4660      	mov	r0, ip
 801102a:	469c      	mov	ip, r3
        anim_cur_value_x = -anim_cur_value_x;
 801102c:	f1ca 0e00 	rsb	lr, sl, #0
        anim_start_value_x = -anim_start_value_x;
 8011030:	f1cb 0200 	rsb	r2, fp, #0
        anim_cur_value_x = -anim_cur_value_x;
 8011034:	fa0f fe8e 	sxth.w	lr, lr
        anim_start_value_x = -anim_start_value_x;
 8011038:	b212      	sxth	r2, r2
        *axis2 = *axis1 + anim_cur_value_x;
 801103a:	8803      	ldrh	r3, [r0, #0]
 801103c:	449e      	add	lr, r3
 801103e:	f8ac e000 	strh.w	lr, [ip]
        *axis1 += anim_start_value_x;
 8011042:	8803      	ldrh	r3, [r0, #0]
 8011044:	441a      	add	r2, r3
 8011046:	8002      	strh	r2, [r0, #0]
    if(sym) {
 8011048:	9b02      	ldr	r3, [sp, #8]
 801104a:	2b00      	cmp	r3, #0
 801104c:	f000 80fe 	beq.w	801124c <lv_bar_design+0x514>
        zero = *axis1 + (-ext->min_value * anim_length) / range;
 8011050:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8011054:	425b      	negs	r3, r3
 8011056:	4359      	muls	r1, r3
 8011058:	fb91 f9f9 	sdiv	r9, r1, r9
 801105c:	8801      	ldrh	r1, [r0, #0]
        if(*axis2 > zero)
 801105e:	f9bc 3000 	ldrsh.w	r3, [ip]
        zero = *axis1 + (-ext->min_value * anim_length) / range;
 8011062:	4489      	add	r9, r1
 8011064:	fa0f f989 	sxth.w	r9, r9
        if(*axis2 > zero)
 8011068:	4599      	cmp	r9, r3
            *axis1 = *axis2;
 801106a:	bfaa      	itet	ge
 801106c:	8003      	strhge	r3, [r0, #0]
            *axis1 = zero;
 801106e:	f8a0 9000 	strhlt.w	r9, [r0]
            *axis2 = zero;
 8011072:	f8ac 9000 	strhge.w	r9, [ip]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8011076:	2201      	movs	r2, #1
 8011078:	2100      	movs	r1, #0
 801107a:	4628      	mov	r0, r5
 801107c:	f7f4 fa10 	bl	80054a0 <_lv_obj_get_style_int>
    lv_coord_t short_side = LV_MATH_MIN(objw, objh);
 8011080:	42be      	cmp	r6, r7
 8011082:	4633      	mov	r3, r6
 8011084:	bfa8      	it	ge
 8011086:	463b      	movge	r3, r7
    uint16_t bg_radius = lv_obj_get_style_radius(bar, LV_BAR_PART_BG);
 8011088:	fa1f f980 	uxth.w	r9, r0
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 801108c:	f343 034e 	sbfx	r3, r3, #1, #15
 8011090:	4599      	cmp	r9, r3
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 8011092:	a81b      	add	r0, sp, #108	; 0x6c
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 8011094:	bfc8      	it	gt
 8011096:	fa1f f983 	uxthgt.w	r9, r3
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 801109a:	f7fa ff89 	bl	800bfb0 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_INDIC, &draw_indic_dsc);
 801109e:	2101      	movs	r1, #1
 80110a0:	aa1b      	add	r2, sp, #108	; 0x6c
 80110a2:	4628      	mov	r0, r5
 80110a4:	f7f5 f8c8 	bl	8006238 <lv_obj_init_draw_rect_dsc>
    if((hor && lv_area_get_width(&ext->indic_area) > bg_radius * 2) ||
 80110a8:	42be      	cmp	r6, r7
 80110aa:	bfab      	itete	ge
 80110ac:	89a3      	ldrhge	r3, [r4, #12]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80110ae:	89e3      	ldrhlt	r3, [r4, #14]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80110b0:	8921      	ldrhge	r1, [r4, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80110b2:	8961      	ldrhlt	r1, [r4, #10]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80110b4:	bfac      	ite	ge
 80110b6:	3301      	addge	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80110b8:	3301      	addlt	r3, #1
 80110ba:	1a5b      	subs	r3, r3, r1
 80110bc:	ea4f 0249 	mov.w	r2, r9, lsl #1
       (!hor && lv_area_get_height(&ext->indic_area) > bg_radius * 2)) {
 80110c0:	b21b      	sxth	r3, r3
 80110c2:	429a      	cmp	r2, r3
 80110c4:	da1c      	bge.n	8011100 <lv_bar_design+0x3c8>
        draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
 80110c6:	2200      	movs	r2, #0
        lv_opa_t bg_opa = draw_indic_dsc.bg_opa;
 80110c8:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
        lv_opa_t border_opa = draw_indic_dsc.border_opa;
 80110cc:	f89d b080 	ldrb.w	fp, [sp, #128]	; 0x80
        lv_opa_t value_opa = draw_indic_dsc.value_opa;
 80110d0:	f89d a0b0 	ldrb.w	sl, [sp, #176]	; 0xb0
        const void * pattern_src = draw_indic_dsc.pattern_image;
 80110d4:	9c26      	ldr	r4, [sp, #152]	; 0x98
        draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
 80110d6:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
        draw_indic_dsc.border_opa = LV_OPA_TRANSP;
 80110da:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
        draw_indic_dsc.value_opa = LV_OPA_TRANSP;
 80110de:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
        draw_indic_dsc.pattern_image = NULL;
 80110e2:	9226      	str	r2, [sp, #152]	; 0x98
        lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 80110e4:	4641      	mov	r1, r8
 80110e6:	aa1b      	add	r2, sp, #108	; 0x6c
 80110e8:	9801      	ldr	r0, [sp, #4]
        lv_opa_t bg_opa = draw_indic_dsc.bg_opa;
 80110ea:	9302      	str	r3, [sp, #8]
        lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 80110ec:	f7fa ff84 	bl	800bff8 <lv_draw_rect>
        draw_indic_dsc.bg_opa = bg_opa;
 80110f0:	9b02      	ldr	r3, [sp, #8]
        draw_indic_dsc.border_opa = border_opa;
 80110f2:	f88d b080 	strb.w	fp, [sp, #128]	; 0x80
        draw_indic_dsc.bg_opa = bg_opa;
 80110f6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
        draw_indic_dsc.value_opa = value_opa;
 80110fa:	f88d a0b0 	strb.w	sl, [sp, #176]	; 0xb0
        draw_indic_dsc.pattern_image = pattern_src;
 80110fe:	9426      	str	r4, [sp, #152]	; 0x98
    lv_draw_mask_radius_init(&mask_bg_param, &bar->coords, bg_radius, false);
 8011100:	2300      	movs	r3, #0
 8011102:	fa0f f289 	sxth.w	r2, r9
 8011106:	9903      	ldr	r1, [sp, #12]
 8011108:	a80d      	add	r0, sp, #52	; 0x34
 801110a:	f7fa fc7d 	bl	800ba08 <lv_draw_mask_radius_init>
    int16_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 801110e:	2100      	movs	r1, #0
 8011110:	a80d      	add	r0, sp, #52	; 0x34
 8011112:	f7fa fb85 	bl	800b820 <lv_draw_mask_add>
    draw_indic_dsc.border_opa = LV_OPA_TRANSP;
 8011116:	2300      	movs	r3, #0
    int16_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 8011118:	4682      	mov	sl, r0
    lv_opa_t border_opa = draw_indic_dsc.border_opa;
 801111a:	f89d b080 	ldrb.w	fp, [sp, #128]	; 0x80
    lv_opa_t value_opa = draw_indic_dsc.value_opa;
 801111e:	f89d 90b0 	ldrb.w	r9, [sp, #176]	; 0xb0
    draw_indic_dsc.border_opa = LV_OPA_TRANSP;
 8011122:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    draw_indic_dsc.shadow_opa = LV_OPA_TRANSP;
 8011126:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
    draw_indic_dsc.value_opa = LV_OPA_TRANSP;
 801112a:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
        *d8 = *s8;
 801112e:	ac0b      	add	r4, sp, #44	; 0x2c
 8011130:	9a03      	ldr	r2, [sp, #12]
 8011132:	5cd2      	ldrb	r2, [r2, r3]
 8011134:	551a      	strb	r2, [r3, r4]
 8011136:	3301      	adds	r3, #1
    while(len) {
 8011138:	2b08      	cmp	r3, #8
 801113a:	d1f9      	bne.n	8011130 <lv_bar_design+0x3f8>
    mask_indic_max_area.x1 += bg_left;
 801113c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8011140:	9a04      	ldr	r2, [sp, #16]
    mask_indic_max_area.y1 += bg_top;
 8011142:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
    mask_indic_max_area.x1 += bg_left;
 8011146:	441a      	add	r2, r3
 8011148:	fa1f fc82 	uxth.w	ip, r2
    mask_indic_max_area.y1 += bg_top;
 801114c:	9a06      	ldr	r2, [sp, #24]
    mask_indic_max_area.y2 -= bg_bottom;
 801114e:	9b07      	ldr	r3, [sp, #28]
    mask_indic_max_area.y1 += bg_top;
 8011150:	4402      	add	r2, r0
 8011152:	b291      	uxth	r1, r2
    mask_indic_max_area.x2 -= bg_right;
 8011154:	9805      	ldr	r0, [sp, #20]
 8011156:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 801115a:	42be      	cmp	r6, r7
    mask_indic_max_area.x2 -= bg_right;
 801115c:	eba2 0200 	sub.w	r2, r2, r0
    mask_indic_max_area.y2 -= bg_bottom;
 8011160:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
    mask_indic_max_area.x2 -= bg_right;
 8011164:	b292      	uxth	r2, r2
    mask_indic_max_area.y2 -= bg_bottom;
 8011166:	eba0 0003 	sub.w	r0, r0, r3
 801116a:	b280      	uxth	r0, r0
    mask_indic_max_area.x1 += bg_left;
 801116c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
    mask_indic_max_area.y1 += bg_top;
 8011170:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    mask_indic_max_area.x2 -= bg_right;
 8011174:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    mask_indic_max_area.y2 -= bg_bottom;
 8011178:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 801117c:	f6ff aec1 	blt.w	8010f02 <lv_bar_design+0x1ca>
 8011180:	3001      	adds	r0, #1
 8011182:	1a40      	subs	r0, r0, r1
 8011184:	b200      	sxth	r0, r0
 8011186:	2803      	cmp	r0, #3
 8011188:	dc0b      	bgt.n	80111a2 <lv_bar_design+0x46a>
        mask_indic_max_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
 801118a:	2302      	movs	r3, #2
 801118c:	fb97 f7f3 	sdiv	r7, r7, r3
 8011190:	8a6b      	ldrh	r3, [r5, #18]
 8011192:	441f      	add	r7, r3
 8011194:	b2bf      	uxth	r7, r7
 8011196:	1ebb      	subs	r3, r7, #2
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 8011198:	3702      	adds	r7, #2
        mask_indic_max_area.y1 = bar->coords.y1 + (objh / 2) - (LV_BAR_SIZE_MIN / 2);
 801119a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 801119e:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
    lv_draw_mask_radius_init(&mask_indic_param, &ext->indic_area, draw_indic_dsc.radius, false);
 80111a2:	2300      	movs	r3, #0
 80111a4:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 80111a8:	9901      	ldr	r1, [sp, #4]
 80111aa:	a814      	add	r0, sp, #80	; 0x50
 80111ac:	f7fa fc2c 	bl	800ba08 <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 80111b0:	2100      	movs	r1, #0
 80111b2:	a814      	add	r0, sp, #80	; 0x50
 80111b4:	f7fa fb34 	bl	800b820 <lv_draw_mask_add>
 80111b8:	4606      	mov	r6, r0
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_indic_dsc);
 80111ba:	4620      	mov	r0, r4
    draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
 80111bc:	2400      	movs	r4, #0
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_indic_dsc);
 80111be:	aa1b      	add	r2, sp, #108	; 0x6c
 80111c0:	4641      	mov	r1, r8
 80111c2:	f7fa ff19 	bl	800bff8 <lv_draw_rect>
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 80111c6:	aa1b      	add	r2, sp, #108	; 0x6c
 80111c8:	4641      	mov	r1, r8
 80111ca:	9801      	ldr	r0, [sp, #4]
    draw_indic_dsc.border_opa = border_opa;
 80111cc:	f88d b080 	strb.w	fp, [sp, #128]	; 0x80
    draw_indic_dsc.bg_opa = LV_OPA_TRANSP;
 80111d0:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
    draw_indic_dsc.shadow_opa = LV_OPA_TRANSP;
 80111d4:	f88d 4096 	strb.w	r4, [sp, #150]	; 0x96
    draw_indic_dsc.value_opa = LV_OPA_TRANSP;
 80111d8:	f88d 40b0 	strb.w	r4, [sp, #176]	; 0xb0
    draw_indic_dsc.pattern_image = NULL;
 80111dc:	9426      	str	r4, [sp, #152]	; 0x98
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 80111de:	f7fa ff0b 	bl	800bff8 <lv_draw_rect>
    lv_draw_mask_remove_id(mask_indic_id);
 80111e2:	4630      	mov	r0, r6
 80111e4:	f7fa fb56 	bl	800b894 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
 80111e8:	4650      	mov	r0, sl
 80111ea:	f7fa fb53 	bl	800b894 <lv_draw_mask_remove_id>
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 80111ee:	aa1b      	add	r2, sp, #108	; 0x6c
 80111f0:	4641      	mov	r1, r8
 80111f2:	9801      	ldr	r0, [sp, #4]
    draw_indic_dsc.value_opa = value_opa;
 80111f4:	f88d 90b0 	strb.w	r9, [sp, #176]	; 0xb0
    draw_indic_dsc.border_opa = LV_OPA_TRANSP;
 80111f8:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
    lv_draw_rect(&ext->indic_area, clip_area, &draw_indic_dsc);
 80111fc:	f7fa fefc 	bl	800bff8 <lv_draw_rect>
        draw_dsc.bg_opa = LV_OPA_TRANSP;
 8011200:	2400      	movs	r4, #0
        lv_draw_rect_dsc_init(&draw_dsc);
 8011202:	a81b      	add	r0, sp, #108	; 0x6c
 8011204:	f7fa fed4 	bl	800bfb0 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
 8011208:	aa1b      	add	r2, sp, #108	; 0x6c
 801120a:	4621      	mov	r1, r4
 801120c:	4628      	mov	r0, r5
        draw_dsc.bg_opa = LV_OPA_TRANSP;
 801120e:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
        draw_dsc.border_opa = LV_OPA_TRANSP;
 8011212:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
        draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8011216:	f88d 4096 	strb.w	r4, [sp, #150]	; 0x96
        draw_dsc.pattern_opa = LV_OPA_TRANSP;
 801121a:	f88d 40a2 	strb.w	r4, [sp, #162]	; 0xa2
        draw_dsc.outline_opa = LV_OPA_TRANSP;
 801121e:	f88d 408a 	strb.w	r4, [sp, #138]	; 0x8a
        lv_obj_init_draw_rect_dsc(bar, LV_BAR_PART_BG, &draw_dsc);
 8011222:	f7f5 f809 	bl	8006238 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
 8011226:	4641      	mov	r1, r8
 8011228:	9803      	ldr	r0, [sp, #12]
 801122a:	aa1b      	add	r2, sp, #108	; 0x6c
            lv_draw_rect(&bar->coords, clip_area, &draw_dsc);
 801122c:	f7fa fee4 	bl	800bff8 <lv_draw_rect>
 8011230:	e67d      	b.n	8010f2e <lv_bar_design+0x1f6>
        *axis1 = *axis2 - anim_cur_value_x;
 8011232:	f8bc e000 	ldrh.w	lr, [ip]
 8011236:	ebae 0e0a 	sub.w	lr, lr, sl
 801123a:	f8a0 e000 	strh.w	lr, [r0]
        *axis2 -= anim_start_value_x;
 801123e:	f8bc 2000 	ldrh.w	r2, [ip]
 8011242:	eba2 020b 	sub.w	r2, r2, fp
 8011246:	f8ac 2000 	strh.w	r2, [ip]
 801124a:	e6fd      	b.n	8011048 <lv_bar_design+0x310>
    if(!sym && indic_length_calc(&ext->indic_area) <= 1) return;
 801124c:	9801      	ldr	r0, [sp, #4]
 801124e:	9b08      	ldr	r3, [sp, #32]
 8011250:	4798      	blx	r3
 8011252:	2801      	cmp	r0, #1
 8011254:	f73f af0f 	bgt.w	8011076 <lv_bar_design+0x33e>
 8011258:	e7d2      	b.n	8011200 <lv_bar_design+0x4c8>
 801125a:	bf00      	nop
 801125c:	08010bb1 	.word	0x08010bb1

08011260 <lv_bar_set_value>:
{
 8011260:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011262:	4604      	mov	r4, r0
 8011264:	460e      	mov	r6, r1
 8011266:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
 8011268:	f7fd feae 	bl	800efc8 <lv_debug_check_null>
 801126c:	4603      	mov	r3, r0
 801126e:	b920      	cbnz	r0, 801127a <lv_bar_set_value+0x1a>
 8011270:	4622      	mov	r2, r4
 8011272:	4810      	ldr	r0, [pc, #64]	; (80112b4 <lv_bar_set_value+0x54>)
 8011274:	f7fd feac 	bl	800efd0 <lv_debug_log_error>
 8011278:	e7fe      	b.n	8011278 <lv_bar_set_value+0x18>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801127a:	4620      	mov	r0, r4
 801127c:	f7f4 fedc 	bl	8006038 <lv_obj_get_ext_attr>
 8011280:	4602      	mov	r2, r0
    if(ext->cur_value == value) return;
 8011282:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011286:	42b0      	cmp	r0, r6
 8011288:	d012      	beq.n	80112b0 <lv_bar_set_value+0x50>
    new_value = value > ext->max_value ? ext->max_value : value;
 801128a:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801128e:	42b1      	cmp	r1, r6
 8011290:	460b      	mov	r3, r1
 8011292:	bfa8      	it	ge
 8011294:	4633      	movge	r3, r6
    new_value = new_value < ext->min_value ? ext->min_value : new_value;
 8011296:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 801129a:	4299      	cmp	r1, r3
 801129c:	bfb8      	it	lt
 801129e:	4619      	movlt	r1, r3
    if(ext->cur_value == new_value) return;
 80112a0:	4288      	cmp	r0, r1
 80112a2:	d005      	beq.n	80112b0 <lv_bar_set_value+0x50>
    lv_bar_set_value_with_anim(bar, new_value, &ext->cur_value, &ext->cur_value_anim, anim);
 80112a4:	9500      	str	r5, [sp, #0]
 80112a6:	f102 0314 	add.w	r3, r2, #20
 80112aa:	4620      	mov	r0, r4
 80112ac:	f7ff fd0c 	bl	8010cc8 <lv_bar_set_value_with_anim>
}
 80112b0:	b002      	add	sp, #8
 80112b2:	bd70      	pop	{r4, r5, r6, pc}
 80112b4:	080158e8 	.word	0x080158e8

080112b8 <lv_bar_create>:
{
 80112b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112bc:	460f      	mov	r7, r1
    lv_obj_t * bar = lv_obj_create(par, copy);
 80112be:	f7f3 fdd5 	bl	8004e6c <lv_obj_create>
 80112c2:	4605      	mov	r5, r0
    LV_ASSERT_MEM(bar);
 80112c4:	f7fd fe80 	bl	800efc8 <lv_debug_check_null>
 80112c8:	4603      	mov	r3, r0
 80112ca:	b920      	cbnz	r0, 80112d6 <lv_bar_create+0x1e>
 80112cc:	462a      	mov	r2, r5
 80112ce:	4844      	ldr	r0, [pc, #272]	; (80113e0 <lv_bar_create+0x128>)
 80112d0:	f7fd fe7e 	bl	800efd0 <lv_debug_log_error>
 80112d4:	e7fe      	b.n	80112d4 <lv_bar_create+0x1c>
    if(bar == NULL) return NULL;
 80112d6:	b30d      	cbz	r5, 801131c <lv_bar_create+0x64>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(bar);
 80112d8:	4c42      	ldr	r4, [pc, #264]	; (80113e4 <lv_bar_create+0x12c>)
 80112da:	6823      	ldr	r3, [r4, #0]
 80112dc:	b91b      	cbnz	r3, 80112e6 <lv_bar_create+0x2e>
 80112de:	4628      	mov	r0, r5
 80112e0:	f7f4 fe8a 	bl	8005ff8 <lv_obj_get_signal_cb>
 80112e4:	6020      	str	r0, [r4, #0]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(bar);
 80112e6:	4c40      	ldr	r4, [pc, #256]	; (80113e8 <lv_bar_create+0x130>)
 80112e8:	6823      	ldr	r3, [r4, #0]
 80112ea:	b91b      	cbnz	r3, 80112f4 <lv_bar_create+0x3c>
 80112ec:	4628      	mov	r0, r5
 80112ee:	f7f4 fe93 	bl	8006018 <lv_obj_get_design_cb>
 80112f2:	6020      	str	r0, [r4, #0]
    lv_bar_ext_t * ext = lv_obj_allocate_ext_attr(bar, sizeof(lv_bar_ext_t));
 80112f4:	2138      	movs	r1, #56	; 0x38
 80112f6:	4628      	mov	r0, r5
 80112f8:	f7f3 f8bc 	bl	8004474 <lv_obj_allocate_ext_attr>
 80112fc:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
 80112fe:	f7fd fe63 	bl	800efc8 <lv_debug_check_null>
 8011302:	4603      	mov	r3, r0
 8011304:	b920      	cbnz	r0, 8011310 <lv_bar_create+0x58>
 8011306:	4622      	mov	r2, r4
 8011308:	4835      	ldr	r0, [pc, #212]	; (80113e0 <lv_bar_create+0x128>)
 801130a:	f7fd fe61 	bl	800efd0 <lv_debug_log_error>
 801130e:	e7fe      	b.n	801130e <lv_bar_create+0x56>
 8011310:	2600      	movs	r6, #0
    if(ext == NULL) {
 8011312:	b934      	cbnz	r4, 8011322 <lv_bar_create+0x6a>
        lv_obj_del(bar);
 8011314:	4628      	mov	r0, r5
 8011316:	f7f4 ff11 	bl	800613c <lv_obj_del>
        return NULL;
 801131a:	4625      	mov	r5, r4
}
 801131c:	4628      	mov	r0, r5
 801131e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ext->min_value = 0;
 8011322:	2364      	movs	r3, #100	; 0x64
 8011324:	6063      	str	r3, [r4, #4]
    ext->anim_time  = 200;
 8011326:	23c8      	movs	r3, #200	; 0xc8
 8011328:	8223      	strh	r3, [r4, #16]

static void lv_bar_init_anim(lv_obj_t * bar, lv_bar_anim_t * bar_anim)
{
    bar_anim->bar = bar;
    bar_anim->anim_start = 0;
    bar_anim->anim_end = 0;
 801132a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801132e:	83a3      	strh	r3, [r4, #28]
 8011330:	8523      	strh	r3, [r4, #40]	; 0x28
    ext->type         = LV_BAR_TYPE_NORMAL;
 8011332:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    lv_style_list_init(&ext->style_indic);
 8011336:	f104 0830 	add.w	r8, r4, #48	; 0x30
    ext->type         = LV_BAR_TYPE_NORMAL;
 801133a:	f366 0301 	bfi	r3, r6, #0, #2
 801133e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    lv_style_list_init(&ext->style_indic);
 8011342:	4640      	mov	r0, r8
    ext->cur_value = 0;
 8011344:	6026      	str	r6, [r4, #0]
    bar_anim->anim_start = 0;
 8011346:	e9c4 5605 	strd	r5, r6, [r4, #20]
 801134a:	e9c4 5608 	strd	r5, r6, [r4, #32]
    lv_style_list_init(&ext->style_indic);
 801134e:	f7f6 fdb6 	bl	8007ebe <lv_style_list_init>
    lv_obj_set_signal_cb(bar, lv_bar_signal);
 8011352:	4926      	ldr	r1, [pc, #152]	; (80113ec <lv_bar_create+0x134>)
 8011354:	4628      	mov	r0, r5
 8011356:	f7f3 f867 	bl	8004428 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(bar, lv_bar_design);
 801135a:	4925      	ldr	r1, [pc, #148]	; (80113f0 <lv_bar_create+0x138>)
 801135c:	4628      	mov	r0, r5
 801135e:	f7f3 f879 	bl	8004454 <lv_obj_set_design_cb>
    if(copy == NULL) {
 8011362:	b9a7      	cbnz	r7, 801138e <lv_bar_create+0xd6>
        lv_obj_set_click(bar, false);
 8011364:	4639      	mov	r1, r7
 8011366:	4628      	mov	r0, r5
 8011368:	f7f2 ff60 	bl	800422c <lv_obj_set_click>
        lv_obj_set_size(bar, LV_DPI * 2, LV_DPI / 10);
 801136c:	4628      	mov	r0, r5
 801136e:	2210      	movs	r2, #16
 8011370:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011374:	f7f3 ff9e 	bl	80052b4 <lv_obj_set_size>
        lv_bar_set_value(bar, ext->cur_value, false);
 8011378:	f9b4 1000 	ldrsh.w	r1, [r4]
 801137c:	4628      	mov	r0, r5
 801137e:	463a      	mov	r2, r7
 8011380:	f7ff ff6e 	bl	8011260 <lv_bar_set_value>
        lv_theme_apply(bar, LV_THEME_BAR);
 8011384:	2103      	movs	r1, #3
 8011386:	4628      	mov	r0, r5
 8011388:	f7ff fbce 	bl	8010b28 <lv_theme_apply>
 801138c:	e7c6      	b.n	801131c <lv_bar_create+0x64>
        lv_bar_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
 801138e:	4638      	mov	r0, r7
 8011390:	f7f4 fe52 	bl	8006038 <lv_obj_get_ext_attr>
        ext->min_value          = ext_copy->min_value;
 8011394:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
        ext->type                = ext_copy->type;
 8011398:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
        ext->min_value          = ext_copy->min_value;
 801139c:	8063      	strh	r3, [r4, #2]
        ext->start_value        = ext_copy->start_value;
 801139e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
        lv_style_list_copy(&ext->style_indic, &ext_copy->style_indic);
 80113a2:	f100 0130 	add.w	r1, r0, #48	; 0x30
        ext->start_value        = ext_copy->start_value;
 80113a6:	80e3      	strh	r3, [r4, #6]
        ext->max_value          = ext_copy->max_value;
 80113a8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80113ac:	80a3      	strh	r3, [r4, #4]
        ext->cur_value          = ext_copy->cur_value;
 80113ae:	f9b0 3000 	ldrsh.w	r3, [r0]
        lv_style_list_copy(&ext->style_indic, &ext_copy->style_indic);
 80113b2:	4640      	mov	r0, r8
        ext->cur_value          = ext_copy->cur_value;
 80113b4:	8023      	strh	r3, [r4, #0]
        ext->type                = ext_copy->type;
 80113b6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80113ba:	f362 0301 	bfi	r3, r2, #0, #2
 80113be:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        lv_style_list_copy(&ext->style_indic, &ext_copy->style_indic);
 80113c2:	f7f7 f866 	bl	8008492 <lv_style_list_copy>
        lv_obj_refresh_style(bar, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 80113c6:	22ff      	movs	r2, #255	; 0xff
 80113c8:	4628      	mov	r0, r5
 80113ca:	4611      	mov	r1, r2
 80113cc:	f7f4 fcaa 	bl	8005d24 <lv_obj_refresh_style>
        lv_bar_set_value(bar, ext->cur_value, LV_ANIM_OFF);
 80113d0:	4632      	mov	r2, r6
 80113d2:	f9b4 1000 	ldrsh.w	r1, [r4]
 80113d6:	4628      	mov	r0, r5
 80113d8:	f7ff ff42 	bl	8011260 <lv_bar_set_value>
 80113dc:	e79e      	b.n	801131c <lv_bar_create+0x64>
 80113de:	bf00      	nop
 80113e0:	08015994 	.word	0x08015994
 80113e4:	2000259c 	.word	0x2000259c
 80113e8:	20002598 	.word	0x20002598
 80113ec:	08010c05 	.word	0x08010c05
 80113f0:	08010d39 	.word	0x08010d39

080113f4 <lv_bar_get_value>:
{
 80113f4:	b510      	push	{r4, lr}
 80113f6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
 80113f8:	f7fd fde6 	bl	800efc8 <lv_debug_check_null>
 80113fc:	4603      	mov	r3, r0
 80113fe:	b920      	cbnz	r0, 801140a <lv_bar_get_value+0x16>
 8011400:	4622      	mov	r2, r4
 8011402:	4808      	ldr	r0, [pc, #32]	; (8011424 <lv_bar_get_value+0x30>)
 8011404:	f7fd fde4 	bl	800efd0 <lv_debug_log_error>
 8011408:	e7fe      	b.n	8011408 <lv_bar_get_value+0x14>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801140a:	4620      	mov	r0, r4
 801140c:	f7f4 fe14 	bl	8006038 <lv_obj_get_ext_attr>
    return LV_BAR_GET_ANIM_VALUE(ext->cur_value, ext->cur_value_anim);
 8011410:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
 8011414:	3301      	adds	r3, #1
 8011416:	bf14      	ite	ne
 8011418:	f9b0 001a 	ldrshne.w	r0, [r0, #26]
 801141c:	f9b0 0000 	ldrsheq.w	r0, [r0]
}
 8011420:	bd10      	pop	{r4, pc}
 8011422:	bf00      	nop
 8011424:	080158e8 	.word	0x080158e8

08011428 <lv_bar_get_type>:
{
 8011428:	b510      	push	{r4, lr}
 801142a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
 801142c:	f7fd fdcc 	bl	800efc8 <lv_debug_check_null>
 8011430:	4603      	mov	r3, r0
 8011432:	b920      	cbnz	r0, 801143e <lv_bar_get_type+0x16>
 8011434:	4622      	mov	r2, r4
 8011436:	4806      	ldr	r0, [pc, #24]	; (8011450 <lv_bar_get_type+0x28>)
 8011438:	f7fd fdca 	bl	800efd0 <lv_debug_log_error>
 801143c:	e7fe      	b.n	801143c <lv_bar_get_type+0x14>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801143e:	4620      	mov	r0, r4
 8011440:	f7f4 fdfa 	bl	8006038 <lv_obj_get_ext_attr>
    return ext->type;
 8011444:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
}
 8011448:	f000 0003 	and.w	r0, r0, #3
 801144c:	bd10      	pop	{r4, pc}
 801144e:	bf00      	nop
 8011450:	080158e8 	.word	0x080158e8

08011454 <lv_bar_set_range>:
{
 8011454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011456:	4605      	mov	r5, r0
 8011458:	460e      	mov	r6, r1
 801145a:	4617      	mov	r7, r2
    LV_ASSERT_OBJ(bar, LV_OBJX_NAME);
 801145c:	f7fd fdb4 	bl	800efc8 <lv_debug_check_null>
 8011460:	4603      	mov	r3, r0
 8011462:	b920      	cbnz	r0, 801146e <lv_bar_set_range+0x1a>
 8011464:	462a      	mov	r2, r5
 8011466:	4819      	ldr	r0, [pc, #100]	; (80114cc <lv_bar_set_range+0x78>)
 8011468:	f7fd fdb2 	bl	800efd0 <lv_debug_log_error>
 801146c:	e7fe      	b.n	801146c <lv_bar_set_range+0x18>
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 801146e:	4628      	mov	r0, r5
 8011470:	f7f4 fde2 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext->min_value == min && ext->max_value == max) return;
 8011474:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    lv_bar_ext_t * ext = lv_obj_get_ext_attr(bar);
 8011478:	4604      	mov	r4, r0
    if(ext->min_value == min && ext->max_value == max) return;
 801147a:	42b3      	cmp	r3, r6
 801147c:	d103      	bne.n	8011486 <lv_bar_set_range+0x32>
 801147e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011482:	42bb      	cmp	r3, r7
 8011484:	d020      	beq.n	80114c8 <lv_bar_set_range+0x74>
    ext->max_value = max;
 8011486:	80a7      	strh	r7, [r4, #4]
    ext->min_value = min;
 8011488:	8066      	strh	r6, [r4, #2]
    if(lv_bar_get_type(bar) != LV_BAR_TYPE_CUSTOM)
 801148a:	4628      	mov	r0, r5
 801148c:	f7ff ffcc 	bl	8011428 <lv_bar_get_type>
    if(ext->cur_value > max) {
 8011490:	f9b4 3000 	ldrsh.w	r3, [r4]
    if(lv_bar_get_type(bar) != LV_BAR_TYPE_CUSTOM)
 8011494:	2802      	cmp	r0, #2
        ext->start_value = min;
 8011496:	bf18      	it	ne
 8011498:	80e6      	strhne	r6, [r4, #6]
    if(ext->cur_value > max) {
 801149a:	42bb      	cmp	r3, r7
 801149c:	dd05      	ble.n	80114aa <lv_bar_set_range+0x56>
        ext->cur_value = max;
 801149e:	8027      	strh	r7, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 80114a0:	2200      	movs	r2, #0
 80114a2:	4639      	mov	r1, r7
 80114a4:	4628      	mov	r0, r5
 80114a6:	f7ff fedb 	bl	8011260 <lv_bar_set_value>
    if(ext->cur_value < min) {
 80114aa:	f9b4 3000 	ldrsh.w	r3, [r4]
 80114ae:	42b3      	cmp	r3, r6
 80114b0:	da05      	bge.n	80114be <lv_bar_set_range+0x6a>
        ext->cur_value = min;
 80114b2:	8026      	strh	r6, [r4, #0]
        lv_bar_set_value(bar, ext->cur_value, false);
 80114b4:	2200      	movs	r2, #0
 80114b6:	4631      	mov	r1, r6
 80114b8:	4628      	mov	r0, r5
 80114ba:	f7ff fed1 	bl	8011260 <lv_bar_set_value>
    lv_obj_invalidate(bar);
 80114be:	4628      	mov	r0, r5
}
 80114c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_invalidate(bar);
 80114c4:	f7f3 ba0c 	b.w	80048e0 <lv_obj_invalidate>
}
 80114c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114ca:	bf00      	nop
 80114cc:	080158e8 	.word	0x080158e8

080114d0 <lv_btn_design>:
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_btn_design(lv_obj_t * btn, const lv_area_t * clip_area, lv_design_mode_t mode)
{
    if(mode == LV_DESIGN_COVER_CHK) {
 80114d0:	2a02      	cmp	r2, #2
{
 80114d2:	b510      	push	{r4, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 80114d4:	d104      	bne.n	80114e0 <lv_btn_design+0x10>
    else if(mode == LV_DESIGN_DRAW_POST) {
        ancestor_design(btn, clip_area, mode);
    }

    return LV_DESIGN_RES_OK;
}
 80114d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return ancestor_design(btn, clip_area, mode);
 80114da:	4b06      	ldr	r3, [pc, #24]	; (80114f4 <lv_btn_design+0x24>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	4718      	bx	r3
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 80114e0:	b91a      	cbnz	r2, 80114ea <lv_btn_design+0x1a>
        ancestor_design(btn, clip_area, mode);
 80114e2:	4b04      	ldr	r3, [pc, #16]	; (80114f4 <lv_btn_design+0x24>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	4798      	blx	r3
 80114e8:	e001      	b.n	80114ee <lv_btn_design+0x1e>
    else if(mode == LV_DESIGN_DRAW_POST) {
 80114ea:	2a01      	cmp	r2, #1
 80114ec:	d0f9      	beq.n	80114e2 <lv_btn_design+0x12>
}
 80114ee:	2000      	movs	r0, #0
 80114f0:	bd10      	pop	{r4, pc}
 80114f2:	bf00      	nop
 80114f4:	200025a0 	.word	0x200025a0

080114f8 <lv_btn_create>:
{
 80114f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114fa:	460e      	mov	r6, r1
 80114fc:	4607      	mov	r7, r0
    btn = lv_cont_create(par, copy);
 80114fe:	f000 fad3 	bl	8011aa8 <lv_cont_create>
 8011502:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btn);
 8011504:	f7fd fd60 	bl	800efc8 <lv_debug_check_null>
 8011508:	4603      	mov	r3, r0
 801150a:	b920      	cbnz	r0, 8011516 <lv_btn_create+0x1e>
 801150c:	4622      	mov	r2, r4
 801150e:	482b      	ldr	r0, [pc, #172]	; (80115bc <lv_btn_create+0xc4>)
 8011510:	f7fd fd5e 	bl	800efd0 <lv_debug_log_error>
 8011514:	e7fe      	b.n	8011514 <lv_btn_create+0x1c>
    if(btn == NULL) return NULL;
 8011516:	b304      	cbz	r4, 801155a <lv_btn_create+0x62>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
 8011518:	4d29      	ldr	r5, [pc, #164]	; (80115c0 <lv_btn_create+0xc8>)
 801151a:	682b      	ldr	r3, [r5, #0]
 801151c:	b91b      	cbnz	r3, 8011526 <lv_btn_create+0x2e>
 801151e:	4620      	mov	r0, r4
 8011520:	f7f4 fd6a 	bl	8005ff8 <lv_obj_get_signal_cb>
 8011524:	6028      	str	r0, [r5, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
 8011526:	4d27      	ldr	r5, [pc, #156]	; (80115c4 <lv_btn_create+0xcc>)
 8011528:	682b      	ldr	r3, [r5, #0]
 801152a:	b91b      	cbnz	r3, 8011534 <lv_btn_create+0x3c>
 801152c:	4620      	mov	r0, r4
 801152e:	f7f4 fd73 	bl	8006018 <lv_obj_get_design_cb>
 8011532:	6028      	str	r0, [r5, #0]
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(btn, sizeof(lv_btn_ext_t));
 8011534:	2103      	movs	r1, #3
 8011536:	4620      	mov	r0, r4
 8011538:	f7f2 ff9c 	bl	8004474 <lv_obj_allocate_ext_attr>
 801153c:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
 801153e:	f7fd fd43 	bl	800efc8 <lv_debug_check_null>
 8011542:	4603      	mov	r3, r0
 8011544:	b920      	cbnz	r0, 8011550 <lv_btn_create+0x58>
 8011546:	462a      	mov	r2, r5
 8011548:	481c      	ldr	r0, [pc, #112]	; (80115bc <lv_btn_create+0xc4>)
 801154a:	f7fd fd41 	bl	800efd0 <lv_debug_log_error>
 801154e:	e7fe      	b.n	801154e <lv_btn_create+0x56>
    if(ext == NULL) {
 8011550:	b92d      	cbnz	r5, 801155e <lv_btn_create+0x66>
        lv_obj_del(btn);
 8011552:	4620      	mov	r0, r4
 8011554:	f7f4 fdf2 	bl	800613c <lv_obj_del>
        return NULL;
 8011558:	462c      	mov	r4, r5
}
 801155a:	4620      	mov	r0, r4
 801155c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ext->checkable = 0;
 801155e:	78ab      	ldrb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
 8011560:	4919      	ldr	r1, [pc, #100]	; (80115c8 <lv_btn_create+0xd0>)
    ext->checkable = 0;
 8011562:	f36f 0300 	bfc	r3, #0, #1
    lv_obj_set_signal_cb(btn, lv_btn_signal);
 8011566:	4620      	mov	r0, r4
    ext->checkable = 0;
 8011568:	70ab      	strb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
 801156a:	f7f2 ff5d 	bl	8004428 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(btn, lv_btn_design);
 801156e:	4917      	ldr	r1, [pc, #92]	; (80115cc <lv_btn_create+0xd4>)
 8011570:	4620      	mov	r0, r4
 8011572:	f7f2 ff6f 	bl	8004454 <lv_obj_set_design_cb>
    if(copy == NULL) {
 8011576:	b996      	cbnz	r6, 801159e <lv_btn_create+0xa6>
        if(par) {
 8011578:	b147      	cbz	r7, 801158c <lv_btn_create+0x94>
            lv_obj_set_size(btn, LV_DPI, LV_DPI / 3);
 801157a:	21a0      	movs	r1, #160	; 0xa0
 801157c:	4620      	mov	r0, r4
 801157e:	2235      	movs	r2, #53	; 0x35
 8011580:	f7f3 fe98 	bl	80052b4 <lv_obj_set_size>
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
 8011584:	2101      	movs	r1, #1
 8011586:	4620      	mov	r0, r4
 8011588:	f000 fb0c 	bl	8011ba4 <lv_cont_set_layout>
        lv_obj_set_click(btn, true); /*Be sure the button is clickable*/
 801158c:	4620      	mov	r0, r4
 801158e:	2101      	movs	r1, #1
 8011590:	f7f2 fe4c 	bl	800422c <lv_obj_set_click>
        lv_theme_apply(btn, LV_THEME_BTN);
 8011594:	2104      	movs	r1, #4
 8011596:	4620      	mov	r0, r4
 8011598:	f7ff fac6 	bl	8010b28 <lv_theme_apply>
 801159c:	e7dd      	b.n	801155a <lv_btn_create+0x62>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801159e:	4630      	mov	r0, r6
 80115a0:	f7f4 fd4a 	bl	8006038 <lv_obj_get_ext_attr>
        ext->checkable             = copy_ext->checkable;
 80115a4:	78ab      	ldrb	r3, [r5, #2]
 80115a6:	7882      	ldrb	r2, [r0, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 80115a8:	4620      	mov	r0, r4
        ext->checkable             = copy_ext->checkable;
 80115aa:	f362 0300 	bfi	r3, r2, #0, #1
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 80115ae:	22ff      	movs	r2, #255	; 0xff
        ext->checkable             = copy_ext->checkable;
 80115b0:	70ab      	strb	r3, [r5, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 80115b2:	4611      	mov	r1, r2
 80115b4:	f7f4 fbb6 	bl	8005d24 <lv_obj_refresh_style>
 80115b8:	e7cf      	b.n	801155a <lv_btn_create+0x62>
 80115ba:	bf00      	nop
 80115bc:	08015994 	.word	0x08015994
 80115c0:	200025a4 	.word	0x200025a4
 80115c4:	200025a0 	.word	0x200025a0
 80115c8:	08011675 	.word	0x08011675
 80115cc:	080114d1 	.word	0x080114d1

080115d0 <lv_btn_set_state>:
{
 80115d0:	b538      	push	{r3, r4, r5, lr}
 80115d2:	4604      	mov	r4, r0
 80115d4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 80115d6:	f7fd fcf7 	bl	800efc8 <lv_debug_check_null>
 80115da:	4603      	mov	r3, r0
 80115dc:	b920      	cbnz	r0, 80115e8 <lv_btn_set_state+0x18>
 80115de:	4622      	mov	r2, r4
 80115e0:	4819      	ldr	r0, [pc, #100]	; (8011648 <lv_btn_set_state+0x78>)
 80115e2:	f7fd fcf5 	bl	800efd0 <lv_debug_log_error>
 80115e6:	e7fe      	b.n	80115e6 <lv_btn_set_state+0x16>
    switch(state) {
 80115e8:	2d05      	cmp	r5, #5
 80115ea:	d82c      	bhi.n	8011646 <lv_btn_set_state+0x76>
 80115ec:	e8df f005 	tbb	[pc, r5]
 80115f0:	131f0903 	.word	0x131f0903
 80115f4:	2519      	.short	0x2519
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
 80115f6:	2131      	movs	r1, #49	; 0x31
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
 80115f8:	4620      	mov	r0, r4
}
 80115fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
 80115fe:	f7f5 bd84 	b.w	800710a <lv_obj_clear_state>
            lv_obj_clear_state(btn, LV_STATE_CHECKED | LV_STATE_DISABLED);
 8011602:	2121      	movs	r1, #33	; 0x21
 8011604:	4620      	mov	r0, r4
 8011606:	f7f5 fd80 	bl	800710a <lv_obj_clear_state>
            lv_obj_add_state(btn, LV_STATE_PRESSED);
 801160a:	2110      	movs	r1, #16
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
 801160c:	4620      	mov	r0, r4
}
 801160e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
 8011612:	f7f5 bd65 	b.w	80070e0 <lv_obj_add_state>
            lv_obj_add_state(btn, LV_STATE_CHECKED);
 8011616:	2101      	movs	r1, #1
 8011618:	4620      	mov	r0, r4
 801161a:	f7f5 fd61 	bl	80070e0 <lv_obj_add_state>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
 801161e:	2130      	movs	r1, #48	; 0x30
 8011620:	e7ea      	b.n	80115f8 <lv_btn_set_state+0x28>
            lv_obj_add_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
 8011622:	2111      	movs	r1, #17
 8011624:	4620      	mov	r0, r4
 8011626:	f7f5 fd5b 	bl	80070e0 <lv_obj_add_state>
            lv_obj_clear_state(btn, LV_STATE_DISABLED);
 801162a:	2120      	movs	r1, #32
 801162c:	e7e4      	b.n	80115f8 <lv_btn_set_state+0x28>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
 801162e:	2111      	movs	r1, #17
 8011630:	4620      	mov	r0, r4
 8011632:	f7f5 fd6a 	bl	800710a <lv_obj_clear_state>
            lv_obj_add_state(btn, LV_STATE_DISABLED);
 8011636:	2120      	movs	r1, #32
 8011638:	e7e8      	b.n	801160c <lv_btn_set_state+0x3c>
            lv_obj_clear_state(btn, LV_STATE_PRESSED);
 801163a:	2110      	movs	r1, #16
 801163c:	4620      	mov	r0, r4
 801163e:	f7f5 fd64 	bl	800710a <lv_obj_clear_state>
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
 8011642:	2121      	movs	r1, #33	; 0x21
 8011644:	e7e2      	b.n	801160c <lv_btn_set_state+0x3c>
}
 8011646:	bd38      	pop	{r3, r4, r5, pc}
 8011648:	080158e8 	.word	0x080158e8

0801164c <lv_btn_get_checkable>:
{
 801164c:	b510      	push	{r4, lr}
 801164e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
 8011650:	f7fd fcba 	bl	800efc8 <lv_debug_check_null>
 8011654:	4603      	mov	r3, r0
 8011656:	b920      	cbnz	r0, 8011662 <lv_btn_get_checkable+0x16>
 8011658:	4622      	mov	r2, r4
 801165a:	4805      	ldr	r0, [pc, #20]	; (8011670 <lv_btn_get_checkable+0x24>)
 801165c:	f7fd fcb8 	bl	800efd0 <lv_debug_log_error>
 8011660:	e7fe      	b.n	8011660 <lv_btn_get_checkable+0x14>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
 8011662:	4620      	mov	r0, r4
 8011664:	f7f4 fce8 	bl	8006038 <lv_obj_get_ext_attr>
    return ext->checkable != 0 ? true : false;
 8011668:	7880      	ldrb	r0, [r0, #2]
}
 801166a:	f000 0001 	and.w	r0, r0, #1
 801166e:	bd10      	pop	{r4, pc}
 8011670:	080158e8 	.word	0x080158e8

08011674 <lv_btn_signal>:
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
 8011674:	4b31      	ldr	r3, [pc, #196]	; (801173c <lv_btn_signal+0xc8>)
{
 8011676:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    res = ancestor_signal(btn, sign, param);
 801167a:	681b      	ldr	r3, [r3, #0]
{
 801167c:	4604      	mov	r4, r0
 801167e:	460f      	mov	r7, r1
 8011680:	4616      	mov	r6, r2
    res = ancestor_signal(btn, sign, param);
 8011682:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8011684:	2801      	cmp	r0, #1
    res = ancestor_signal(btn, sign, param);
 8011686:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8011688:	d106      	bne.n	8011698 <lv_btn_signal+0x24>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801168a:	2f07      	cmp	r7, #7
 801168c:	d108      	bne.n	80116a0 <lv_btn_signal+0x2c>
 801168e:	492c      	ldr	r1, [pc, #176]	; (8011740 <lv_btn_signal+0xcc>)
 8011690:	4630      	mov	r0, r6
 8011692:	f7f4 fdc3 	bl	800621c <lv_obj_handle_get_type_signal>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
            if(lv_btn_get_checkable(btn)) {
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);

                uint32_t state = 0;
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 8011696:	4605      	mov	r5, r0
        }
#endif
    }

    return res;
}
 8011698:	4628      	mov	r0, r5
 801169a:	b002      	add	sp, #8
 801169c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool tgl           = lv_btn_get_checkable(btn);
 80116a0:	4620      	mov	r0, r4
 80116a2:	f7ff ffd3 	bl	801164c <lv_btn_get_checkable>
    if(sign == LV_SIGNAL_RELEASED) {
 80116a6:	2f0e      	cmp	r7, #14
    bool tgl           = lv_btn_get_checkable(btn);
 80116a8:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_RELEASED) {
 80116aa:	d120      	bne.n	80116ee <lv_btn_signal+0x7a>
        if(lv_indev_is_dragging(param) == false && tgl) {
 80116ac:	4630      	mov	r0, r6
 80116ae:	f7f1 fd40 	bl	8003132 <lv_indev_is_dragging>
 80116b2:	4606      	mov	r6, r0
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d1ef      	bne.n	8011698 <lv_btn_signal+0x24>
 80116b8:	f1b8 0f00 	cmp.w	r8, #0
 80116bc:	d0ec      	beq.n	8011698 <lv_btn_signal+0x24>
            uint32_t toggled = 0;
 80116be:	9001      	str	r0, [sp, #4]
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
 80116c0:	4601      	mov	r1, r0
 80116c2:	4620      	mov	r0, r4
 80116c4:	f7f3 fe94 	bl	80053f0 <lv_obj_get_state>
 80116c8:	07c3      	lsls	r3, r0, #31
 80116ca:	d50a      	bpl.n	80116e2 <lv_btn_signal+0x6e>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
 80116cc:	4631      	mov	r1, r6
 80116ce:	4620      	mov	r0, r4
 80116d0:	f7ff ff7e 	bl	80115d0 <lv_btn_set_state>
                toggled = 0;
 80116d4:	9601      	str	r6, [sp, #4]
            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
 80116d6:	aa01      	add	r2, sp, #4
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
 80116d8:	2110      	movs	r1, #16
 80116da:	4620      	mov	r0, r4
 80116dc:	f7f2 fe84 	bl	80043e8 <lv_event_send>
 80116e0:	e7d9      	b.n	8011696 <lv_btn_signal+0x22>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
 80116e2:	2103      	movs	r1, #3
 80116e4:	4620      	mov	r0, r4
 80116e6:	f7ff ff73 	bl	80115d0 <lv_btn_set_state>
                toggled = 1;
 80116ea:	9501      	str	r5, [sp, #4]
 80116ec:	e7f3      	b.n	80116d6 <lv_btn_signal+0x62>
    else if(sign == LV_SIGNAL_CONTROL) {
 80116ee:	2f18      	cmp	r7, #24
 80116f0:	d1d2      	bne.n	8011698 <lv_btn_signal+0x24>
        char c = *((char *)param);
 80116f2:	7833      	ldrb	r3, [r6, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80116f4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80116f8:	2a11      	cmp	r2, #17
 80116fa:	d10c      	bne.n	8011716 <lv_btn_signal+0xa2>
            if(lv_btn_get_checkable(btn)) {
 80116fc:	4620      	mov	r0, r4
 80116fe:	f7ff ffa5 	bl	801164c <lv_btn_get_checkable>
 8011702:	2800      	cmp	r0, #0
 8011704:	d0c8      	beq.n	8011698 <lv_btn_signal+0x24>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
 8011706:	2103      	movs	r1, #3
 8011708:	4620      	mov	r0, r4
 801170a:	f7ff ff61 	bl	80115d0 <lv_btn_set_state>
                uint32_t state = 1;
 801170e:	aa02      	add	r2, sp, #8
 8011710:	f842 5d04 	str.w	r5, [r2, #-4]!
 8011714:	e7e0      	b.n	80116d8 <lv_btn_signal+0x64>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8011716:	2b14      	cmp	r3, #20
 8011718:	d001      	beq.n	801171e <lv_btn_signal+0xaa>
 801171a:	2b12      	cmp	r3, #18
 801171c:	d1bc      	bne.n	8011698 <lv_btn_signal+0x24>
            if(lv_btn_get_checkable(btn)) {
 801171e:	4620      	mov	r0, r4
 8011720:	f7ff ff94 	bl	801164c <lv_btn_get_checkable>
 8011724:	2800      	cmp	r0, #0
 8011726:	d0b7      	beq.n	8011698 <lv_btn_signal+0x24>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
 8011728:	2100      	movs	r1, #0
 801172a:	4620      	mov	r0, r4
 801172c:	f7ff ff50 	bl	80115d0 <lv_btn_set_state>
                uint32_t state = 0;
 8011730:	2300      	movs	r3, #0
 8011732:	aa02      	add	r2, sp, #8
 8011734:	f842 3d04 	str.w	r3, [r2, #-4]!
 8011738:	e7ce      	b.n	80116d8 <lv_btn_signal+0x64>
 801173a:	bf00      	nop
 801173c:	200025a4 	.word	0x200025a4
 8011740:	08019900 	.word	0x08019900

08011744 <lv_area_copy>:
{
 8011744:	3901      	subs	r1, #1
 8011746:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
 801174a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801174e:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 8011752:	4298      	cmp	r0, r3
 8011754:	d1f9      	bne.n	801174a <lv_area_copy+0x6>
}
 8011756:	4770      	bx	lr

08011758 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 8011758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
 801175c:	2101      	movs	r1, #1
{
 801175e:	b089      	sub	sp, #36	; 0x24
 8011760:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
 8011762:	f7f3 fe35 	bl	80053d0 <lv_obj_is_protected>
 8011766:	2800      	cmp	r0, #0
 8011768:	f040 80f6 	bne.w	8011958 <lv_cont_refr_autofit+0x200>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801176c:	4620      	mov	r0, r4
 801176e:	f7f4 fc63 	bl	8006038 <lv_obj_get_ext_attr>

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8011772:	7803      	ldrb	r3, [r0, #0]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8011774:	4606      	mov	r6, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 8011776:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 801177a:	d103      	bne.n	8011784 <lv_cont_refr_autofit+0x2c>
 801177c:	7843      	ldrb	r3, [r0, #1]
 801177e:	0719      	lsls	r1, r3, #28
 8011780:	f000 80ea 	beq.w	8011958 <lv_cont_refr_autofit+0x200>

    lv_area_t tight_area;
    lv_area_t ori;
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
 8011784:	4620      	mov	r0, r4
 8011786:	f7f2 fe9b 	bl	80044c0 <lv_obj_get_parent>
 801178a:	4607      	mov	r7, r0
    lv_area_t parent_area;
    lv_area_copy(&parent_area, &par->coords);
 801178c:	f100 0110 	add.w	r1, r0, #16
 8011790:	a804      	add	r0, sp, #16
 8011792:	f7ff ffd7 	bl	8011744 <lv_area_copy>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8011796:	2212      	movs	r2, #18
 8011798:	2100      	movs	r1, #0
 801179a:	4638      	mov	r0, r7
 801179c:	f7f3 fe80 	bl	80054a0 <_lv_obj_get_style_int>
    parent_area.x1 += lv_obj_get_style_pad_left(par, LV_OBJ_PART_MAIN);
 80117a0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 80117a4:	2213      	movs	r2, #19
 80117a6:	4418      	add	r0, r3
 80117a8:	f8ad 0010 	strh.w	r0, [sp, #16]
 80117ac:	2100      	movs	r1, #0
 80117ae:	4638      	mov	r0, r7
 80117b0:	f7f3 fe76 	bl	80054a0 <_lv_obj_get_style_int>
    parent_area.x2 -= lv_obj_get_style_pad_right(par, LV_OBJ_PART_MAIN);
 80117b4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 80117b8:	2210      	movs	r2, #16
 80117ba:	1a18      	subs	r0, r3, r0
 80117bc:	f8ad 0014 	strh.w	r0, [sp, #20]
 80117c0:	2100      	movs	r1, #0
 80117c2:	4638      	mov	r0, r7
 80117c4:	f7f3 fe6c 	bl	80054a0 <_lv_obj_get_style_int>
    parent_area.y1 += lv_obj_get_style_pad_top(par, LV_OBJ_PART_MAIN);
 80117c8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80117cc:	2211      	movs	r2, #17
 80117ce:	4418      	add	r0, r3
 80117d0:	f8ad 0012 	strh.w	r0, [sp, #18]
 80117d4:	2100      	movs	r1, #0
 80117d6:	4638      	mov	r0, r7
 80117d8:	f7f3 fe62 	bl	80054a0 <_lv_obj_get_style_int>
    parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
 80117dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
 80117e0:	a902      	add	r1, sp, #8
    parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
 80117e2:	1a18      	subs	r0, r3, r0
 80117e4:	f8ad 0016 	strh.w	r0, [sp, #22]
    lv_obj_get_coords(cont, &ori);
 80117e8:	4620      	mov	r0, r4
 80117ea:	f7f2 fec3 	bl	8004574 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);

    bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
 80117ee:	f104 0904 	add.w	r9, r4, #4
    lv_obj_get_coords(cont, &tight_area);
 80117f2:	4669      	mov	r1, sp
 80117f4:	4620      	mov	r0, r4
 80117f6:	f7f2 febd 	bl	8004574 <lv_obj_get_coords>
    bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
 80117fa:	4648      	mov	r0, r9
 80117fc:	f7fd fdec 	bl	800f3d8 <_lv_ll_is_empty>
 8011800:	f080 0001 	eor.w	r0, r0, #1

    if(has_children) {
 8011804:	f010 08ff 	ands.w	r8, r0, #255	; 0xff
 8011808:	d032      	beq.n	8011870 <lv_cont_refr_autofit+0x118>
        tight_area.x1 = LV_COORD_MAX;
        tight_area.y1 = LV_COORD_MAX;
 801180a:	4aa5      	ldr	r2, [pc, #660]	; (8011aa0 <lv_cont_refr_autofit+0x348>)
 801180c:	4ba5      	ldr	r3, [pc, #660]	; (8011aa4 <lv_cont_refr_autofit+0x34c>)
        tight_area.x2 = LV_COORD_MIN;
        tight_area.y2 = LV_COORD_MIN;

        _LV_LL_READ(cont->child_ll, child_i) {
 801180e:	4648      	mov	r0, r9
        tight_area.y1 = LV_COORD_MAX;
 8011810:	e9cd 2300 	strd	r2, r3, [sp]
        _LV_LL_READ(cont->child_ll, child_i) {
 8011814:	f7fd fcfa 	bl	800f20c <_lv_ll_get_head>
 8011818:	4605      	mov	r5, r0
 801181a:	2800      	cmp	r0, #0
 801181c:	f040 809f 	bne.w	801195e <lv_cont_refr_autofit+0x206>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8011820:	4601      	mov	r1, r0
 8011822:	2212      	movs	r2, #18
 8011824:	4620      	mov	r0, r4
 8011826:	f7f3 fe3b 	bl	80054a0 <_lv_obj_get_style_int>
                lv_style_int_t mbottom = lv_obj_get_style_margin_bottom(child_i, LV_OBJ_PART_MAIN);
                tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
            }
        }

        tight_area.x1 -= lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
 801182a:	f8bd 3000 	ldrh.w	r3, [sp]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801182e:	2213      	movs	r2, #19
 8011830:	1a18      	subs	r0, r3, r0
 8011832:	f8ad 0000 	strh.w	r0, [sp]
 8011836:	4629      	mov	r1, r5
 8011838:	4620      	mov	r0, r4
 801183a:	f7f3 fe31 	bl	80054a0 <_lv_obj_get_style_int>
        tight_area.x2 += lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
 801183e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8011842:	2210      	movs	r2, #16
 8011844:	4418      	add	r0, r3
 8011846:	f8ad 0004 	strh.w	r0, [sp, #4]
 801184a:	4629      	mov	r1, r5
 801184c:	4620      	mov	r0, r4
 801184e:	f7f3 fe27 	bl	80054a0 <_lv_obj_get_style_int>
        tight_area.y1 -= lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
 8011852:	f8bd 3002 	ldrh.w	r3, [sp, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8011856:	2211      	movs	r2, #17
 8011858:	1a18      	subs	r0, r3, r0
 801185a:	f8ad 0002 	strh.w	r0, [sp, #2]
 801185e:	4629      	mov	r1, r5
 8011860:	4620      	mov	r0, r4
 8011862:	f7f3 fe1d 	bl	80054a0 <_lv_obj_get_style_int>
        tight_area.y2 += lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
 8011866:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801186a:	4418      	add	r0, r3
 801186c:	f8ad 0006 	strh.w	r0, [sp, #6]
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);
 8011870:	a902      	add	r1, sp, #8
 8011872:	a806      	add	r0, sp, #24
 8011874:	f7ff ff66 	bl	8011744 <lv_area_copy>

    switch(ext->fit_left) {
 8011878:	7833      	ldrb	r3, [r6, #0]
 801187a:	f3c3 1201 	ubfx	r2, r3, #4, #2
 801187e:	2a02      	cmp	r2, #2
 8011880:	f000 80c7 	beq.w	8011a12 <lv_cont_refr_autofit+0x2ba>
 8011884:	f200 80c8 	bhi.w	8011a18 <lv_cont_refr_autofit+0x2c0>
 8011888:	2a01      	cmp	r2, #1
 801188a:	d103      	bne.n	8011894 <lv_cont_refr_autofit+0x13c>
        case LV_FIT_TIGHT:
            new_area.x1 = tight_area.x1;
 801188c:	f8bd 2000 	ldrh.w	r2, [sp]
            break;
        case LV_FIT_PARENT:
            new_area.x1 = parent_area.x1;
            break;
        case LV_FIT_MAX:
            new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
 8011890:	f8ad 2018 	strh.w	r2, [sp, #24]
            break;
        default:
            break;
    }

    switch(ext->fit_right) {
 8011894:	099b      	lsrs	r3, r3, #6
 8011896:	2b02      	cmp	r3, #2
 8011898:	f000 80ca 	beq.w	8011a30 <lv_cont_refr_autofit+0x2d8>
 801189c:	f200 80cb 	bhi.w	8011a36 <lv_cont_refr_autofit+0x2de>
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d103      	bne.n	80118ac <lv_cont_refr_autofit+0x154>
        case LV_FIT_TIGHT:
            new_area.x2 = tight_area.x2;
 80118a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
            break;
        case LV_FIT_PARENT:
            new_area.x2 = parent_area.x2;
            break;
        case LV_FIT_MAX:
            new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
 80118a8:	f8ad 301c 	strh.w	r3, [sp, #28]
            break;
        default:
            break;
    }

    switch(ext->fit_top) {
 80118ac:	7873      	ldrb	r3, [r6, #1]
 80118ae:	f003 0203 	and.w	r2, r3, #3
 80118b2:	2a02      	cmp	r2, #2
 80118b4:	f000 80cb 	beq.w	8011a4e <lv_cont_refr_autofit+0x2f6>
 80118b8:	f200 80cc 	bhi.w	8011a54 <lv_cont_refr_autofit+0x2fc>
 80118bc:	2a01      	cmp	r2, #1
 80118be:	d103      	bne.n	80118c8 <lv_cont_refr_autofit+0x170>
        case LV_FIT_TIGHT:
            new_area.y1 = tight_area.y1;
 80118c0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
            break;
        case LV_FIT_PARENT:
            new_area.y1 = parent_area.y1;
            break;
        case LV_FIT_MAX:
            new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
 80118c4:	f8ad 201a 	strh.w	r2, [sp, #26]
            break;
        default:
            break;
    }

    switch(ext->fit_bottom) {
 80118c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80118cc:	2b02      	cmp	r3, #2
 80118ce:	f000 80cd 	beq.w	8011a6c <lv_cont_refr_autofit+0x314>
 80118d2:	f200 80ce 	bhi.w	8011a72 <lv_cont_refr_autofit+0x31a>
 80118d6:	2b01      	cmp	r3, #1
 80118d8:	d103      	bne.n	80118e2 <lv_cont_refr_autofit+0x18a>
        case LV_FIT_TIGHT:
            new_area.y2 = tight_area.y2;
 80118da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
            break;
        case LV_FIT_PARENT:
            new_area.y2 = parent_area.y2;
            break;
        case LV_FIT_MAX:
            new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
 80118de:	f8ad 301e 	strh.w	r3, [sp, #30]
        default:
            break;
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 80118e2:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80118e6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d111      	bne.n	8011912 <lv_cont_refr_autofit+0x1ba>
 80118ee:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80118f2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d10b      	bne.n	8011912 <lv_cont_refr_autofit+0x1ba>
 80118fa:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80118fe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011902:	429a      	cmp	r2, r3
 8011904:	d105      	bne.n	8011912 <lv_cont_refr_autofit+0x1ba>
 8011906:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801190a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801190e:	429a      	cmp	r2, r3
 8011910:	d022      	beq.n	8011958 <lv_cont_refr_autofit+0x200>
       cont->coords.y2 != new_area.y2) {

        lv_obj_invalidate(cont);
 8011912:	4620      	mov	r0, r4
 8011914:	f7f2 ffe4 	bl	80048e0 <lv_obj_invalidate>
        lv_area_copy(&cont->coords, &new_area);
 8011918:	a906      	add	r1, sp, #24
 801191a:	f104 0010 	add.w	r0, r4, #16
 801191e:	f7ff ff11 	bl	8011744 <lv_area_copy>
        lv_obj_invalidate(cont);
 8011922:	4620      	mov	r0, r4
 8011924:	f7f2 ffdc 	bl	80048e0 <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_COORD_CHG, &ori);
 8011928:	69e3      	ldr	r3, [r4, #28]
 801192a:	aa02      	add	r2, sp, #8
 801192c:	2102      	movs	r1, #2
 801192e:	4620      	mov	r0, r4
 8011930:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	4622      	mov	r2, r4
 8011936:	2101      	movs	r1, #1
 8011938:	4638      	mov	r0, r7
 801193a:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 801193c:	4620      	mov	r0, r4
 801193e:	f7f2 fe7f 	bl	8004640 <lv_obj_get_auto_realign>
 8011942:	b110      	cbz	r0, 801194a <lv_cont_refr_autofit+0x1f2>
            lv_obj_realign(cont);
 8011944:	4620      	mov	r0, r4
 8011946:	f7f3 f9f9 	bl	8004d3c <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        _LV_LL_READ(cont->child_ll, child_i) {
 801194a:	4648      	mov	r0, r9
 801194c:	f7fd fc5e 	bl	800f20c <_lv_ll_get_head>
 8011950:	4604      	mov	r4, r0
 8011952:	2800      	cmp	r0, #0
 8011954:	f040 8099 	bne.w	8011a8a <lv_cont_refr_autofit+0x332>
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
        }
    }
}
 8011958:	b009      	add	sp, #36	; 0x24
 801195a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(lv_obj_get_hidden(child_i) != false) continue;
 801195e:	4628      	mov	r0, r5
 8011960:	f7f2 ff2e 	bl	80047c0 <lv_obj_get_hidden>
 8011964:	4601      	mov	r1, r0
 8011966:	2800      	cmp	r0, #0
 8011968:	d14e      	bne.n	8011a08 <lv_cont_refr_autofit+0x2b0>
            if(ext->fit_left != LV_FIT_PARENT) {
 801196a:	7833      	ldrb	r3, [r6, #0]
 801196c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011970:	2b20      	cmp	r3, #32
 8011972:	d00d      	beq.n	8011990 <lv_cont_refr_autofit+0x238>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8011974:	2217      	movs	r2, #23
 8011976:	4628      	mov	r0, r5
 8011978:	f7f3 fd92 	bl	80054a0 <_lv_obj_get_style_int>
                tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1 - mleft);
 801197c:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8011980:	1a18      	subs	r0, r3, r0
 8011982:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011986:	4298      	cmp	r0, r3
 8011988:	bfa8      	it	ge
 801198a:	4618      	movge	r0, r3
 801198c:	f8ad 0000 	strh.w	r0, [sp]
            if(ext->fit_right != LV_FIT_PARENT) {
 8011990:	7833      	ldrb	r3, [r6, #0]
 8011992:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011996:	2b80      	cmp	r3, #128	; 0x80
 8011998:	d00e      	beq.n	80119b8 <lv_cont_refr_autofit+0x260>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 801199a:	2218      	movs	r2, #24
 801199c:	2100      	movs	r1, #0
 801199e:	4628      	mov	r0, r5
 80119a0:	f7f3 fd7e 	bl	80054a0 <_lv_obj_get_style_int>
                tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2 + mright);
 80119a4:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80119a8:	4418      	add	r0, r3
 80119aa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80119ae:	4298      	cmp	r0, r3
 80119b0:	bfb8      	it	lt
 80119b2:	4618      	movlt	r0, r3
 80119b4:	f8ad 0004 	strh.w	r0, [sp, #4]
            if(ext->fit_top != LV_FIT_PARENT) {
 80119b8:	7873      	ldrb	r3, [r6, #1]
 80119ba:	f003 0303 	and.w	r3, r3, #3
 80119be:	2b02      	cmp	r3, #2
 80119c0:	d00e      	beq.n	80119e0 <lv_cont_refr_autofit+0x288>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 80119c2:	2215      	movs	r2, #21
 80119c4:	2100      	movs	r1, #0
 80119c6:	4628      	mov	r0, r5
 80119c8:	f7f3 fd6a 	bl	80054a0 <_lv_obj_get_style_int>
                tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1 - mtop);
 80119cc:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 80119d0:	1a18      	subs	r0, r3, r0
 80119d2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80119d6:	4298      	cmp	r0, r3
 80119d8:	bfa8      	it	ge
 80119da:	4618      	movge	r0, r3
 80119dc:	f8ad 0002 	strh.w	r0, [sp, #2]
            if(ext->fit_bottom != LV_FIT_PARENT) {
 80119e0:	7873      	ldrb	r3, [r6, #1]
 80119e2:	f003 030c 	and.w	r3, r3, #12
 80119e6:	2b08      	cmp	r3, #8
 80119e8:	d00e      	beq.n	8011a08 <lv_cont_refr_autofit+0x2b0>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 80119ea:	2216      	movs	r2, #22
 80119ec:	2100      	movs	r1, #0
 80119ee:	4628      	mov	r0, r5
 80119f0:	f7f3 fd56 	bl	80054a0 <_lv_obj_get_style_int>
                tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
 80119f4:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 80119f8:	4418      	add	r0, r3
 80119fa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80119fe:	4298      	cmp	r0, r3
 8011a00:	bfb8      	it	lt
 8011a02:	4618      	movlt	r0, r3
 8011a04:	f8ad 0006 	strh.w	r0, [sp, #6]
        _LV_LL_READ(cont->child_ll, child_i) {
 8011a08:	4629      	mov	r1, r5
 8011a0a:	4648      	mov	r0, r9
 8011a0c:	f7fd fc04 	bl	800f218 <_lv_ll_get_next>
 8011a10:	e702      	b.n	8011818 <lv_cont_refr_autofit+0xc0>
            new_area.x1 = parent_area.x1;
 8011a12:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011a16:	e73b      	b.n	8011890 <lv_cont_refr_autofit+0x138>
 8011a18:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
            new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
 8011a1c:	f1b8 0f00 	cmp.w	r8, #0
 8011a20:	f43f af36 	beq.w	8011890 <lv_cont_refr_autofit+0x138>
 8011a24:	f9bd 1000 	ldrsh.w	r1, [sp]
 8011a28:	428a      	cmp	r2, r1
 8011a2a:	bfa8      	it	ge
 8011a2c:	460a      	movge	r2, r1
 8011a2e:	e72f      	b.n	8011890 <lv_cont_refr_autofit+0x138>
            new_area.x2 = parent_area.x2;
 8011a30:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011a34:	e738      	b.n	80118a8 <lv_cont_refr_autofit+0x150>
 8011a36:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
            new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
 8011a3a:	f1b8 0f00 	cmp.w	r8, #0
 8011a3e:	f43f af33 	beq.w	80118a8 <lv_cont_refr_autofit+0x150>
 8011a42:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8011a46:	4293      	cmp	r3, r2
 8011a48:	bfb8      	it	lt
 8011a4a:	4613      	movlt	r3, r2
 8011a4c:	e72c      	b.n	80118a8 <lv_cont_refr_autofit+0x150>
            new_area.y1 = parent_area.y1;
 8011a4e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011a52:	e737      	b.n	80118c4 <lv_cont_refr_autofit+0x16c>
 8011a54:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
            new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
 8011a58:	f1b8 0f00 	cmp.w	r8, #0
 8011a5c:	f43f af32 	beq.w	80118c4 <lv_cont_refr_autofit+0x16c>
 8011a60:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8011a64:	428a      	cmp	r2, r1
 8011a66:	bfa8      	it	ge
 8011a68:	460a      	movge	r2, r1
 8011a6a:	e72b      	b.n	80118c4 <lv_cont_refr_autofit+0x16c>
            new_area.y2 = parent_area.y2;
 8011a6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011a70:	e735      	b.n	80118de <lv_cont_refr_autofit+0x186>
 8011a72:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
            new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
 8011a76:	f1b8 0f00 	cmp.w	r8, #0
 8011a7a:	f43f af30 	beq.w	80118de <lv_cont_refr_autofit+0x186>
 8011a7e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8011a82:	4293      	cmp	r3, r2
 8011a84:	bfb8      	it	lt
 8011a86:	4613      	movlt	r3, r2
 8011a88:	e729      	b.n	80118de <lv_cont_refr_autofit+0x186>
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
 8011a8a:	69e3      	ldr	r3, [r4, #28]
 8011a8c:	aa02      	add	r2, sp, #8
 8011a8e:	2103      	movs	r1, #3
 8011a90:	4620      	mov	r0, r4
 8011a92:	4798      	blx	r3
        _LV_LL_READ(cont->child_ll, child_i) {
 8011a94:	4621      	mov	r1, r4
 8011a96:	4648      	mov	r0, r9
 8011a98:	f7fd fbbe 	bl	800f218 <_lv_ll_get_next>
 8011a9c:	e758      	b.n	8011950 <lv_cont_refr_autofit+0x1f8>
 8011a9e:	bf00      	nop
 8011aa0:	7c187c18 	.word	0x7c187c18
 8011aa4:	83e883e8 	.word	0x83e883e8

08011aa8 <lv_cont_create>:
{
 8011aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aaa:	460e      	mov	r6, r1
 8011aac:	4607      	mov	r7, r0
    lv_obj_t * cont = lv_obj_create(par, copy);
 8011aae:	f7f3 f9dd 	bl	8004e6c <lv_obj_create>
 8011ab2:	4605      	mov	r5, r0
    LV_ASSERT_MEM(cont);
 8011ab4:	f7fd fa88 	bl	800efc8 <lv_debug_check_null>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	b920      	cbnz	r0, 8011ac6 <lv_cont_create+0x1e>
 8011abc:	462a      	mov	r2, r5
 8011abe:	4835      	ldr	r0, [pc, #212]	; (8011b94 <lv_cont_create+0xec>)
 8011ac0:	f7fd fa86 	bl	800efd0 <lv_debug_log_error>
 8011ac4:	e7fe      	b.n	8011ac4 <lv_cont_create+0x1c>
    if(cont == NULL) return NULL;
 8011ac6:	b1d5      	cbz	r5, 8011afe <lv_cont_create+0x56>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
 8011ac8:	4c33      	ldr	r4, [pc, #204]	; (8011b98 <lv_cont_create+0xf0>)
 8011aca:	6823      	ldr	r3, [r4, #0]
 8011acc:	b91b      	cbnz	r3, 8011ad6 <lv_cont_create+0x2e>
 8011ace:	4628      	mov	r0, r5
 8011ad0:	f7f4 fa92 	bl	8005ff8 <lv_obj_get_signal_cb>
 8011ad4:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
 8011ad6:	4c31      	ldr	r4, [pc, #196]	; (8011b9c <lv_cont_create+0xf4>)
 8011ad8:	6823      	ldr	r3, [r4, #0]
 8011ada:	b91b      	cbnz	r3, 8011ae4 <lv_cont_create+0x3c>
 8011adc:	4628      	mov	r0, r5
 8011ade:	f7f4 fa9b 	bl	8006018 <lv_obj_get_design_cb>
 8011ae2:	6020      	str	r0, [r4, #0]
    lv_obj_allocate_ext_attr(cont, sizeof(lv_cont_ext_t));
 8011ae4:	2102      	movs	r1, #2
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	f7f2 fcc4 	bl	8004474 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8011aec:	4628      	mov	r0, r5
 8011aee:	f7f4 faa3 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext == NULL) {
 8011af2:	4604      	mov	r4, r0
 8011af4:	b928      	cbnz	r0, 8011b02 <lv_cont_create+0x5a>
        lv_obj_del(cont);
 8011af6:	4628      	mov	r0, r5
 8011af8:	f7f4 fb20 	bl	800613c <lv_obj_del>
        return NULL;
 8011afc:	4625      	mov	r5, r4
}
 8011afe:	4628      	mov	r0, r5
 8011b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MEM(ext);
 8011b02:	f7fd fa61 	bl	800efc8 <lv_debug_check_null>
 8011b06:	4603      	mov	r3, r0
 8011b08:	b920      	cbnz	r0, 8011b14 <lv_cont_create+0x6c>
 8011b0a:	4622      	mov	r2, r4
 8011b0c:	4821      	ldr	r0, [pc, #132]	; (8011b94 <lv_cont_create+0xec>)
 8011b0e:	f7fd fa5f 	bl	800efd0 <lv_debug_log_error>
 8011b12:	e7fe      	b.n	8011b12 <lv_cont_create+0x6a>
    ext->fit_left   = LV_FIT_NONE;
 8011b14:	7823      	ldrb	r3, [r4, #0]
    ext->fit_top    = LV_FIT_NONE;
 8011b16:	7862      	ldrb	r2, [r4, #1]
    ext->layout     = LV_LAYOUT_OFF;
 8011b18:	f003 030f 	and.w	r3, r3, #15
    ext->fit_bottom = LV_FIT_NONE;
 8011b1c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8011b20:	f36f 0283 	bfc	r2, #2, #2
    ext->layout     = LV_LAYOUT_OFF;
 8011b24:	f36f 0303 	bfc	r3, #0, #4
    ext->fit_bottom = LV_FIT_NONE;
 8011b28:	7062      	strb	r2, [r4, #1]
    ext->layout     = LV_LAYOUT_OFF;
 8011b2a:	7023      	strb	r3, [r4, #0]
    lv_obj_set_signal_cb(cont, lv_cont_signal);
 8011b2c:	491c      	ldr	r1, [pc, #112]	; (8011ba0 <lv_cont_create+0xf8>)
 8011b2e:	4628      	mov	r0, r5
 8011b30:	f7f2 fc7a 	bl	8004428 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 8011b34:	b936      	cbnz	r6, 8011b44 <lv_cont_create+0x9c>
        if(par != NULL) {
 8011b36:	2f00      	cmp	r7, #0
 8011b38:	d0e1      	beq.n	8011afe <lv_cont_create+0x56>
            lv_theme_apply(cont, LV_THEME_CONT);
 8011b3a:	2105      	movs	r1, #5
 8011b3c:	4628      	mov	r0, r5
 8011b3e:	f7fe fff3 	bl	8010b28 <lv_theme_apply>
 8011b42:	e7dc      	b.n	8011afe <lv_cont_create+0x56>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8011b44:	4630      	mov	r0, r6
 8011b46:	f7f4 fa77 	bl	8006038 <lv_obj_get_ext_attr>
        ext->fit_left            = copy_ext->fit_left;
 8011b4a:	7803      	ldrb	r3, [r0, #0]
 8011b4c:	7822      	ldrb	r2, [r4, #0]
 8011b4e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8011b52:	f363 1205 	bfi	r2, r3, #4, #2
 8011b56:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
 8011b58:	7803      	ldrb	r3, [r0, #0]
 8011b5a:	b2d2      	uxtb	r2, r2
 8011b5c:	099b      	lsrs	r3, r3, #6
 8011b5e:	f363 1287 	bfi	r2, r3, #6, #2
 8011b62:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
 8011b64:	7842      	ldrb	r2, [r0, #1]
 8011b66:	7863      	ldrb	r3, [r4, #1]
 8011b68:	f362 0301 	bfi	r3, r2, #0, #2
 8011b6c:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 8011b6e:	7843      	ldrb	r3, [r0, #1]
 8011b70:	7862      	ldrb	r2, [r4, #1]
 8011b72:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8011b76:	f363 0283 	bfi	r2, r3, #2, #2
 8011b7a:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
 8011b7c:	7802      	ldrb	r2, [r0, #0]
 8011b7e:	7823      	ldrb	r3, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8011b80:	4628      	mov	r0, r5
        ext->layout              = copy_ext->layout;
 8011b82:	f362 0303 	bfi	r3, r2, #0, #4
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8011b86:	22ff      	movs	r2, #255	; 0xff
        ext->layout              = copy_ext->layout;
 8011b88:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8011b8a:	4611      	mov	r1, r2
 8011b8c:	f7f4 f8ca 	bl	8005d24 <lv_obj_refresh_style>
 8011b90:	e7b5      	b.n	8011afe <lv_cont_create+0x56>
 8011b92:	bf00      	nop
 8011b94:	08015994 	.word	0x08015994
 8011b98:	200025ac 	.word	0x200025ac
 8011b9c:	200025a8 	.word	0x200025a8
 8011ba0:	080122dd 	.word	0x080122dd

08011ba4 <lv_cont_set_layout>:
{
 8011ba4:	b570      	push	{r4, r5, r6, lr}
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 8011baa:	f7fd fa0d 	bl	800efc8 <lv_debug_check_null>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	b920      	cbnz	r0, 8011bbc <lv_cont_set_layout+0x18>
 8011bb2:	4622      	mov	r2, r4
 8011bb4:	480b      	ldr	r0, [pc, #44]	; (8011be4 <lv_cont_set_layout+0x40>)
 8011bb6:	f7fd fa0b 	bl	800efd0 <lv_debug_log_error>
 8011bba:	e7fe      	b.n	8011bba <lv_cont_set_layout+0x16>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f7f4 fa3b 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext->layout == layout) return;
 8011bc2:	7803      	ldrb	r3, [r0, #0]
 8011bc4:	f003 020f 	and.w	r2, r3, #15
 8011bc8:	42aa      	cmp	r2, r5
 8011bca:	d009      	beq.n	8011be0 <lv_cont_set_layout+0x3c>
    ext->layout = layout;
 8011bcc:	f365 0303 	bfi	r3, r5, #0, #4
 8011bd0:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	69e3      	ldr	r3, [r4, #28]
 8011bd6:	4620      	mov	r0, r4
}
 8011bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8011bdc:	2101      	movs	r1, #1
 8011bde:	4718      	bx	r3
}
 8011be0:	bd70      	pop	{r4, r5, r6, pc}
 8011be2:	bf00      	nop
 8011be4:	080158e8 	.word	0x080158e8

08011be8 <lv_cont_set_fit4>:
{
 8011be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bec:	461e      	mov	r6, r3
 8011bee:	4604      	mov	r4, r0
 8011bf0:	4688      	mov	r8, r1
 8011bf2:	4617      	mov	r7, r2
 8011bf4:	f89d 5018 	ldrb.w	r5, [sp, #24]
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 8011bf8:	f7fd f9e6 	bl	800efc8 <lv_debug_check_null>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	b920      	cbnz	r0, 8011c0a <lv_cont_set_fit4+0x22>
 8011c00:	4622      	mov	r2, r4
 8011c02:	4818      	ldr	r0, [pc, #96]	; (8011c64 <lv_cont_set_fit4+0x7c>)
 8011c04:	f7fd f9e4 	bl	800efd0 <lv_debug_log_error>
 8011c08:	e7fe      	b.n	8011c08 <lv_cont_set_fit4+0x20>
    lv_obj_invalidate(cont);
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f7f2 fe68 	bl	80048e0 <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8011c10:	4620      	mov	r0, r4
 8011c12:	f7f4 fa11 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
 8011c16:	7803      	ldrb	r3, [r0, #0]
 8011c18:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8011c1c:	4542      	cmp	r2, r8
 8011c1e:	d10b      	bne.n	8011c38 <lv_cont_set_fit4+0x50>
 8011c20:	ebb7 1f93 	cmp.w	r7, r3, lsr #6
 8011c24:	d108      	bne.n	8011c38 <lv_cont_set_fit4+0x50>
 8011c26:	7843      	ldrb	r3, [r0, #1]
 8011c28:	f003 0203 	and.w	r2, r3, #3
 8011c2c:	42b2      	cmp	r2, r6
 8011c2e:	d103      	bne.n	8011c38 <lv_cont_set_fit4+0x50>
 8011c30:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8011c34:	42ab      	cmp	r3, r5
 8011c36:	d012      	beq.n	8011c5e <lv_cont_set_fit4+0x76>
    ext->fit_left   = left;
 8011c38:	7803      	ldrb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8011c3a:	2200      	movs	r2, #0
    ext->fit_left   = left;
 8011c3c:	f368 1305 	bfi	r3, r8, #4, #2
    ext->fit_right  = right;
 8011c40:	f367 1387 	bfi	r3, r7, #6, #2
 8011c44:	7003      	strb	r3, [r0, #0]
    ext->fit_top    = top;
 8011c46:	7843      	ldrb	r3, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8011c48:	2101      	movs	r1, #1
    ext->fit_top    = top;
 8011c4a:	f366 0301 	bfi	r3, r6, #0, #2
    ext->fit_bottom = bottom;
 8011c4e:	f365 0383 	bfi	r3, r5, #2, #2
 8011c52:	7043      	strb	r3, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8011c54:	69e3      	ldr	r3, [r4, #28]
 8011c56:	4620      	mov	r0, r4
}
 8011c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8011c5c:	4718      	bx	r3
}
 8011c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c62:	bf00      	nop
 8011c64:	080158e8 	.word	0x080158e8

08011c68 <lv_cont_get_layout>:
{
 8011c68:	b510      	push	{r4, lr}
 8011c6a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 8011c6c:	f7fd f9ac 	bl	800efc8 <lv_debug_check_null>
 8011c70:	4603      	mov	r3, r0
 8011c72:	b920      	cbnz	r0, 8011c7e <lv_cont_get_layout+0x16>
 8011c74:	4622      	mov	r2, r4
 8011c76:	4805      	ldr	r0, [pc, #20]	; (8011c8c <lv_cont_get_layout+0x24>)
 8011c78:	f7fd f9aa 	bl	800efd0 <lv_debug_log_error>
 8011c7c:	e7fe      	b.n	8011c7c <lv_cont_get_layout+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8011c7e:	4620      	mov	r0, r4
 8011c80:	f7f4 f9da 	bl	8006038 <lv_obj_get_ext_attr>
    return ext->layout;
 8011c84:	7800      	ldrb	r0, [r0, #0]
}
 8011c86:	f000 000f 	and.w	r0, r0, #15
 8011c8a:	bd10      	pop	{r4, pc}
 8011c8c:	080158e8 	.word	0x080158e8

08011c90 <lv_cont_refr_layout>:
{
 8011c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
 8011c94:	2101      	movs	r1, #1
{
 8011c96:	b08f      	sub	sp, #60	; 0x3c
 8011c98:	4683      	mov	fp, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
 8011c9a:	f7f3 fb99 	bl	80053d0 <lv_obj_is_protected>
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	f040 8318 	bne.w	80122d6 <lv_cont_refr_layout+0x646>
    lv_layout_t type = lv_cont_get_layout(cont);
 8011ca6:	4658      	mov	r0, fp
 8011ca8:	f7ff ffde 	bl	8011c68 <lv_cont_get_layout>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8011cac:	4621      	mov	r1, r4
    lv_layout_t type = lv_cont_get_layout(cont);
 8011cae:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 8011cb0:	4658      	mov	r0, fp
 8011cb2:	f7f2 fc4b 	bl	800454c <lv_obj_get_child>
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	f000 830d 	beq.w	80122d6 <lv_cont_refr_layout+0x646>
    if(type == LV_LAYOUT_OFF) return;
 8011cbc:	2d00      	cmp	r5, #0
 8011cbe:	f000 830a 	beq.w	80122d6 <lv_cont_refr_layout+0x646>
    if(type == LV_LAYOUT_CENTER) {
 8011cc2:	2d01      	cmp	r5, #1
 8011cc4:	d165      	bne.n	8011d92 <lv_cont_refr_layout+0x102>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8011cc6:	2214      	movs	r2, #20
 8011cc8:	4621      	mov	r1, r4
 8011cca:	4658      	mov	r0, fp
 8011ccc:	f7f3 fbe8 	bl	80054a0 <_lv_obj_get_style_int>
    _LV_LL_READ(cont->child_ll, child) {
 8011cd0:	f10b 0504 	add.w	r5, fp, #4
 8011cd4:	4606      	mov	r6, r0
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	f7fd fa98 	bl	800f20c <_lv_ll_get_head>
    uint32_t obj_num         = 0;
 8011cdc:	46a0      	mov	r8, r4
    _LV_LL_READ(cont->child_ll, child) {
 8011cde:	4607      	mov	r7, r0
 8011ce0:	b9e7      	cbnz	r7, 8011d1c <lv_cont_refr_layout+0x8c>
    if(obj_num == 0) return;
 8011ce2:	f1b8 0f00 	cmp.w	r8, #0
 8011ce6:	f000 82f6 	beq.w	80122d6 <lv_cont_refr_layout+0x646>
    lv_coord_t last_cord = -(h_tot / 2);
 8011cea:	f04f 0802 	mov.w	r8, #2
    h_tot -= inner;
 8011cee:	1ba4      	subs	r4, r4, r6
 8011cf0:	b2a4      	uxth	r4, r4
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 8011cf2:	4658      	mov	r0, fp
 8011cf4:	2101      	movs	r1, #1
    lv_coord_t last_cord = -(h_tot / 2);
 8011cf6:	b224      	sxth	r4, r4
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 8011cf8:	f7f2 faea 	bl	80042d0 <lv_obj_add_protect>
    lv_coord_t last_cord = -(h_tot / 2);
 8011cfc:	fb94 f4f8 	sdiv	r4, r4, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
 8011d00:	4628      	mov	r0, r5
    lv_coord_t last_cord = -(h_tot / 2);
 8011d02:	4264      	negs	r4, r4
 8011d04:	b224      	sxth	r4, r4
    _LV_LL_READ_BACK(cont->child_ll, child) {
 8011d06:	f7fd fa84 	bl	800f212 <_lv_ll_get_tail>
 8011d0a:	4607      	mov	r7, r0
 8011d0c:	b9e8      	cbnz	r0, 8011d4a <lv_cont_refr_layout+0xba>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8011d0e:	2101      	movs	r1, #1
 8011d10:	4658      	mov	r0, fp
}
 8011d12:	b00f      	add	sp, #60	; 0x3c
 8011d14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 8011d18:	f7f2 baee 	b.w	80042f8 <lv_obj_clear_protect>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8011d1c:	4638      	mov	r0, r7
 8011d1e:	f7f2 fd4f 	bl	80047c0 <lv_obj_get_hidden>
 8011d22:	b960      	cbnz	r0, 8011d3e <lv_cont_refr_layout+0xae>
 8011d24:	2104      	movs	r1, #4
 8011d26:	4638      	mov	r0, r7
 8011d28:	f7f3 fb52 	bl	80053d0 <lv_obj_is_protected>
 8011d2c:	b938      	cbnz	r0, 8011d3e <lv_cont_refr_layout+0xae>
        h_tot += lv_obj_get_height(child) + inner;
 8011d2e:	4638      	mov	r0, r7
 8011d30:	f7f2 fc78 	bl	8004624 <lv_obj_get_height>
 8011d34:	4430      	add	r0, r6
 8011d36:	4404      	add	r4, r0
 8011d38:	b224      	sxth	r4, r4
        obj_num++;
 8011d3a:	f108 0801 	add.w	r8, r8, #1
    _LV_LL_READ(cont->child_ll, child) {
 8011d3e:	4639      	mov	r1, r7
 8011d40:	4628      	mov	r0, r5
 8011d42:	f7fd fa69 	bl	800f218 <_lv_ll_get_next>
 8011d46:	4607      	mov	r7, r0
 8011d48:	e7ca      	b.n	8011ce0 <lv_cont_refr_layout+0x50>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8011d4a:	4638      	mov	r0, r7
 8011d4c:	f7f2 fd38 	bl	80047c0 <lv_obj_get_hidden>
 8011d50:	b9d0      	cbnz	r0, 8011d88 <lv_cont_refr_layout+0xf8>
 8011d52:	2104      	movs	r1, #4
 8011d54:	4638      	mov	r0, r7
 8011d56:	f7f3 fb3b 	bl	80053d0 <lv_obj_is_protected>
 8011d5a:	4681      	mov	r9, r0
 8011d5c:	b9a0      	cbnz	r0, 8011d88 <lv_cont_refr_layout+0xf8>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 8011d5e:	4638      	mov	r0, r7
 8011d60:	f7f2 fc60 	bl	8004624 <lv_obj_get_height>
 8011d64:	fb90 f0f8 	sdiv	r0, r0, r8
 8011d68:	b2a4      	uxth	r4, r4
 8011d6a:	4420      	add	r0, r4
 8011d6c:	b200      	sxth	r0, r0
 8011d6e:	9000      	str	r0, [sp, #0]
 8011d70:	464b      	mov	r3, r9
 8011d72:	464a      	mov	r2, r9
 8011d74:	4659      	mov	r1, fp
 8011d76:	4638      	mov	r0, r7
 8011d78:	f7f2 fec6 	bl	8004b08 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + inner;
 8011d7c:	4638      	mov	r0, r7
 8011d7e:	f7f2 fc51 	bl	8004624 <lv_obj_get_height>
 8011d82:	4430      	add	r0, r6
 8011d84:	4404      	add	r4, r0
 8011d86:	b224      	sxth	r4, r4
    _LV_LL_READ_BACK(cont->child_ll, child) {
 8011d88:	4639      	mov	r1, r7
 8011d8a:	4628      	mov	r0, r5
 8011d8c:	f7fd fa49 	bl	800f222 <_lv_ll_get_prev>
 8011d90:	e7bb      	b.n	8011d0a <lv_cont_refr_layout+0x7a>
    else if(type == LV_LAYOUT_COLUMN_LEFT || type == LV_LAYOUT_COLUMN_MID || type == LV_LAYOUT_COLUMN_RIGHT) {
 8011d92:	1eab      	subs	r3, r5, #2
 8011d94:	b2db      	uxtb	r3, r3
 8011d96:	2b02      	cmp	r3, #2
 8011d98:	d86b      	bhi.n	8011e72 <lv_cont_refr_layout+0x1e2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8011d9a:	2212      	movs	r2, #18
 8011d9c:	4621      	mov	r1, r4
 8011d9e:	4658      	mov	r0, fp
 8011da0:	f7f3 fb7e 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8011da4:	2213      	movs	r2, #19
 8011da6:	4621      	mov	r1, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8011da8:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8011daa:	4658      	mov	r0, fp
 8011dac:	f7f3 fb78 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8011db0:	2210      	movs	r2, #16
 8011db2:	4621      	mov	r1, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8011db4:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8011db6:	4658      	mov	r0, fp
 8011db8:	f7f3 fb72 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8011dbc:	2214      	movs	r2, #20
 8011dbe:	4621      	mov	r1, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8011dc0:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8011dc2:	4658      	mov	r0, fp
 8011dc4:	f7f3 fb6c 	bl	80054a0 <_lv_obj_get_style_int>
 8011dc8:	9002      	str	r0, [sp, #8]
    lv_layout_t type = lv_cont_get_layout(cont);
 8011dca:	4658      	mov	r0, fp
 8011dcc:	f7ff ff4c 	bl	8011c68 <lv_cont_get_layout>
    switch(type) {
 8011dd0:	2803      	cmp	r0, #3
 8011dd2:	d04b      	beq.n	8011e6c <lv_cont_refr_layout+0x1dc>
 8011dd4:	2804      	cmp	r0, #4
 8011dd6:	d045      	beq.n	8011e64 <lv_cont_refr_layout+0x1d4>
            hpad_corr = 0;
 8011dd8:	2802      	cmp	r0, #2
 8011dda:	bf18      	it	ne
 8011ddc:	2600      	movne	r6, #0
 8011dde:	2701      	movs	r7, #1
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 8011de0:	4658      	mov	r0, fp
 8011de2:	2101      	movs	r1, #1
    _LV_LL_READ_BACK(cont->child_ll, child) {
 8011de4:	f10b 0804 	add.w	r8, fp, #4
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 8011de8:	f7f2 fa72 	bl	80042d0 <lv_obj_add_protect>
    _LV_LL_READ_BACK(cont->child_ll, child) {
 8011dec:	4640      	mov	r0, r8
 8011dee:	f7fd fa10 	bl	800f212 <_lv_ll_get_tail>
 8011df2:	4604      	mov	r4, r0
 8011df4:	2800      	cmp	r0, #0
 8011df6:	d08a      	beq.n	8011d0e <lv_cont_refr_layout+0x7e>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8011df8:	4620      	mov	r0, r4
 8011dfa:	f7f2 fce1 	bl	80047c0 <lv_obj_get_hidden>
 8011dfe:	bb60      	cbnz	r0, 8011e5a <lv_cont_refr_layout+0x1ca>
 8011e00:	2104      	movs	r1, #4
 8011e02:	4620      	mov	r0, r4
 8011e04:	f7f3 fae4 	bl	80053d0 <lv_obj_is_protected>
 8011e08:	4682      	mov	sl, r0
 8011e0a:	bb30      	cbnz	r0, 8011e5a <lv_cont_refr_layout+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 8011e0c:	4601      	mov	r1, r0
 8011e0e:	2215      	movs	r2, #21
 8011e10:	4620      	mov	r0, r4
 8011e12:	f7f3 fb45 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8011e16:	2216      	movs	r2, #22
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 8011e18:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8011e1a:	4651      	mov	r1, sl
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	f7f3 fb3f 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8011e22:	2217      	movs	r2, #23
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8011e24:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8011e26:	4651      	mov	r1, sl
 8011e28:	4620      	mov	r0, r4
 8011e2a:	f7f3 fb39 	bl	80054a0 <_lv_obj_get_style_int>
        lv_obj_align(child, cont, align, hpad_corr + mleft, last_cord + mtop);
 8011e2e:	b2ad      	uxth	r5, r5
 8011e30:	eb05 0209 	add.w	r2, r5, r9
 8011e34:	1833      	adds	r3, r6, r0
 8011e36:	b212      	sxth	r2, r2
 8011e38:	b21b      	sxth	r3, r3
 8011e3a:	9200      	str	r2, [sp, #0]
 8011e3c:	4659      	mov	r1, fp
 8011e3e:	463a      	mov	r2, r7
 8011e40:	4620      	mov	r0, r4
 8011e42:	f7f2 fe61 	bl	8004b08 <lv_obj_align>
        last_cord += lv_obj_get_height(child) + inner + mtop + mbottom;
 8011e46:	4620      	mov	r0, r4
 8011e48:	f7f2 fbec 	bl	8004624 <lv_obj_get_height>
 8011e4c:	9b02      	ldr	r3, [sp, #8]
 8011e4e:	4418      	add	r0, r3
 8011e50:	9b03      	ldr	r3, [sp, #12]
 8011e52:	4481      	add	r9, r0
 8011e54:	444b      	add	r3, r9
 8011e56:	441d      	add	r5, r3
 8011e58:	b22d      	sxth	r5, r5
    _LV_LL_READ_BACK(cont->child_ll, child) {
 8011e5a:	4621      	mov	r1, r4
 8011e5c:	4640      	mov	r0, r8
 8011e5e:	f7fd f9e0 	bl	800f222 <_lv_ll_get_prev>
 8011e62:	e7c6      	b.n	8011df2 <lv_cont_refr_layout+0x162>
            hpad_corr = -right;
 8011e64:	427e      	negs	r6, r7
 8011e66:	b236      	sxth	r6, r6
            align     = LV_ALIGN_IN_TOP_RIGHT;
 8011e68:	2703      	movs	r7, #3
 8011e6a:	e7b9      	b.n	8011de0 <lv_cont_refr_layout+0x150>
            hpad_corr = 0;
 8011e6c:	4626      	mov	r6, r4
            align     = LV_ALIGN_IN_TOP_MID;
 8011e6e:	2702      	movs	r7, #2
 8011e70:	e7b6      	b.n	8011de0 <lv_cont_refr_layout+0x150>
    else if(type == LV_LAYOUT_ROW_TOP || type == LV_LAYOUT_ROW_MID || type == LV_LAYOUT_ROW_BOTTOM) {
 8011e72:	1f6b      	subs	r3, r5, #5
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	2b02      	cmp	r3, #2
 8011e78:	d86c      	bhi.n	8011f54 <lv_cont_refr_layout+0x2c4>
    lv_layout_t type = lv_cont_get_layout(cont);
 8011e7a:	4658      	mov	r0, fp
 8011e7c:	f7ff fef4 	bl	8011c68 <lv_cont_get_layout>
 8011e80:	4605      	mov	r5, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
 8011e82:	4658      	mov	r0, fp
 8011e84:	f7f2 ffe8 	bl	8004e58 <lv_obj_get_base_dir>
    switch(type) {
 8011e88:	2d06      	cmp	r5, #6
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
 8011e8a:	4606      	mov	r6, r0
    switch(type) {
 8011e8c:	d00e      	beq.n	8011eac <lv_cont_refr_layout+0x21c>
 8011e8e:	2d07      	cmp	r5, #7
 8011e90:	d053      	beq.n	8011f3a <lv_cont_refr_layout+0x2aa>
 8011e92:	2d05      	cmp	r5, #5
 8011e94:	d105      	bne.n	8011ea2 <lv_cont_refr_layout+0x212>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8011e96:	4621      	mov	r1, r4
 8011e98:	2210      	movs	r2, #16
 8011e9a:	4658      	mov	r0, fp
 8011e9c:	f7f3 fb00 	bl	80054a0 <_lv_obj_get_style_int>
 8011ea0:	4604      	mov	r4, r0
            vpad_corr = 0;
 8011ea2:	2e01      	cmp	r6, #1
 8011ea4:	bf14      	ite	ne
 8011ea6:	2701      	movne	r7, #1
 8011ea8:	2703      	moveq	r7, #3
 8011eaa:	e003      	b.n	8011eb4 <lv_cont_refr_layout+0x224>
            vpad_corr = 0;
 8011eac:	2801      	cmp	r0, #1
 8011eae:	bf14      	ite	ne
 8011eb0:	2707      	movne	r7, #7
 8011eb2:	2708      	moveq	r7, #8
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 8011eb4:	2101      	movs	r1, #1
 8011eb6:	4658      	mov	r0, fp
 8011eb8:	f7f2 fa0a 	bl	80042d0 <lv_obj_add_protect>
    if(base_dir == LV_BIDI_DIR_RTL) last_cord = lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
 8011ebc:	2e01      	cmp	r6, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8011ebe:	bf0c      	ite	eq
 8011ec0:	2213      	moveq	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8011ec2:	2212      	movne	r2, #18
 8011ec4:	2100      	movs	r1, #0
 8011ec6:	4658      	mov	r0, fp
 8011ec8:	f7f3 faea 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8011ecc:	2214      	movs	r2, #20
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8011ece:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8011ed0:	2100      	movs	r1, #0
 8011ed2:	4658      	mov	r0, fp
 8011ed4:	f7f3 fae4 	bl	80054a0 <_lv_obj_get_style_int>
    _LV_LL_READ_BACK(cont->child_ll, child) {
 8011ed8:	f10b 0a04 	add.w	sl, fp, #4
 8011edc:	9002      	str	r0, [sp, #8]
 8011ede:	4650      	mov	r0, sl
 8011ee0:	f7fd f997 	bl	800f212 <_lv_ll_get_tail>
 8011ee4:	4605      	mov	r5, r0
 8011ee6:	2800      	cmp	r0, #0
 8011ee8:	f43f af11 	beq.w	8011d0e <lv_cont_refr_layout+0x7e>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8011eec:	4628      	mov	r0, r5
 8011eee:	f7f2 fc67 	bl	80047c0 <lv_obj_get_hidden>
 8011ef2:	b9e8      	cbnz	r0, 8011f30 <lv_cont_refr_layout+0x2a0>
 8011ef4:	2104      	movs	r1, #4
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	f7f3 fa6a 	bl	80053d0 <lv_obj_is_protected>
 8011efc:	b9c0      	cbnz	r0, 8011f30 <lv_cont_refr_layout+0x2a0>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
 8011efe:	2e01      	cmp	r6, #1
 8011f00:	fa1f f988 	uxth.w	r9, r8
 8011f04:	bf09      	itett	eq
 8011f06:	f1c9 0300 	rsbeq	r3, r9, #0
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
 8011f0a:	4643      	movne	r3, r8
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
 8011f0c:	b21b      	sxtheq	r3, r3
 8011f0e:	9400      	streq	r4, [sp, #0]
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
 8011f10:	bf18      	it	ne
 8011f12:	9400      	strne	r4, [sp, #0]
 8011f14:	463a      	mov	r2, r7
 8011f16:	4659      	mov	r1, fp
 8011f18:	4628      	mov	r0, r5
 8011f1a:	f7f2 fdf5 	bl	8004b08 <lv_obj_align>
        last_cord += lv_obj_get_width(child) + inner;
 8011f1e:	4628      	mov	r0, r5
 8011f20:	f7f2 fb72 	bl	8004608 <lv_obj_get_width>
 8011f24:	9b02      	ldr	r3, [sp, #8]
 8011f26:	eb00 0803 	add.w	r8, r0, r3
 8011f2a:	44c8      	add	r8, r9
 8011f2c:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
 8011f30:	4629      	mov	r1, r5
 8011f32:	4650      	mov	r0, sl
 8011f34:	f7fd f975 	bl	800f222 <_lv_ll_get_prev>
 8011f38:	e7d4      	b.n	8011ee4 <lv_cont_refr_layout+0x254>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8011f3a:	4621      	mov	r1, r4
 8011f3c:	2211      	movs	r2, #17
 8011f3e:	4658      	mov	r0, fp
 8011f40:	f7f3 faae 	bl	80054a0 <_lv_obj_get_style_int>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
 8011f44:	2e01      	cmp	r6, #1
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
 8011f46:	f1c0 0400 	rsb	r4, r0, #0
 8011f4a:	b224      	sxth	r4, r4
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
 8011f4c:	bf14      	ite	ne
 8011f4e:	2704      	movne	r7, #4
 8011f50:	2706      	moveq	r7, #6
 8011f52:	e7af      	b.n	8011eb4 <lv_cont_refr_layout+0x224>
    else if(type == LV_LAYOUT_PRETTY_MID || type == LV_LAYOUT_PRETTY_TOP || type == LV_LAYOUT_PRETTY_BOTTOM) {
 8011f54:	f1a5 0308 	sub.w	r3, r5, #8
 8011f58:	b2db      	uxtb	r3, r3
 8011f5a:	2b02      	cmp	r3, #2
 8011f5c:	f200 8132 	bhi.w	80121c4 <lv_cont_refr_layout+0x534>
    lv_layout_t type = lv_cont_get_layout(cont);
 8011f60:	4658      	mov	r0, fp
 8011f62:	f7ff fe81 	bl	8011c68 <lv_cont_get_layout>
 8011f66:	9005      	str	r0, [sp, #20]
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 8011f68:	4658      	mov	r0, fp
 8011f6a:	f7f2 fb4d 	bl	8004608 <lv_obj_get_width>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8011f6e:	2210      	movs	r2, #16
 8011f70:	9007      	str	r0, [sp, #28]
 8011f72:	4621      	mov	r1, r4
 8011f74:	4658      	mov	r0, fp
 8011f76:	f7f3 fa93 	bl	80054a0 <_lv_obj_get_style_int>
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 8011f7a:	f10b 0304 	add.w	r3, fp, #4
 8011f7e:	4606      	mov	r6, r0
 8011f80:	4618      	mov	r0, r3
 8011f82:	9303      	str	r3, [sp, #12]
 8011f84:	f7fd f945 	bl	800f212 <_lv_ll_get_tail>
    if(child_rs == NULL) return;                /*Return if no child*/
 8011f88:	4605      	mov	r5, r0
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	f000 81a3 	beq.w	80122d6 <lv_cont_refr_layout+0x646>
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 8011f90:	2101      	movs	r1, #1
 8011f92:	4658      	mov	r0, fp
 8011f94:	f7f2 f99c 	bl	80042d0 <lv_obj_add_protect>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8011f98:	2212      	movs	r2, #18
 8011f9a:	4621      	mov	r1, r4
 8011f9c:	4658      	mov	r0, fp
 8011f9e:	f7f3 fa7f 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8011fa2:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8011fa4:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8011fa6:	4621      	mov	r1, r4
 8011fa8:	4658      	mov	r0, fp
 8011faa:	f7f3 fa79 	bl	80054a0 <_lv_obj_get_style_int>
 8011fae:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 8011fb0:	2214      	movs	r2, #20
 8011fb2:	4621      	mov	r1, r4
 8011fb4:	4658      	mov	r0, fp
 8011fb6:	f7f3 fa73 	bl	80054a0 <_lv_obj_get_style_int>
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
 8011fba:	9b08      	ldr	r3, [sp, #32]
 8011fbc:	9006      	str	r0, [sp, #24]
 8011fbe:	441f      	add	r7, r3
 8011fc0:	b23b      	sxth	r3, r7
 8011fc2:	930d      	str	r3, [sp, #52]	; 0x34
        uint32_t obj_num = 0;
 8011fc4:	f04f 0800 	mov.w	r8, #0
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
 8011fc8:	462c      	mov	r4, r5
 8011fca:	9f0d      	ldr	r7, [sp, #52]	; 0x34
        lv_coord_t h_row = 0;
 8011fcc:	f8cd 8008 	str.w	r8, [sp, #8]
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 8011fd0:	4628      	mov	r0, r5
 8011fd2:	f7f2 fbf5 	bl	80047c0 <lv_obj_get_hidden>
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	d161      	bne.n	801209e <lv_cont_refr_layout+0x40e>
 8011fda:	2104      	movs	r1, #4
 8011fdc:	4628      	mov	r0, r5
 8011fde:	f7f3 f9f7 	bl	80053d0 <lv_obj_is_protected>
 8011fe2:	4681      	mov	r9, r0
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	d15a      	bne.n	801209e <lv_cont_refr_layout+0x40e>
                lv_coord_t w = lv_obj_get_width(child_rc);
 8011fe8:	4628      	mov	r0, r5
 8011fea:	f7f2 fb0d 	bl	8004608 <lv_obj_get_width>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8011fee:	2217      	movs	r2, #23
 8011ff0:	4682      	mov	sl, r0
 8011ff2:	4649      	mov	r1, r9
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	f7f3 fa53 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 8011ffa:	2218      	movs	r2, #24
                w += lv_obj_get_style_margin_left(child_rc, LV_OBJ_PART_MAIN);
 8011ffc:	4482      	add	sl, r0
 8011ffe:	4649      	mov	r1, r9
 8012000:	4628      	mov	r0, r5
 8012002:	f7f3 fa4d 	bl	80054a0 <_lv_obj_get_style_int>
 8012006:	fa1f fa8a 	uxth.w	sl, sl
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
 801200a:	4450      	add	r0, sl
 801200c:	b280      	uxth	r0, r0
                if(w_row + w > w_obj) {
 801200e:	b203      	sxth	r3, r0
 8012010:	9a07      	ldr	r2, [sp, #28]
 8012012:	443b      	add	r3, r7
 8012014:	4293      	cmp	r3, r2
 8012016:	dd1d      	ble.n	8012054 <lv_cont_refr_layout+0x3c4>
                    if(child_rc != NULL && obj_num != 0) {
 8012018:	f1b8 0f00 	cmp.w	r8, #0
 801201c:	f000 812c 	beq.w	8012278 <lv_cont_refr_layout+0x5e8>
                        child_rc = _lv_ll_get_next(&cont->child_ll, child_rc);
 8012020:	4629      	mov	r1, r5
 8012022:	9803      	ldr	r0, [sp, #12]
 8012024:	f7fd f8f8 	bl	800f218 <_lv_ll_get_next>
 8012028:	4605      	mov	r5, r0
        else if(obj_num == 1) {
 801202a:	f1b8 0f01 	cmp.w	r8, #1
 801202e:	d142      	bne.n	80120b6 <lv_cont_refr_layout+0x426>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 8012030:	2215      	movs	r2, #21
 8012032:	2100      	movs	r1, #0
 8012034:	4620      	mov	r0, r4
 8012036:	f7f3 fa33 	bl	80054a0 <_lv_obj_get_style_int>
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
 801203a:	4430      	add	r0, r6
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
 801203c:	b200      	sxth	r0, r0
 801203e:	9000      	str	r0, [sp, #0]
 8012040:	2300      	movs	r3, #0
 8012042:	2202      	movs	r2, #2
 8012044:	4659      	mov	r1, fp
 8012046:	4620      	mov	r0, r4
 8012048:	f7f2 fd5e 	bl	8004b08 <lv_obj_align>
        if(child_rc == NULL) break;
 801204c:	2d00      	cmp	r5, #0
 801204e:	f040 812f 	bne.w	80122b0 <lv_cont_refr_layout+0x620>
 8012052:	e65c      	b.n	8011d0e <lv_cont_refr_layout+0x7e>
                w_row += w + pinner; /*Add the object width + inner padding*/
 8012054:	9b06      	ldr	r3, [sp, #24]
                obj_num++;
 8012056:	f108 0801 	add.w	r8, r8, #1
                w_row += w + pinner; /*Add the object width + inner padding*/
 801205a:	441f      	add	r7, r3
 801205c:	4407      	add	r7, r0
                lv_coord_t h = lv_obj_get_height(child_rc);
 801205e:	4628      	mov	r0, r5
 8012060:	f7f2 fae0 	bl	8004624 <lv_obj_get_height>
 8012064:	2215      	movs	r2, #21
 8012066:	4682      	mov	sl, r0
 8012068:	4649      	mov	r1, r9
 801206a:	4628      	mov	r0, r5
 801206c:	f7f3 fa18 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8012070:	4649      	mov	r1, r9
                h += lv_obj_get_style_margin_top(child_rc, LV_OBJ_PART_MAIN);
 8012072:	4482      	add	sl, r0
 8012074:	2216      	movs	r2, #22
 8012076:	4628      	mov	r0, r5
 8012078:	f7f3 fa12 	bl	80054a0 <_lv_obj_get_style_int>
 801207c:	fa1f fa8a 	uxth.w	sl, sl
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
 8012080:	9b02      	ldr	r3, [sp, #8]
                h += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
 8012082:	4450      	add	r0, sl
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
 8012084:	b200      	sxth	r0, r0
 8012086:	4283      	cmp	r3, r0
 8012088:	bfb8      	it	lt
 801208a:	4603      	movlt	r3, r0
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 801208c:	2108      	movs	r1, #8
 801208e:	4628      	mov	r0, r5
                w_row += w + pinner; /*Add the object width + inner padding*/
 8012090:	b23f      	sxth	r7, r7
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
 8012092:	9302      	str	r3, [sp, #8]
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 8012094:	f7f3 f99c 	bl	80053d0 <lv_obj_is_protected>
 8012098:	2800      	cmp	r0, #0
 801209a:	f040 80e9 	bne.w	8012270 <lv_cont_refr_layout+0x5e0>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 801209e:	4629      	mov	r1, r5
 80120a0:	9803      	ldr	r0, [sp, #12]
 80120a2:	f7fd f8be 	bl	800f222 <_lv_ll_get_prev>
 80120a6:	4605      	mov	r5, r0
            if(obj_num == 0)
 80120a8:	f1b8 0f00 	cmp.w	r8, #0
 80120ac:	f000 810e 	beq.w	80122cc <lv_cont_refr_layout+0x63c>
        } while(child_rc != NULL);
 80120b0:	2800      	cmp	r0, #0
 80120b2:	d18d      	bne.n	8011fd0 <lv_cont_refr_layout+0x340>
 80120b4:	e7b9      	b.n	801202a <lv_cont_refr_layout+0x39a>
            w_row -= pinner * obj_num;
 80120b6:	9b06      	ldr	r3, [sp, #24]
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
 80120b8:	4658      	mov	r0, fp
            w_row -= pinner * obj_num;
 80120ba:	fb03 7718 	mls	r7, r3, r8, r7
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
 80120be:	9b07      	ldr	r3, [sp, #28]
 80120c0:	b23f      	sxth	r7, r7
 80120c2:	1bdf      	subs	r7, r3, r7
 80120c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80120c8:	fbb7 f8f8 	udiv	r8, r7, r8
 80120cc:	fa0f f388 	sxth.w	r3, r8
 80120d0:	9309      	str	r3, [sp, #36]	; 0x24
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
 80120d2:	f7f2 fec1 	bl	8004e58 <lv_obj_get_base_dir>
 80120d6:	2801      	cmp	r0, #1
 80120d8:	d06f      	beq.n	80121ba <lv_cont_refr_layout+0x52a>
                inv = 1;
 80120da:	f04f 0901 	mov.w	r9, #1
                align = LV_ALIGN_IN_TOP_LEFT;
 80120de:	f8cd 9010 	str.w	r9, [sp, #16]
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 80120e2:	9b02      	ldr	r3, [sp, #8]
                align = LV_ALIGN_IN_TOP_LEFT;
 80120e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 80120e8:	18f3      	adds	r3, r6, r3
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	930c      	str	r3, [sp, #48]	; 0x30
 80120ee:	e041      	b.n	8012174 <lv_cont_refr_layout+0x4e4>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 80120f0:	4620      	mov	r0, r4
 80120f2:	f7f2 fb65 	bl	80047c0 <lv_obj_get_hidden>
 80120f6:	bba8      	cbnz	r0, 8012164 <lv_cont_refr_layout+0x4d4>
 80120f8:	2104      	movs	r1, #4
 80120fa:	4620      	mov	r0, r4
 80120fc:	f7f3 f968 	bl	80053d0 <lv_obj_is_protected>
 8012100:	4607      	mov	r7, r0
 8012102:	bb78      	cbnz	r0, 8012164 <lv_cont_refr_layout+0x4d4>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8012104:	4601      	mov	r1, r0
 8012106:	2217      	movs	r2, #23
 8012108:	4620      	mov	r0, r4
 801210a:	f7f3 f9c9 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 801210e:	2218      	movs	r2, #24
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8012110:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 8012112:	4639      	mov	r1, r7
 8012114:	4620      	mov	r0, r4
 8012116:	f7f3 f9c3 	bl	80054a0 <_lv_obj_get_style_int>
                    switch(type) {
 801211a:	9b05      	ldr	r3, [sp, #20]
 801211c:	900b      	str	r0, [sp, #44]	; 0x2c
 801211e:	2b09      	cmp	r3, #9
 8012120:	d02b      	beq.n	801217a <lv_cont_refr_layout+0x4ea>
 8012122:	2b0a      	cmp	r3, #10
 8012124:	d036      	beq.n	8012194 <lv_cont_refr_layout+0x504>
 8012126:	2b08      	cmp	r3, #8
 8012128:	d111      	bne.n	801214e <lv_cont_refr_layout+0x4be>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801212a:	2215      	movs	r2, #21
 801212c:	4639      	mov	r1, r7
 801212e:	4620      	mov	r0, r4
 8012130:	f7f3 f9b6 	bl	80054a0 <_lv_obj_get_style_int>
                                         inv * (act_x + mleft),
 8012134:	eb08 030a 	add.w	r3, r8, sl
                            lv_obj_align(child_tmp, cont, align,
 8012138:	fb03 f309 	mul.w	r3, r3, r9
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801213c:	4430      	add	r0, r6
                            lv_obj_align(child_tmp, cont, align,
 801213e:	b200      	sxth	r0, r0
 8012140:	9000      	str	r0, [sp, #0]
 8012142:	b21b      	sxth	r3, r3
 8012144:	9a04      	ldr	r2, [sp, #16]
 8012146:	4659      	mov	r1, fp
 8012148:	4620      	mov	r0, r4
 801214a:	f7f2 fcdd 	bl	8004b08 <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_pinner + mleft + mright;
 801214e:	4620      	mov	r0, r4
 8012150:	f7f2 fa5a 	bl	8004608 <lv_obj_get_width>
 8012154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012156:	4418      	add	r0, r3
 8012158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801215a:	4482      	add	sl, r0
 801215c:	449a      	add	sl, r3
 801215e:	44d0      	add	r8, sl
 8012160:	fa0f f888 	sxth.w	r8, r8
                if(child_tmp == child_rc) break;
 8012164:	42ac      	cmp	r4, r5
 8012166:	f000 80a3 	beq.w	80122b0 <lv_cont_refr_layout+0x620>
                child_tmp = _lv_ll_get_prev(&cont->child_ll, child_tmp);
 801216a:	4621      	mov	r1, r4
 801216c:	9803      	ldr	r0, [sp, #12]
 801216e:	f7fd f858 	bl	800f222 <_lv_ll_get_prev>
 8012172:	4604      	mov	r4, r0
            while(child_tmp != NULL) {
 8012174:	2c00      	cmp	r4, #0
 8012176:	d1bb      	bne.n	80120f0 <lv_cont_refr_layout+0x460>
 8012178:	e768      	b.n	801204c <lv_cont_refr_layout+0x3bc>
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801217a:	4620      	mov	r0, r4
 801217c:	f7f2 fa52 	bl	8004624 <lv_obj_get_height>
 8012180:	9a02      	ldr	r2, [sp, #8]
                                         inv * (act_x + mleft),
 8012182:	eb08 030a 	add.w	r3, r8, sl
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 8012186:	1a10      	subs	r0, r2, r0
 8012188:	2202      	movs	r2, #2
                            lv_obj_align(child_tmp, cont, align,
 801218a:	fb03 f309 	mul.w	r3, r3, r9
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 801218e:	fb90 f0f2 	sdiv	r0, r0, r2
 8012192:	e7d3      	b.n	801213c <lv_cont_refr_layout+0x4ac>
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 8012194:	4620      	mov	r0, r4
 8012196:	f7f2 fa45 	bl	8004624 <lv_obj_get_height>
 801219a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801219c:	2216      	movs	r2, #22
 801219e:	1a18      	subs	r0, r3, r0
 80121a0:	b283      	uxth	r3, r0
 80121a2:	4639      	mov	r1, r7
 80121a4:	4620      	mov	r0, r4
 80121a6:	930a      	str	r3, [sp, #40]	; 0x28
 80121a8:	f7f3 f97a 	bl	80054a0 <_lv_obj_get_style_int>
 80121ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                                         inv * (act_x + mleft),
 80121ae:	eb08 030a 	add.w	r3, r8, sl
                            lv_obj_align(child_tmp, cont, align,
 80121b2:	fb03 f309 	mul.w	r3, r3, r9
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
 80121b6:	1a10      	subs	r0, r2, r0
 80121b8:	e7c1      	b.n	801213e <lv_cont_refr_layout+0x4ae>
                align = LV_ALIGN_IN_TOP_RIGHT;
 80121ba:	2303      	movs	r3, #3
                inv = -1;
 80121bc:	f04f 39ff 	mov.w	r9, #4294967295
                align = LV_ALIGN_IN_TOP_RIGHT;
 80121c0:	9304      	str	r3, [sp, #16]
 80121c2:	e78e      	b.n	80120e2 <lv_cont_refr_layout+0x452>
    else if(type == LV_LAYOUT_GRID) {
 80121c4:	2d0b      	cmp	r5, #11
 80121c6:	f040 8086 	bne.w	80122d6 <lv_cont_refr_layout+0x646>
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
 80121ca:	4658      	mov	r0, fp
 80121cc:	f7f3 fa32 	bl	8005634 <lv_obj_get_width_fit>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 80121d0:	2214      	movs	r2, #20
 80121d2:	4621      	mov	r1, r4
 80121d4:	4682      	mov	sl, r0
 80121d6:	4658      	mov	r0, fp
 80121d8:	f7f3 f962 	bl	80054a0 <_lv_obj_get_style_int>
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
 80121dc:	4621      	mov	r1, r4
 80121de:	4607      	mov	r7, r0
 80121e0:	4658      	mov	r0, fp
 80121e2:	f7f2 f9b3 	bl	800454c <lv_obj_get_child>
 80121e6:	f7f2 fa1d 	bl	8004624 <lv_obj_get_height>
 80121ea:	b2bf      	uxth	r7, r7
 80121ec:	4438      	add	r0, r7
 80121ee:	b283      	uxth	r3, r0
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 80121f0:	2101      	movs	r1, #1
 80121f2:	4658      	mov	r0, fp
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
 80121f4:	9302      	str	r3, [sp, #8]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
 80121f6:	f7f2 f86b 	bl	80042d0 <lv_obj_add_protect>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80121fa:	4621      	mov	r1, r4
 80121fc:	2212      	movs	r2, #18
 80121fe:	4658      	mov	r0, fp
 8012200:	f7f3 f94e 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8012204:	4621      	mov	r1, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8012206:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8012208:	2210      	movs	r2, #16
 801220a:	4658      	mov	r0, fp
 801220c:	f7f3 f948 	bl	80054a0 <_lv_obj_get_style_int>
    _LV_LL_READ_BACK(cont->child_ll, child) {
 8012210:	f10b 0804 	add.w	r8, fp, #4
 8012214:	4606      	mov	r6, r0
 8012216:	4640      	mov	r0, r8
 8012218:	f7fc fffb 	bl	800f212 <_lv_ll_get_tail>
    lv_coord_t act_x = left;
 801221c:	464d      	mov	r5, r9
    _LV_LL_READ_BACK(cont->child_ll, child) {
 801221e:	4604      	mov	r4, r0
        if(act_x + obj_w > w_fit + left) {
 8012220:	44ca      	add	sl, r9
    _LV_LL_READ_BACK(cont->child_ll, child) {
 8012222:	2c00      	cmp	r4, #0
 8012224:	f43f ad73 	beq.w	8011d0e <lv_cont_refr_layout+0x7e>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8012228:	4620      	mov	r0, r4
 801222a:	f7f2 fac9 	bl	80047c0 <lv_obj_get_hidden>
 801222e:	b9c8      	cbnz	r0, 8012264 <lv_cont_refr_layout+0x5d4>
 8012230:	2104      	movs	r1, #4
 8012232:	4620      	mov	r0, r4
 8012234:	f7f3 f8cc 	bl	80053d0 <lv_obj_is_protected>
 8012238:	b9a0      	cbnz	r0, 8012264 <lv_cont_refr_layout+0x5d4>
        lv_coord_t obj_w = lv_obj_get_width(child);
 801223a:	4620      	mov	r0, r4
 801223c:	f7f2 f9e4 	bl	8004608 <lv_obj_get_width>
        if(act_x + obj_w > w_fit + left) {
 8012240:	182a      	adds	r2, r5, r0
 8012242:	4552      	cmp	r2, sl
            act_x = left;
 8012244:	bfc4      	itt	gt
 8012246:	464d      	movgt	r5, r9
            act_y += y_ofs;
 8012248:	9a02      	ldrgt	r2, [sp, #8]
 801224a:	9003      	str	r0, [sp, #12]
 801224c:	bfc4      	itt	gt
 801224e:	18b6      	addgt	r6, r6, r2
 8012250:	b236      	sxthgt	r6, r6
        lv_obj_set_pos(child, act_x, act_y);
 8012252:	4629      	mov	r1, r5
 8012254:	4632      	mov	r2, r6
 8012256:	4620      	mov	r0, r4
 8012258:	f7f2 fb9e 	bl	8004998 <lv_obj_set_pos>
        act_x += inner + obj_w;
 801225c:	9b03      	ldr	r3, [sp, #12]
 801225e:	443b      	add	r3, r7
 8012260:	441d      	add	r5, r3
 8012262:	b22d      	sxth	r5, r5
    _LV_LL_READ_BACK(cont->child_ll, child) {
 8012264:	4621      	mov	r1, r4
 8012266:	4640      	mov	r0, r8
 8012268:	f7fc ffdb 	bl	800f222 <_lv_ll_get_prev>
 801226c:	4604      	mov	r4, r0
 801226e:	e7d8      	b.n	8012222 <lv_cont_refr_layout+0x592>
        if(obj_num == 0) {
 8012270:	f1b8 0f00 	cmp.w	r8, #0
 8012274:	f47f aed9 	bne.w	801202a <lv_cont_refr_layout+0x39a>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 8012278:	2215      	movs	r2, #21
 801227a:	2100      	movs	r1, #0
 801227c:	4628      	mov	r0, r5
 801227e:	f7f3 f90f 	bl	80054a0 <_lv_obj_get_style_int>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y + mtop);
 8012282:	b284      	uxth	r4, r0
 8012284:	19a3      	adds	r3, r4, r6
 8012286:	b21b      	sxth	r3, r3
 8012288:	2202      	movs	r2, #2
 801228a:	4659      	mov	r1, fp
 801228c:	9300      	str	r3, [sp, #0]
 801228e:	4628      	mov	r0, r5
 8012290:	2300      	movs	r3, #0
 8012292:	f7f2 fc39 	bl	8004b08 <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 8012296:	4628      	mov	r0, r5
 8012298:	f7f2 f9c4 	bl	8004624 <lv_obj_get_height>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801229c:	2216      	movs	r2, #22
                h_row += mtop;
 801229e:	4404      	add	r4, r0
 80122a0:	2100      	movs	r1, #0
 80122a2:	4628      	mov	r0, r5
 80122a4:	f7f3 f8fc 	bl	80054a0 <_lv_obj_get_style_int>
 80122a8:	b2a4      	uxth	r4, r4
                h_row += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
 80122aa:	4420      	add	r0, r4
 80122ac:	b203      	sxth	r3, r0
 80122ae:	9302      	str	r3, [sp, #8]
        act_y += pinner + h_row;           /*y increment*/
 80122b0:	9b06      	ldr	r3, [sp, #24]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 80122b2:	4629      	mov	r1, r5
        act_y += pinner + h_row;           /*y increment*/
 80122b4:	441e      	add	r6, r3
 80122b6:	9b02      	ldr	r3, [sp, #8]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 80122b8:	9803      	ldr	r0, [sp, #12]
        act_y += pinner + h_row;           /*y increment*/
 80122ba:	441e      	add	r6, r3
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 80122bc:	f7fc ffb1 	bl	800f222 <_lv_ll_get_prev>
        act_y += pinner + h_row;           /*y increment*/
 80122c0:	b236      	sxth	r6, r6
    while(child_rs != NULL) {
 80122c2:	4605      	mov	r5, r0
 80122c4:	2800      	cmp	r0, #0
 80122c6:	f47f ae7d 	bne.w	8011fc4 <lv_cont_refr_layout+0x334>
 80122ca:	e520      	b.n	8011d0e <lv_cont_refr_layout+0x7e>
        } while(child_rc != NULL);
 80122cc:	2800      	cmp	r0, #0
 80122ce:	f43f ad1e 	beq.w	8011d0e <lv_cont_refr_layout+0x7e>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 80122d2:	462c      	mov	r4, r5
 80122d4:	e67c      	b.n	8011fd0 <lv_cont_refr_layout+0x340>
}
 80122d6:	b00f      	add	sp, #60	; 0x3c
 80122d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080122dc <lv_cont_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 80122dc:	2908      	cmp	r1, #8
{
 80122de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e2:	4605      	mov	r5, r0
 80122e4:	460f      	mov	r7, r1
 80122e6:	4614      	mov	r4, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 80122e8:	d114      	bne.n	8012314 <lv_cont_signal+0x38>
    switch(type) {
 80122ea:	7813      	ldrb	r3, [r2, #0]
 80122ec:	b14b      	cbz	r3, 8012302 <lv_cont_signal+0x26>
        info->result = lv_cont_get_style(cont, info->part);
 80122ee:	2300      	movs	r3, #0
 80122f0:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(cont, sign, param);
 80122f2:	4b22      	ldr	r3, [pc, #136]	; (801237c <lv_cont_signal+0xa0>)
 80122f4:	4622      	mov	r2, r4
 80122f6:	4628      	mov	r0, r5
}
 80122f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(cont, sign, param);
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	2108      	movs	r1, #8
 8012300:	4718      	bx	r3
            style_dsc_p = &cont->style_list;
 8012302:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_cont_get_style(cont, info->part);
 8012306:	6053      	str	r3, [r2, #4]
        if(info->result != NULL) return LV_RES_OK;
 8012308:	2b00      	cmp	r3, #0
 801230a:	d0f2      	beq.n	80122f2 <lv_cont_signal+0x16>
 801230c:	2601      	movs	r6, #1
}
 801230e:	4630      	mov	r0, r6
 8012310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    res = ancestor_signal(cont, sign, param);
 8012314:	4b19      	ldr	r3, [pc, #100]	; (801237c <lv_cont_signal+0xa0>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 801231a:	2801      	cmp	r0, #1
    res = ancestor_signal(cont, sign, param);
 801231c:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 801231e:	d1f6      	bne.n	801230e <lv_cont_signal+0x32>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8012320:	2f07      	cmp	r7, #7
 8012322:	d105      	bne.n	8012330 <lv_cont_signal+0x54>
 8012324:	4620      	mov	r0, r4
}
 8012326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 801232a:	4915      	ldr	r1, [pc, #84]	; (8012380 <lv_cont_signal+0xa4>)
 801232c:	f7f3 bf76 	b.w	800621c <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 8012330:	2f04      	cmp	r7, #4
 8012332:	d106      	bne.n	8012342 <lv_cont_signal+0x66>
        lv_cont_refr_layout(cont);
 8012334:	4628      	mov	r0, r5
 8012336:	f7ff fcab 	bl	8011c90 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 801233a:	4628      	mov	r0, r5
 801233c:	f7ff fa0c 	bl	8011758 <lv_cont_refr_autofit>
 8012340:	e7e5      	b.n	801230e <lv_cont_signal+0x32>
    else if(sign == LV_SIGNAL_CHILD_CHG) {
 8012342:	2f01      	cmp	r7, #1
 8012344:	d0f6      	beq.n	8012334 <lv_cont_signal+0x58>
    else if(sign == LV_SIGNAL_COORD_CHG) {
 8012346:	2f02      	cmp	r7, #2
 8012348:	d114      	bne.n	8012374 <lv_cont_signal+0x98>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 801234a:	4628      	mov	r0, r5
 801234c:	f7f2 f95c 	bl	8004608 <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012350:	88a3      	ldrh	r3, [r4, #4]
 8012352:	8822      	ldrh	r2, [r4, #0]
 8012354:	3301      	adds	r3, #1
 8012356:	1a9b      	subs	r3, r3, r2
 8012358:	b21b      	sxth	r3, r3
 801235a:	4298      	cmp	r0, r3
 801235c:	d1ea      	bne.n	8012334 <lv_cont_signal+0x58>
 801235e:	4628      	mov	r0, r5
 8012360:	f7f2 f960 	bl	8004624 <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012364:	88e3      	ldrh	r3, [r4, #6]
 8012366:	8862      	ldrh	r2, [r4, #2]
 8012368:	3301      	adds	r3, #1
 801236a:	1a9b      	subs	r3, r3, r2
 801236c:	b21b      	sxth	r3, r3
 801236e:	4298      	cmp	r0, r3
 8012370:	d1e0      	bne.n	8012334 <lv_cont_signal+0x58>
 8012372:	e7cb      	b.n	801230c <lv_cont_signal+0x30>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 8012374:	2f03      	cmp	r7, #3
 8012376:	d1c9      	bne.n	801230c <lv_cont_signal+0x30>
 8012378:	e7df      	b.n	801233a <lv_cont_signal+0x5e>
 801237a:	bf00      	nop
 801237c:	200025ac 	.word	0x200025ac
 8012380:	08019907 	.word	0x08019907

08012384 <lv_cont_get_fit_left>:
{
 8012384:	b510      	push	{r4, lr}
 8012386:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 8012388:	f7fc fe1e 	bl	800efc8 <lv_debug_check_null>
 801238c:	4603      	mov	r3, r0
 801238e:	b920      	cbnz	r0, 801239a <lv_cont_get_fit_left+0x16>
 8012390:	4622      	mov	r2, r4
 8012392:	4805      	ldr	r0, [pc, #20]	; (80123a8 <lv_cont_get_fit_left+0x24>)
 8012394:	f7fc fe1c 	bl	800efd0 <lv_debug_log_error>
 8012398:	e7fe      	b.n	8012398 <lv_cont_get_fit_left+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 801239a:	4620      	mov	r0, r4
 801239c:	f7f3 fe4c 	bl	8006038 <lv_obj_get_ext_attr>
    return ext->fit_left;
 80123a0:	7800      	ldrb	r0, [r0, #0]
}
 80123a2:	f3c0 1001 	ubfx	r0, r0, #4, #2
 80123a6:	bd10      	pop	{r4, pc}
 80123a8:	080158e8 	.word	0x080158e8

080123ac <lv_cont_get_fit_right>:
{
 80123ac:	b510      	push	{r4, lr}
 80123ae:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 80123b0:	f7fc fe0a 	bl	800efc8 <lv_debug_check_null>
 80123b4:	4603      	mov	r3, r0
 80123b6:	b920      	cbnz	r0, 80123c2 <lv_cont_get_fit_right+0x16>
 80123b8:	4622      	mov	r2, r4
 80123ba:	4805      	ldr	r0, [pc, #20]	; (80123d0 <lv_cont_get_fit_right+0x24>)
 80123bc:	f7fc fe08 	bl	800efd0 <lv_debug_log_error>
 80123c0:	e7fe      	b.n	80123c0 <lv_cont_get_fit_right+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80123c2:	4620      	mov	r0, r4
 80123c4:	f7f3 fe38 	bl	8006038 <lv_obj_get_ext_attr>
    return ext->fit_right;
 80123c8:	7800      	ldrb	r0, [r0, #0]
}
 80123ca:	0980      	lsrs	r0, r0, #6
 80123cc:	bd10      	pop	{r4, pc}
 80123ce:	bf00      	nop
 80123d0:	080158e8 	.word	0x080158e8

080123d4 <lv_cont_get_fit_top>:
{
 80123d4:	b510      	push	{r4, lr}
 80123d6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
 80123d8:	f7fc fdf6 	bl	800efc8 <lv_debug_check_null>
 80123dc:	4603      	mov	r3, r0
 80123de:	b920      	cbnz	r0, 80123ea <lv_cont_get_fit_top+0x16>
 80123e0:	4622      	mov	r2, r4
 80123e2:	4805      	ldr	r0, [pc, #20]	; (80123f8 <lv_cont_get_fit_top+0x24>)
 80123e4:	f7fc fdf4 	bl	800efd0 <lv_debug_log_error>
 80123e8:	e7fe      	b.n	80123e8 <lv_cont_get_fit_top+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 80123ea:	4620      	mov	r0, r4
 80123ec:	f7f3 fe24 	bl	8006038 <lv_obj_get_ext_attr>
    return ext->fit_top;
 80123f0:	7840      	ldrb	r0, [r0, #1]
}
 80123f2:	f000 0003 	and.w	r0, r0, #3
 80123f6:	bd10      	pop	{r4, pc}
 80123f8:	080158e8 	.word	0x080158e8

080123fc <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 80123fc:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80123fe:	f7f3 fe1b 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 8012402:	7cc3      	ldrb	r3, [r0, #19]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8012404:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 8012406:	07db      	lsls	r3, r3, #31
 8012408:	d503      	bpl.n	8012412 <lv_label_dot_tmp_free+0x16>
 801240a:	6840      	ldr	r0, [r0, #4]
 801240c:	b108      	cbz	r0, 8012412 <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
 801240e:	f7fd f8bd 	bl	800f58c <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 8012412:	7ce3      	ldrb	r3, [r4, #19]
 8012414:	f36f 0300 	bfc	r3, #0, #1
 8012418:	74e3      	strb	r3, [r4, #19]
    ext->dot.tmp_ptr   = NULL;
 801241a:	2300      	movs	r3, #0
 801241c:	6063      	str	r3, [r4, #4]
}
 801241e:	bd10      	pop	{r4, pc}

08012420 <lv_label_revert_dots>:
{
 8012420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012424:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8012426:	f7f3 fe07 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801242a:	7c83      	ldrb	r3, [r0, #18]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801242c:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 801242e:	f003 0307 	and.w	r3, r3, #7
 8012432:	2b02      	cmp	r3, #2
 8012434:	d126      	bne.n	8012484 <lv_label_revert_dots+0x64>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 8012436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801243a:	6881      	ldr	r1, [r0, #8]
 801243c:	4299      	cmp	r1, r3
 801243e:	d021      	beq.n	8012484 <lv_label_revert_dots+0x64>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
 8012440:	4b12      	ldr	r3, [pc, #72]	; (801248c <lv_label_revert_dots+0x6c>)
 8012442:	3903      	subs	r1, #3
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	6800      	ldr	r0, [r0, #0]
 8012448:	4798      	blx	r3
 801244a:	4680      	mov	r8, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801244c:	4628      	mov	r0, r5
 801244e:	f7f3 fdf3 	bl	8006038 <lv_obj_get_ext_attr>
    while(ext->text[byte_i + i] != '\0') {
 8012452:	2100      	movs	r1, #0
    if(ext->dot_tmp_alloc) {
 8012454:	7cc3      	ldrb	r3, [r0, #19]
 8012456:	07db      	lsls	r3, r3, #31
        return ext->dot.tmp_ptr;
 8012458:	bf4c      	ite	mi
 801245a:	6840      	ldrmi	r0, [r0, #4]
        return ext->dot.tmp;
 801245c:	3004      	addpl	r0, #4
 801245e:	b2ce      	uxtb	r6, r1
    while(ext->text[byte_i + i] != '\0') {
 8012460:	6822      	ldr	r2, [r4, #0]
 8012462:	eb08 0306 	add.w	r3, r8, r6
 8012466:	f812 c003 	ldrb.w	ip, [r2, r3]
 801246a:	18d7      	adds	r7, r2, r3
 801246c:	5d86      	ldrb	r6, [r0, r6]
 801246e:	3101      	adds	r1, #1
 8012470:	f1bc 0f00 	cmp.w	ip, #0
 8012474:	d108      	bne.n	8012488 <lv_label_revert_dots+0x68>
    ext->text[byte_i + i] = dot_tmp[i];
 8012476:	703e      	strb	r6, [r7, #0]
    lv_label_dot_tmp_free(label);
 8012478:	4628      	mov	r0, r5
 801247a:	f7ff ffbf 	bl	80123fc <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 801247e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012482:	60a3      	str	r3, [r4, #8]
}
 8012484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ext->text[byte_i + i] = dot_tmp[i];
 8012488:	54d6      	strb	r6, [r2, r3]
 801248a:	e7e8      	b.n	801245e <lv_label_revert_dots+0x3e>
 801248c:	2000005c 	.word	0x2000005c

08012490 <lv_label_set_dot_tmp>:
{
 8012490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012492:	4615      	mov	r5, r2
 8012494:	4607      	mov	r7, r0
 8012496:	460e      	mov	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8012498:	f7f3 fdce 	bl	8006038 <lv_obj_get_ext_attr>
 801249c:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 801249e:	4638      	mov	r0, r7
 80124a0:	f7ff ffac 	bl	80123fc <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 80124a4:	2d04      	cmp	r5, #4
 80124a6:	d911      	bls.n	80124cc <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 80124a8:	1c68      	adds	r0, r5, #1
 80124aa:	f7fd f81f 	bl	800f4ec <lv_mem_alloc>
 80124ae:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
 80124b0:	b158      	cbz	r0, 80124ca <lv_label_set_dot_tmp+0x3a>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
 80124b2:	462a      	mov	r2, r5
 80124b4:	4631      	mov	r1, r6
 80124b6:	f7fd f8f5 	bl	800f6a4 <_lv_memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 80124ba:	2200      	movs	r2, #0
 80124bc:	6863      	ldr	r3, [r4, #4]
 80124be:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
 80124c0:	7ce3      	ldrb	r3, [r4, #19]
 80124c2:	f043 0301 	orr.w	r3, r3, #1
 80124c6:	74e3      	strb	r3, [r4, #19]
    return true;
 80124c8:	2001      	movs	r0, #1
}
 80124ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
 80124cc:	7ce3      	ldrb	r3, [r4, #19]
        _lv_memcpy(ext->dot.tmp, data, len);
 80124ce:	462a      	mov	r2, r5
        ext->dot_tmp_alloc = false;
 80124d0:	f36f 0300 	bfc	r3, #0, #1
 80124d4:	74e3      	strb	r3, [r4, #19]
        _lv_memcpy(ext->dot.tmp, data, len);
 80124d6:	4631      	mov	r1, r6
 80124d8:	1d20      	adds	r0, r4, #4
 80124da:	f7fd f8e3 	bl	800f6a4 <_lv_memcpy>
 80124de:	e7f3      	b.n	80124c8 <lv_label_set_dot_tmp+0x38>

080124e0 <lv_label_set_offset_y>:
{
 80124e0:	b538      	push	{r3, r4, r5, lr}
 80124e2:	4604      	mov	r4, r0
 80124e4:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80124e6:	f7f3 fda7 	bl	8006038 <lv_obj_get_ext_attr>
    ext->offset.y        = y;
 80124ea:	8205      	strh	r5, [r0, #16]
    lv_obj_invalidate(label);
 80124ec:	4620      	mov	r0, r4
}
 80124ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 80124f2:	f7f2 b9f5 	b.w	80048e0 <lv_obj_invalidate>

080124f6 <lv_label_set_offset_x>:
{
 80124f6:	b538      	push	{r3, r4, r5, lr}
 80124f8:	4604      	mov	r4, r0
 80124fa:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80124fc:	f7f3 fd9c 	bl	8006038 <lv_obj_get_ext_attr>
    ext->offset.x        = x;
 8012500:	81c5      	strh	r5, [r0, #14]
    lv_obj_invalidate(label);
 8012502:	4620      	mov	r0, r4
}
 8012504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label);
 8012508:	f7f2 b9ea 	b.w	80048e0 <lv_obj_invalidate>

0801250c <get_txt_coords>:

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
 801250c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012510:	4605      	mov	r5, r0
 8012512:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
 8012514:	f7f2 f82e 	bl	8004574 <lv_obj_get_coords>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8012518:	2212      	movs	r2, #18
 801251a:	2100      	movs	r1, #0
 801251c:	4628      	mov	r0, r5
 801251e:	f7f2 ffbf 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8012522:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8012524:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8012526:	2100      	movs	r1, #0
 8012528:	4628      	mov	r0, r5
 801252a:	f7f2 ffb9 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801252e:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8012530:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8012532:	2100      	movs	r1, #0
 8012534:	4628      	mov	r0, r5
 8012536:	f7f2 ffb3 	bl	80054a0 <_lv_obj_get_style_int>
 801253a:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801253c:	2211      	movs	r2, #17
 801253e:	2100      	movs	r1, #0
 8012540:	4628      	mov	r0, r5
 8012542:	f7f2 ffad 	bl	80054a0 <_lv_obj_get_style_int>

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
 8012546:	8823      	ldrh	r3, [r4, #0]
 8012548:	441f      	add	r7, r3
    area->x2 -= right;
 801254a:	88a3      	ldrh	r3, [r4, #4]
    area->x1 += left;
 801254c:	8027      	strh	r7, [r4, #0]
    area->x2 -= right;
 801254e:	eba3 0308 	sub.w	r3, r3, r8
 8012552:	80a3      	strh	r3, [r4, #4]
    area->y1 += top;
 8012554:	8863      	ldrh	r3, [r4, #2]
 8012556:	441e      	add	r6, r3
    area->y2 -= bottom;
 8012558:	88e3      	ldrh	r3, [r4, #6]
    area->y1 += top;
 801255a:	8066      	strh	r6, [r4, #2]
    area->y2 -= bottom;
 801255c:	1a18      	subs	r0, r3, r0
 801255e:	80e0      	strh	r0, [r4, #6]
}
 8012560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012564 <lv_label_set_align>:
{
 8012564:	b538      	push	{r3, r4, r5, lr}
 8012566:	4604      	mov	r4, r0
 8012568:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801256a:	f7fc fd2d 	bl	800efc8 <lv_debug_check_null>
 801256e:	4603      	mov	r3, r0
 8012570:	b920      	cbnz	r0, 801257c <lv_label_set_align+0x18>
 8012572:	4622      	mov	r2, r4
 8012574:	480a      	ldr	r0, [pc, #40]	; (80125a0 <lv_label_set_align+0x3c>)
 8012576:	f7fc fd2b 	bl	800efd0 <lv_debug_log_error>
 801257a:	e7fe      	b.n	801257a <lv_label_set_align+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801257c:	4620      	mov	r0, r4
 801257e:	f7f3 fd5b 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 8012582:	7c83      	ldrb	r3, [r0, #18]
 8012584:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8012588:	42aa      	cmp	r2, r5
 801258a:	d007      	beq.n	801259c <lv_label_set_align+0x38>
    ext->align = align;
 801258c:	f365 1305 	bfi	r3, r5, #4, #2
 8012590:	7483      	strb	r3, [r0, #18]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 8012592:	4620      	mov	r0, r4
}
 8012594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 8012598:	f7f2 b9a2 	b.w	80048e0 <lv_obj_invalidate>
}
 801259c:	bd38      	pop	{r3, r4, r5, pc}
 801259e:	bf00      	nop
 80125a0:	080158e8 	.word	0x080158e8

080125a4 <lv_label_get_text>:
{
 80125a4:	b510      	push	{r4, lr}
 80125a6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 80125a8:	f7fc fd0e 	bl	800efc8 <lv_debug_check_null>
 80125ac:	4603      	mov	r3, r0
 80125ae:	b920      	cbnz	r0, 80125ba <lv_label_get_text+0x16>
 80125b0:	4622      	mov	r2, r4
 80125b2:	4804      	ldr	r0, [pc, #16]	; (80125c4 <lv_label_get_text+0x20>)
 80125b4:	f7fc fd0c 	bl	800efd0 <lv_debug_log_error>
 80125b8:	e7fe      	b.n	80125b8 <lv_label_get_text+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80125ba:	4620      	mov	r0, r4
 80125bc:	f7f3 fd3c 	bl	8006038 <lv_obj_get_ext_attr>
}
 80125c0:	6800      	ldr	r0, [r0, #0]
 80125c2:	bd10      	pop	{r4, pc}
 80125c4:	080158e8 	.word	0x080158e8

080125c8 <lv_label_get_long_mode>:
{
 80125c8:	b510      	push	{r4, lr}
 80125ca:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 80125cc:	f7fc fcfc 	bl	800efc8 <lv_debug_check_null>
 80125d0:	4603      	mov	r3, r0
 80125d2:	b920      	cbnz	r0, 80125de <lv_label_get_long_mode+0x16>
 80125d4:	4622      	mov	r2, r4
 80125d6:	4805      	ldr	r0, [pc, #20]	; (80125ec <lv_label_get_long_mode+0x24>)
 80125d8:	f7fc fcfa 	bl	800efd0 <lv_debug_log_error>
 80125dc:	e7fe      	b.n	80125dc <lv_label_get_long_mode+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80125de:	4620      	mov	r0, r4
 80125e0:	f7f3 fd2a 	bl	8006038 <lv_obj_get_ext_attr>
    return ext->long_mode;
 80125e4:	7c80      	ldrb	r0, [r0, #18]
}
 80125e6:	f000 0007 	and.w	r0, r0, #7
 80125ea:	bd10      	pop	{r4, pc}
 80125ec:	080158e8 	.word	0x080158e8

080125f0 <lv_label_get_align>:
{
 80125f0:	b510      	push	{r4, lr}
 80125f2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 80125f4:	f7fc fce8 	bl	800efc8 <lv_debug_check_null>
 80125f8:	4603      	mov	r3, r0
 80125fa:	b920      	cbnz	r0, 8012606 <lv_label_get_align+0x16>
 80125fc:	4622      	mov	r2, r4
 80125fe:	4807      	ldr	r0, [pc, #28]	; (801261c <lv_label_get_align+0x2c>)
 8012600:	f7fc fce6 	bl	800efd0 <lv_debug_log_error>
 8012604:	e7fe      	b.n	8012604 <lv_label_get_align+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8012606:	4620      	mov	r0, r4
 8012608:	f7f3 fd16 	bl	8006038 <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
 801260c:	7c80      	ldrb	r0, [r0, #18]
 801260e:	f3c0 1001 	ubfx	r0, r0, #4, #2
        align = LV_LABEL_ALIGN_LEFT;
 8012612:	2803      	cmp	r0, #3
}
 8012614:	bf08      	it	eq
 8012616:	2000      	moveq	r0, #0
 8012618:	bd10      	pop	{r4, pc}
 801261a:	bf00      	nop
 801261c:	080158e8 	.word	0x080158e8

08012620 <lv_label_get_recolor>:
{
 8012620:	b510      	push	{r4, lr}
 8012622:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 8012624:	f7fc fcd0 	bl	800efc8 <lv_debug_check_null>
 8012628:	4603      	mov	r3, r0
 801262a:	b920      	cbnz	r0, 8012636 <lv_label_get_recolor+0x16>
 801262c:	4622      	mov	r2, r4
 801262e:	4805      	ldr	r0, [pc, #20]	; (8012644 <lv_label_get_recolor+0x24>)
 8012630:	f7fc fcce 	bl	800efd0 <lv_debug_log_error>
 8012634:	e7fe      	b.n	8012634 <lv_label_get_recolor+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8012636:	4620      	mov	r0, r4
 8012638:	f7f3 fcfe 	bl	8006038 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 801263c:	7c80      	ldrb	r0, [r0, #18]
}
 801263e:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8012642:	bd10      	pop	{r4, pc}
 8012644:	080158e8 	.word	0x080158e8

08012648 <lv_label_get_letter_on>:
{
 8012648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801264c:	b08d      	sub	sp, #52	; 0x34
 801264e:	4605      	mov	r5, r0
 8012650:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 8012652:	f7fc fcb9 	bl	800efc8 <lv_debug_check_null>
 8012656:	4603      	mov	r3, r0
 8012658:	b920      	cbnz	r0, 8012664 <lv_label_get_letter_on+0x1c>
 801265a:	462a      	mov	r2, r5
 801265c:	4889      	ldr	r0, [pc, #548]	; (8012884 <lv_label_get_letter_on+0x23c>)
 801265e:	f7fc fcb7 	bl	800efd0 <lv_debug_log_error>
 8012662:	e7fe      	b.n	8012662 <lv_label_get_letter_on+0x1a>
    LV_ASSERT_NULL(pos_in);
 8012664:	4620      	mov	r0, r4
 8012666:	f7fc fcaf 	bl	800efc8 <lv_debug_check_null>
 801266a:	4603      	mov	r3, r0
 801266c:	b920      	cbnz	r0, 8012678 <lv_label_get_letter_on+0x30>
 801266e:	4622      	mov	r2, r4
 8012670:	4884      	ldr	r0, [pc, #528]	; (8012884 <lv_label_get_letter_on+0x23c>)
 8012672:	f7fc fcad 	bl	800efd0 <lv_debug_log_error>
 8012676:	e7fe      	b.n	8012676 <lv_label_get_letter_on+0x2e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8012678:	2212      	movs	r2, #18
 801267a:	2100      	movs	r1, #0
 801267c:	4628      	mov	r0, r5
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
 801267e:	8826      	ldrh	r6, [r4, #0]
 8012680:	f7f2 ff0e 	bl	80054a0 <_lv_obj_get_style_int>
 8012684:	1a30      	subs	r0, r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8012686:	2210      	movs	r2, #16
 8012688:	b203      	sxth	r3, r0
 801268a:	2100      	movs	r1, #0
 801268c:	4628      	mov	r0, r5
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
 801268e:	8864      	ldrh	r4, [r4, #2]
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
 8012690:	9304      	str	r3, [sp, #16]
 8012692:	f7f2 ff05 	bl	80054a0 <_lv_obj_get_style_int>
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
 8012696:	1a20      	subs	r0, r4, r0
 8012698:	b203      	sxth	r3, r0
    get_txt_coords(label, &txt_coords);
 801269a:	a90a      	add	r1, sp, #40	; 0x28
 801269c:	4628      	mov	r0, r5
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
 801269e:	9305      	str	r3, [sp, #20]
    get_txt_coords(label, &txt_coords);
 80126a0:	f7ff ff34 	bl	801250c <get_txt_coords>
    const char * txt         = lv_label_get_text(label);
 80126a4:	4628      	mov	r0, r5
 80126a6:	f7ff ff7d 	bl	80125a4 <lv_label_get_text>
 80126aa:	4680      	mov	r8, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 80126ac:	4628      	mov	r0, r5
 80126ae:	f7f3 fcc3 	bl	8006038 <lv_obj_get_ext_attr>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80126b2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80126b6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80126ba:	3301      	adds	r3, #1
 80126bc:	1a9b      	subs	r3, r3, r2
 80126be:	b21b      	sxth	r3, r3
 80126c0:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 80126c2:	f248 028e 	movw	r2, #32910	; 0x808e
 80126c6:	2100      	movs	r1, #0
 80126c8:	4628      	mov	r0, r5
 80126ca:	9306      	str	r3, [sp, #24]
 80126cc:	f7f3 f9f0 	bl	8005ab0 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 80126d0:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 80126d4:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 80126d6:	2100      	movs	r1, #0
 80126d8:	4628      	mov	r0, r5
 80126da:	f7f2 fee1 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 80126de:	f248 0280 	movw	r2, #32896	; 0x8080
 80126e2:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 80126e4:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 80126e6:	4628      	mov	r0, r5
 80126e8:	f7f2 feda 	bl	80054a0 <_lv_obj_get_style_int>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 80126ec:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
 80126f0:	9002      	str	r0, [sp, #8]
 80126f2:	9303      	str	r3, [sp, #12]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 80126f4:	7ca3      	ldrb	r3, [r4, #18]
    lv_label_align_t align = lv_label_get_align(label);
 80126f6:	4628      	mov	r0, r5
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 80126f8:	f3c3 1480 	ubfx	r4, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80126fc:	061a      	lsls	r2, r3, #24
 80126fe:	bf48      	it	mi
 8012700:	f044 0402 	orrmi.w	r4, r4, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
 8012704:	075b      	lsls	r3, r3, #29
 8012706:	bf08      	it	eq
 8012708:	f044 0410 	orreq.w	r4, r4, #16
    lv_label_align_t align = lv_label_get_align(label);
 801270c:	f7ff ff70 	bl	80125f0 <lv_label_get_align>
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8012710:	2801      	cmp	r0, #1
    lv_label_align_t align = lv_label_get_align(label);
 8012712:	4683      	mov	fp, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8012714:	d108      	bne.n	8012728 <lv_label_get_letter_on+0xe0>
 8012716:	f044 0404 	orr.w	r4, r4, #4
{
 801271a:	f04f 0900 	mov.w	r9, #0
        y += letter_height + line_space;
 801271e:	9b03      	ldr	r3, [sp, #12]
{
 8012720:	464d      	mov	r5, r9
        y += letter_height + line_space;
 8012722:	4433      	add	r3, r6
 8012724:	9307      	str	r3, [sp, #28]
 8012726:	e051      	b.n	80127cc <lv_label_get_letter_on+0x184>
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 8012728:	2802      	cmp	r0, #2
 801272a:	d1f6      	bne.n	801271a <lv_label_get_letter_on+0xd2>
 801272c:	f044 0408 	orr.w	r4, r4, #8
 8012730:	e7f3      	b.n	801271a <lv_label_get_letter_on+0xd2>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 8012732:	9b06      	ldr	r3, [sp, #24]
 8012734:	9a02      	ldr	r2, [sp, #8]
 8012736:	9400      	str	r4, [sp, #0]
 8012738:	4651      	mov	r1, sl
 801273a:	4638      	mov	r0, r7
 801273c:	f7fe f846 	bl	80107cc <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
 8012740:	9b03      	ldr	r3, [sp, #12]
 8012742:	9a05      	ldr	r2, [sp, #20]
 8012744:	444b      	add	r3, r9
 8012746:	429a      	cmp	r2, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 8012748:	eb05 0600 	add.w	r6, r5, r0
        if(pos.y <= y + letter_height) {
 801274c:	dc39      	bgt.n	80127c2 <lv_label_get_letter_on+0x17a>
            letter = _lv_txt_encoded_prev(txt, &tmp);
 801274e:	4b4e      	ldr	r3, [pc, #312]	; (8012888 <lv_label_get_letter_on+0x240>)
            uint32_t tmp = new_line_start;
 8012750:	a90c      	add	r1, sp, #48	; 0x30
 8012752:	f841 6d0c 	str.w	r6, [r1, #-12]!
            letter = _lv_txt_encoded_prev(txt, &tmp);
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	4640      	mov	r0, r8
 801275a:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 801275c:	280a      	cmp	r0, #10
 801275e:	d003      	beq.n	8012768 <lv_label_get_letter_on+0x120>
 8012760:	f818 3006 	ldrb.w	r3, [r8, r6]
 8012764:	b903      	cbnz	r3, 8012768 <lv_label_get_letter_on+0x120>
 8012766:	3601      	adds	r6, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
 8012768:	f1bb 0f01 	cmp.w	fp, #1
 801276c:	d136      	bne.n	80127dc <lv_label_get_letter_on+0x194>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801276e:	9b02      	ldr	r3, [sp, #8]
 8012770:	4652      	mov	r2, sl
 8012772:	9400      	str	r4, [sp, #0]
 8012774:	1b71      	subs	r1, r6, r5
 8012776:	4638      	mov	r0, r7
 8012778:	f7fd ffd8 	bl	801072c <_lv_txt_get_width>
 801277c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8012780:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012784:	3301      	adds	r3, #1
 8012786:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 8012788:	2202      	movs	r2, #2
 801278a:	b21b      	sxth	r3, r3
 801278c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012790:	fb90 f0f2 	sdiv	r0, r0, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 8012794:	1a1b      	subs	r3, r3, r0
 8012796:	fa0f f983 	sxth.w	r9, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801279a:	2200      	movs	r2, #0
 801279c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    uint32_t i = 0;
 80127a0:	9209      	str	r2, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 80127a2:	2e00      	cmp	r6, #0
 80127a4:	d167      	bne.n	8012876 <lv_label_get_letter_on+0x22e>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 80127a6:	4c39      	ldr	r4, [pc, #228]	; (801288c <lv_label_get_letter_on+0x244>)
 80127a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127aa:	6823      	ldr	r3, [r4, #0]
 80127ac:	4638      	mov	r0, r7
 80127ae:	4798      	blx	r3
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 80127b0:	6823      	ldr	r3, [r4, #0]
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 80127b2:	4606      	mov	r6, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 80127b4:	4629      	mov	r1, r5
 80127b6:	4640      	mov	r0, r8
 80127b8:	4798      	blx	r3
}
 80127ba:	4430      	add	r0, r6
 80127bc:	b00d      	add	sp, #52	; 0x34
 80127be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 80127c2:	4635      	mov	r5, r6
 80127c4:	9b07      	ldr	r3, [sp, #28]
 80127c6:	4499      	add	r9, r3
 80127c8:	fa0f f989 	sxth.w	r9, r9
    while(txt[line_start] != '\0') {
 80127cc:	f818 3005 	ldrb.w	r3, [r8, r5]
 80127d0:	eb08 0705 	add.w	r7, r8, r5
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d1ac      	bne.n	8012732 <lv_label_get_letter_on+0xea>
 80127d8:	462e      	mov	r6, r5
 80127da:	e7c5      	b.n	8012768 <lv_label_get_letter_on+0x120>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
 80127dc:	f1bb 0f02 	cmp.w	fp, #2
 80127e0:	d10d      	bne.n	80127fe <lv_label_get_letter_on+0x1b6>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80127e2:	9b02      	ldr	r3, [sp, #8]
 80127e4:	4652      	mov	r2, sl
 80127e6:	9400      	str	r4, [sp, #0]
 80127e8:	1b71      	subs	r1, r6, r5
 80127ea:	4638      	mov	r0, r7
 80127ec:	f7fd ff9e 	bl	801072c <_lv_txt_get_width>
 80127f0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80127f4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80127f8:	3301      	adds	r3, #1
 80127fa:	1a9b      	subs	r3, r3, r2
 80127fc:	e7ca      	b.n	8012794 <lv_label_get_letter_on+0x14c>
    lv_coord_t x = 0;
 80127fe:	f04f 0900 	mov.w	r9, #0
 8012802:	e7ca      	b.n	801279a <lv_label_get_letter_on+0x152>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 8012804:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012806:	9006      	str	r0, [sp, #24]
 8012808:	5c79      	ldrb	r1, [r7, r1]
 801280a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 801280e:	f7fd ff6f 	bl	80106f0 <_lv_txt_is_cmd>
 8012812:	9a06      	ldr	r2, [sp, #24]
 8012814:	b190      	cbz	r0, 801283c <lv_label_get_letter_on+0x1f4>
        while(i + line_start < new_line_start) {
 8012816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012818:	442a      	add	r2, r5
 801281a:	42b2      	cmp	r2, r6
 801281c:	d2c3      	bcs.n	80127a6 <lv_label_get_letter_on+0x15e>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
 801281e:	f8db 2000 	ldr.w	r2, [fp]
 8012822:	a909      	add	r1, sp, #36	; 0x24
 8012824:	4638      	mov	r0, r7
 8012826:	4790      	blx	r2
 8012828:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 801282a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801282c:	f8db 2000 	ldr.w	r2, [fp]
 8012830:	2100      	movs	r1, #0
 8012832:	4438      	add	r0, r7
 8012834:	4790      	blx	r2
 8012836:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8012838:	2c00      	cmp	r4, #0
 801283a:	d1e3      	bne.n	8012804 <lv_label_get_letter_on+0x1bc>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 801283c:	9905      	ldr	r1, [sp, #20]
 801283e:	4650      	mov	r0, sl
 8012840:	f7fb fa55 	bl	800dcee <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8012844:	9b04      	ldr	r3, [sp, #16]
 8012846:	b202      	sxth	r2, r0
 8012848:	444a      	add	r2, r9
 801284a:	4293      	cmp	r3, r2
 801284c:	da02      	bge.n	8012854 <lv_label_get_letter_on+0x20c>
                i = i_act;
 801284e:	9b03      	ldr	r3, [sp, #12]
 8012850:	9309      	str	r3, [sp, #36]	; 0x24
                break;
 8012852:	e7a8      	b.n	80127a6 <lv_label_get_letter_on+0x15e>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8012854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012856:	1951      	adds	r1, r2, r5
 8012858:	42b1      	cmp	r1, r6
 801285a:	d0f8      	beq.n	801284e <lv_label_get_letter_on+0x206>
 801285c:	9b03      	ldr	r3, [sp, #12]
 801285e:	eb08 0105 	add.w	r1, r8, r5
 8012862:	5cc9      	ldrb	r1, [r1, r3]
 8012864:	2900      	cmp	r1, #0
 8012866:	d0f2      	beq.n	801284e <lv_label_get_letter_on+0x206>
            x += letter_space;
 8012868:	9b02      	ldr	r3, [sp, #8]
            i_act = i;
 801286a:	9203      	str	r2, [sp, #12]
            x += letter_space;
 801286c:	444b      	add	r3, r9
 801286e:	4418      	add	r0, r3
 8012870:	fa0f f980 	sxth.w	r9, r0
 8012874:	e7cf      	b.n	8012816 <lv_label_get_letter_on+0x1ce>
    uint32_t i_act = i;
 8012876:	9203      	str	r2, [sp, #12]
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
 8012878:	f8df b014 	ldr.w	fp, [pc, #20]	; 8012890 <lv_label_get_letter_on+0x248>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801287c:	f004 0401 	and.w	r4, r4, #1
 8012880:	e7c9      	b.n	8012816 <lv_label_get_letter_on+0x1ce>
 8012882:	bf00      	nop
 8012884:	080158e8 	.word	0x080158e8
 8012888:	20000068 	.word	0x20000068
 801288c:	20000060 	.word	0x20000060
 8012890:	20000064 	.word	0x20000064

08012894 <lv_label_get_text_sel_start>:
{
 8012894:	b510      	push	{r4, lr}
 8012896:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 8012898:	f7fc fb96 	bl	800efc8 <lv_debug_check_null>
 801289c:	4603      	mov	r3, r0
 801289e:	b920      	cbnz	r0, 80128aa <lv_label_get_text_sel_start+0x16>
 80128a0:	4622      	mov	r2, r4
 80128a2:	4803      	ldr	r0, [pc, #12]	; (80128b0 <lv_label_get_text_sel_start+0x1c>)
 80128a4:	f7fc fb94 	bl	800efd0 <lv_debug_log_error>
 80128a8:	e7fe      	b.n	80128a8 <lv_label_get_text_sel_start+0x14>
}
 80128aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80128ae:	bd10      	pop	{r4, pc}
 80128b0:	080158e8 	.word	0x080158e8

080128b4 <lv_label_get_text_sel_end>:
{
 80128b4:	b510      	push	{r4, lr}
 80128b6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 80128b8:	f7fc fb86 	bl	800efc8 <lv_debug_check_null>
 80128bc:	4603      	mov	r3, r0
 80128be:	b920      	cbnz	r0, 80128ca <lv_label_get_text_sel_end+0x16>
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 80128c0:	4622      	mov	r2, r4
 80128c2:	4803      	ldr	r0, [pc, #12]	; (80128d0 <lv_label_get_text_sel_end+0x1c>)
 80128c4:	f7fc fb84 	bl	800efd0 <lv_debug_log_error>
 80128c8:	e7fe      	b.n	80128c8 <lv_label_get_text_sel_end+0x14>
}
 80128ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80128ce:	bd10      	pop	{r4, pc}
 80128d0:	080158e8 	.word	0x080158e8

080128d4 <lv_label_design>:
{
 80128d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(mode == LV_DESIGN_COVER_CHK)
 80128d8:	2a02      	cmp	r2, #2
{
 80128da:	b0ab      	sub	sp, #172	; 0xac
 80128dc:	4606      	mov	r6, r0
 80128de:	460f      	mov	r7, r1
 80128e0:	4614      	mov	r4, r2
    if(mode == LV_DESIGN_COVER_CHK)
 80128e2:	f000 8101 	beq.w	8012ae8 <lv_label_design+0x214>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 80128e6:	2a00      	cmp	r2, #0
 80128e8:	d145      	bne.n	8012976 <lv_label_design+0xa2>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80128ea:	f7f3 fba5 	bl	8006038 <lv_obj_get_ext_attr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80128ee:	2204      	movs	r2, #4
 80128f0:	4621      	mov	r1, r4
 80128f2:	4605      	mov	r5, r0
 80128f4:	4630      	mov	r0, r6
 80128f6:	f7f2 fdd3 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 80128fa:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80128fc:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 80128fe:	4621      	mov	r1, r4
 8012900:	4630      	mov	r0, r6
 8012902:	f7f2 fdcd 	bl	80054a0 <_lv_obj_get_style_int>
        *d8 = *s8;
 8012906:	f10d 0818 	add.w	r8, sp, #24
        lv_area_copy(&bg_coords, &label->coords);
 801290a:	f106 0210 	add.w	r2, r6, #16
 801290e:	5d13      	ldrb	r3, [r2, r4]
 8012910:	f804 3008 	strb.w	r3, [r4, r8]
 8012914:	3401      	adds	r4, #1
    while(len) {
 8012916:	2c08      	cmp	r4, #8
 8012918:	d1f9      	bne.n	801290e <lv_label_design+0x3a>
        bg_coords.x1 -= w;
 801291a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801291e:	fa1f f389 	uxth.w	r3, r9
 8012922:	1ad2      	subs	r2, r2, r3
 8012924:	f8ad 2018 	strh.w	r2, [sp, #24]
        bg_coords.x2 += w;
 8012928:	f8bd 201c 	ldrh.w	r2, [sp, #28]
        bg_coords.y1 -= h;
 801292c:	b280      	uxth	r0, r0
        bg_coords.x2 += w;
 801292e:	4413      	add	r3, r2
 8012930:	f8ad 301c 	strh.w	r3, [sp, #28]
        bg_coords.y1 -= h;
 8012934:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8012938:	1a1b      	subs	r3, r3, r0
 801293a:	f8ad 301a 	strh.w	r3, [sp, #26]
        bg_coords.y2 += h;
 801293e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012942:	4418      	add	r0, r3
 8012944:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
 8012948:	a815      	add	r0, sp, #84	; 0x54
 801294a:	f7f9 fb31 	bl	800bfb0 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
 801294e:	aa15      	add	r2, sp, #84	; 0x54
 8012950:	2100      	movs	r1, #0
 8012952:	4630      	mov	r0, r6
 8012954:	f7f3 fc70 	bl	8006238 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
 8012958:	aa15      	add	r2, sp, #84	; 0x54
 801295a:	4639      	mov	r1, r7
 801295c:	4640      	mov	r0, r8
 801295e:	f7f9 fb4b 	bl	800bff8 <lv_draw_rect>
        get_txt_coords(label, &txt_coords);
 8012962:	a908      	add	r1, sp, #32
 8012964:	4630      	mov	r0, r6
 8012966:	f7ff fdd1 	bl	801250c <get_txt_coords>
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
 801296a:	aa08      	add	r2, sp, #32
 801296c:	4639      	mov	r1, r7
 801296e:	a80a      	add	r0, sp, #40	; 0x28
 8012970:	f7fc f89d 	bl	800eaae <_lv_area_intersect>
        if(!is_common) return LV_DESIGN_RES_OK;
 8012974:	b908      	cbnz	r0, 801297a <lv_label_design+0xa6>
    return LV_DESIGN_RES_OK;
 8012976:	2000      	movs	r0, #0
 8012978:	e0b7      	b.n	8012aea <lv_label_design+0x216>
        lv_label_align_t align = lv_label_get_align(label);
 801297a:	4630      	mov	r0, r6
 801297c:	f7ff fe38 	bl	80125f0 <lv_label_get_align>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8012980:	7cab      	ldrb	r3, [r5, #18]
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8012982:	f3c3 1480 	ubfx	r4, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8012986:	061a      	lsls	r2, r3, #24
 8012988:	bf48      	it	mi
 801298a:	f044 0402 	orrmi.w	r4, r4, #2
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
 801298e:	075b      	lsls	r3, r3, #29
 8012990:	bf08      	it	eq
 8012992:	f044 0410 	orreq.w	r4, r4, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8012996:	2801      	cmp	r0, #1
 8012998:	f040 80a1 	bne.w	8012ade <lv_label_design+0x20a>
 801299c:	f044 0404 	orr.w	r4, r4, #4
        lv_draw_label_dsc_init(&label_draw_dsc);
 80129a0:	a80c      	add	r0, sp, #48	; 0x30
 80129a2:	f7f7 fab3 	bl	8009f0c <lv_draw_label_dsc_init>
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
 80129a6:	4630      	mov	r0, r6
 80129a8:	f7ff ff74 	bl	8012894 <lv_label_get_text_sel_start>
 80129ac:	9011      	str	r0, [sp, #68]	; 0x44
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
 80129ae:	4630      	mov	r0, r6
 80129b0:	f7ff ff80 	bl	80128b4 <lv_label_get_text_sel_end>
        label_draw_dsc.ofs_x = ext->offset.x;
 80129b4:	89eb      	ldrh	r3, [r5, #14]
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
 80129b6:	9012      	str	r0, [sp, #72]	; 0x48
        label_draw_dsc.ofs_x = ext->offset.x;
 80129b8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        label_draw_dsc.ofs_y = ext->offset.y;
 80129bc:	8a2b      	ldrh	r3, [r5, #16]
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
 80129be:	aa0c      	add	r2, sp, #48	; 0x30
 80129c0:	2100      	movs	r1, #0
 80129c2:	4630      	mov	r0, r6
        label_draw_dsc.ofs_y = ext->offset.y;
 80129c4:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        label_draw_dsc.flag = flag;
 80129c8:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
 80129cc:	f7f3 feb8 	bl	8006740 <lv_obj_init_draw_label_dsc>
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 80129d0:	7cab      	ldrb	r3, [r5, #18]
 80129d2:	f003 0207 	and.w	r2, r3, #7
 80129d6:	3a03      	subs	r2, #3
 80129d8:	2a01      	cmp	r2, #1
 80129da:	d824      	bhi.n	8012a26 <lv_label_design+0x152>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 80129dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 80129e0:	2b10      	cmp	r3, #16
 80129e2:	d001      	beq.n	80129e8 <lv_label_design+0x114>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 80129e4:	2b20      	cmp	r3, #32
 80129e6:	d11e      	bne.n	8012a26 <lv_label_design+0x152>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 80129e8:	f647 4218 	movw	r2, #31768	; 0x7c18
 80129ec:	9201      	str	r2, [sp, #4]
 80129ee:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 80129f2:	9402      	str	r4, [sp, #8]
 80129f4:	9200      	str	r2, [sp, #0]
 80129f6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80129fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80129fc:	6829      	ldr	r1, [r5, #0]
 80129fe:	a805      	add	r0, sp, #20
 8012a00:	f7fd ffcc 	bl	801099c <_lv_txt_get_size>
 8012a04:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8012a08:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	1a9b      	subs	r3, r3, r2
            if(size.x > lv_area_get_width(&txt_coords)) {
 8012a10:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8012a14:	b21b      	sxth	r3, r3
 8012a16:	429a      	cmp	r2, r3
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
 8012a18:	bfc2      	ittt	gt
 8012a1a:	f89d 3051 	ldrbgt.w	r3, [sp, #81]	; 0x51
 8012a1e:	f023 030c 	bicgt.w	r3, r3, #12
 8012a22:	f88d 3051 	strbgt.w	r3, [sp, #81]	; 0x51
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 8012a26:	2600      	movs	r6, #0
 8012a28:	9600      	str	r6, [sp, #0]
 8012a2a:	682b      	ldr	r3, [r5, #0]
 8012a2c:	aa0c      	add	r2, sp, #48	; 0x30
 8012a2e:	a90a      	add	r1, sp, #40	; 0x28
 8012a30:	a808      	add	r0, sp, #32
 8012a32:	f7f7 fa83 	bl	8009f3c <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8012a36:	7cab      	ldrb	r3, [r5, #18]
 8012a38:	f003 0307 	and.w	r3, r3, #7
 8012a3c:	2b04      	cmp	r3, #4
 8012a3e:	d19a      	bne.n	8012976 <lv_label_design+0xa2>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8012a40:	f647 4218 	movw	r2, #31768	; 0x7c18
 8012a44:	9201      	str	r2, [sp, #4]
 8012a46:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 8012a4a:	9402      	str	r4, [sp, #8]
 8012a4c:	9200      	str	r2, [sp, #0]
 8012a4e:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8012a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a54:	6829      	ldr	r1, [r5, #0]
 8012a56:	a805      	add	r0, sp, #20
 8012a58:	f7fd ffa0 	bl	801099c <_lv_txt_get_size>
 8012a5c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012a60:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8012a64:	3201      	adds	r2, #1
            if(size.x > lv_area_get_width(&txt_coords)) {
 8012a66:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8012a6a:	1a52      	subs	r2, r2, r1
 8012a6c:	b212      	sxth	r2, r2
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	dd16      	ble.n	8012aa0 <lv_label_design+0x1cc>
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8012a72:	2220      	movs	r2, #32
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 8012a74:	89ec      	ldrh	r4, [r5, #14]
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8012a76:	4611      	mov	r1, r2
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 8012a78:	4423      	add	r3, r4
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8012a7a:	980e      	ldr	r0, [sp, #56]	; 0x38
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 8012a7c:	b29c      	uxth	r4, r3
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8012a7e:	f7fb f936 	bl	800dcee <lv_font_get_glyph_width>
                label_draw_dsc.ofs_y = ext->offset.y;
 8012a82:	8a2b      	ldrh	r3, [r5, #16]
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 8012a84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 8012a88:	9600      	str	r6, [sp, #0]
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 8012a8a:	4404      	add	r4, r0
                label_draw_dsc.ofs_y = ext->offset.y;
 8012a8c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 8012a90:	aa0c      	add	r2, sp, #48	; 0x30
 8012a92:	682b      	ldr	r3, [r5, #0]
 8012a94:	a90a      	add	r1, sp, #40	; 0x28
 8012a96:	a808      	add	r0, sp, #32
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
 8012a98:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 8012a9c:	f7f7 fa4e 	bl	8009f3c <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012aa0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8012aa4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8012aa8:	3301      	adds	r3, #1
            if(size.y > lv_area_get_height(&txt_coords)) {
 8012aaa:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8012aae:	1a5b      	subs	r3, r3, r1
 8012ab0:	b21b      	sxth	r3, r3
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	f77f af5f 	ble.w	8012976 <lv_label_design+0xa2>
                label_draw_dsc.ofs_x = ext->offset.x;
 8012ab8:	89eb      	ldrh	r3, [r5, #14]
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 8012aba:	a90a      	add	r1, sp, #40	; 0x28
                label_draw_dsc.ofs_x = ext->offset.x;
 8012abc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8012ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 8012ac2:	a808      	add	r0, sp, #32
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8012ac4:	891b      	ldrh	r3, [r3, #8]
 8012ac6:	441a      	add	r2, r3
 8012ac8:	8a2b      	ldrh	r3, [r5, #16]
 8012aca:	441a      	add	r2, r3
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 8012acc:	2300      	movs	r3, #0
 8012ace:	9300      	str	r3, [sp, #0]
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8012ad0:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
 8012ad4:	682b      	ldr	r3, [r5, #0]
 8012ad6:	aa0c      	add	r2, sp, #48	; 0x30
 8012ad8:	f7f7 fa30 	bl	8009f3c <lv_draw_label>
 8012adc:	e74b      	b.n	8012976 <lv_label_design+0xa2>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 8012ade:	2802      	cmp	r0, #2
 8012ae0:	bf08      	it	eq
 8012ae2:	f044 0408 	orreq.w	r4, r4, #8
 8012ae6:	e75b      	b.n	80129a0 <lv_label_design+0xcc>
        return LV_DESIGN_RES_NOT_COVER;
 8012ae8:	4610      	mov	r0, r2
}
 8012aea:	b02b      	add	sp, #172	; 0xac
 8012aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012af0 <lv_label_refr_text>:
{
 8012af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af4:	b09d      	sub	sp, #116	; 0x74
 8012af6:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8012af8:	f7f3 fa9e 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 8012afc:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8012afe:	4605      	mov	r5, r0
    if(ext->text == NULL) return;
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d066      	beq.n	8012bd2 <lv_label_refr_text+0xe2>
    get_txt_coords(label, &txt_coords);
 8012b04:	a909      	add	r1, sp, #36	; 0x24
 8012b06:	4620      	mov	r0, r4
 8012b08:	f7ff fd00 	bl	801250c <get_txt_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012b0c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 8012b10:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 8012b14:	f248 028e 	movw	r2, #32910	; 0x808e
 8012b18:	2100      	movs	r1, #0
 8012b1a:	f108 0801 	add.w	r8, r8, #1
 8012b1e:	4620      	mov	r0, r4
 8012b20:	eba8 0803 	sub.w	r8, r8, r3
 8012b24:	f7f2 ffc4 	bl	8005ab0 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8012b28:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 8012b2c:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8012b2e:	2100      	movs	r1, #0
 8012b30:	4620      	mov	r0, r4
 8012b32:	f7f2 fcb5 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 8012b36:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8012b38:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 8012b3a:	f248 0280 	movw	r2, #32896	; 0x8080
 8012b3e:	4620      	mov	r0, r4
 8012b40:	f7f2 fcae 	bl	80054a0 <_lv_obj_get_style_int>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8012b44:	7caa      	ldrb	r2, [r5, #18]
 8012b46:	fa0f f888 	sxth.w	r8, r8
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8012b4a:	f3c2 1380 	ubfx	r3, r2, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8012b4e:	0611      	lsls	r1, r2, #24
 8012b50:	bf48      	it	mi
 8012b52:	f043 0302 	orrmi.w	r3, r3, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
 8012b56:	0752      	lsls	r2, r2, #29
 8012b58:	bf08      	it	eq
 8012b5a:	f043 0310 	orreq.w	r3, r3, #16
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
 8012b5e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8012b62:	9600      	str	r6, [sp, #0]
 8012b64:	4603      	mov	r3, r0
 8012b66:	4681      	mov	r9, r0
 8012b68:	463a      	mov	r2, r7
 8012b6a:	6829      	ldr	r1, [r5, #0]
 8012b6c:	a807      	add	r0, sp, #28
 8012b6e:	f7fd ff15 	bl	801099c <_lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 8012b72:	f895 8012 	ldrb.w	r8, [r5, #18]
 8012b76:	f018 0807 	ands.w	r8, r8, #7
 8012b7a:	d12d      	bne.n	8012bd8 <lv_label_refr_text+0xe8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8012b7c:	2212      	movs	r2, #18
 8012b7e:	4641      	mov	r1, r8
 8012b80:	4620      	mov	r0, r4
 8012b82:	f7f2 fc8d 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8012b86:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8012b88:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8012b8a:	4641      	mov	r1, r8
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	f7f2 fc87 	bl	80054a0 <_lv_obj_get_style_int>
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
 8012b92:	4428      	add	r0, r5
 8012b94:	f8bd 501c 	ldrh.w	r5, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8012b98:	2210      	movs	r2, #16
 8012b9a:	4428      	add	r0, r5
 8012b9c:	f8ad 001c 	strh.w	r0, [sp, #28]
 8012ba0:	4641      	mov	r1, r8
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	f7f2 fc7c 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8012ba8:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8012baa:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8012bac:	4641      	mov	r1, r8
 8012bae:	4620      	mov	r0, r4
 8012bb0:	f7f2 fc76 	bl	80054a0 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 8012bb4:	182a      	adds	r2, r5, r0
 8012bb6:	f8bd 001e 	ldrh.w	r0, [sp, #30]
        lv_obj_set_size(label, size.x, size.y);
 8012bba:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 8012bbe:	4402      	add	r2, r0
 8012bc0:	b212      	sxth	r2, r2
        lv_obj_set_size(label, size.x, size.y);
 8012bc2:	4620      	mov	r0, r4
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 8012bc4:	f8ad 201e 	strh.w	r2, [sp, #30]
        lv_obj_set_size(label, size.x, size.y);
 8012bc8:	f7f2 fb74 	bl	80052b4 <lv_obj_set_size>
    lv_obj_invalidate(label);
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f7f1 fe87 	bl	80048e0 <lv_obj_invalidate>
}
 8012bd2:	b01d      	add	sp, #116	; 0x74
 8012bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 8012bd8:	f1b8 0f03 	cmp.w	r8, #3
 8012bdc:	f040 80a7 	bne.w	8012d2e <lv_label_refr_text+0x23e>
        lv_anim_init(&a);
 8012be0:	a80b      	add	r0, sp, #44	; 0x2c
 8012be2:	f7fb fe6d 	bl	800e8c0 <lv_anim_init>
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
 8012be6:	2220      	movs	r2, #32
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt       = cnt;
 8012be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012bec:	4611      	mov	r1, r2
 8012bee:	4638      	mov	r0, r7
 8012bf0:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a->var     = var;
 8012bf4:	940b      	str	r4, [sp, #44]	; 0x2c
 8012bf6:	f7fb f87a 	bl	800dcee <lv_font_get_glyph_width>
 8012bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012bfe:	4448      	add	r0, r9
 8012c00:	4343      	muls	r3, r0
                                        ext->anim_speed) *
 8012c02:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8012c06:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
 8012c0a:	fb93 f3fc 	sdiv	r3, r3, ip
 8012c0e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8012c12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012c16:	3201      	adds	r2, #1
    a->playback_delay = delay;
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	1a52      	subs	r2, r2, r1
 8012c1c:	9316      	str	r3, [sp, #88]	; 0x58
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint16_t delay)
{
    a->repeat_delay = delay;
 8012c1e:	9318      	str	r3, [sp, #96]	; 0x60
 8012c20:	b292      	uxth	r2, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8012c22:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8012c26:	b211      	sxth	r1, r2
 8012c28:	428b      	cmp	r3, r1
 8012c2a:	f04f 0600 	mov.w	r6, #0
 8012c2e:	dd76      	ble.n	8012d1e <lv_label_refr_text+0x22e>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 8012c30:	1ad2      	subs	r2, r2, r3
    a->exec_cb = exec_cb;
 8012c32:	f8df 835c 	ldr.w	r8, [pc, #860]	; 8012f90 <lv_label_refr_text+0x4a0>
 8012c36:	b212      	sxth	r2, r2
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 8012c38:	4631      	mov	r1, r6
 8012c3a:	4660      	mov	r0, ip
    a->current = start;
 8012c3c:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
    a->end   = end;
 8012c40:	9213      	str	r2, [sp, #76]	; 0x4c
    a->exec_cb = exec_cb;
 8012c42:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8012c46:	f7fb fed5 	bl	800e9f4 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 8012c4a:	4641      	mov	r1, r8
    a->time     = duration;
 8012c4c:	9014      	str	r0, [sp, #80]	; 0x50
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 8012c4e:	9017      	str	r0, [sp, #92]	; 0x5c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 8012c50:	4620      	mov	r0, r4
 8012c52:	f7fb feb9 	bl	800e9c8 <lv_anim_get>
            if(anim_cur) {
 8012c56:	2800      	cmp	r0, #0
 8012c58:	d05f      	beq.n	8012d1a <lv_label_refr_text+0x22a>
                act_time = anim_cur->act_time;
 8012c5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
 8012c5c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8012c60:	f000 0001 	and.w	r0, r0, #1
            if(act_time < a.time) {
 8012c64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012c66:	429a      	cmp	r2, r3
 8012c68:	dd11      	ble.n	8012c8e <lv_label_refr_text+0x19e>
                a.act_time = act_time;      /*To keep the old position*/
 8012c6a:	9315      	str	r3, [sp, #84]	; 0x54
                a.early_apply = 0;
 8012c6c:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8012c70:	f36f 0300 	bfc	r3, #0, #1
 8012c74:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                if(playback_now) {
 8012c78:	b148      	cbz	r0, 8012c8e <lv_label_refr_text+0x19e>
                    a.playback_now = 1;
 8012c7a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
                    a.start = a.end;
 8012c7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                    a.playback_now = 1;
 8012c80:	f043 0301 	orr.w	r3, r3, #1
 8012c84:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
                    tmp      = a.start;
 8012c88:	9b11      	ldr	r3, [sp, #68]	; 0x44
                    a.start = a.end;
 8012c8a:	9211      	str	r2, [sp, #68]	; 0x44
                    a.end   = tmp;
 8012c8c:	9313      	str	r3, [sp, #76]	; 0x4c
            lv_anim_start(&a);
 8012c8e:	a80b      	add	r0, sp, #44	; 0x2c
 8012c90:	f7fb fe5e 	bl	800e950 <lv_anim_start>
            hor_anim = true;
 8012c94:	2601      	movs	r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012c96:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8012c9a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8012c9e:	3201      	adds	r2, #1
 8012ca0:	1a52      	subs	r2, r2, r1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8012ca2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8012ca6:	b292      	uxth	r2, r2
 8012ca8:	b211      	sxth	r1, r2
 8012caa:	428b      	cmp	r3, r1
 8012cac:	f340 80b3 	ble.w	8012e16 <lv_label_refr_text+0x326>
 8012cb0:	2e00      	cmp	r6, #0
 8012cb2:	f040 80b0 	bne.w	8012e16 <lv_label_refr_text+0x326>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8012cb6:	1ad2      	subs	r2, r2, r3
 8012cb8:	893b      	ldrh	r3, [r7, #8]
    a->exec_cb = exec_cb;
 8012cba:	4fb4      	ldr	r7, [pc, #720]	; (8012f8c <lv_label_refr_text+0x49c>)
 8012cbc:	1ad2      	subs	r2, r2, r3
 8012cbe:	b212      	sxth	r2, r2
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 8012cc0:	4631      	mov	r1, r6
 8012cc2:	89a8      	ldrh	r0, [r5, #12]
    a->current = start;
 8012cc4:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
    a->end   = end;
 8012cc8:	9213      	str	r2, [sp, #76]	; 0x4c
    a->exec_cb = exec_cb;
 8012cca:	970c      	str	r7, [sp, #48]	; 0x30
 8012ccc:	f7fb fe92 	bl	800e9f4 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 8012cd0:	4639      	mov	r1, r7
    a->time     = duration;
 8012cd2:	9014      	str	r0, [sp, #80]	; 0x50
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 8012cd4:	9017      	str	r0, [sp, #92]	; 0x5c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f7fb fe76 	bl	800e9c8 <lv_anim_get>
            if(anim_cur) {
 8012cdc:	b328      	cbz	r0, 8012d2a <lv_label_refr_text+0x23a>
                playback_now = anim_cur->playback_now;
 8012cde:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
                act_time = anim_cur->act_time;
 8012ce2:	6a83      	ldr	r3, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
 8012ce4:	f006 0601 	and.w	r6, r6, #1
            if(act_time < a.time) {
 8012ce8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012cea:	429a      	cmp	r2, r3
 8012cec:	dd11      	ble.n	8012d12 <lv_label_refr_text+0x222>
                a.act_time = act_time;      /*To keep the old position*/
 8012cee:	9315      	str	r3, [sp, #84]	; 0x54
                a.early_apply = 0;
 8012cf0:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8012cf4:	f36f 0300 	bfc	r3, #0, #1
 8012cf8:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                if(playback_now) {
 8012cfc:	b14e      	cbz	r6, 8012d12 <lv_label_refr_text+0x222>
                    a.playback_now = 1;
 8012cfe:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
                    a.start = a.end;
 8012d02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                    a.playback_now = 1;
 8012d04:	f043 0301 	orr.w	r3, r3, #1
 8012d08:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
                    tmp      = a.start;
 8012d0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
                    a.start = a.end;
 8012d0e:	9211      	str	r2, [sp, #68]	; 0x44
                    a.end   = tmp;
 8012d10:	9313      	str	r3, [sp, #76]	; 0x4c
            lv_anim_start(&a);
 8012d12:	a80b      	add	r0, sp, #44	; 0x2c
 8012d14:	f7fb fe1c 	bl	800e950 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8012d18:	e758      	b.n	8012bcc <lv_label_refr_text+0xdc>
            int32_t act_time = 0;
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	e7a2      	b.n	8012c64 <lv_label_refr_text+0x174>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 8012d1e:	499c      	ldr	r1, [pc, #624]	; (8012f90 <lv_label_refr_text+0x4a0>)
 8012d20:	4620      	mov	r0, r4
 8012d22:	f7fb fded 	bl	800e900 <lv_anim_del>
            ext->offset.x = 0;
 8012d26:	81ee      	strh	r6, [r5, #14]
 8012d28:	e7b5      	b.n	8012c96 <lv_label_refr_text+0x1a6>
            int32_t act_time = 0;
 8012d2a:	4633      	mov	r3, r6
 8012d2c:	e7dc      	b.n	8012ce8 <lv_label_refr_text+0x1f8>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8012d2e:	f1b8 0f04 	cmp.w	r8, #4
 8012d32:	d177      	bne.n	8012e24 <lv_label_refr_text+0x334>
        lv_anim_init(&a);
 8012d34:	a80b      	add	r0, sp, #44	; 0x2c
 8012d36:	f7fb fdc3 	bl	800e8c0 <lv_anim_init>
    a->repeat_cnt       = cnt;
 8012d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d3e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012d42:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8012d46:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8012d4e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8012d52:	b21b      	sxth	r3, r3
 8012d54:	429a      	cmp	r2, r3
    a->var     = var;
 8012d56:	940b      	str	r4, [sp, #44]	; 0x2c
 8012d58:	dd56      	ble.n	8012e08 <lv_label_refr_text+0x318>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 8012d5a:	2220      	movs	r2, #32
 8012d5c:	4638      	mov	r0, r7
 8012d5e:	4611      	mov	r1, r2
 8012d60:	f7fa ffc5 	bl	800dcee <lv_font_get_glyph_width>
    a->start = start;
 8012d64:	2100      	movs	r1, #0
 8012d66:	ebc0 3280 	rsb	r2, r0, r0, lsl #14
 8012d6a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012d6e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    a->exec_cb = exec_cb;
 8012d72:	4e87      	ldr	r6, [pc, #540]	; (8012f90 <lv_label_refr_text+0x4a0>)
 8012d74:	1a12      	subs	r2, r2, r0
 8012d76:	b212      	sxth	r2, r2
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 8012d78:	89a8      	ldrh	r0, [r5, #12]
    a->current = start;
 8012d7a:	e9cd 1111 	strd	r1, r1, [sp, #68]	; 0x44
    a->end   = end;
 8012d7e:	9213      	str	r2, [sp, #76]	; 0x4c
    a->exec_cb = exec_cb;
 8012d80:	960c      	str	r6, [sp, #48]	; 0x30
 8012d82:	f7fb fe37 	bl	800e9f4 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 8012d86:	4631      	mov	r1, r6
    a->time     = duration;
 8012d88:	9014      	str	r0, [sp, #80]	; 0x50
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f7fb fe1c 	bl	800e9c8 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8012d90:	b100      	cbz	r0, 8012d94 <lv_label_refr_text+0x2a4>
 8012d92:	6a80      	ldr	r0, [r0, #40]	; 0x28
            if(act_time < a.time) {
 8012d94:	9b14      	ldr	r3, [sp, #80]	; 0x50
            hor_anim = true;
 8012d96:	2601      	movs	r6, #1
            if(act_time < a.time) {
 8012d98:	4283      	cmp	r3, r0
                a.early_apply = 0;
 8012d9a:	bfc2      	ittt	gt
 8012d9c:	f89d 3066 	ldrbgt.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position*/
 8012da0:	9015      	strgt	r0, [sp, #84]	; 0x54
                a.early_apply = 0;
 8012da2:	f36f 0300 	bfcgt	r3, #0, #1
            lv_anim_start(&a);
 8012da6:	a80b      	add	r0, sp, #44	; 0x2c
                a.early_apply = 0;
 8012da8:	bfc8      	it	gt
 8012daa:	f88d 3066 	strbgt.w	r3, [sp, #102]	; 0x66
            lv_anim_start(&a);
 8012dae:	f7fb fdcf 	bl	800e950 <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012db2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8012db6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8012dba:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8012dbc:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8012dc0:	1a5b      	subs	r3, r3, r1
 8012dc2:	b21b      	sxth	r3, r3
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	dd26      	ble.n	8012e16 <lv_label_refr_text+0x326>
 8012dc8:	bb2e      	cbnz	r6, 8012e16 <lv_label_refr_text+0x326>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8012dca:	893b      	ldrh	r3, [r7, #8]
    a->exec_cb = exec_cb;
 8012dcc:	4f6f      	ldr	r7, [pc, #444]	; (8012f8c <lv_label_refr_text+0x49c>)
 8012dce:	441a      	add	r2, r3
 8012dd0:	4252      	negs	r2, r2
 8012dd2:	b212      	sxth	r2, r2
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
 8012dd4:	4631      	mov	r1, r6
 8012dd6:	89a8      	ldrh	r0, [r5, #12]
    a->current = start;
 8012dd8:	e9cd 6611 	strd	r6, r6, [sp, #68]	; 0x44
    a->end   = end;
 8012ddc:	9213      	str	r2, [sp, #76]	; 0x4c
    a->exec_cb = exec_cb;
 8012dde:	970c      	str	r7, [sp, #48]	; 0x30
 8012de0:	f7fb fe08 	bl	800e9f4 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 8012de4:	4639      	mov	r1, r7
    a->time     = duration;
 8012de6:	9014      	str	r0, [sp, #80]	; 0x50
 8012de8:	4620      	mov	r0, r4
 8012dea:	f7fb fded 	bl	800e9c8 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8012dee:	b100      	cbz	r0, 8012df2 <lv_label_refr_text+0x302>
 8012df0:	6a86      	ldr	r6, [r0, #40]	; 0x28
            if(act_time < a.time) {
 8012df2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012df4:	42b3      	cmp	r3, r6
                a.early_apply = 0;
 8012df6:	bfc1      	itttt	gt
 8012df8:	f89d 3066 	ldrbgt.w	r3, [sp, #102]	; 0x66
                a.act_time = act_time;      /*To keep the old position*/
 8012dfc:	9615      	strgt	r6, [sp, #84]	; 0x54
                a.early_apply = 0;
 8012dfe:	f36f 0300 	bfcgt	r3, #0, #1
 8012e02:	f88d 3066 	strbgt.w	r3, [sp, #102]	; 0x66
 8012e06:	e784      	b.n	8012d12 <lv_label_refr_text+0x222>
            ext->offset.x = 0;
 8012e08:	2600      	movs	r6, #0
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 8012e0a:	4961      	ldr	r1, [pc, #388]	; (8012f90 <lv_label_refr_text+0x4a0>)
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	f7fb fd77 	bl	800e900 <lv_anim_del>
            ext->offset.x = 0;
 8012e12:	81ee      	strh	r6, [r5, #14]
 8012e14:	e7cd      	b.n	8012db2 <lv_label_refr_text+0x2c2>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 8012e16:	495d      	ldr	r1, [pc, #372]	; (8012f8c <lv_label_refr_text+0x49c>)
 8012e18:	4620      	mov	r0, r4
 8012e1a:	f7fb fd71 	bl	800e900 <lv_anim_del>
            ext->offset.y = 0;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	822b      	strh	r3, [r5, #16]
 8012e22:	e6d3      	b.n	8012bcc <lv_label_refr_text+0xdc>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 8012e24:	f1b8 0f02 	cmp.w	r8, #2
 8012e28:	f040 8096 	bne.w	8012f58 <lv_label_refr_text+0x468>
 8012e2c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8012e30:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8012e34:	3301      	adds	r3, #1
 8012e36:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 8012e38:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8012e3c:	b21b      	sxth	r3, r3
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	dc03      	bgt.n	8012e4a <lv_label_refr_text+0x35a>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 8012e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012e46:	60ab      	str	r3, [r5, #8]
 8012e48:	e6c0      	b.n	8012bcc <lv_label_refr_text+0xdc>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 8012e4a:	4b52      	ldr	r3, [pc, #328]	; (8012f94 <lv_label_refr_text+0x4a4>)
 8012e4c:	6828      	ldr	r0, [r5, #0]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	4798      	blx	r3
 8012e52:	2803      	cmp	r0, #3
 8012e54:	d9f5      	bls.n	8012e42 <lv_label_refr_text+0x352>
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 8012e56:	222e      	movs	r2, #46	; 0x2e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012e58:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 8012e5c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8012e60:	4611      	mov	r1, r2
 8012e62:	4638      	mov	r0, r7
 8012e64:	f108 0801 	add.w	r8, r8, #1
 8012e68:	eba8 0803 	sub.w	r8, r8, r3
 8012e6c:	f7fa ff3f 	bl	800dcee <lv_font_get_glyph_width>
 8012e70:	4448      	add	r0, r9
            p.x = lv_area_get_width(&txt_coords) -
 8012e72:	ebc0 3980 	rsb	r9, r0, r0, lsl #14
 8012e76:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 8012e7a:	fa1f f888 	uxth.w	r8, r8
 8012e7e:	4480      	add	r8, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012e80:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 8012e84:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8012e88:	3001      	adds	r0, #1
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 8012e8a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012e8e:	1ac0      	subs	r0, r0, r3
 8012e90:	b280      	uxth	r0, r0
 8012e92:	b201      	sxth	r1, r0
 8012e94:	1997      	adds	r7, r2, r6
            y_overed = p.y %
 8012e96:	fb91 f3f7 	sdiv	r3, r1, r7
 8012e9a:	fb07 1313 	mls	r3, r7, r3, r1
            p.y = lv_area_get_height(&txt_coords);
 8012e9e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            if(y_overed >= lv_font_get_line_height(font)) {
 8012ea2:	b219      	sxth	r1, r3
 8012ea4:	4291      	cmp	r1, r2
                p.y -= y_overed;
 8012ea6:	bfb3      	iteet	lt
 8012ea8:	1ac0      	sublt	r0, r0, r3
                p.y += lv_font_get_line_height(font);
 8012eaa:	1880      	addge	r0, r0, r2
 8012eac:	1ac0      	subge	r0, r0, r3
                p.y -= line_space;
 8012eae:	1b80      	sublt	r0, r0, r6
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8012eb0:	a908      	add	r1, sp, #32
                p.y -= line_space;
 8012eb2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8012eb6:	4620      	mov	r0, r4
            p.x = lv_area_get_width(&txt_coords) -
 8012eb8:	f8ad 8020 	strh.w	r8, [sp, #32]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8012ebc:	f7ff fbc4 	bl	8012648 <lv_label_get_letter_on>
            size_t txt_len = strlen(ext->text);
 8012ec0:	682f      	ldr	r7, [r5, #0]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8012ec2:	4606      	mov	r6, r0
            size_t txt_len = strlen(ext->text);
 8012ec4:	4638      	mov	r0, r7
 8012ec6:	f7ed f94b 	bl	8000160 <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8012eca:	4b33      	ldr	r3, [pc, #204]	; (8012f98 <lv_label_refr_text+0x4a8>)
            size_t txt_len = strlen(ext->text);
 8012ecc:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	4631      	mov	r1, r6
 8012ed2:	4638      	mov	r0, r7
 8012ed4:	4798      	blx	r3
 8012ed6:	f10d 0870 	add.w	r8, sp, #112	; 0x70
                _lv_txt_encoded_prev(ext->text, &byte_id);
 8012eda:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012fa4 <lv_label_refr_text+0x4b4>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8012ede:	f848 0d44 	str.w	r0, [r8, #-68]!
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8012ee2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8012ee4:	6828      	ldr	r0, [r5, #0]
 8012ee6:	f107 0b03 	add.w	fp, r7, #3
 8012eea:	45cb      	cmp	fp, r9
 8012eec:	d82e      	bhi.n	8012f4c <lv_label_refr_text+0x45c>
 8012eee:	f04f 0a04 	mov.w	sl, #4
            uint8_t len          = 0;
 8012ef2:	f04f 0900 	mov.w	r9, #0
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
 8012ef6:	4b29      	ldr	r3, [pc, #164]	; (8012f9c <lv_label_refr_text+0x4ac>)
 8012ef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012efa:	6828      	ldr	r0, [r5, #0]
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	4408      	add	r0, r1
 8012f00:	9305      	str	r3, [sp, #20]
 8012f02:	4790      	blx	r2
                _lv_txt_encoded_next(ext->text, &byte_id);
 8012f04:	4b26      	ldr	r3, [pc, #152]	; (8012fa0 <lv_label_refr_text+0x4b0>)
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
 8012f06:	4481      	add	r9, r0
                _lv_txt_encoded_next(ext->text, &byte_id);
 8012f08:	681a      	ldr	r2, [r3, #0]
 8012f0a:	4641      	mov	r1, r8
 8012f0c:	6828      	ldr	r0, [r5, #0]
 8012f0e:	4790      	blx	r2
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8012f10:	f1ba 0a01 	subs.w	sl, sl, #1
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
 8012f14:	fa5f f989 	uxtb.w	r9, r9
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8012f18:	9b05      	ldr	r3, [sp, #20]
 8012f1a:	d1ed      	bne.n	8012ef8 <lv_label_refr_text+0x408>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 8012f1c:	6829      	ldr	r1, [r5, #0]
 8012f1e:	464a      	mov	r2, r9
 8012f20:	4439      	add	r1, r7
 8012f22:	4620      	mov	r0, r4
 8012f24:	f7ff fab4 	bl	8012490 <lv_label_set_dot_tmp>
 8012f28:	2800      	cmp	r0, #0
 8012f2a:	f43f ae4f 	beq.w	8012bcc <lv_label_refr_text+0xdc>
                    ext->text[byte_id_ori + i] = '.';
 8012f2e:	222e      	movs	r2, #46	; 0x2e
 8012f30:	682b      	ldr	r3, [r5, #0]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8012f32:	3603      	adds	r6, #3
                    ext->text[byte_id_ori + i] = '.';
 8012f34:	55da      	strb	r2, [r3, r7]
 8012f36:	682b      	ldr	r3, [r5, #0]
 8012f38:	443b      	add	r3, r7
 8012f3a:	705a      	strb	r2, [r3, #1]
 8012f3c:	682b      	ldr	r3, [r5, #0]
 8012f3e:	441f      	add	r7, r3
 8012f40:	70ba      	strb	r2, [r7, #2]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8012f42:	682b      	ldr	r3, [r5, #0]
 8012f44:	f803 a00b 	strb.w	sl, [r3, fp]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8012f48:	60ae      	str	r6, [r5, #8]
 8012f4a:	e63f      	b.n	8012bcc <lv_label_refr_text+0xdc>
                _lv_txt_encoded_prev(ext->text, &byte_id);
 8012f4c:	f8da 3000 	ldr.w	r3, [sl]
 8012f50:	4641      	mov	r1, r8
 8012f52:	4798      	blx	r3
                letter_id--;
 8012f54:	3e01      	subs	r6, #1
 8012f56:	e7c4      	b.n	8012ee2 <lv_label_refr_text+0x3f2>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 8012f58:	f1b8 0f01 	cmp.w	r8, #1
 8012f5c:	f47f ae36 	bne.w	8012bcc <lv_label_refr_text+0xdc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8012f60:	2210      	movs	r2, #16
 8012f62:	2100      	movs	r1, #0
 8012f64:	4620      	mov	r0, r4
 8012f66:	f7f2 fa9b 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8012f6a:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8012f6c:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8012f6e:	2100      	movs	r1, #0
 8012f70:	4620      	mov	r0, r4
 8012f72:	f7f2 fa95 	bl	80054a0 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 8012f76:	1829      	adds	r1, r5, r0
 8012f78:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8012f7c:	4401      	add	r1, r0
 8012f7e:	b209      	sxth	r1, r1
        lv_obj_set_height(label, size.y);
 8012f80:	4620      	mov	r0, r4
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
 8012f82:	f8ad 101e 	strh.w	r1, [sp, #30]
        lv_obj_set_height(label, size.y);
 8012f86:	f7f2 fa0b 	bl	80053a0 <lv_obj_set_height>
 8012f8a:	e61f      	b.n	8012bcc <lv_label_refr_text+0xdc>
 8012f8c:	080124e1 	.word	0x080124e1
 8012f90:	080124f7 	.word	0x080124f7
 8012f94:	20000070 	.word	0x20000070
 8012f98:	2000005c 	.word	0x2000005c
 8012f9c:	2000006c 	.word	0x2000006c
 8012fa0:	20000064 	.word	0x20000064
 8012fa4:	20000068 	.word	0x20000068

08012fa8 <lv_label_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
 8012fa8:	2908      	cmp	r1, #8
{
 8012faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fae:	4604      	mov	r4, r0
 8012fb0:	460f      	mov	r7, r1
 8012fb2:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 8012fb4:	d114      	bne.n	8012fe0 <lv_label_signal+0x38>
    switch(type) {
 8012fb6:	7813      	ldrb	r3, [r2, #0]
 8012fb8:	b14b      	cbz	r3, 8012fce <lv_label_signal+0x26>
        info->result = lv_label_get_style(label, info->part);
 8012fba:	2300      	movs	r3, #0
 8012fbc:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(label, sign, param);
 8012fbe:	4b2a      	ldr	r3, [pc, #168]	; (8013068 <lv_label_signal+0xc0>)
 8012fc0:	462a      	mov	r2, r5
 8012fc2:	4620      	mov	r0, r4
}
 8012fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(label, sign, param);
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	2108      	movs	r1, #8
 8012fcc:	4718      	bx	r3
            style_dsc_p = &label->style_list;
 8012fce:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_label_get_style(label, info->part);
 8012fd2:	6053      	str	r3, [r2, #4]
        if(info->result != NULL) return LV_RES_OK;
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d0f2      	beq.n	8012fbe <lv_label_signal+0x16>
 8012fd8:	2601      	movs	r6, #1
}
 8012fda:	4630      	mov	r0, r6
 8012fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    res = ancestor_signal(label, sign, param);
 8012fe0:	4b21      	ldr	r3, [pc, #132]	; (8013068 <lv_label_signal+0xc0>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8012fe6:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
 8012fe8:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 8012fea:	d1f6      	bne.n	8012fda <lv_label_signal+0x32>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8012fec:	2f07      	cmp	r7, #7
 8012fee:	d105      	bne.n	8012ffc <lv_label_signal+0x54>
 8012ff0:	4628      	mov	r0, r5
}
 8012ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8012ff6:	491d      	ldr	r1, [pc, #116]	; (801306c <lv_label_signal+0xc4>)
 8012ff8:	f7f3 b910 	b.w	800621c <lv_obj_handle_get_type_signal>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	f7f3 f81b 	bl	8006038 <lv_obj_get_ext_attr>
 8013002:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8013004:	b967      	cbnz	r7, 8013020 <lv_label_signal+0x78>
        if(ext->static_txt == 0) {
 8013006:	7c83      	ldrb	r3, [r0, #18]
 8013008:	f013 0508 	ands.w	r5, r3, #8
 801300c:	d104      	bne.n	8013018 <lv_label_signal+0x70>
            lv_mem_free(ext->text);
 801300e:	6800      	ldr	r0, [r0, #0]
 8013010:	f7fc fabc 	bl	800f58c <lv_mem_free>
            ext->text = NULL;
 8013014:	f8c8 5000 	str.w	r5, [r8]
        lv_label_dot_tmp_free(label);
 8013018:	4620      	mov	r0, r4
 801301a:	f7ff f9ef 	bl	80123fc <lv_label_dot_tmp_free>
 801301e:	e7dc      	b.n	8012fda <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 8013020:	2f04      	cmp	r7, #4
 8013022:	d106      	bne.n	8013032 <lv_label_signal+0x8a>
        lv_label_revert_dots(label);
 8013024:	4620      	mov	r0, r4
 8013026:	f7ff f9fb 	bl	8012420 <lv_label_revert_dots>
        lv_label_refr_text(label);
 801302a:	4620      	mov	r0, r4
 801302c:	f7ff fd60 	bl	8012af0 <lv_label_refr_text>
 8013030:	e7d3      	b.n	8012fda <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_COORD_CHG) {
 8013032:	2f02      	cmp	r7, #2
 8013034:	d1d0      	bne.n	8012fd8 <lv_label_signal+0x30>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013036:	8aa2      	ldrh	r2, [r4, #20]
 8013038:	8a23      	ldrh	r3, [r4, #16]
 801303a:	3201      	adds	r2, #1
 801303c:	1ad2      	subs	r2, r2, r3
 801303e:	88ab      	ldrh	r3, [r5, #4]
 8013040:	8829      	ldrh	r1, [r5, #0]
 8013042:	3301      	adds	r3, #1
 8013044:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 8013046:	b292      	uxth	r2, r2
 8013048:	b29b      	uxth	r3, r3
 801304a:	429a      	cmp	r2, r3
 801304c:	d1ea      	bne.n	8013024 <lv_label_signal+0x7c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801304e:	8ae2      	ldrh	r2, [r4, #22]
 8013050:	8a63      	ldrh	r3, [r4, #18]
 8013052:	3201      	adds	r2, #1
 8013054:	1ad2      	subs	r2, r2, r3
 8013056:	88eb      	ldrh	r3, [r5, #6]
 8013058:	8869      	ldrh	r1, [r5, #2]
 801305a:	3301      	adds	r3, #1
 801305c:	1a5b      	subs	r3, r3, r1
 801305e:	b292      	uxth	r2, r2
 8013060:	b29b      	uxth	r3, r3
 8013062:	429a      	cmp	r2, r3
 8013064:	d1de      	bne.n	8013024 <lv_label_signal+0x7c>
 8013066:	e7b7      	b.n	8012fd8 <lv_label_signal+0x30>
 8013068:	200025b0 	.word	0x200025b0
 801306c:	08019914 	.word	0x08019914

08013070 <lv_label_set_text>:
{
 8013070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013072:	4606      	mov	r6, r0
 8013074:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 8013076:	f7fb ffa7 	bl	800efc8 <lv_debug_check_null>
 801307a:	4603      	mov	r3, r0
 801307c:	b920      	cbnz	r0, 8013088 <lv_label_set_text+0x18>
 801307e:	4632      	mov	r2, r6
 8013080:	482b      	ldr	r0, [pc, #172]	; (8013130 <lv_label_set_text+0xc0>)
 8013082:	f7fb ffa5 	bl	800efd0 <lv_debug_log_error>
 8013086:	e7fe      	b.n	8013086 <lv_label_set_text+0x16>
    lv_obj_invalidate(label);
 8013088:	4630      	mov	r0, r6
 801308a:	f7f1 fc29 	bl	80048e0 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801308e:	4630      	mov	r0, r6
 8013090:	f7f2 ffd2 	bl	8006038 <lv_obj_get_ext_attr>
 8013094:	4604      	mov	r4, r0
    if(text == NULL) text = ext->text;
 8013096:	b905      	cbnz	r5, 801309a <lv_label_set_text+0x2a>
 8013098:	6805      	ldr	r5, [r0, #0]
    LV_ASSERT_STR(text);
 801309a:	4628      	mov	r0, r5
 801309c:	f7fb ff94 	bl	800efc8 <lv_debug_check_null>
 80130a0:	4603      	mov	r3, r0
 80130a2:	b920      	cbnz	r0, 80130ae <lv_label_set_text+0x3e>
 80130a4:	462a      	mov	r2, r5
 80130a6:	4822      	ldr	r0, [pc, #136]	; (8013130 <lv_label_set_text+0xc0>)
 80130a8:	f7fb ff92 	bl	800efd0 <lv_debug_log_error>
 80130ac:	e7fe      	b.n	80130ac <lv_label_set_text+0x3c>
    if(ext->text == text && ext->static_txt == 0) {
 80130ae:	6820      	ldr	r0, [r4, #0]
 80130b0:	42a8      	cmp	r0, r5
 80130b2:	d115      	bne.n	80130e0 <lv_label_set_text+0x70>
 80130b4:	4628      	mov	r0, r5
 80130b6:	f7ed f853 	bl	8000160 <strlen>
 80130ba:	7ca3      	ldrb	r3, [r4, #18]
 80130bc:	1c41      	adds	r1, r0, #1
 80130be:	071b      	lsls	r3, r3, #28
 80130c0:	d416      	bmi.n	80130f0 <lv_label_set_text+0x80>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 80130c2:	4628      	mov	r0, r5
 80130c4:	f7fc fbde 	bl	800f884 <lv_mem_realloc>
 80130c8:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
 80130ca:	f7fb ff7d 	bl	800efc8 <lv_debug_check_null>
 80130ce:	6822      	ldr	r2, [r4, #0]
 80130d0:	4603      	mov	r3, r0
 80130d2:	b918      	cbnz	r0, 80130dc <lv_label_set_text+0x6c>
 80130d4:	4817      	ldr	r0, [pc, #92]	; (8013134 <lv_label_set_text+0xc4>)
 80130d6:	f7fb ff7b 	bl	800efd0 <lv_debug_log_error>
 80130da:	e7fe      	b.n	80130da <lv_label_set_text+0x6a>
        if(ext->text == NULL) return;
 80130dc:	bb12      	cbnz	r2, 8013124 <lv_label_set_text+0xb4>
}
 80130de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(ext->text != NULL && ext->static_txt == 0) {
 80130e0:	b130      	cbz	r0, 80130f0 <lv_label_set_text+0x80>
 80130e2:	7ca3      	ldrb	r3, [r4, #18]
 80130e4:	f013 0708 	ands.w	r7, r3, #8
 80130e8:	d102      	bne.n	80130f0 <lv_label_set_text+0x80>
            lv_mem_free(ext->text);
 80130ea:	f7fc fa4f 	bl	800f58c <lv_mem_free>
            ext->text = NULL;
 80130ee:	6027      	str	r7, [r4, #0]
        size_t len = strlen(text) + 1;
 80130f0:	4628      	mov	r0, r5
 80130f2:	f7ed f835 	bl	8000160 <strlen>
        ext->text = lv_mem_alloc(len);
 80130f6:	3001      	adds	r0, #1
 80130f8:	f7fc f9f8 	bl	800f4ec <lv_mem_alloc>
 80130fc:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
 80130fe:	f7fb ff63 	bl	800efc8 <lv_debug_check_null>
 8013102:	6822      	ldr	r2, [r4, #0]
 8013104:	4603      	mov	r3, r0
 8013106:	b918      	cbnz	r0, 8013110 <lv_label_set_text+0xa0>
 8013108:	480a      	ldr	r0, [pc, #40]	; (8013134 <lv_label_set_text+0xc4>)
 801310a:	f7fb ff61 	bl	800efd0 <lv_debug_log_error>
 801310e:	e7fe      	b.n	801310e <lv_label_set_text+0x9e>
        if(ext->text == NULL) return;
 8013110:	2a00      	cmp	r2, #0
 8013112:	d0e4      	beq.n	80130de <lv_label_set_text+0x6e>
        strcpy(ext->text, text);
 8013114:	4629      	mov	r1, r5
 8013116:	4610      	mov	r0, r2
 8013118:	f001 ffc2 	bl	80150a0 <strcpy>
        ext->static_txt = 0;
 801311c:	7ca3      	ldrb	r3, [r4, #18]
 801311e:	f36f 03c3 	bfc	r3, #3, #1
 8013122:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
 8013124:	4630      	mov	r0, r6
}
 8013126:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 801312a:	f7ff bce1 	b.w	8012af0 <lv_label_refr_text>
 801312e:	bf00      	nop
 8013130:	080158e8 	.word	0x080158e8
 8013134:	08015994 	.word	0x08015994

08013138 <lv_label_set_text_fmt>:
{
 8013138:	b40e      	push	{r1, r2, r3}
 801313a:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 801313c:	9e07      	ldr	r6, [sp, #28]
 801313e:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 8013140:	f7fb ff42 	bl	800efc8 <lv_debug_check_null>
 8013144:	4603      	mov	r3, r0
 8013146:	b920      	cbnz	r0, 8013152 <lv_label_set_text_fmt+0x1a>
 8013148:	462a      	mov	r2, r5
 801314a:	4819      	ldr	r0, [pc, #100]	; (80131b0 <lv_label_set_text_fmt+0x78>)
 801314c:	f7fb ff40 	bl	800efd0 <lv_debug_log_error>
 8013150:	e7fe      	b.n	8013150 <lv_label_set_text_fmt+0x18>
    LV_ASSERT_STR(fmt);
 8013152:	4630      	mov	r0, r6
 8013154:	f7fb ff38 	bl	800efc8 <lv_debug_check_null>
 8013158:	4603      	mov	r3, r0
 801315a:	b920      	cbnz	r0, 8013166 <lv_label_set_text_fmt+0x2e>
 801315c:	4632      	mov	r2, r6
 801315e:	4814      	ldr	r0, [pc, #80]	; (80131b0 <lv_label_set_text_fmt+0x78>)
 8013160:	f7fb ff36 	bl	800efd0 <lv_debug_log_error>
 8013164:	e7fe      	b.n	8013164 <lv_label_set_text_fmt+0x2c>
    lv_obj_invalidate(label);
 8013166:	4628      	mov	r0, r5
 8013168:	f7f1 fbba 	bl	80048e0 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801316c:	4628      	mov	r0, r5
 801316e:	f7f2 ff63 	bl	8006038 <lv_obj_get_ext_attr>
 8013172:	4604      	mov	r4, r0
    if(fmt == NULL) {
 8013174:	b93e      	cbnz	r6, 8013186 <lv_label_set_text_fmt+0x4e>
    lv_label_refr_text(label);
 8013176:	4628      	mov	r0, r5
 8013178:	f7ff fcba 	bl	8012af0 <lv_label_refr_text>
}
 801317c:	b002      	add	sp, #8
 801317e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013182:	b003      	add	sp, #12
 8013184:	4770      	bx	lr
    if(ext->text != NULL && ext->static_txt == 0) {
 8013186:	6800      	ldr	r0, [r0, #0]
 8013188:	b130      	cbz	r0, 8013198 <lv_label_set_text_fmt+0x60>
 801318a:	7ca3      	ldrb	r3, [r4, #18]
 801318c:	f013 0708 	ands.w	r7, r3, #8
 8013190:	d102      	bne.n	8013198 <lv_label_set_text_fmt+0x60>
        lv_mem_free(ext->text);
 8013192:	f7fc f9fb 	bl	800f58c <lv_mem_free>
        ext->text = NULL;
 8013196:	6027      	str	r7, [r4, #0]
    va_start(args, fmt);
 8013198:	a908      	add	r1, sp, #32
    ext->text = _lv_txt_set_text_vfmt(fmt, args);
 801319a:	4630      	mov	r0, r6
    va_start(args, fmt);
 801319c:	9101      	str	r1, [sp, #4]
    ext->text = _lv_txt_set_text_vfmt(fmt, args);
 801319e:	f7fd fc59 	bl	8010a54 <_lv_txt_set_text_vfmt>
    ext->static_txt = 0; /*Now the text is dynamically allocated*/
 80131a2:	7ca3      	ldrb	r3, [r4, #18]
    ext->text = _lv_txt_set_text_vfmt(fmt, args);
 80131a4:	6020      	str	r0, [r4, #0]
    ext->static_txt = 0; /*Now the text is dynamically allocated*/
 80131a6:	f36f 03c3 	bfc	r3, #3, #1
 80131aa:	74a3      	strb	r3, [r4, #18]
 80131ac:	e7e3      	b.n	8013176 <lv_label_set_text_fmt+0x3e>
 80131ae:	bf00      	nop
 80131b0:	080158e8 	.word	0x080158e8

080131b4 <lv_label_set_text_static>:
{
 80131b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131b6:	4606      	mov	r6, r0
 80131b8:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 80131ba:	f7fb ff05 	bl	800efc8 <lv_debug_check_null>
 80131be:	4603      	mov	r3, r0
 80131c0:	b920      	cbnz	r0, 80131cc <lv_label_set_text_static+0x18>
 80131c2:	4632      	mov	r2, r6
 80131c4:	480d      	ldr	r0, [pc, #52]	; (80131fc <lv_label_set_text_static+0x48>)
 80131c6:	f7fb ff03 	bl	800efd0 <lv_debug_log_error>
 80131ca:	e7fe      	b.n	80131ca <lv_label_set_text_static+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80131cc:	4630      	mov	r0, r6
 80131ce:	f7f2 ff33 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 80131d2:	7c83      	ldrb	r3, [r0, #18]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80131d4:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 80131d6:	f013 0508 	ands.w	r5, r3, #8
 80131da:	d104      	bne.n	80131e6 <lv_label_set_text_static+0x32>
 80131dc:	6800      	ldr	r0, [r0, #0]
 80131de:	b110      	cbz	r0, 80131e6 <lv_label_set_text_static+0x32>
        lv_mem_free(ext->text);
 80131e0:	f7fc f9d4 	bl	800f58c <lv_mem_free>
        ext->text = NULL;
 80131e4:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 80131e6:	b127      	cbz	r7, 80131f2 <lv_label_set_text_static+0x3e>
        ext->static_txt = 1;
 80131e8:	7ca3      	ldrb	r3, [r4, #18]
        ext->text       = (char *)text;
 80131ea:	6027      	str	r7, [r4, #0]
        ext->static_txt = 1;
 80131ec:	f043 0308 	orr.w	r3, r3, #8
 80131f0:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
 80131f2:	4630      	mov	r0, r6
}
 80131f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
 80131f8:	f7ff bc7a 	b.w	8012af0 <lv_label_refr_text>
 80131fc:	080158e8 	.word	0x080158e8

08013200 <lv_label_set_long_mode>:
{
 8013200:	b570      	push	{r4, r5, r6, lr}
 8013202:	4605      	mov	r5, r0
 8013204:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 8013206:	f7fb fedf 	bl	800efc8 <lv_debug_check_null>
 801320a:	4603      	mov	r3, r0
 801320c:	b920      	cbnz	r0, 8013218 <lv_label_set_long_mode+0x18>
 801320e:	462a      	mov	r2, r5
 8013210:	481c      	ldr	r0, [pc, #112]	; (8013284 <lv_label_set_long_mode+0x84>)
 8013212:	f7fb fedd 	bl	800efd0 <lv_debug_log_error>
 8013216:	e7fe      	b.n	8013216 <lv_label_set_long_mode+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8013218:	4628      	mov	r0, r5
 801321a:	f7f2 ff0d 	bl	8006038 <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 801321e:	491a      	ldr	r1, [pc, #104]	; (8013288 <lv_label_set_long_mode+0x88>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8013220:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 8013222:	4628      	mov	r0, r5
 8013224:	f7fb fb6c 	bl	800e900 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 8013228:	4918      	ldr	r1, [pc, #96]	; (801328c <lv_label_set_long_mode+0x8c>)
 801322a:	4628      	mov	r0, r5
 801322c:	f7fb fb68 	bl	800e900 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 8013230:	4917      	ldr	r1, [pc, #92]	; (8013290 <lv_label_set_long_mode+0x90>)
 8013232:	4628      	mov	r0, r5
 8013234:	f7fb fb64 	bl	800e900 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 8013238:	4916      	ldr	r1, [pc, #88]	; (8013294 <lv_label_set_long_mode+0x94>)
 801323a:	4628      	mov	r0, r5
 801323c:	f7fb fb60 	bl	800e900 <lv_anim_del>
    ext->offset.x = 0;
 8013240:	2200      	movs	r2, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 8013242:	1ef3      	subs	r3, r6, #3
 8013244:	2b02      	cmp	r3, #2
 8013246:	7ca3      	ldrb	r3, [r4, #18]
    ext->offset.x = 0;
 8013248:	81e2      	strh	r2, [r4, #14]
        ext->expand = 1;
 801324a:	bf94      	ite	ls
 801324c:	f043 0380 	orrls.w	r3, r3, #128	; 0x80
        ext->expand = 0;
 8013250:	f362 13c7 	bfihi	r3, r2, #7, #1
 8013254:	74a3      	strb	r3, [r4, #18]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8013256:	7ca3      	ldrb	r3, [r4, #18]
    ext->offset.y = 0;
 8013258:	8222      	strh	r2, [r4, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 801325a:	f003 0307 	and.w	r3, r3, #7
 801325e:	2b02      	cmp	r3, #2
 8013260:	d107      	bne.n	8013272 <lv_label_set_long_mode+0x72>
 8013262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013266:	68a2      	ldr	r2, [r4, #8]
 8013268:	429a      	cmp	r2, r3
 801326a:	d002      	beq.n	8013272 <lv_label_set_long_mode+0x72>
        lv_label_revert_dots(label);
 801326c:	4628      	mov	r0, r5
 801326e:	f7ff f8d7 	bl	8012420 <lv_label_revert_dots>
    ext->long_mode = long_mode;
 8013272:	7ca3      	ldrb	r3, [r4, #18]
    lv_label_refr_text(label);
 8013274:	4628      	mov	r0, r5
    ext->long_mode = long_mode;
 8013276:	f366 0302 	bfi	r3, r6, #0, #3
 801327a:	74a3      	strb	r3, [r4, #18]
}
 801327c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
 8013280:	f7ff bc36 	b.w	8012af0 <lv_label_refr_text>
 8013284:	080158e8 	.word	0x080158e8
 8013288:	08004a3d 	.word	0x08004a3d
 801328c:	08004a6d 	.word	0x08004a6d
 8013290:	080124f7 	.word	0x080124f7
 8013294:	080124e1 	.word	0x080124e1

08013298 <lv_label_set_recolor>:
{
 8013298:	b538      	push	{r3, r4, r5, lr}
 801329a:	4604      	mov	r4, r0
 801329c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
 801329e:	f7fb fe93 	bl	800efc8 <lv_debug_check_null>
 80132a2:	4603      	mov	r3, r0
 80132a4:	b920      	cbnz	r0, 80132b0 <lv_label_set_recolor+0x18>
 80132a6:	4622      	mov	r2, r4
 80132a8:	480a      	ldr	r0, [pc, #40]	; (80132d4 <lv_label_set_recolor+0x3c>)
 80132aa:	f7fb fe91 	bl	800efd0 <lv_debug_log_error>
 80132ae:	e7fe      	b.n	80132ae <lv_label_set_recolor+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80132b0:	4620      	mov	r0, r4
 80132b2:	f7f2 fec1 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 80132b6:	7c83      	ldrb	r3, [r0, #18]
 80132b8:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80132bc:	42aa      	cmp	r2, r5
 80132be:	d007      	beq.n	80132d0 <lv_label_set_recolor+0x38>
    ext->recolor = en == false ? 0 : 1;
 80132c0:	f365 1386 	bfi	r3, r5, #6, #1
 80132c4:	7483      	strb	r3, [r0, #18]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
 80132c6:	4620      	mov	r0, r4
}
 80132c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
 80132cc:	f7ff bc10 	b.w	8012af0 <lv_label_refr_text>
}
 80132d0:	bd38      	pop	{r3, r4, r5, pc}
 80132d2:	bf00      	nop
 80132d4:	080158e8 	.word	0x080158e8

080132d8 <lv_label_create>:
{
 80132d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132dc:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 80132de:	f7f1 fdc5 	bl	8004e6c <lv_obj_create>
 80132e2:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_label);
 80132e4:	f7fb fe70 	bl	800efc8 <lv_debug_check_null>
 80132e8:	4603      	mov	r3, r0
 80132ea:	b920      	cbnz	r0, 80132f6 <lv_label_create+0x1e>
 80132ec:	4622      	mov	r2, r4
 80132ee:	4862      	ldr	r0, [pc, #392]	; (8013478 <lv_label_create+0x1a0>)
 80132f0:	f7fb fe6e 	bl	800efd0 <lv_debug_log_error>
 80132f4:	e7fe      	b.n	80132f4 <lv_label_create+0x1c>
    if(new_label == NULL) return NULL;
 80132f6:	b91c      	cbnz	r4, 8013300 <lv_label_create+0x28>
 80132f8:	2400      	movs	r4, #0
}
 80132fa:	4620      	mov	r0, r4
 80132fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 8013300:	4d5e      	ldr	r5, [pc, #376]	; (801347c <lv_label_create+0x1a4>)
 8013302:	682b      	ldr	r3, [r5, #0]
 8013304:	b91b      	cbnz	r3, 801330e <lv_label_create+0x36>
 8013306:	4620      	mov	r0, r4
 8013308:	f7f2 fe76 	bl	8005ff8 <lv_obj_get_signal_cb>
 801330c:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 801330e:	2114      	movs	r1, #20
 8013310:	4620      	mov	r0, r4
 8013312:	f7f1 f8af 	bl	8004474 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 8013316:	4620      	mov	r0, r4
 8013318:	f7f2 fe8e 	bl	8006038 <lv_obj_get_ext_attr>
 801331c:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
 801331e:	f7fb fe53 	bl	800efc8 <lv_debug_check_null>
 8013322:	4603      	mov	r3, r0
 8013324:	b920      	cbnz	r0, 8013330 <lv_label_create+0x58>
 8013326:	462a      	mov	r2, r5
 8013328:	4853      	ldr	r0, [pc, #332]	; (8013478 <lv_label_create+0x1a0>)
 801332a:	f7fb fe51 	bl	800efd0 <lv_debug_log_error>
 801332e:	e7fe      	b.n	801332e <lv_label_create+0x56>
 8013330:	2300      	movs	r3, #0
    if(ext == NULL) {
 8013332:	b91d      	cbnz	r5, 801333c <lv_label_create+0x64>
        lv_obj_del(new_label);
 8013334:	4620      	mov	r0, r4
 8013336:	f7f2 ff01 	bl	800613c <lv_obj_del>
 801333a:	e7dd      	b.n	80132f8 <lv_label_create+0x20>
    ext->static_txt = 0;
 801333c:	7caa      	ldrb	r2, [r5, #18]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 801333e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ext->align      = LV_LABEL_ALIGN_AUTO;
 8013342:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 8013346:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 801334a:	f363 0202 	bfi	r2, r3, #0, #3
 801334e:	74aa      	strb	r2, [r5, #18]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8013350:	2219      	movs	r2, #25
 8013352:	81aa      	strh	r2, [r5, #12]
    ext->dot_tmp_alloc = 0;
 8013354:	7cea      	ldrb	r2, [r5, #19]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 8013356:	60a9      	str	r1, [r5, #8]
    ext->dot_tmp_alloc = 0;
 8013358:	f363 0200 	bfi	r2, r3, #0, #1
    lv_obj_set_design_cb(new_label, lv_label_design);
 801335c:	4948      	ldr	r1, [pc, #288]	; (8013480 <lv_label_create+0x1a8>)
 801335e:	4620      	mov	r0, r4
    ext->text       = NULL;
 8013360:	602b      	str	r3, [r5, #0]
    ext->offset.x = 0;
 8013362:	81eb      	strh	r3, [r5, #14]
    ext->offset.y = 0;
 8013364:	822b      	strh	r3, [r5, #16]
    ext->dot.tmp_ptr   = NULL;
 8013366:	606b      	str	r3, [r5, #4]
    ext->dot_tmp_alloc = 0;
 8013368:	74ea      	strb	r2, [r5, #19]
    lv_obj_set_design_cb(new_label, lv_label_design);
 801336a:	f7f1 f873 	bl	8004454 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 801336e:	4945      	ldr	r1, [pc, #276]	; (8013484 <lv_label_create+0x1ac>)
 8013370:	4620      	mov	r0, r4
 8013372:	f7f1 f859 	bl	8004428 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 8013376:	b987      	cbnz	r7, 801339a <lv_label_create+0xc2>
        lv_theme_apply(new_label, LV_THEME_LABEL);
 8013378:	4620      	mov	r0, r4
 801337a:	2107      	movs	r1, #7
 801337c:	f7fd fbd4 	bl	8010b28 <lv_theme_apply>
        lv_obj_set_click(new_label, false);
 8013380:	4639      	mov	r1, r7
 8013382:	4620      	mov	r0, r4
 8013384:	f7f0 ff52 	bl	800422c <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 8013388:	4639      	mov	r1, r7
 801338a:	4620      	mov	r0, r4
 801338c:	f7ff ff38 	bl	8013200 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 8013390:	493d      	ldr	r1, [pc, #244]	; (8013488 <lv_label_create+0x1b0>)
 8013392:	4620      	mov	r0, r4
 8013394:	f7ff fe6c 	bl	8013070 <lv_label_set_text>
 8013398:	e7af      	b.n	80132fa <lv_label_create+0x22>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801339a:	4638      	mov	r0, r7
 801339c:	f7f2 fe4c 	bl	8006038 <lv_obj_get_ext_attr>
 80133a0:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 80133a2:	4638      	mov	r0, r7
 80133a4:	f7ff f910 	bl	80125c8 <lv_label_get_long_mode>
 80133a8:	4601      	mov	r1, r0
 80133aa:	4620      	mov	r0, r4
 80133ac:	f7ff ff28 	bl	8013200 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 80133b0:	4638      	mov	r0, r7
 80133b2:	f7ff f935 	bl	8012620 <lv_label_get_recolor>
 80133b6:	4601      	mov	r1, r0
 80133b8:	4620      	mov	r0, r4
 80133ba:	f7ff ff6d 	bl	8013298 <lv_label_set_recolor>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 80133be:	4638      	mov	r0, r7
 80133c0:	f7ff f916 	bl	80125f0 <lv_label_get_align>
 80133c4:	4601      	mov	r1, r0
 80133c6:	4620      	mov	r0, r4
 80133c8:	f7ff f8cc 	bl	8012564 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 80133cc:	7cb3      	ldrb	r3, [r6, #18]
            lv_label_set_text(new_label, lv_label_get_text(copy));
 80133ce:	4638      	mov	r0, r7
        if(copy_ext->static_txt == 0)
 80133d0:	071a      	lsls	r2, r3, #28
 80133d2:	d41d      	bmi.n	8013410 <lv_label_create+0x138>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 80133d4:	f7ff f8e6 	bl	80125a4 <lv_label_get_text>
 80133d8:	4601      	mov	r1, r0
 80133da:	4620      	mov	r0, r4
 80133dc:	f7ff fe48 	bl	8013070 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 80133e0:	7cb3      	ldrb	r3, [r6, #18]
 80133e2:	f003 0307 	and.w	r3, r3, #7
 80133e6:	2b02      	cmp	r3, #2
 80133e8:	d126      	bne.n	8013438 <lv_label_create+0x160>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
 80133ea:	6830      	ldr	r0, [r6, #0]
 80133ec:	682f      	ldr	r7, [r5, #0]
 80133ee:	f7fc f8ff 	bl	800f5f0 <_lv_mem_get_size>
 80133f2:	4601      	mov	r1, r0
 80133f4:	4638      	mov	r0, r7
 80133f6:	f7fc fa45 	bl	800f884 <lv_mem_realloc>
 80133fa:	6028      	str	r0, [r5, #0]
            LV_ASSERT_MEM(ext->text);
 80133fc:	f7fb fde4 	bl	800efc8 <lv_debug_check_null>
 8013400:	682f      	ldr	r7, [r5, #0]
 8013402:	4603      	mov	r3, r0
 8013404:	b958      	cbnz	r0, 801341e <lv_label_create+0x146>
 8013406:	463a      	mov	r2, r7
 8013408:	481b      	ldr	r0, [pc, #108]	; (8013478 <lv_label_create+0x1a0>)
 801340a:	f7fb fde1 	bl	800efd0 <lv_debug_log_error>
 801340e:	e7fe      	b.n	801340e <lv_label_create+0x136>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
 8013410:	f7ff f8c8 	bl	80125a4 <lv_label_get_text>
 8013414:	4601      	mov	r1, r0
 8013416:	4620      	mov	r0, r4
 8013418:	f7ff fecc 	bl	80131b4 <lv_label_set_text_static>
 801341c:	e7e0      	b.n	80133e0 <lv_label_create+0x108>
            if(ext->text == NULL) return NULL;
 801341e:	2f00      	cmp	r7, #0
 8013420:	f43f af6a 	beq.w	80132f8 <lv_label_create+0x20>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
 8013424:	f8d6 8000 	ldr.w	r8, [r6]
 8013428:	4640      	mov	r0, r8
 801342a:	f7fc f8e1 	bl	800f5f0 <_lv_mem_get_size>
 801342e:	4641      	mov	r1, r8
 8013430:	4602      	mov	r2, r0
 8013432:	4638      	mov	r0, r7
 8013434:	f7fc f936 	bl	800f6a4 <_lv_memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 8013438:	7cf3      	ldrb	r3, [r6, #19]
 801343a:	07db      	lsls	r3, r3, #31
 801343c:	d515      	bpl.n	801346a <lv_label_create+0x192>
 801343e:	6870      	ldr	r0, [r6, #4]
 8013440:	b198      	cbz	r0, 801346a <lv_label_create+0x192>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
 8013442:	f7ec fe8d 	bl	8000160 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 8013446:	6869      	ldr	r1, [r5, #4]
 8013448:	4602      	mov	r2, r0
 801344a:	4620      	mov	r0, r4
 801344c:	f7ff f820 	bl	8012490 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 8013450:	7cf2      	ldrb	r2, [r6, #19]
 8013452:	7ceb      	ldrb	r3, [r5, #19]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8013454:	4620      	mov	r0, r4
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 8013456:	f362 0300 	bfi	r3, r2, #0, #1
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 801345a:	22ff      	movs	r2, #255	; 0xff
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 801345c:	74eb      	strb	r3, [r5, #19]
        ext->dot_end       = copy_ext->dot_end;
 801345e:	68b3      	ldr	r3, [r6, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8013460:	4611      	mov	r1, r2
        ext->dot_end       = copy_ext->dot_end;
 8013462:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 8013464:	f7f2 fc5e 	bl	8005d24 <lv_obj_refresh_style>
 8013468:	e747      	b.n	80132fa <lv_label_create+0x22>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 801346a:	2204      	movs	r2, #4
 801346c:	18b1      	adds	r1, r6, r2
 801346e:	18a8      	adds	r0, r5, r2
 8013470:	f7fc f918 	bl	800f6a4 <_lv_memcpy>
 8013474:	e7ec      	b.n	8013450 <lv_label_create+0x178>
 8013476:	bf00      	nop
 8013478:	08015994 	.word	0x08015994
 801347c:	200025b0 	.word	0x200025b0
 8013480:	080128d5 	.word	0x080128d5
 8013484:	08012fa9 	.word	0x08012fa9
 8013488:	0801990f 	.word	0x0801990f

0801348c <get_edge_flash_area>:
    ext->edge_flash.right_ip  = 0;

}

static void get_edge_flash_area(lv_obj_t * page, lv_area_t * flash_area, lv_coord_t state)
{
 801348c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013490:	4690      	mov	r8, r2
 8013492:	4606      	mov	r6, r0
 8013494:	460c      	mov	r4, r1
    lv_coord_t page_w = lv_obj_get_width(page);
 8013496:	f7f1 f8b7 	bl	8004608 <lv_obj_get_width>
 801349a:	4605      	mov	r5, r0
    lv_coord_t page_h = lv_obj_get_height(page);
 801349c:	4630      	mov	r0, r6
 801349e:	f7f1 f8c1 	bl	8004624 <lv_obj_get_height>
 80134a2:	4607      	mov	r7, r0
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
 80134a4:	4630      	mov	r0, r6
 80134a6:	f7f2 fdc7 	bl	8006038 <lv_obj_get_ext_attr>

    if(ext->edge_flash.top_ip) {
 80134aa:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 80134ae:	0790      	lsls	r0, r2, #30
 80134b0:	d517      	bpl.n	80134e2 <get_edge_flash_area+0x56>
        flash_area->x1 = page->coords.x1 - page_w;
 80134b2:	8a33      	ldrh	r3, [r6, #16]
 80134b4:	b2a8      	uxth	r0, r5
 80134b6:	1a1b      	subs	r3, r3, r0
 80134b8:	8023      	strh	r3, [r4, #0]
        flash_area->x2 = page->coords.x2 + page_w;
 80134ba:	8ab3      	ldrh	r3, [r6, #20]
        flash_area->y1 = page->coords.y1 - 3 * page_w + state;
 80134bc:	fa1f f288 	uxth.w	r2, r8
        flash_area->x2 = page->coords.x2 + page_w;
 80134c0:	4403      	add	r3, r0
 80134c2:	80a3      	strh	r3, [r4, #4]
        flash_area->y1 = page->coords.y1 - 3 * page_w + state;
 80134c4:	8a73      	ldrh	r3, [r6, #18]
 80134c6:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
 80134ca:	4413      	add	r3, r2
 80134cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80134d0:	4418      	add	r0, r3
 80134d2:	8060      	strh	r0, [r4, #2]
        flash_area->y2 = page->coords.y1 + state;
 80134d4:	f8b6 8012 	ldrh.w	r8, [r6, #18]
 80134d8:	4442      	add	r2, r8
 80134da:	80e2      	strh	r2, [r4, #6]
        flash_area->y2 = page->coords.y2 + page_h;
    }
    else {
        lv_area_set(flash_area, 0, 0, -1, -1);
    }
}
 80134dc:	b002      	add	sp, #8
 80134de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(ext->edge_flash.bottom_ip) {
 80134e2:	0751      	lsls	r1, r2, #29
 80134e4:	d510      	bpl.n	8013508 <get_edge_flash_area+0x7c>
        flash_area->x1 = page->coords.x1 - page_w;
 80134e6:	8a33      	ldrh	r3, [r6, #16]
 80134e8:	b2a8      	uxth	r0, r5
 80134ea:	1a1b      	subs	r3, r3, r0
        flash_area->y1 = page->coords.y2 - state;
 80134ec:	8af2      	ldrh	r2, [r6, #22]
        flash_area->x1 = page->coords.x1 - page_w;
 80134ee:	8023      	strh	r3, [r4, #0]
        flash_area->x2 = page->coords.x2 + page_w;
 80134f0:	8ab3      	ldrh	r3, [r6, #20]
        flash_area->y1 = page->coords.y2 - state;
 80134f2:	eba2 0208 	sub.w	r2, r2, r8
        flash_area->x2 = page->coords.x2 + page_w;
 80134f6:	4403      	add	r3, r0
        flash_area->y1 = page->coords.y2 - state;
 80134f8:	b292      	uxth	r2, r2
        flash_area->y2 = page->coords.y2 + 3 * page_w - state;
 80134fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
        flash_area->x2 = page->coords.x2 + page_w;
 80134fe:	80a3      	strh	r3, [r4, #4]
        flash_area->y1 = page->coords.y2 - state;
 8013500:	8062      	strh	r2, [r4, #2]
        flash_area->y2 = page->coords.y2 + 3 * page_w - state;
 8013502:	4410      	add	r0, r2
        flash_area->y2 = page->coords.y2 + page_h;
 8013504:	80e0      	strh	r0, [r4, #6]
 8013506:	e7e9      	b.n	80134dc <get_edge_flash_area+0x50>
    else if(ext->edge_flash.right_ip) {
 8013508:	0713      	lsls	r3, r2, #28
 801350a:	d50f      	bpl.n	801352c <get_edge_flash_area+0xa0>
        flash_area->x1 = page->coords.x2 - state;
 801350c:	8ab2      	ldrh	r2, [r6, #20]
        flash_area->x2 = page->coords.x2 + 3 * page_h - state;
 801350e:	b2b8      	uxth	r0, r7
        flash_area->x1 = page->coords.x2 - state;
 8013510:	eba2 0208 	sub.w	r2, r2, r8
 8013514:	b292      	uxth	r2, r2
        flash_area->x2 = page->coords.x2 + 3 * page_h - state;
 8013516:	eb00 0840 	add.w	r8, r0, r0, lsl #1
        flash_area->x1 = page->coords.x2 - state;
 801351a:	8022      	strh	r2, [r4, #0]
        flash_area->x2 = page->coords.x2 + 3 * page_h - state;
 801351c:	4442      	add	r2, r8
        flash_area->y1 = page->coords.y1 - page_h;
 801351e:	8a73      	ldrh	r3, [r6, #18]
        flash_area->x2 = page->coords.x1 + state;
 8013520:	80a2      	strh	r2, [r4, #4]
        flash_area->y1 = page->coords.y1 - page_h;
 8013522:	1a1b      	subs	r3, r3, r0
 8013524:	8063      	strh	r3, [r4, #2]
        flash_area->y2 = page->coords.y2 + page_h;
 8013526:	8af3      	ldrh	r3, [r6, #22]
 8013528:	4418      	add	r0, r3
 801352a:	e7eb      	b.n	8013504 <get_edge_flash_area+0x78>
    else if(ext->edge_flash.left_ip) {
 801352c:	f012 0210 	ands.w	r2, r2, #16
 8013530:	d00d      	beq.n	801354e <get_edge_flash_area+0xc2>
        flash_area->x1 = page->coords.x1 - 3 * page_h + state;
 8013532:	b2b8      	uxth	r0, r7
 8013534:	8a33      	ldrh	r3, [r6, #16]
 8013536:	fa1f f288 	uxth.w	r2, r8
 801353a:	ebc0 3180 	rsb	r1, r0, r0, lsl #14
 801353e:	4413      	add	r3, r2
 8013540:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013544:	440b      	add	r3, r1
 8013546:	8023      	strh	r3, [r4, #0]
        flash_area->x2 = page->coords.x1 + state;
 8013548:	8a33      	ldrh	r3, [r6, #16]
 801354a:	441a      	add	r2, r3
 801354c:	e7e7      	b.n	801351e <get_edge_flash_area+0x92>
        lv_area_set(flash_area, 0, 0, -1, -1);
 801354e:	f04f 33ff 	mov.w	r3, #4294967295
 8013552:	4611      	mov	r1, r2
 8013554:	9300      	str	r3, [sp, #0]
 8013556:	4620      	mov	r0, r4
 8013558:	f7fb fa7c 	bl	800ea54 <lv_area_set>
}
 801355c:	e7be      	b.n	80134dc <get_edge_flash_area+0x50>

0801355e <lv_obj_get_style_pad_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801355e:	2213      	movs	r2, #19
 8013560:	f7f1 bf9e 	b.w	80054a0 <_lv_obj_get_style_int>

08013564 <lv_obj_get_style_pad_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8013564:	2211      	movs	r2, #17
 8013566:	f7f1 bf9b 	b.w	80054a0 <_lv_obj_get_style_int>

0801356a <refr_ext_draw_pad>:
{
 801356a:	b538      	push	{r3, r4, r5, lr}
    lv_style_int_t sb_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_SCROLLBAR);
 801356c:	2101      	movs	r1, #1
{
 801356e:	4604      	mov	r4, r0
    lv_style_int_t sb_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_SCROLLBAR);
 8013570:	f7ff fff8 	bl	8013564 <lv_obj_get_style_pad_bottom>
    lv_style_int_t sb_right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_SCROLLBAR);
 8013574:	2101      	movs	r1, #1
    lv_style_int_t sb_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_SCROLLBAR);
 8013576:	4605      	mov	r5, r0
    lv_style_int_t sb_right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_SCROLLBAR);
 8013578:	4620      	mov	r0, r4
 801357a:	f7ff fff0 	bl	801355e <lv_obj_get_style_pad_right>
    if(page->ext_draw_pad < (-sb_right)) page->ext_draw_pad = -sb_right;
 801357e:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 8013582:	4240      	negs	r0, r0
 8013584:	4283      	cmp	r3, r0
 8013586:	bfb8      	it	lt
 8013588:	8660      	strhlt	r0, [r4, #50]	; 0x32
    if(page->ext_draw_pad < (-sb_bottom)) page->ext_draw_pad = -sb_bottom;
 801358a:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 801358e:	4268      	negs	r0, r5
 8013590:	4283      	cmp	r3, r0
 8013592:	bfb8      	it	lt
 8013594:	8660      	strhlt	r0, [r4, #50]	; 0x32
}
 8013596:	bd38      	pop	{r3, r4, r5, pc}

08013598 <edge_flash_anim_end>:
{
 8013598:	b513      	push	{r0, r1, r4, lr}
 801359a:	4604      	mov	r4, r0
    get_edge_flash_area(a->var, &flash_area, LV_PAGE_END_FLASH_SIZE);
 801359c:	2228      	movs	r2, #40	; 0x28
 801359e:	4669      	mov	r1, sp
 80135a0:	6800      	ldr	r0, [r0, #0]
 80135a2:	f7ff ff73 	bl	801348c <get_edge_flash_area>
    lv_obj_invalidate_area(a->var, &flash_area);
 80135a6:	4669      	mov	r1, sp
 80135a8:	6820      	ldr	r0, [r4, #0]
 80135aa:	f7f1 f979 	bl	80048a0 <lv_obj_invalidate_area>
    lv_page_ext_t * ext       = lv_obj_get_ext_attr(a->var);
 80135ae:	6820      	ldr	r0, [r4, #0]
 80135b0:	f7f2 fd42 	bl	8006038 <lv_obj_get_ext_attr>
    ext->edge_flash.top_ip    = 0;
 80135b4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    ext->edge_flash.right_ip  = 0;
 80135b8:	f003 03e9 	and.w	r3, r3, #233	; 0xe9
 80135bc:	f36f 03c3 	bfc	r3, #3, #1
 80135c0:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
 80135c4:	b002      	add	sp, #8
 80135c6:	bd10      	pop	{r4, pc}

080135c8 <edge_flash_anim>:
{
 80135c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80135ca:	4604      	mov	r4, r0
 80135cc:	460d      	mov	r5, r1
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
 80135ce:	f7f2 fd33 	bl	8006038 <lv_obj_get_ext_attr>
    get_edge_flash_area(page, &flash_area, LV_PAGE_END_FLASH_SIZE);
 80135d2:	2228      	movs	r2, #40	; 0x28
    ext->edge_flash.state = v;
 80135d4:	8485      	strh	r5, [r0, #36]	; 0x24
    get_edge_flash_area(page, &flash_area, LV_PAGE_END_FLASH_SIZE);
 80135d6:	4669      	mov	r1, sp
 80135d8:	4620      	mov	r0, r4
 80135da:	f7ff ff57 	bl	801348c <get_edge_flash_area>
    lv_obj_invalidate_area(page, &flash_area);
 80135de:	4669      	mov	r1, sp
 80135e0:	4620      	mov	r0, r4
 80135e2:	f7f1 f95d 	bl	80048a0 <lv_obj_invalidate_area>
}
 80135e6:	b003      	add	sp, #12
 80135e8:	bd30      	pop	{r4, r5, pc}

080135ea <scrl_def_event_cb>:
{
 80135ea:	b538      	push	{r3, r4, r5, lr}
 80135ec:	460c      	mov	r4, r1
    lv_obj_t * page = lv_obj_get_parent(scrl);
 80135ee:	f7f0 ff67 	bl	80044c0 <lv_obj_get_parent>
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 80135f2:	2c0a      	cmp	r4, #10
    lv_obj_t * page = lv_obj_get_parent(scrl);
 80135f4:	4605      	mov	r5, r0
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 80135f6:	d808      	bhi.n	801360a <scrl_def_event_cb+0x20>
        lv_event_send(page, event, lv_event_get_data());
 80135f8:	f7f0 ff10 	bl	800441c <lv_event_get_data>
 80135fc:	4621      	mov	r1, r4
 80135fe:	4602      	mov	r2, r0
 8013600:	4628      	mov	r0, r5
}
 8013602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_event_send(page, event, lv_event_get_data());
 8013606:	f7f0 beef 	b.w	80043e8 <lv_event_send>
}
 801360a:	bd38      	pop	{r3, r4, r5, pc}

0801360c <lv_obj_get_style_pad_top.constprop.14>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801360c:	2210      	movs	r2, #16
 801360e:	2100      	movs	r1, #0
 8013610:	f7f1 bf46 	b.w	80054a0 <_lv_obj_get_style_int>

08013614 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8013614:	3901      	subs	r1, #1
 8013616:	f100 0308 	add.w	r3, r0, #8
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 801361a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801361e:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 8013622:	4298      	cmp	r0, r3
 8013624:	d1f9      	bne.n	801361a <lv_area_copy+0x6>
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
}
 8013626:	4770      	bx	lr

08013628 <lv_page_design>:
{
 8013628:	b570      	push	{r4, r5, r6, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 801362a:	2a02      	cmp	r2, #2
{
 801362c:	b09c      	sub	sp, #112	; 0x70
 801362e:	4605      	mov	r5, r0
 8013630:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8013632:	d104      	bne.n	801363e <lv_page_design+0x16>
        return ancestor_design(page, clip_area, mode);
 8013634:	4b52      	ldr	r3, [pc, #328]	; (8013780 <lv_page_design+0x158>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	4798      	blx	r3
}
 801363a:	b01c      	add	sp, #112	; 0x70
 801363c:	bd70      	pop	{r4, r5, r6, pc}
    if(mode == LV_DESIGN_DRAW_MAIN) {
 801363e:	2a00      	cmp	r2, #0
 8013640:	d0f8      	beq.n	8013634 <lv_page_design+0xc>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8013642:	2a01      	cmp	r2, #1
 8013644:	d16f      	bne.n	8013726 <lv_page_design+0xfe>
        ancestor_design(page, clip_area, mode);
 8013646:	4b4e      	ldr	r3, [pc, #312]	; (8013780 <lv_page_design+0x158>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	4798      	blx	r3
        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 801364c:	4628      	mov	r0, r5
 801364e:	f7f2 fcf3 	bl	8006038 <lv_obj_get_ext_attr>
 8013652:	4604      	mov	r4, r0
        lv_area_copy(&sb_hor_area, &ext->scrlbar.hor_area);
 8013654:	f100 0110 	add.w	r1, r0, #16
 8013658:	a801      	add	r0, sp, #4
 801365a:	f7ff ffdb 	bl	8013614 <lv_area_copy>
        sb_hor_area.x1 += page->coords.x1;
 801365e:	8a2a      	ldrh	r2, [r5, #16]
 8013660:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        sb_hor_area.y1 += page->coords.y1;
 8013664:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        sb_hor_area.x1 += page->coords.x1;
 8013668:	4413      	add	r3, r2
 801366a:	f8ad 3004 	strh.w	r3, [sp, #4]
        sb_hor_area.y1 += page->coords.y1;
 801366e:	8a6b      	ldrh	r3, [r5, #18]
        lv_area_copy(&sb_ver_area, &ext->scrlbar.ver_area);
 8013670:	a803      	add	r0, sp, #12
        sb_hor_area.y1 += page->coords.y1;
 8013672:	4419      	add	r1, r3
 8013674:	f8ad 1006 	strh.w	r1, [sp, #6]
        sb_hor_area.x2 += page->coords.x1;
 8013678:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801367c:	440a      	add	r2, r1
 801367e:	f8ad 2008 	strh.w	r2, [sp, #8]
        sb_hor_area.y2 += page->coords.y1;
 8013682:	f8bd 200a 	ldrh.w	r2, [sp, #10]
        lv_area_copy(&sb_ver_area, &ext->scrlbar.ver_area);
 8013686:	f104 0118 	add.w	r1, r4, #24
        sb_hor_area.y2 += page->coords.y1;
 801368a:	4413      	add	r3, r2
 801368c:	f8ad 300a 	strh.w	r3, [sp, #10]
        lv_area_copy(&sb_ver_area, &ext->scrlbar.ver_area);
 8013690:	f7ff ffc0 	bl	8013614 <lv_area_copy>
        sb_ver_area.x1 += page->coords.x1;
 8013694:	8a2a      	ldrh	r2, [r5, #16]
 8013696:	f8bd 300c 	ldrh.w	r3, [sp, #12]
        sb_ver_area.y1 += page->coords.y1;
 801369a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
        sb_ver_area.x1 += page->coords.x1;
 801369e:	4413      	add	r3, r2
 80136a0:	f8ad 300c 	strh.w	r3, [sp, #12]
        sb_ver_area.y1 += page->coords.y1;
 80136a4:	8a6b      	ldrh	r3, [r5, #18]
 80136a6:	4419      	add	r1, r3
 80136a8:	f8ad 100e 	strh.w	r1, [sp, #14]
        sb_ver_area.x2 += page->coords.x1;
 80136ac:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80136b0:	440a      	add	r2, r1
 80136b2:	f8ad 2010 	strh.w	r2, [sp, #16]
        sb_ver_area.y2 += page->coords.y1;
 80136b6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80136ba:	4413      	add	r3, r2
 80136bc:	f8ad 3012 	strh.w	r3, [sp, #18]
        if((ext->scrlbar.hor_draw && _lv_area_is_on(&sb_hor_area, clip_area)) ||
 80136c0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80136c4:	07da      	lsls	r2, r3, #31
 80136c6:	d430      	bmi.n	801372a <lv_page_design+0x102>
           (ext->scrlbar.ver_draw && _lv_area_is_on(&sb_ver_area, clip_area))) {
 80136c8:	f894 3020 	ldrb.w	r3, [r4, #32]
        if((ext->scrlbar.hor_draw && _lv_area_is_on(&sb_hor_area, clip_area)) ||
 80136cc:	079b      	lsls	r3, r3, #30
 80136ce:	d504      	bpl.n	80136da <lv_page_design+0xb2>
           (ext->scrlbar.ver_draw && _lv_area_is_on(&sb_ver_area, clip_area))) {
 80136d0:	4631      	mov	r1, r6
 80136d2:	a803      	add	r0, sp, #12
 80136d4:	f7fb faca 	bl	800ec6c <_lv_area_is_on>
 80136d8:	bb68      	cbnz	r0, 8013736 <lv_page_design+0x10e>
            if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip ||
 80136da:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80136de:	f013 0f1e 	tst.w	r3, #30
 80136e2:	d020      	beq.n	8013726 <lv_page_design+0xfe>
                get_edge_flash_area(page, &flash_area, ext->edge_flash.state);
 80136e4:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 80136e8:	a905      	add	r1, sp, #20
 80136ea:	4628      	mov	r0, r5
 80136ec:	f7ff fece 	bl	801348c <get_edge_flash_area>
                lv_draw_rect_dsc_init(&edge_draw_dsc);
 80136f0:	a807      	add	r0, sp, #28
 80136f2:	f7f8 fc5d 	bl	800bfb0 <lv_draw_rect_dsc_init>
                lv_obj_init_draw_rect_dsc(page, LV_PAGE_PART_EDGE_FLASH, &edge_draw_dsc);
 80136f6:	aa07      	add	r2, sp, #28
 80136f8:	2102      	movs	r1, #2
 80136fa:	4628      	mov	r0, r5
 80136fc:	f7f2 fd9c 	bl	8006238 <lv_obj_init_draw_rect_dsc>
                edge_draw_dsc.radius  = LV_RADIUS_CIRCLE;
 8013700:	f647 73ff 	movw	r3, #32767	; 0x7fff
                uint32_t opa            = (edge_draw_dsc.bg_opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 8013704:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
                edge_draw_dsc.radius  = LV_RADIUS_CIRCLE;
 8013708:	f8ad 301c 	strh.w	r3, [sp, #28]
                uint32_t opa            = (edge_draw_dsc.bg_opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 801370c:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
                lv_draw_rect(&flash_area, clip_area, &edge_draw_dsc);
 8013710:	4631      	mov	r1, r6
                uint32_t opa            = (edge_draw_dsc.bg_opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 8013712:	4353      	muls	r3, r2
 8013714:	2228      	movs	r2, #40	; 0x28
 8013716:	fb93 f3f2 	sdiv	r3, r3, r2
                lv_draw_rect(&flash_area, clip_area, &edge_draw_dsc);
 801371a:	a805      	add	r0, sp, #20
 801371c:	aa07      	add	r2, sp, #28
                edge_draw_dsc.bg_opa    = opa;
 801371e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                lv_draw_rect(&flash_area, clip_area, &edge_draw_dsc);
 8013722:	f7f8 fc69 	bl	800bff8 <lv_draw_rect>
    return LV_DESIGN_RES_OK;
 8013726:	2000      	movs	r0, #0
 8013728:	e787      	b.n	801363a <lv_page_design+0x12>
        if((ext->scrlbar.hor_draw && _lv_area_is_on(&sb_hor_area, clip_area)) ||
 801372a:	4631      	mov	r1, r6
 801372c:	a801      	add	r0, sp, #4
 801372e:	f7fb fa9d 	bl	800ec6c <_lv_area_is_on>
 8013732:	2800      	cmp	r0, #0
 8013734:	d0c8      	beq.n	80136c8 <lv_page_design+0xa0>
            lv_draw_rect_dsc_init(&rect_dsc);
 8013736:	a807      	add	r0, sp, #28
 8013738:	f7f8 fc3a 	bl	800bfb0 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(page, LV_PAGE_PART_SCROLLBAR, &rect_dsc);
 801373c:	4628      	mov	r0, r5
 801373e:	aa07      	add	r2, sp, #28
 8013740:	2101      	movs	r1, #1
 8013742:	f7f2 fd79 	bl	8006238 <lv_obj_init_draw_rect_dsc>
            if(ext->scrlbar.hor_draw && (ext->scrlbar.mode & LV_SCROLLBAR_MODE_HIDE) == 0) {
 8013746:	f894 3020 	ldrb.w	r3, [r4, #32]
 801374a:	07d8      	lsls	r0, r3, #31
 801374c:	d40d      	bmi.n	801376a <lv_page_design+0x142>
            if(ext->scrlbar.ver_draw && (ext->scrlbar.mode & LV_SCROLLBAR_MODE_HIDE) == 0) {
 801374e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8013752:	079a      	lsls	r2, r3, #30
 8013754:	d5c1      	bpl.n	80136da <lv_page_design+0xb2>
 8013756:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801375a:	075b      	lsls	r3, r3, #29
 801375c:	d4bd      	bmi.n	80136da <lv_page_design+0xb2>
                lv_draw_rect(&sb_ver_area, clip_area, &rect_dsc);
 801375e:	aa07      	add	r2, sp, #28
 8013760:	4631      	mov	r1, r6
 8013762:	a803      	add	r0, sp, #12
 8013764:	f7f8 fc48 	bl	800bff8 <lv_draw_rect>
 8013768:	e7b7      	b.n	80136da <lv_page_design+0xb2>
            if(ext->scrlbar.hor_draw && (ext->scrlbar.mode & LV_SCROLLBAR_MODE_HIDE) == 0) {
 801376a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801376e:	0759      	lsls	r1, r3, #29
 8013770:	d4ed      	bmi.n	801374e <lv_page_design+0x126>
                lv_draw_rect(&sb_hor_area, clip_area, &rect_dsc);
 8013772:	aa07      	add	r2, sp, #28
 8013774:	4631      	mov	r1, r6
 8013776:	a801      	add	r0, sp, #4
 8013778:	f7f8 fc3e 	bl	800bff8 <lv_draw_rect>
 801377c:	e7e7      	b.n	801374e <lv_page_design+0x126>
 801377e:	bf00      	nop
 8013780:	200025b4 	.word	0x200025b4

08013784 <scrlbar_refresh>:
{
 8013784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013788:	b091      	sub	sp, #68	; 0x44
 801378a:	4604      	mov	r4, r0
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 801378c:	f7f2 fc54 	bl	8006038 <lv_obj_get_ext_attr>
    lv_obj_t * scrl          = ext->scrl;
 8013790:	6843      	ldr	r3, [r0, #4]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 8013792:	4605      	mov	r5, r0
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 8013794:	4618      	mov	r0, r3
    lv_obj_t * scrl          = ext->scrl;
 8013796:	9301      	str	r3, [sp, #4]
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 8013798:	f7f0 ff36 	bl	8004608 <lv_obj_get_width>
 801379c:	4607      	mov	r7, r0
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
 801379e:	9801      	ldr	r0, [sp, #4]
 80137a0:	f7f0 ff40 	bl	8004624 <lv_obj_get_height>
 80137a4:	9005      	str	r0, [sp, #20]
    lv_coord_t obj_w  = lv_obj_get_width(page);
 80137a6:	4620      	mov	r0, r4
 80137a8:	f7f0 ff2e 	bl	8004608 <lv_obj_get_width>
 80137ac:	4683      	mov	fp, r0
    lv_coord_t obj_h  = lv_obj_get_height(page);
 80137ae:	4620      	mov	r0, r4
 80137b0:	f7f0 ff38 	bl	8004624 <lv_obj_get_height>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 80137b4:	2203      	movs	r2, #3
 80137b6:	9000      	str	r0, [sp, #0]
 80137b8:	2101      	movs	r1, #1
 80137ba:	4620      	mov	r0, r4
 80137bc:	f7f1 fe70 	bl	80054a0 <_lv_obj_get_style_int>
    lv_style_int_t sb_right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_SCROLLBAR);
 80137c0:	2101      	movs	r1, #1
 80137c2:	9003      	str	r0, [sp, #12]
 80137c4:	4620      	mov	r0, r4
 80137c6:	f7ff feca 	bl	801355e <lv_obj_get_style_pad_right>
    lv_style_int_t sb_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_SCROLLBAR);
 80137ca:	2101      	movs	r1, #1
    lv_style_int_t sb_right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_SCROLLBAR);
 80137cc:	9006      	str	r0, [sp, #24]
    lv_style_int_t sb_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_SCROLLBAR);
 80137ce:	4620      	mov	r0, r4
 80137d0:	f7ff fec8 	bl	8013564 <lv_obj_get_style_pad_bottom>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80137d4:	2212      	movs	r2, #18
 80137d6:	9007      	str	r0, [sp, #28]
 80137d8:	2100      	movs	r1, #0
 80137da:	4620      	mov	r0, r4
 80137dc:	f7f1 fe60 	bl	80054a0 <_lv_obj_get_style_int>
    lv_style_int_t bg_right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_BG);
 80137e0:	2100      	movs	r1, #0
 80137e2:	9002      	str	r0, [sp, #8]
 80137e4:	4620      	mov	r0, r4
 80137e6:	f7ff feba 	bl	801355e <lv_obj_get_style_pad_right>
 80137ea:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_int_t bg_top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
 80137ec:	4620      	mov	r0, r4
 80137ee:	f7ff ff0d 	bl	801360c <lv_obj_get_style_pad_top.constprop.14>
    lv_style_int_t bg_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
 80137f2:	2100      	movs	r1, #0
    lv_style_int_t bg_top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
 80137f4:	900a      	str	r0, [sp, #40]	; 0x28
    lv_style_int_t bg_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
 80137f6:	4620      	mov	r0, r4
 80137f8:	f7ff feb4 	bl	8013564 <lv_obj_get_style_pad_bottom>
    if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_OFF) return;
 80137fc:	f895 3020 	ldrb.w	r3, [r5, #32]
    lv_style_int_t bg_bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
 8013800:	900b      	str	r0, [sp, #44]	; 0x2c
    if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_OFF) return;
 8013802:	f013 021c 	ands.w	r2, r3, #28
 8013806:	f000 80f6 	beq.w	80139f6 <scrlbar_refresh+0x272>
    if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_ON) {
 801380a:	2a04      	cmp	r2, #4
        ext->scrlbar.ver_draw = 1;
 801380c:	bf04      	itt	eq
 801380e:	f043 0303 	orreq.w	r3, r3, #3
 8013812:	f885 3020 	strbeq.w	r3, [r5, #32]
    if(ext->scrlbar.hor_draw != 0) {
 8013816:	f895 3020 	ldrb.w	r3, [r5, #32]
 801381a:	f105 0910 	add.w	r9, r5, #16
 801381e:	07d8      	lsls	r0, r3, #31
 8013820:	d51d      	bpl.n	801385e <scrlbar_refresh+0xda>
        lv_area_copy(&sb_area_tmp, &ext->scrlbar.hor_area);
 8013822:	4649      	mov	r1, r9
 8013824:	a80e      	add	r0, sp, #56	; 0x38
 8013826:	f7ff fef5 	bl	8013614 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801382a:	8a22      	ldrh	r2, [r4, #16]
 801382c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
 8013830:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x1 += page->coords.x1;
 8013834:	4413      	add	r3, r2
 8013836:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
 801383a:	8a63      	ldrh	r3, [r4, #18]
        lv_obj_invalidate_area(page, &sb_area_tmp);
 801383c:	4620      	mov	r0, r4
        sb_area_tmp.y1 += page->coords.y1;
 801383e:	4419      	add	r1, r3
 8013840:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x2 += page->coords.x1;
 8013844:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8013848:	440a      	add	r2, r1
 801384a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        sb_area_tmp.y2 += page->coords.y1;
 801384e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
 8013852:	a90e      	add	r1, sp, #56	; 0x38
        sb_area_tmp.y2 += page->coords.y1;
 8013854:	4413      	add	r3, r2
 8013856:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
 801385a:	f7f1 f821 	bl	80048a0 <lv_obj_invalidate_area>
    if(ext->scrlbar.ver_draw != 0) {
 801385e:	f895 3020 	ldrb.w	r3, [r5, #32]
 8013862:	f105 0818 	add.w	r8, r5, #24
 8013866:	0799      	lsls	r1, r3, #30
 8013868:	d51d      	bpl.n	80138a6 <scrlbar_refresh+0x122>
        lv_area_copy(&sb_area_tmp, &ext->scrlbar.ver_area);
 801386a:	4641      	mov	r1, r8
 801386c:	a80e      	add	r0, sp, #56	; 0x38
 801386e:	f7ff fed1 	bl	8013614 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8013872:	8a22      	ldrh	r2, [r4, #16]
 8013874:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
 8013878:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x1 += page->coords.x1;
 801387c:	4413      	add	r3, r2
 801387e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
 8013882:	8a63      	ldrh	r3, [r4, #18]
        lv_obj_invalidate_area(page, &sb_area_tmp);
 8013884:	4620      	mov	r0, r4
        sb_area_tmp.y1 += page->coords.y1;
 8013886:	4419      	add	r1, r3
 8013888:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x2 += page->coords.x1;
 801388c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8013890:	440a      	add	r2, r1
 8013892:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        sb_area_tmp.y2 += page->coords.y1;
 8013896:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
 801389a:	a90e      	add	r1, sp, #56	; 0x38
        sb_area_tmp.y2 += page->coords.y1;
 801389c:	4413      	add	r3, r2
 801389e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
 80138a2:	f7f0 fffd 	bl	80048a0 <lv_obj_invalidate_area>
    lv_coord_t sb_hor_pad = LV_MATH_MAX(sb_width, sb_right);
 80138a6:	9b06      	ldr	r3, [sp, #24]
 80138a8:	9a03      	ldr	r2, [sp, #12]
 80138aa:	4293      	cmp	r3, r2
 80138ac:	bfb8      	it	lt
 80138ae:	4613      	movlt	r3, r2
 80138b0:	b21e      	sxth	r6, r3
 80138b2:	fa1f f38b 	uxth.w	r3, fp
 80138b6:	9304      	str	r3, [sp, #16]
 80138b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80138bc:	b2b2      	uxth	r2, r6
 80138be:	9308      	str	r3, [sp, #32]
 80138c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80138c4:	930c      	str	r3, [sp, #48]	; 0x30
 80138c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80138c8:	9b08      	ldr	r3, [sp, #32]
 80138ca:	eba3 0a01 	sub.w	sl, r3, r1
 80138ce:	9b07      	ldr	r3, [sp, #28]
    if(scrl_w <= obj_w - bg_left - bg_right) {
 80138d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138d2:	ebaa 0a03 	sub.w	sl, sl, r3
 80138d6:	9b02      	ldr	r3, [sp, #8]
 80138d8:	fa0f fa8a 	sxth.w	sl, sl
 80138dc:	ebab 0303 	sub.w	r3, fp, r3
 80138e0:	1a5b      	subs	r3, r3, r1
 80138e2:	429f      	cmp	r7, r3
 80138e4:	f300 808a 	bgt.w	80139fc <scrlbar_refresh+0x278>
        lv_area_set_width(&ext->scrlbar.hor_area, obj_w - 2 * sb_hor_pad);
 80138e8:	9b04      	ldr	r3, [sp, #16]
 80138ea:	4648      	mov	r0, r9
 80138ec:	eba3 0142 	sub.w	r1, r3, r2, lsl #1
 80138f0:	b209      	sxth	r1, r1
 80138f2:	f7fb f8b6 	bl	800ea62 <lv_area_set_width>
        _lv_area_set_pos(&ext->scrlbar.hor_area, sb_hor_pad,
 80138f6:	4652      	mov	r2, sl
 80138f8:	4631      	mov	r1, r6
 80138fa:	4648      	mov	r0, r9
 80138fc:	f7fb f8bb 	bl	800ea76 <_lv_area_set_pos>
        if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_AUTO ||
 8013900:	f895 3020 	ldrb.w	r3, [r5, #32]
 8013904:	f003 0218 	and.w	r2, r3, #24
 8013908:	2a08      	cmp	r2, #8
 801390a:	d103      	bne.n	8013914 <scrlbar_refresh+0x190>
           ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) ext->scrlbar.hor_draw = 0;
 801390c:	f36f 0300 	bfc	r3, #0, #1
           ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) ext->scrlbar.hor_draw = 1;
 8013910:	f885 3020 	strb.w	r3, [r5, #32]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(sb_width, sb_bottom);
 8013914:	9b07      	ldr	r3, [sp, #28]
 8013916:	9a03      	ldr	r2, [sp, #12]
 8013918:	4293      	cmp	r3, r2
 801391a:	bfb8      	it	lt
 801391c:	4613      	movlt	r3, r2
 801391e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013920:	b21e      	sxth	r6, r3
 8013922:	9b04      	ldr	r3, [sp, #16]
 8013924:	fa1f fa86 	uxth.w	sl, r6
 8013928:	1a9f      	subs	r7, r3, r2
 801392a:	9b06      	ldr	r3, [sp, #24]
    if(scrl_h <= obj_h - bg_top - bg_bottom) {
 801392c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801392e:	1aff      	subs	r7, r7, r3
 8013930:	9b00      	ldr	r3, [sp, #0]
 8013932:	b23f      	sxth	r7, r7
 8013934:	1a9b      	subs	r3, r3, r2
 8013936:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013938:	1a9b      	subs	r3, r3, r2
 801393a:	9a05      	ldr	r2, [sp, #20]
 801393c:	429a      	cmp	r2, r3
 801393e:	f300 8091 	bgt.w	8013a64 <scrlbar_refresh+0x2e0>
        lv_area_set_height(&ext->scrlbar.ver_area, obj_h - 2 * sb_ver_pad);
 8013942:	9b08      	ldr	r3, [sp, #32]
 8013944:	4640      	mov	r0, r8
 8013946:	eba3 014a 	sub.w	r1, r3, sl, lsl #1
 801394a:	b209      	sxth	r1, r1
 801394c:	f7fb f88e 	bl	800ea6c <lv_area_set_height>
        _lv_area_set_pos(&ext->scrlbar.ver_area,
 8013950:	4632      	mov	r2, r6
 8013952:	4639      	mov	r1, r7
 8013954:	4640      	mov	r0, r8
 8013956:	f7fb f88e 	bl	800ea76 <_lv_area_set_pos>
        if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_AUTO ||
 801395a:	f895 3020 	ldrb.w	r3, [r5, #32]
 801395e:	f003 0218 	and.w	r2, r3, #24
 8013962:	2a08      	cmp	r2, #8
 8013964:	d103      	bne.n	801396e <scrlbar_refresh+0x1ea>
           ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) ext->scrlbar.ver_draw = 0;
 8013966:	f36f 0341 	bfc	r3, #1, #1
           ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) ext->scrlbar.ver_draw = 1;
 801396a:	f885 3020 	strb.w	r3, [r5, #32]
    if(ext->scrlbar.hor_draw != 0) {
 801396e:	f895 3020 	ldrb.w	r3, [r5, #32]
 8013972:	07da      	lsls	r2, r3, #31
 8013974:	d51d      	bpl.n	80139b2 <scrlbar_refresh+0x22e>
        lv_area_copy(&sb_area_tmp, &ext->scrlbar.hor_area);
 8013976:	4649      	mov	r1, r9
 8013978:	a80e      	add	r0, sp, #56	; 0x38
 801397a:	f7ff fe4b 	bl	8013614 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 801397e:	8a22      	ldrh	r2, [r4, #16]
 8013980:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
 8013984:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x1 += page->coords.x1;
 8013988:	4413      	add	r3, r2
 801398a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
 801398e:	8a63      	ldrh	r3, [r4, #18]
        lv_obj_invalidate_area(page, &sb_area_tmp);
 8013990:	4620      	mov	r0, r4
        sb_area_tmp.y1 += page->coords.y1;
 8013992:	4419      	add	r1, r3
 8013994:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x2 += page->coords.x1;
 8013998:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801399c:	440a      	add	r2, r1
 801399e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        sb_area_tmp.y2 += page->coords.y1;
 80139a2:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
 80139a6:	a90e      	add	r1, sp, #56	; 0x38
        sb_area_tmp.y2 += page->coords.y1;
 80139a8:	4413      	add	r3, r2
 80139aa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
 80139ae:	f7f0 ff77 	bl	80048a0 <lv_obj_invalidate_area>
    if(ext->scrlbar.ver_draw != 0) {
 80139b2:	f895 3020 	ldrb.w	r3, [r5, #32]
 80139b6:	079b      	lsls	r3, r3, #30
 80139b8:	d51d      	bpl.n	80139f6 <scrlbar_refresh+0x272>
        lv_area_copy(&sb_area_tmp, &ext->scrlbar.ver_area);
 80139ba:	4641      	mov	r1, r8
 80139bc:	a80e      	add	r0, sp, #56	; 0x38
 80139be:	f7ff fe29 	bl	8013614 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 80139c2:	8a22      	ldrh	r2, [r4, #16]
 80139c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
 80139c8:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x1 += page->coords.x1;
 80139cc:	4413      	add	r3, r2
 80139ce:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        sb_area_tmp.y1 += page->coords.y1;
 80139d2:	8a63      	ldrh	r3, [r4, #18]
        lv_obj_invalidate_area(page, &sb_area_tmp);
 80139d4:	4620      	mov	r0, r4
        sb_area_tmp.y1 += page->coords.y1;
 80139d6:	4419      	add	r1, r3
 80139d8:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
        sb_area_tmp.x2 += page->coords.x1;
 80139dc:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80139e0:	440a      	add	r2, r1
 80139e2:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        sb_area_tmp.y2 += page->coords.y1;
 80139e6:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
 80139ea:	a90e      	add	r1, sp, #56	; 0x38
        sb_area_tmp.y2 += page->coords.y1;
 80139ec:	4413      	add	r3, r2
 80139ee:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        lv_obj_invalidate_area(page, &sb_area_tmp);
 80139f2:	f7f0 ff55 	bl	80048a0 <lv_obj_invalidate_area>
}
 80139f6:	b011      	add	sp, #68	; 0x44
 80139f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + bg_left + bg_right);
 80139fc:	0073      	lsls	r3, r6, #1
 80139fe:	ebab 0603 	sub.w	r6, fp, r3
 8013a02:	920d      	str	r2, [sp, #52]	; 0x34
 8013a04:	9a02      	ldr	r2, [sp, #8]
 8013a06:	fb0b f606 	mul.w	r6, fp, r6
 8013a0a:	4417      	add	r7, r2
 8013a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
        lv_area_set_width(&ext->scrlbar.hor_area, size_tmp);
 8013a0e:	4648      	mov	r0, r9
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + bg_left + bg_right);
 8013a10:	4417      	add	r7, r2
 8013a12:	fb96 f6f7 	sdiv	r6, r6, r7
        size_tmp =
 8013a16:	b236      	sxth	r6, r6
 8013a18:	2e14      	cmp	r6, #20
 8013a1a:	bfb8      	it	lt
 8013a1c:	2614      	movlt	r6, #20
        lv_area_set_width(&ext->scrlbar.hor_area, size_tmp);
 8013a1e:	4631      	mov	r1, r6
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + bg_left + bg_right);
 8013a20:	9309      	str	r3, [sp, #36]	; 0x24
        lv_area_set_width(&ext->scrlbar.hor_area, size_tmp);
 8013a22:	f7fb f81e 	bl	800ea62 <lv_area_set_width>
                         (-(lv_obj_get_x(scrl) - bg_left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8013a26:	9801      	ldr	r0, [sp, #4]
 8013a28:	f7f0 fdba 	bl	80045a0 <lv_obj_get_x>
 8013a2c:	9a02      	ldr	r2, [sp, #8]
 8013a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a30:	ebab 0606 	sub.w	r6, fp, r6
 8013a34:	1a10      	subs	r0, r2, r0
 8013a36:	1af3      	subs	r3, r6, r3
 8013a38:	4343      	muls	r3, r0
                         (scrl_w + bg_left + bg_right - obj_w),
 8013a3a:	eba7 070b 	sub.w	r7, r7, fp
                         (-(lv_obj_get_x(scrl) - bg_left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8013a3e:	fb93 f7f7 	sdiv	r7, r3, r7
                         sb_hor_pad +
 8013a42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        _lv_area_set_pos(&ext->scrlbar.hor_area,
 8013a44:	4648      	mov	r0, r9
                         sb_hor_pad +
 8013a46:	19d1      	adds	r1, r2, r7
        _lv_area_set_pos(&ext->scrlbar.hor_area,
 8013a48:	b209      	sxth	r1, r1
 8013a4a:	4652      	mov	r2, sl
 8013a4c:	f7fb f813 	bl	800ea76 <_lv_area_set_pos>
        if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_AUTO ||
 8013a50:	f895 3020 	ldrb.w	r3, [r5, #32]
 8013a54:	f003 0218 	and.w	r2, r3, #24
 8013a58:	2a08      	cmp	r2, #8
 8013a5a:	f47f af5b 	bne.w	8013914 <scrlbar_refresh+0x190>
           ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) ext->scrlbar.hor_draw = 1;
 8013a5e:	f043 0301 	orr.w	r3, r3, #1
 8013a62:	e755      	b.n	8013910 <scrlbar_refresh+0x18c>
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + bg_top + bg_bottom);
 8013a64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a66:	9b05      	ldr	r3, [sp, #20]
 8013a68:	0072      	lsls	r2, r6, #1
 8013a6a:	440b      	add	r3, r1
 8013a6c:	469b      	mov	fp, r3
 8013a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        lv_area_set_height(&ext->scrlbar.ver_area, size_tmp);
 8013a70:	4640      	mov	r0, r8
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + bg_top + bg_bottom);
 8013a72:	449b      	add	fp, r3
 8013a74:	9b00      	ldr	r3, [sp, #0]
 8013a76:	9203      	str	r2, [sp, #12]
 8013a78:	1a9e      	subs	r6, r3, r2
 8013a7a:	435e      	muls	r6, r3
 8013a7c:	fb96 f6fb 	sdiv	r6, r6, fp
        size_tmp =
 8013a80:	b236      	sxth	r6, r6
 8013a82:	2e14      	cmp	r6, #20
 8013a84:	bfb8      	it	lt
 8013a86:	2614      	movlt	r6, #20
        lv_area_set_height(&ext->scrlbar.ver_area, size_tmp);
 8013a88:	4631      	mov	r1, r6
 8013a8a:	f7fa ffef 	bl	800ea6c <lv_area_set_height>
                         sb_ver_pad + (-(lv_obj_get_y(scrl) - bg_left) *
 8013a8e:	9801      	ldr	r0, [sp, #4]
 8013a90:	f7f0 fda0 	bl	80045d4 <lv_obj_get_y>
                                       (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8013a94:	9b00      	ldr	r3, [sp, #0]
 8013a96:	9a03      	ldr	r2, [sp, #12]
 8013a98:	1b9e      	subs	r6, r3, r6
                         sb_ver_pad + (-(lv_obj_get_y(scrl) - bg_left) *
 8013a9a:	9b02      	ldr	r3, [sp, #8]
                                       (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8013a9c:	1ab6      	subs	r6, r6, r2
                         sb_ver_pad + (-(lv_obj_get_y(scrl) - bg_left) *
 8013a9e:	1a1a      	subs	r2, r3, r0
 8013aa0:	4372      	muls	r2, r6
                         (scrl_h + bg_top + bg_bottom - obj_h));
 8013aa2:	9b00      	ldr	r3, [sp, #0]
        _lv_area_set_pos(&ext->scrlbar.ver_area,
 8013aa4:	4639      	mov	r1, r7
                         (scrl_h + bg_top + bg_bottom - obj_h));
 8013aa6:	ebab 0b03 	sub.w	fp, fp, r3
                                       (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8013aaa:	fb92 f2fb 	sdiv	r2, r2, fp
                         sb_ver_pad + (-(lv_obj_get_y(scrl) - bg_left) *
 8013aae:	4452      	add	r2, sl
        _lv_area_set_pos(&ext->scrlbar.ver_area,
 8013ab0:	b212      	sxth	r2, r2
 8013ab2:	4640      	mov	r0, r8
 8013ab4:	f7fa ffdf 	bl	800ea76 <_lv_area_set_pos>
        if(ext->scrlbar.mode == LV_SCROLLBAR_MODE_AUTO ||
 8013ab8:	f895 3020 	ldrb.w	r3, [r5, #32]
 8013abc:	f003 0218 	and.w	r2, r3, #24
 8013ac0:	2a08      	cmp	r2, #8
 8013ac2:	f47f af54 	bne.w	801396e <scrlbar_refresh+0x1ea>
           ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) ext->scrlbar.ver_draw = 1;
 8013ac6:	f043 0302 	orr.w	r3, r3, #2
 8013aca:	e74e      	b.n	801396a <scrlbar_refresh+0x1e6>

08013acc <lv_page_set_scrollbar_mode>:
{
 8013acc:	b538      	push	{r3, r4, r5, lr}
 8013ace:	4604      	mov	r4, r0
 8013ad0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(page, LV_OBJX_NAME);
 8013ad2:	f7fb fa79 	bl	800efc8 <lv_debug_check_null>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	b920      	cbnz	r0, 8013ae4 <lv_page_set_scrollbar_mode+0x18>
 8013ada:	4622      	mov	r2, r4
 8013adc:	4819      	ldr	r0, [pc, #100]	; (8013b44 <lv_page_set_scrollbar_mode+0x78>)
 8013ade:	f7fb fa77 	bl	800efd0 <lv_debug_log_error>
 8013ae2:	e7fe      	b.n	8013ae2 <lv_page_set_scrollbar_mode+0x16>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	f7f2 faa7 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext->scrlbar.mode == sb_mode) return;
 8013aea:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013aee:	f3c3 0282 	ubfx	r2, r3, #2, #3
 8013af2:	42aa      	cmp	r2, r5
 8013af4:	d025      	beq.n	8013b42 <lv_page_set_scrollbar_mode+0x76>
    if(sb_mode == LV_SCROLLBAR_MODE_HIDE)
 8013af6:	2d04      	cmp	r5, #4
 8013af8:	d115      	bne.n	8013b26 <lv_page_set_scrollbar_mode+0x5a>
        ext->scrlbar.mode |= LV_SCROLLBAR_MODE_HIDE; /*Set the hidden flag*/
 8013afa:	f042 0204 	orr.w	r2, r2, #4
        ext->scrlbar.mode &= (~LV_SCROLLBAR_MODE_HIDE); /*Clear the hidden flag*/
 8013afe:	f362 0384 	bfi	r3, r2, #2, #3
        ext->scrlbar.mode = sb_mode;
 8013b02:	f880 3020 	strb.w	r3, [r0, #32]
    ext->scrlbar.hor_draw = 0;
 8013b06:	f890 3020 	ldrb.w	r3, [r0, #32]
    ext->scrlbar.ver_draw = 0;
 8013b0a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8013b0e:	f36f 0341 	bfc	r3, #1, #1
 8013b12:	f880 3020 	strb.w	r3, [r0, #32]
    scrlbar_refresh(page);
 8013b16:	4620      	mov	r0, r4
 8013b18:	f7ff fe34 	bl	8013784 <scrlbar_refresh>
    lv_obj_invalidate(page);
 8013b1c:	4620      	mov	r0, r4
}
 8013b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(page);
 8013b22:	f7f0 bedd 	b.w	80048e0 <lv_obj_invalidate>
    else if(sb_mode == LV_SCROLLBAR_MODE_UNHIDE)
 8013b26:	2d08      	cmp	r5, #8
 8013b28:	d102      	bne.n	8013b30 <lv_page_set_scrollbar_mode+0x64>
        ext->scrlbar.mode &= (~LV_SCROLLBAR_MODE_HIDE); /*Clear the hidden flag*/
 8013b2a:	f002 0203 	and.w	r2, r2, #3
 8013b2e:	e7e6      	b.n	8013afe <lv_page_set_scrollbar_mode+0x32>
        if(ext->scrlbar.mode & LV_SCROLLBAR_MODE_HIDE) sb_mode |= LV_SCROLLBAR_MODE_HIDE;
 8013b30:	0753      	lsls	r3, r2, #29
        ext->scrlbar.mode = sb_mode;
 8013b32:	f890 3020 	ldrb.w	r3, [r0, #32]
        if(ext->scrlbar.mode & LV_SCROLLBAR_MODE_HIDE) sb_mode |= LV_SCROLLBAR_MODE_HIDE;
 8013b36:	bf48      	it	mi
 8013b38:	f045 0504 	orrmi.w	r5, r5, #4
        ext->scrlbar.mode = sb_mode;
 8013b3c:	f365 0384 	bfi	r3, r5, #2, #3
 8013b40:	e7df      	b.n	8013b02 <lv_page_set_scrollbar_mode+0x36>
}
 8013b42:	bd38      	pop	{r3, r4, r5, pc}
 8013b44:	080158e8 	.word	0x080158e8

08013b48 <lv_page_create>:
{
 8013b48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b4c:	4689      	mov	r9, r1
    lv_obj_t * page = lv_cont_create(par, copy);
 8013b4e:	f7fd ffab 	bl	8011aa8 <lv_cont_create>
 8013b52:	4605      	mov	r5, r0
    LV_ASSERT_MEM(page);
 8013b54:	f7fb fa38 	bl	800efc8 <lv_debug_check_null>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	b920      	cbnz	r0, 8013b66 <lv_page_create+0x1e>
 8013b5c:	462a      	mov	r2, r5
 8013b5e:	485b      	ldr	r0, [pc, #364]	; (8013ccc <lv_page_create+0x184>)
 8013b60:	f7fb fa36 	bl	800efd0 <lv_debug_log_error>
 8013b64:	e7fe      	b.n	8013b64 <lv_page_create+0x1c>
    if(page == NULL) return NULL;
 8013b66:	b30d      	cbz	r5, 8013bac <lv_page_create+0x64>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(page);
 8013b68:	4c59      	ldr	r4, [pc, #356]	; (8013cd0 <lv_page_create+0x188>)
 8013b6a:	6823      	ldr	r3, [r4, #0]
 8013b6c:	b91b      	cbnz	r3, 8013b76 <lv_page_create+0x2e>
 8013b6e:	4628      	mov	r0, r5
 8013b70:	f7f2 fa42 	bl	8005ff8 <lv_obj_get_signal_cb>
 8013b74:	6020      	str	r0, [r4, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(page);
 8013b76:	4c57      	ldr	r4, [pc, #348]	; (8013cd4 <lv_page_create+0x18c>)
 8013b78:	6823      	ldr	r3, [r4, #0]
 8013b7a:	b91b      	cbnz	r3, 8013b84 <lv_page_create+0x3c>
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	f7f2 fa4b 	bl	8006018 <lv_obj_get_design_cb>
 8013b82:	6020      	str	r0, [r4, #0]
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(page, sizeof(lv_page_ext_t));
 8013b84:	2140      	movs	r1, #64	; 0x40
 8013b86:	4628      	mov	r0, r5
 8013b88:	f7f0 fc74 	bl	8004474 <lv_obj_allocate_ext_attr>
 8013b8c:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
 8013b8e:	f7fb fa1b 	bl	800efc8 <lv_debug_check_null>
 8013b92:	4603      	mov	r3, r0
 8013b94:	b920      	cbnz	r0, 8013ba0 <lv_page_create+0x58>
 8013b96:	4622      	mov	r2, r4
 8013b98:	484c      	ldr	r0, [pc, #304]	; (8013ccc <lv_page_create+0x184>)
 8013b9a:	f7fb fa19 	bl	800efd0 <lv_debug_log_error>
 8013b9e:	e7fe      	b.n	8013b9e <lv_page_create+0x56>
 8013ba0:	2600      	movs	r6, #0
    if(ext == NULL) {
 8013ba2:	b93c      	cbnz	r4, 8013bb4 <lv_page_create+0x6c>
        lv_obj_del(page);
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	f7f2 fac9 	bl	800613c <lv_obj_del>
        return NULL;
 8013baa:	4625      	mov	r5, r4
}
 8013bac:	4628      	mov	r0, r5
 8013bae:	b002      	add	sp, #8
 8013bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ext->scrlbar.mode     = LV_SCROLLBAR_MODE_AUTO;
 8013bb4:	f04f 0a03 	mov.w	sl, #3
    lv_style_list_init(&ext->scrlbar.style);
 8013bb8:	f104 0808 	add.w	r8, r4, #8
 8013bbc:	4640      	mov	r0, r8
    ext->scrl        = NULL;
 8013bbe:	6066      	str	r6, [r4, #4]
    lv_style_list_init(&ext->scrlbar.style);
 8013bc0:	f7f4 f97d 	bl	8007ebe <lv_style_list_init>
    ext->scrlbar.hor_draw = 0;
 8013bc4:	f894 2020 	ldrb.w	r2, [r4, #32]
    lv_style_list_init(&ext->edge_flash.style);
 8013bc8:	f104 0728 	add.w	r7, r4, #40	; 0x28
    ext->scrlbar.mode     = LV_SCROLLBAR_MODE_AUTO;
 8013bcc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8013bd0:	f36a 0284 	bfi	r2, sl, #2, #3
 8013bd4:	f884 2020 	strb.w	r2, [r4, #32]
    lv_style_list_init(&ext->edge_flash.style);
 8013bd8:	4638      	mov	r0, r7
 8013bda:	f7f4 f970 	bl	8007ebe <lv_style_list_init>
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 8013bde:	f44f 73c8 	mov.w	r3, #400	; 0x190
    ext->edge_flash.enabled   = 0;
 8013be2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 8013be6:	86a3      	strh	r3, [r4, #52]	; 0x34
    ext->scroll_prop    = 0;
 8013be8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    ext->edge_flash.right_ip  = 0;
 8013bec:	f002 02e8 	and.w	r2, r2, #232	; 0xe8
 8013bf0:	f366 02c3 	bfi	r2, r6, #3, #1
    ext->scroll_prop    = 0;
 8013bf4:	f366 0300 	bfi	r3, r6, #0, #1
    ext->edge_flash.right_ip  = 0;
 8013bf8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    ext->edge_flash.state     = 0;
 8013bfc:	84a6      	strh	r6, [r4, #36]	; 0x24
    ext->scroll_prop    = 0;
 8013bfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    ext->scroll_prop_obj = NULL;
 8013c02:	63a6      	str	r6, [r4, #56]	; 0x38
    if(copy == NULL) {
 8013c04:	f1b9 0f00 	cmp.w	r9, #0
 8013c08:	d13a      	bne.n	8013c80 <lv_page_create+0x138>
        ext->scrl = lv_cont_create(page, NULL);
 8013c0a:	4649      	mov	r1, r9
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	f7fd ff4b 	bl	8011aa8 <lv_cont_create>
        lv_obj_set_focus_parent(ext->scrl, true);
 8013c12:	2101      	movs	r1, #1
        ext->scrl = lv_cont_create(page, NULL);
 8013c14:	6060      	str	r0, [r4, #4]
        lv_obj_set_focus_parent(ext->scrl, true);
 8013c16:	f7f3 fbed 	bl	80073f4 <lv_obj_set_focus_parent>
        lv_obj_set_drag(ext->scrl, true);
 8013c1a:	2101      	movs	r1, #1
 8013c1c:	6860      	ldr	r0, [r4, #4]
 8013c1e:	f7f0 fb15 	bl	800424c <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 8013c22:	2101      	movs	r1, #1
 8013c24:	6860      	ldr	r0, [r4, #4]
 8013c26:	f7f0 fb27 	bl	8004278 <lv_obj_set_drag_throw>
        lv_obj_add_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 8013c2a:	2112      	movs	r1, #18
 8013c2c:	6860      	ldr	r0, [r4, #4]
 8013c2e:	f7f0 fb4f 	bl	80042d0 <lv_obj_add_protect>
 * @param cont pointer to a container object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
 8013c32:	f8cd a000 	str.w	sl, [sp]
 8013c36:	4653      	mov	r3, sl
 8013c38:	4652      	mov	r2, sl
 8013c3a:	4651      	mov	r1, sl
 8013c3c:	6860      	ldr	r0, [r4, #4]
 8013c3e:	f7fd ffd3 	bl	8011be8 <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
 8013c42:	4925      	ldr	r1, [pc, #148]	; (8013cd8 <lv_page_create+0x190>)
 8013c44:	6860      	ldr	r0, [r4, #4]
 8013c46:	f7f0 fb6d 	bl	8004324 <lv_obj_set_event_cb>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8013c4a:	4924      	ldr	r1, [pc, #144]	; (8013cdc <lv_page_create+0x194>)
 8013c4c:	6860      	ldr	r0, [r4, #4]
 8013c4e:	f7f0 fbeb 	bl	8004428 <lv_obj_set_signal_cb>
        lv_obj_set_signal_cb(page, lv_page_signal);
 8013c52:	4923      	ldr	r1, [pc, #140]	; (8013ce0 <lv_page_create+0x198>)
 8013c54:	4628      	mov	r0, r5
 8013c56:	f7f0 fbe7 	bl	8004428 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(page, lv_page_design);
 8013c5a:	4922      	ldr	r1, [pc, #136]	; (8013ce4 <lv_page_create+0x19c>)
 8013c5c:	4628      	mov	r0, r5
 8013c5e:	f7f0 fbf9 	bl	8004454 <lv_obj_set_design_cb>
        lv_page_set_scrollbar_mode(page, ext->scrlbar.mode);
 8013c62:	f894 1020 	ldrb.w	r1, [r4, #32]
 8013c66:	4628      	mov	r0, r5
 8013c68:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8013c6c:	f7ff ff2e 	bl	8013acc <lv_page_set_scrollbar_mode>
        lv_theme_apply(page, LV_THEME_PAGE);
 8013c70:	2109      	movs	r1, #9
 8013c72:	4628      	mov	r0, r5
 8013c74:	f7fc ff58 	bl	8010b28 <lv_theme_apply>
    scrlbar_refresh(page);
 8013c78:	4628      	mov	r0, r5
 8013c7a:	f7ff fd83 	bl	8013784 <scrlbar_refresh>
    return page;
 8013c7e:	e795      	b.n	8013bac <lv_page_create+0x64>
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8013c80:	4648      	mov	r0, r9
 8013c82:	f7f2 f9d9 	bl	8006038 <lv_obj_get_ext_attr>
 8013c86:	4606      	mov	r6, r0
        ext->scrl                = lv_cont_create(page, copy_ext->scrl);
 8013c88:	6841      	ldr	r1, [r0, #4]
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	f7fd ff0c 	bl	8011aa8 <lv_cont_create>
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8013c90:	4912      	ldr	r1, [pc, #72]	; (8013cdc <lv_page_create+0x194>)
        ext->scrl                = lv_cont_create(page, copy_ext->scrl);
 8013c92:	6060      	str	r0, [r4, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8013c94:	f7f0 fbc8 	bl	8004428 <lv_obj_set_signal_cb>
        lv_style_list_copy(&ext->scrlbar.style, &copy_ext->scrlbar.style);
 8013c98:	f106 0108 	add.w	r1, r6, #8
 8013c9c:	4640      	mov	r0, r8
 8013c9e:	f7f4 fbf8 	bl	8008492 <lv_style_list_copy>
        lv_style_list_copy(&ext->edge_flash.style, &copy_ext->edge_flash.style);
 8013ca2:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8013ca6:	4638      	mov	r0, r7
 8013ca8:	f7f4 fbf3 	bl	8008492 <lv_style_list_copy>
        lv_obj_set_signal_cb(page, lv_page_signal);
 8013cac:	4628      	mov	r0, r5
 8013cae:	490c      	ldr	r1, [pc, #48]	; (8013ce0 <lv_page_create+0x198>)
 8013cb0:	f7f0 fbba 	bl	8004428 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(page, lv_page_design);
 8013cb4:	4628      	mov	r0, r5
 8013cb6:	490b      	ldr	r1, [pc, #44]	; (8013ce4 <lv_page_create+0x19c>)
 8013cb8:	f7f0 fbcc 	bl	8004454 <lv_obj_set_design_cb>
        lv_page_set_scrollbar_mode(page, copy_ext->scrlbar.mode);
 8013cbc:	f896 1020 	ldrb.w	r1, [r6, #32]
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8013cc6:	f7ff ff01 	bl	8013acc <lv_page_set_scrollbar_mode>
 8013cca:	e7d5      	b.n	8013c78 <lv_page_create+0x130>
 8013ccc:	08015994 	.word	0x08015994
 8013cd0:	200025b8 	.word	0x200025b8
 8013cd4:	200025b4 	.word	0x200025b4
 8013cd8:	080135eb 	.word	0x080135eb
 8013cdc:	08014375 	.word	0x08014375
 8013ce0:	08013e59 	.word	0x08013e59
 8013ce4:	08013629 	.word	0x08013629

08013ce8 <lv_page_get_scrollable>:
{
 8013ce8:	b510      	push	{r4, lr}
 8013cea:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(page, LV_OBJX_NAME);
 8013cec:	f7fb f96c 	bl	800efc8 <lv_debug_check_null>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	b920      	cbnz	r0, 8013cfe <lv_page_get_scrollable+0x16>
 8013cf4:	4622      	mov	r2, r4
 8013cf6:	4804      	ldr	r0, [pc, #16]	; (8013d08 <lv_page_get_scrollable+0x20>)
 8013cf8:	f7fb f96a 	bl	800efd0 <lv_debug_log_error>
 8013cfc:	e7fe      	b.n	8013cfc <lv_page_get_scrollable+0x14>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013cfe:	4620      	mov	r0, r4
 8013d00:	f7f2 f99a 	bl	8006038 <lv_obj_get_ext_attr>
}
 8013d04:	6840      	ldr	r0, [r0, #4]
 8013d06:	bd10      	pop	{r4, pc}
 8013d08:	080158e8 	.word	0x080158e8

08013d0c <lv_page_get_anim_time>:
{
 8013d0c:	b510      	push	{r4, lr}
 8013d0e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(page, LV_OBJX_NAME);
 8013d10:	f7fb f95a 	bl	800efc8 <lv_debug_check_null>
 8013d14:	4603      	mov	r3, r0
 8013d16:	b920      	cbnz	r0, 8013d22 <lv_page_get_anim_time+0x16>
 8013d18:	4622      	mov	r2, r4
 8013d1a:	4804      	ldr	r0, [pc, #16]	; (8013d2c <lv_page_get_anim_time+0x20>)
 8013d1c:	f7fb f958 	bl	800efd0 <lv_debug_log_error>
 8013d20:	e7fe      	b.n	8013d20 <lv_page_get_anim_time+0x14>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013d22:	4620      	mov	r0, r4
 8013d24:	f7f2 f988 	bl	8006038 <lv_obj_get_ext_attr>
}
 8013d28:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8013d2a:	bd10      	pop	{r4, pc}
 8013d2c:	080158e8 	.word	0x080158e8

08013d30 <lv_page_on_edge>:
{
 8013d30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013d34:	4605      	mov	r5, r0
 8013d36:	460c      	mov	r4, r1
    lv_obj_t * scrl               = lv_page_get_scrollable(page);
 8013d38:	f7ff ffd6 	bl	8013ce8 <lv_page_get_scrollable>
    lv_obj_get_coords(scrl, &scrl_coords);
 8013d3c:	a902      	add	r1, sp, #8
 8013d3e:	f7f0 fc19 	bl	8004574 <lv_obj_get_coords>
    lv_obj_get_coords(page, &page_coords);
 8013d42:	4628      	mov	r0, r5
 8013d44:	4669      	mov	r1, sp
 8013d46:	f7f0 fc15 	bl	8004574 <lv_obj_get_coords>
 8013d4a:	2212      	movs	r2, #18
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	4628      	mov	r0, r5
 8013d50:	f7f1 fba6 	bl	80054a0 <_lv_obj_get_style_int>
    lv_style_int_t right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_BG);
 8013d54:	2100      	movs	r1, #0
 8013d56:	4607      	mov	r7, r0
 8013d58:	4628      	mov	r0, r5
 8013d5a:	f7ff fc00 	bl	801355e <lv_obj_get_style_pad_right>
 8013d5e:	4606      	mov	r6, r0
    lv_style_int_t top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
 8013d60:	4628      	mov	r0, r5
 8013d62:	f7ff fc53 	bl	801360c <lv_obj_get_style_pad_top.constprop.14>
    lv_style_int_t bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
 8013d66:	2100      	movs	r1, #0
    lv_style_int_t top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
 8013d68:	4680      	mov	r8, r0
    lv_style_int_t bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
 8013d6a:	4628      	mov	r0, r5
 8013d6c:	f7ff fbfa 	bl	8013564 <lv_obj_get_style_pad_bottom>
    if((edge & LV_PAGE_EDGE_TOP) && scrl_coords.y1 == page_coords.y1 + top) return true;
 8013d70:	07a5      	lsls	r5, r4, #30
 8013d72:	d506      	bpl.n	8013d82 <lv_page_on_edge+0x52>
 8013d74:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8013d78:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8013d7c:	4443      	add	r3, r8
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d01f      	beq.n	8013dc2 <lv_page_on_edge+0x92>
    if((edge & LV_PAGE_EDGE_BOTTOM) && scrl_coords.y2 == page_coords.y2 - bottom) return true;
 8013d82:	0721      	lsls	r1, r4, #28
 8013d84:	d506      	bpl.n	8013d94 <lv_page_on_edge+0x64>
 8013d86:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8013d8a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8013d8e:	1a18      	subs	r0, r3, r0
 8013d90:	4282      	cmp	r2, r0
 8013d92:	d016      	beq.n	8013dc2 <lv_page_on_edge+0x92>
    if((edge & LV_PAGE_EDGE_LEFT) && scrl_coords.x1 == page_coords.x1 + left) return true;
 8013d94:	07e2      	lsls	r2, r4, #31
 8013d96:	d506      	bpl.n	8013da6 <lv_page_on_edge+0x76>
 8013d98:	f9bd 0000 	ldrsh.w	r0, [sp]
 8013d9c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8013da0:	4438      	add	r0, r7
 8013da2:	4283      	cmp	r3, r0
 8013da4:	d00d      	beq.n	8013dc2 <lv_page_on_edge+0x92>
    if((edge & LV_PAGE_EDGE_RIGHT) && scrl_coords.x2 == page_coords.x2 - right) return true;
 8013da6:	f014 0004 	ands.w	r0, r4, #4
 8013daa:	d007      	beq.n	8013dbc <lv_page_on_edge+0x8c>
 8013dac:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8013db0:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 8013db4:	1b80      	subs	r0, r0, r6
 8013db6:	1b03      	subs	r3, r0, r4
 8013db8:	4258      	negs	r0, r3
 8013dba:	4158      	adcs	r0, r3
}
 8013dbc:	b004      	add	sp, #16
 8013dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((edge & LV_PAGE_EDGE_TOP) && scrl_coords.y1 == page_coords.y1 + top) return true;
 8013dc2:	2001      	movs	r0, #1
 8013dc4:	e7fa      	b.n	8013dbc <lv_page_on_edge+0x8c>
	...

08013dc8 <lv_page_scroll_hor>:
{
 8013dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dca:	b093      	sub	sp, #76	; 0x4c
 8013dcc:	460c      	mov	r4, r1
 8013dce:	4607      	mov	r7, r0
    lv_obj_t * scrl = lv_page_get_scrollable(page);
 8013dd0:	f7ff ff8a 	bl	8013ce8 <lv_page_get_scrollable>
 8013dd4:	4605      	mov	r5, r0
    lv_anim_init(&a);
 8013dd6:	a801      	add	r0, sp, #4
 8013dd8:	f7fa fd72 	bl	800e8c0 <lv_anim_init>
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 8013ddc:	4b0b      	ldr	r3, [pc, #44]	; (8013e0c <lv_page_scroll_hor+0x44>)
    lv_anim_set_values(&a, lv_obj_get_x(scrl), lv_obj_get_x(scrl) + dist);
 8013dde:	4628      	mov	r0, r5
 8013de0:	9302      	str	r3, [sp, #8]
    a->var     = var;
 8013de2:	9501      	str	r5, [sp, #4]
 8013de4:	f7f0 fbdc 	bl	80045a0 <lv_obj_get_x>
 8013de8:	4606      	mov	r6, r0
 8013dea:	4628      	mov	r0, r5
 8013dec:	f7f0 fbd8 	bl	80045a0 <lv_obj_get_x>
 8013df0:	4420      	add	r0, r4
 */
static inline void lv_anim_set_values(lv_anim_t * a, lv_anim_value_t start, lv_anim_value_t end)
{
    a->start = start;
    a->current = start;
    a->end   = end;
 8013df2:	b200      	sxth	r0, r0
 8013df4:	9009      	str	r0, [sp, #36]	; 0x24
    lv_anim_set_time(&a, lv_page_get_anim_time(page));
 8013df6:	4638      	mov	r0, r7
    a->current = start;
 8013df8:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8013dfc:	f7ff ff86 	bl	8013d0c <lv_page_get_anim_time>
    a->time     = duration;
 8013e00:	900a      	str	r0, [sp, #40]	; 0x28
    lv_anim_start(&a);
 8013e02:	a801      	add	r0, sp, #4
 8013e04:	f7fa fda4 	bl	800e950 <lv_anim_start>
}
 8013e08:	b013      	add	sp, #76	; 0x4c
 8013e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e0c:	08004a3d 	.word	0x08004a3d

08013e10 <lv_page_scroll_ver>:
{
 8013e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e12:	b093      	sub	sp, #76	; 0x4c
 8013e14:	460c      	mov	r4, r1
 8013e16:	4607      	mov	r7, r0
    lv_obj_t * scrl = lv_page_get_scrollable(page);
 8013e18:	f7ff ff66 	bl	8013ce8 <lv_page_get_scrollable>
 8013e1c:	4605      	mov	r5, r0
    lv_anim_init(&a);
 8013e1e:	a801      	add	r0, sp, #4
 8013e20:	f7fa fd4e 	bl	800e8c0 <lv_anim_init>
    a->exec_cb = exec_cb;
 8013e24:	4b0b      	ldr	r3, [pc, #44]	; (8013e54 <lv_page_scroll_ver+0x44>)
    lv_anim_set_values(&a, lv_obj_get_y(scrl), lv_obj_get_y(scrl) + dist);
 8013e26:	4628      	mov	r0, r5
 8013e28:	9302      	str	r3, [sp, #8]
    a->var     = var;
 8013e2a:	9501      	str	r5, [sp, #4]
 8013e2c:	f7f0 fbd2 	bl	80045d4 <lv_obj_get_y>
 8013e30:	4606      	mov	r6, r0
 8013e32:	4628      	mov	r0, r5
 8013e34:	f7f0 fbce 	bl	80045d4 <lv_obj_get_y>
 8013e38:	4420      	add	r0, r4
    a->end   = end;
 8013e3a:	b200      	sxth	r0, r0
 8013e3c:	9009      	str	r0, [sp, #36]	; 0x24
    lv_anim_set_time(&a, lv_page_get_anim_time(page));
 8013e3e:	4638      	mov	r0, r7
    a->current = start;
 8013e40:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8013e44:	f7ff ff62 	bl	8013d0c <lv_page_get_anim_time>
    a->time     = duration;
 8013e48:	900a      	str	r0, [sp, #40]	; 0x28
    lv_anim_start(&a);
 8013e4a:	a801      	add	r0, sp, #4
 8013e4c:	f7fa fd80 	bl	800e950 <lv_anim_start>
}
 8013e50:	b013      	add	sp, #76	; 0x4c
 8013e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e54:	08004a6d 	.word	0x08004a6d

08013e58 <lv_page_signal>:
{
 8013e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(sign == LV_SIGNAL_GET_STYLE) {
 8013e5c:	2908      	cmp	r1, #8
{
 8013e5e:	b085      	sub	sp, #20
 8013e60:	4604      	mov	r4, r0
 8013e62:	460f      	mov	r7, r1
 8013e64:	4616      	mov	r6, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 8013e66:	d132      	bne.n	8013ece <lv_page_signal+0x76>
        info->result = lv_page_get_style(page, info->part);
 8013e68:	7815      	ldrb	r5, [r2, #0]
    LV_ASSERT_OBJ(page, LV_OBJX_NAME);
 8013e6a:	f7fb f8ad 	bl	800efc8 <lv_debug_check_null>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	b920      	cbnz	r0, 8013e7c <lv_page_signal+0x24>
 8013e72:	4622      	mov	r2, r4
 8013e74:	48c4      	ldr	r0, [pc, #784]	; (8014188 <lv_page_signal+0x330>)
 8013e76:	f7fb f8ab 	bl	800efd0 <lv_debug_log_error>
 8013e7a:	e7fe      	b.n	8013e7a <lv_page_signal+0x22>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	f7f2 f8db 	bl	8006038 <lv_obj_get_ext_attr>
    switch(part) {
 8013e82:	2d01      	cmp	r5, #1
 8013e84:	d01f      	beq.n	8013ec6 <lv_page_signal+0x6e>
 8013e86:	d30e      	bcc.n	8013ea6 <lv_page_signal+0x4e>
 8013e88:	2d02      	cmp	r5, #2
 8013e8a:	d01e      	beq.n	8013eca <lv_page_signal+0x72>
 8013e8c:	2d40      	cmp	r5, #64	; 0x40
 8013e8e:	d015      	beq.n	8013ebc <lv_page_signal+0x64>
        info->result = lv_page_get_style(page, info->part);
 8013e90:	2300      	movs	r3, #0
 8013e92:	6073      	str	r3, [r6, #4]
        else return ancestor_signal(page, sign, param);
 8013e94:	4632      	mov	r2, r6
 8013e96:	2108      	movs	r1, #8
 8013e98:	4620      	mov	r0, r4
 8013e9a:	4bbc      	ldr	r3, [pc, #752]	; (801418c <lv_page_signal+0x334>)
 8013e9c:	681b      	ldr	r3, [r3, #0]
}
 8013e9e:	b005      	add	sp, #20
 8013ea0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else return ancestor_signal(page, sign, param);
 8013ea4:	4718      	bx	r3
            style_dsc_p = &page->style_list;
 8013ea6:	f104 0028 	add.w	r0, r4, #40	; 0x28
        info->result = lv_page_get_style(page, info->part);
 8013eaa:	6070      	str	r0, [r6, #4]
        if(info->result != NULL) return LV_RES_OK;
 8013eac:	2800      	cmp	r0, #0
 8013eae:	d0f1      	beq.n	8013e94 <lv_page_signal+0x3c>
        return LV_RES_OK;
 8013eb0:	f04f 0801 	mov.w	r8, #1
}
 8013eb4:	4640      	mov	r0, r8
 8013eb6:	b005      	add	sp, #20
 8013eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            style_dsc_p = lv_obj_get_style_list(ext->scrl, LV_CONT_PART_MAIN);
 8013ebc:	2100      	movs	r1, #0
 8013ebe:	6840      	ldr	r0, [r0, #4]
 8013ec0:	f7f0 fbd0 	bl	8004664 <lv_obj_get_style_list>
 8013ec4:	e7f1      	b.n	8013eaa <lv_page_signal+0x52>
            style_dsc_p = &ext->scrlbar.style;
 8013ec6:	3008      	adds	r0, #8
 8013ec8:	e7ef      	b.n	8013eaa <lv_page_signal+0x52>
            style_dsc_p = &ext->edge_flash.style;
 8013eca:	3028      	adds	r0, #40	; 0x28
 8013ecc:	e7ed      	b.n	8013eaa <lv_page_signal+0x52>
    else if(sign == LV_SIGNAL_GET_STATE_DSC) {
 8013ece:	2909      	cmp	r1, #9
 8013ed0:	d109      	bne.n	8013ee6 <lv_page_signal+0x8e>
        if(info->part == LV_PAGE_PART_SCROLLABLE) info->result = lv_obj_get_state(lv_page_get_scrollable(page),
 8013ed2:	7811      	ldrb	r1, [r2, #0]
 8013ed4:	2940      	cmp	r1, #64	; 0x40
 8013ed6:	d102      	bne.n	8013ede <lv_page_signal+0x86>
 8013ed8:	f7ff ff06 	bl	8013ce8 <lv_page_get_scrollable>
 8013edc:	2100      	movs	r1, #0
        else info->result = lv_obj_get_state(page, info->part);
 8013ede:	f7f1 fa87 	bl	80053f0 <lv_obj_get_state>
 8013ee2:	7070      	strb	r0, [r6, #1]
 8013ee4:	e7e4      	b.n	8013eb0 <lv_page_signal+0x58>
    res = ancestor_signal(page, sign, param);
 8013ee6:	4ba9      	ldr	r3, [pc, #676]	; (801418c <lv_page_signal+0x334>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8013eec:	2801      	cmp	r0, #1
    res = ancestor_signal(page, sign, param);
 8013eee:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
 8013ef0:	d1e0      	bne.n	8013eb4 <lv_page_signal+0x5c>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8013ef2:	2f07      	cmp	r7, #7
 8013ef4:	d106      	bne.n	8013f04 <lv_page_signal+0xac>
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	49a5      	ldr	r1, [pc, #660]	; (8014190 <lv_page_signal+0x338>)
}
 8013efa:	b005      	add	sp, #20
 8013efc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8013f00:	f7f2 b98c 	b.w	800621c <lv_obj_handle_get_type_signal>
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8013f04:	4620      	mov	r0, r4
 8013f06:	f7f2 f897 	bl	8006038 <lv_obj_get_ext_attr>
 8013f0a:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 8013f0c:	b9bf      	cbnz	r7, 8013f3e <lv_page_signal+0xe6>
        if(ext->scroll_prop) {
 8013f0e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8013f12:	07d9      	lsls	r1, r3, #31
 8013f14:	d50a      	bpl.n	8013f2c <lv_page_signal+0xd4>
            lv_obj_t * parent_page = lv_obj_get_parent(lv_obj_get_parent(page));
 8013f16:	4620      	mov	r0, r4
 8013f18:	f7f0 fad2 	bl	80044c0 <lv_obj_get_parent>
 8013f1c:	f7f0 fad0 	bl	80044c0 <lv_obj_get_parent>
            lv_page_ext_t * parent_ext = lv_obj_get_ext_attr(parent_page);
 8013f20:	f7f2 f88a 	bl	8006038 <lv_obj_get_ext_attr>
            if(parent_ext->scroll_prop_obj == page) {
 8013f24:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013f26:	42a3      	cmp	r3, r4
                parent_ext->scroll_prop_obj = NULL;
 8013f28:	bf08      	it	eq
 8013f2a:	6387      	streq	r7, [r0, #56]	; 0x38
        lv_obj_clean_style_list(page, LV_PAGE_PART_SCROLLBAR);
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	2101      	movs	r1, #1
 8013f30:	f7f0 fbe2 	bl	80046f8 <lv_obj_clean_style_list>
        lv_obj_clean_style_list(page, LV_PAGE_PART_EDGE_FLASH);
 8013f34:	2102      	movs	r1, #2
 8013f36:	4620      	mov	r0, r4
 8013f38:	f7f0 fbde 	bl	80046f8 <lv_obj_clean_style_list>
 8013f3c:	e7ba      	b.n	8013eb4 <lv_page_signal+0x5c>
    else if(sign == LV_SIGNAL_CHILD_CHG) {
 8013f3e:	2f01      	cmp	r7, #1
 8013f40:	f040 8084 	bne.w	801404c <lv_page_signal+0x1f4>
        if(ext->scrl == NULL) return LV_RES_OK;
 8013f44:	6843      	ldr	r3, [r0, #4]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d0b2      	beq.n	8013eb0 <lv_page_signal+0x58>
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_left(const lv_obj_t * page)
{
    return lv_cont_get_fit_left(lv_page_get_scrollable(page));
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	f7ff fecc 	bl	8013ce8 <lv_page_get_scrollable>
 8013f50:	f7fe fa18 	bl	8012384 <lv_cont_get_fit_left>
 8013f54:	4683      	mov	fp, r0
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_right(const lv_obj_t * page)
{
    return lv_cont_get_fit_right(lv_page_get_scrollable(page));
 8013f56:	4620      	mov	r0, r4
 8013f58:	f7ff fec6 	bl	8013ce8 <lv_page_get_scrollable>
 8013f5c:	f7fe fa26 	bl	80123ac <lv_cont_get_fit_right>
 8013f60:	4682      	mov	sl, r0
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_top(const lv_obj_t * page)
{
    return lv_cont_get_fit_top(lv_page_get_scrollable(page));
 8013f62:	4620      	mov	r0, r4
 8013f64:	f7ff fec0 	bl	8013ce8 <lv_page_get_scrollable>
 8013f68:	f7fe fa34 	bl	80123d4 <lv_cont_get_fit_top>
 8013f6c:	9002      	str	r0, [sp, #8]
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(page);
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f7f0 ff72 	bl	8004e58 <lv_obj_get_base_dir>
 8013f74:	2212      	movs	r2, #18
 8013f76:	2100      	movs	r1, #0
 8013f78:	4606      	mov	r6, r0
 8013f7a:	6868      	ldr	r0, [r5, #4]
 8013f7c:	f7f1 fa90 	bl	80054a0 <_lv_obj_get_style_int>
        lv_style_int_t scrl_right = lv_obj_get_style_pad_right(ext->scrl, LV_CONT_PART_MAIN);
 8013f80:	2100      	movs	r1, #0
 8013f82:	4681      	mov	r9, r0
 8013f84:	6868      	ldr	r0, [r5, #4]
 8013f86:	f7ff faea 	bl	801355e <lv_obj_get_style_pad_right>
 8013f8a:	9001      	str	r0, [sp, #4]
        lv_style_int_t scrl_top = lv_obj_get_style_pad_top(ext->scrl, LV_CONT_PART_MAIN);
 8013f8c:	6868      	ldr	r0, [r5, #4]
 8013f8e:	f7ff fb3d 	bl	801360c <lv_obj_get_style_pad_top.constprop.14>
        child = lv_obj_get_child(page, NULL);
 8013f92:	2100      	movs	r1, #0
        lv_style_int_t scrl_top = lv_obj_get_style_pad_top(ext->scrl, LV_CONT_PART_MAIN);
 8013f94:	4680      	mov	r8, r0
        child = lv_obj_get_child(page, NULL);
 8013f96:	4620      	mov	r0, r4
 8013f98:	f7f0 fad8 	bl	800454c <lv_obj_get_child>
 8013f9c:	4607      	mov	r7, r0
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_MAX)) {
 8013f9e:	9b02      	ldr	r3, [sp, #8]
 8013fa0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8013fa4:	9302      	str	r3, [sp, #8]
        while(child != NULL) {
 8013fa6:	2f00      	cmp	r7, #0
 8013fa8:	d082      	beq.n	8013eb0 <lv_page_signal+0x58>
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 8013faa:	2102      	movs	r1, #2
 8013fac:	4638      	mov	r0, r7
 8013fae:	f7f1 fa0f 	bl	80053d0 <lv_obj_is_protected>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 8013fb2:	4639      	mov	r1, r7
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	d144      	bne.n	8014042 <lv_page_signal+0x1ea>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 8013fb8:	4620      	mov	r0, r4
 8013fba:	f7f0 fac7 	bl	800454c <lv_obj_get_child>
                if((tmp->coords.x1 == page->coords.x1)  &&
 8013fbe:	f9b4 c010 	ldrsh.w	ip, [r4, #16]
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 8013fc2:	4603      	mov	r3, r0
                if((tmp->coords.x1 == page->coords.x1)  &&
 8013fc4:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
 8013fc8:	4584      	cmp	ip, r0
 8013fca:	d125      	bne.n	8014018 <lv_page_signal+0x1c0>
 8013fcc:	f00b 01fd 	and.w	r1, fp, #253	; 0xfd
 8013fd0:	2901      	cmp	r1, #1
 8013fd2:	d121      	bne.n	8014018 <lv_page_signal+0x1c0>
                   (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_MAX) &&
 8013fd4:	2e01      	cmp	r6, #1
 8013fd6:	d01f      	beq.n	8014018 <lv_page_signal+0x1c0>
                    tmp->coords.x1 += scrl_left;
 8013fd8:	fa1f f189 	uxth.w	r1, r9
                    tmp->coords.x2 += scrl_left;
 8013fdc:	8ab8      	ldrh	r0, [r7, #20]
                    tmp->coords.x1 += scrl_left;
 8013fde:	448c      	add	ip, r1
 8013fe0:	f8a7 c010 	strh.w	ip, [r7, #16]
                    tmp->coords.x2 += scrl_left;
 8013fe4:	4401      	add	r1, r0
                    tmp->coords.x2 -= scrl_right;
 8013fe6:	82b9      	strh	r1, [r7, #20]
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_MAX)) {
 8013fe8:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013fec:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 8013ff0:	4288      	cmp	r0, r1
 8013ff2:	d109      	bne.n	8014008 <lv_page_signal+0x1b0>
 8013ff4:	9a02      	ldr	r2, [sp, #8]
 8013ff6:	2a01      	cmp	r2, #1
 8013ff8:	d106      	bne.n	8014008 <lv_page_signal+0x1b0>
                    tmp->coords.y1 += scrl_top;
 8013ffa:	fa1f f188 	uxth.w	r1, r8
 8013ffe:	4408      	add	r0, r1
 8014000:	8278      	strh	r0, [r7, #18]
                    tmp->coords.y2 += scrl_top;
 8014002:	8af8      	ldrh	r0, [r7, #22]
 8014004:	4401      	add	r1, r0
 8014006:	82f9      	strh	r1, [r7, #22]
                lv_obj_set_parent(tmp, ext->scrl);
 8014008:	4638      	mov	r0, r7
 801400a:	6869      	ldr	r1, [r5, #4]
 801400c:	9303      	str	r3, [sp, #12]
 801400e:	f7f1 f8ef 	bl	80051f0 <lv_obj_set_parent>
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 8014012:	9b03      	ldr	r3, [sp, #12]
 8014014:	461f      	mov	r7, r3
 8014016:	e7c6      	b.n	8013fa6 <lv_page_signal+0x14e>
                else if((tmp->coords.x2 == page->coords.x2) &&
 8014018:	f9b7 c014 	ldrsh.w	ip, [r7, #20]
 801401c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8014020:	4561      	cmp	r1, ip
 8014022:	d1e1      	bne.n	8013fe8 <lv_page_signal+0x190>
 8014024:	f00a 0cfd 	and.w	ip, sl, #253	; 0xfd
 8014028:	f1bc 0f01 	cmp.w	ip, #1
 801402c:	d1dc      	bne.n	8013fe8 <lv_page_signal+0x190>
                        && base_dir == LV_BIDI_DIR_RTL) {
 801402e:	2e01      	cmp	r6, #1
 8014030:	d1da      	bne.n	8013fe8 <lv_page_signal+0x190>
                    tmp->coords.x1 -= scrl_right;
 8014032:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8014036:	eba0 000c 	sub.w	r0, r0, ip
 801403a:	8238      	strh	r0, [r7, #16]
                    tmp->coords.x2 -= scrl_right;
 801403c:	eba1 010c 	sub.w	r1, r1, ip
 8014040:	e7d1      	b.n	8013fe6 <lv_page_signal+0x18e>
                child = lv_obj_get_child(page, child);
 8014042:	4620      	mov	r0, r4
 8014044:	f7f0 fa82 	bl	800454c <lv_obj_get_child>
 8014048:	4607      	mov	r7, r0
 801404a:	e7ac      	b.n	8013fa6 <lv_page_signal+0x14e>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 801404c:	2f04      	cmp	r7, #4
 801404e:	d11a      	bne.n	8014086 <lv_page_signal+0x22e>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 8014050:	2203      	movs	r2, #3
 8014052:	4641      	mov	r1, r8
 8014054:	4620      	mov	r0, r4
 8014056:	f7f1 fa23 	bl	80054a0 <_lv_obj_get_style_int>
 801405a:	4606      	mov	r6, r0
        lv_area_set_height(&ext->scrlbar.hor_area, sb_width);
 801405c:	4601      	mov	r1, r0
 801405e:	f105 0010 	add.w	r0, r5, #16
 8014062:	f7fa fd03 	bl	800ea6c <lv_area_set_height>
        lv_area_set_width(&ext->scrlbar.ver_area, sb_width);
 8014066:	4631      	mov	r1, r6
 8014068:	f105 0018 	add.w	r0, r5, #24
 801406c:	f7fa fcf9 	bl	800ea62 <lv_area_set_width>
        if(ext->scrlbar.hor_draw || ext->scrlbar.ver_draw) scrlbar_refresh(page);
 8014070:	f895 3020 	ldrb.w	r3, [r5, #32]
 8014074:	079a      	lsls	r2, r3, #30
 8014076:	d002      	beq.n	801407e <lv_page_signal+0x226>
 8014078:	4620      	mov	r0, r4
 801407a:	f7ff fb83 	bl	8013784 <scrlbar_refresh>
        refr_ext_draw_pad(page);
 801407e:	4620      	mov	r0, r4
 8014080:	f7ff fa73 	bl	801356a <refr_ext_draw_pad>
 8014084:	e716      	b.n	8013eb4 <lv_page_signal+0x5c>
    else if(sign == LV_SIGNAL_COORD_CHG) {
 8014086:	2f02      	cmp	r7, #2
 8014088:	d127      	bne.n	80140da <lv_page_signal+0x282>
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 801408a:	6843      	ldr	r3, [r0, #4]
 801408c:	2b00      	cmp	r3, #0
 801408e:	f43f af0f 	beq.w	8013eb0 <lv_page_signal+0x58>
 8014092:	4620      	mov	r0, r4
 8014094:	f7f0 fab8 	bl	8004608 <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014098:	88b3      	ldrh	r3, [r6, #4]
 801409a:	8832      	ldrh	r2, [r6, #0]
 801409c:	3301      	adds	r3, #1
 801409e:	1a9b      	subs	r3, r3, r2
 80140a0:	b21b      	sxth	r3, r3
 80140a2:	4298      	cmp	r0, r3
 80140a4:	d00e      	beq.n	80140c4 <lv_page_signal+0x26c>
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_COORD_CHG, &ext->scrl->coords);
 80140a6:	6868      	ldr	r0, [r5, #4]
 80140a8:	2102      	movs	r1, #2
 80140aa:	69c3      	ldr	r3, [r0, #28]
 80140ac:	f100 0210 	add.w	r2, r0, #16
 80140b0:	4798      	blx	r3
            if(ext->scrlbar.hor_draw || ext->scrlbar.ver_draw) scrlbar_refresh(page);
 80140b2:	f895 3020 	ldrb.w	r3, [r5, #32]
 80140b6:	079b      	lsls	r3, r3, #30
 80140b8:	f43f aefa 	beq.w	8013eb0 <lv_page_signal+0x58>
 80140bc:	4620      	mov	r0, r4
 80140be:	f7ff fb61 	bl	8013784 <scrlbar_refresh>
 80140c2:	e6f7      	b.n	8013eb4 <lv_page_signal+0x5c>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 80140c4:	4620      	mov	r0, r4
 80140c6:	f7f0 faad 	bl	8004624 <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80140ca:	88f3      	ldrh	r3, [r6, #6]
 80140cc:	8872      	ldrh	r2, [r6, #2]
 80140ce:	3301      	adds	r3, #1
 80140d0:	1a9b      	subs	r3, r3, r2
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 80140d2:	b21b      	sxth	r3, r3
 80140d4:	4298      	cmp	r0, r3
 80140d6:	d1e6      	bne.n	80140a6 <lv_page_signal+0x24e>
 80140d8:	e6ea      	b.n	8013eb0 <lv_page_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80140da:	2f06      	cmp	r7, #6
 80140dc:	d0cf      	beq.n	801407e <lv_page_signal+0x226>
    else if(sign == LV_SIGNAL_CONTROL) {
 80140de:	2f18      	cmp	r7, #24
 80140e0:	d158      	bne.n	8014194 <lv_page_signal+0x33c>
        uint32_t c = *((uint32_t *)param);
 80140e2:	6833      	ldr	r3, [r6, #0]
        if(c == LV_KEY_DOWN) {
 80140e4:	2b12      	cmp	r3, #18
 80140e6:	d107      	bne.n	80140f8 <lv_page_signal+0x2a0>
            lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 80140e8:	4620      	mov	r0, r4
 80140ea:	f7f0 fa9b 	bl	8004624 <lv_obj_get_height>
 80140ee:	2104      	movs	r1, #4
 80140f0:	fb90 f1f1 	sdiv	r1, r0, r1
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 80140f4:	4249      	negs	r1, r1
 80140f6:	e007      	b.n	8014108 <lv_page_signal+0x2b0>
        else if(c == LV_KEY_UP) {
 80140f8:	2b11      	cmp	r3, #17
 80140fa:	d10a      	bne.n	8014112 <lv_page_signal+0x2ba>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 80140fc:	4620      	mov	r0, r4
 80140fe:	f7f0 fa91 	bl	8004624 <lv_obj_get_height>
 8014102:	2104      	movs	r1, #4
 8014104:	fb90 f1f1 	sdiv	r1, r0, r1
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 8014108:	b209      	sxth	r1, r1
 801410a:	4620      	mov	r0, r4
 801410c:	f7ff fe80 	bl	8013e10 <lv_page_scroll_ver>
 8014110:	e6d0      	b.n	8013eb4 <lv_page_signal+0x5c>
        else if(c == LV_KEY_RIGHT) {
 8014112:	2b13      	cmp	r3, #19
 8014114:	d11c      	bne.n	8014150 <lv_page_signal+0x2f8>
    return lv_obj_get_width(lv_page_get_scrollable(page));
 8014116:	4620      	mov	r0, r4
 8014118:	f7ff fde6 	bl	8013ce8 <lv_page_get_scrollable>
 801411c:	f7f0 fa74 	bl	8004608 <lv_obj_get_width>
 8014120:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 8014122:	4620      	mov	r0, r4
 8014124:	f7f0 fa70 	bl	8004608 <lv_obj_get_width>
 8014128:	42a8      	cmp	r0, r5
 801412a:	f04f 0504 	mov.w	r5, #4
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 801412e:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 8014130:	db04      	blt.n	801413c <lv_page_signal+0x2e4>
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 8014132:	f7f0 fa77 	bl	8004624 <lv_obj_get_height>
 8014136:	fb90 f1f5 	sdiv	r1, r0, r5
 801413a:	e7db      	b.n	80140f4 <lv_page_signal+0x29c>
                lv_page_scroll_hor(page, -lv_obj_get_width(page) / 4);
 801413c:	f7f0 fa64 	bl	8004608 <lv_obj_get_width>
 8014140:	fb90 f1f5 	sdiv	r1, r0, r5
 8014144:	4249      	negs	r1, r1
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 8014146:	b209      	sxth	r1, r1
 8014148:	4620      	mov	r0, r4
 801414a:	f7ff fe3d 	bl	8013dc8 <lv_page_scroll_hor>
 801414e:	e6b1      	b.n	8013eb4 <lv_page_signal+0x5c>
        else if(c == LV_KEY_LEFT) {
 8014150:	2b14      	cmp	r3, #20
 8014152:	f47f aead 	bne.w	8013eb0 <lv_page_signal+0x58>
 8014156:	4620      	mov	r0, r4
 8014158:	f7ff fdc6 	bl	8013ce8 <lv_page_get_scrollable>
 801415c:	f7f0 fa54 	bl	8004608 <lv_obj_get_width>
 8014160:	4605      	mov	r5, r0
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 8014162:	4620      	mov	r0, r4
 8014164:	f7f0 fa50 	bl	8004608 <lv_obj_get_width>
 8014168:	42a8      	cmp	r0, r5
 801416a:	f04f 0504 	mov.w	r5, #4
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 801416e:	4620      	mov	r0, r4
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 8014170:	db04      	blt.n	801417c <lv_page_signal+0x324>
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8014172:	f7f0 fa57 	bl	8004624 <lv_obj_get_height>
 8014176:	fb90 f1f5 	sdiv	r1, r0, r5
 801417a:	e7c5      	b.n	8014108 <lv_page_signal+0x2b0>
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 801417c:	f7f0 fa44 	bl	8004608 <lv_obj_get_width>
 8014180:	fb90 f1f5 	sdiv	r1, r0, r5
 8014184:	e7df      	b.n	8014146 <lv_page_signal+0x2ee>
 8014186:	bf00      	nop
 8014188:	080158e8 	.word	0x080158e8
 801418c:	200025b8 	.word	0x200025b8
 8014190:	0801991d 	.word	0x0801991d
    else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8014194:	2f19      	cmp	r7, #25
 8014196:	f47f ae8b 	bne.w	8013eb0 <lv_page_signal+0x58>
        *editable       = true;
 801419a:	2301      	movs	r3, #1
 801419c:	7033      	strb	r3, [r6, #0]
 801419e:	e689      	b.n	8013eb4 <lv_page_signal+0x5c>

080141a0 <lv_page_start_edge_flash>:
{
 80141a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141a2:	b093      	sub	sp, #76	; 0x4c
 80141a4:	4607      	mov	r7, r0
 80141a6:	460e      	mov	r6, r1
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80141a8:	f7f1 ff46 	bl	8006038 <lv_obj_get_ext_attr>
    if(ext->edge_flash.enabled == 0) return;
 80141ac:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80141b0:	4604      	mov	r4, r0
    if(ext->edge_flash.enabled == 0) return;
 80141b2:	07da      	lsls	r2, r3, #31
 80141b4:	d52b      	bpl.n	801420e <lv_page_start_edge_flash+0x6e>
    if(ext->edge_flash.left_ip ||
 80141b6:	f013 051e 	ands.w	r5, r3, #30
 80141ba:	d128      	bne.n	801420e <lv_page_start_edge_flash+0x6e>
    lv_anim_init(&a);
 80141bc:	a801      	add	r0, sp, #4
 80141be:	f7fa fb7f 	bl	800e8c0 <lv_anim_init>
    a->exec_cb = exec_cb;
 80141c2:	4b1b      	ldr	r3, [pc, #108]	; (8014230 <lv_page_start_edge_flash+0x90>)
    lv_anim_set_time(&a, lv_page_get_anim_time(page));
 80141c4:	4638      	mov	r0, r7
 80141c6:	9302      	str	r3, [sp, #8]
    a->end   = end;
 80141c8:	2328      	movs	r3, #40	; 0x28
    a->var     = var;
 80141ca:	9701      	str	r7, [sp, #4]
    a->end   = end;
 80141cc:	9309      	str	r3, [sp, #36]	; 0x24
    a->current = start;
 80141ce:	e9cd 5507 	strd	r5, r5, [sp, #28]
 80141d2:	f7ff fd9b 	bl	8013d0c <lv_page_get_anim_time>
    a->time     = duration;
 80141d6:	900a      	str	r0, [sp, #40]	; 0x28
    lv_anim_set_playback_time(&a, lv_page_get_anim_time(page));
 80141d8:	4638      	mov	r0, r7
 80141da:	f7ff fd97 	bl	8013d0c <lv_page_get_anim_time>
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before starting the playback animation.
 */
static inline void lv_anim_set_playback_delay(lv_anim_t * a, uint16_t delay)
{
    a->playback_delay = delay;
 80141de:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80141e2:	930c      	str	r3, [sp, #48]	; 0x30
    a->ready_cb = ready_cb;
 80141e4:	4b13      	ldr	r3, [pc, #76]	; (8014234 <lv_page_start_edge_flash+0x94>)
    a->playback_time = time;
 80141e6:	900d      	str	r0, [sp, #52]	; 0x34
    lv_anim_start(&a);
 80141e8:	a801      	add	r0, sp, #4
    a->ready_cb = ready_cb;
 80141ea:	9304      	str	r3, [sp, #16]
 80141ec:	f7fa fbb0 	bl	800e950 <lv_anim_start>
    switch(edge) {
 80141f0:	1e71      	subs	r1, r6, #1
 80141f2:	2907      	cmp	r1, #7
 80141f4:	d80b      	bhi.n	801420e <lv_page_start_edge_flash+0x6e>
 80141f6:	e8df f001 	tbb	[pc, r1]
 80141fa:	0c11      	.short	0x0c11
 80141fc:	0a0a160a 	.word	0x0a0a160a
 8014200:	040a      	.short	0x040a
            ext->edge_flash.bottom_ip = 1;
 8014202:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8014206:	f043 0304 	orr.w	r3, r3, #4
            ext->edge_flash.right_ip = 1;
 801420a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 801420e:	b013      	add	sp, #76	; 0x4c
 8014210:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ext->edge_flash.top_ip = 1;
 8014212:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8014216:	f043 0302 	orr.w	r3, r3, #2
 801421a:	e7f6      	b.n	801420a <lv_page_start_edge_flash+0x6a>
            ext->edge_flash.left_ip = 1;
 801421c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8014220:	f043 0310 	orr.w	r3, r3, #16
 8014224:	e7f1      	b.n	801420a <lv_page_start_edge_flash+0x6a>
            ext->edge_flash.right_ip = 1;
 8014226:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801422a:	f043 0308 	orr.w	r3, r3, #8
 801422e:	e7ec      	b.n	801420a <lv_page_start_edge_flash+0x6a>
 8014230:	080135c9 	.word	0x080135c9
 8014234:	08013599 	.word	0x08013599

08014238 <scrl_reposition>:
{
 8014238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801423c:	b087      	sub	sp, #28
 801423e:	4604      	mov	r4, r0
    lv_obj_t * scrl = lv_page_get_scrollable(page);
 8014240:	f7ff fd52 	bl	8013ce8 <lv_page_get_scrollable>
 8014244:	4680      	mov	r8, r0
    lv_coord_t new_x = lv_obj_get_x(scrl);
 8014246:	f7f0 f9ab 	bl	80045a0 <lv_obj_get_x>
 801424a:	4606      	mov	r6, r0
    lv_coord_t new_y = lv_obj_get_y(scrl);
 801424c:	4640      	mov	r0, r8
 801424e:	f7f0 f9c1 	bl	80045d4 <lv_obj_get_y>
    lv_obj_get_coords(scrl, &scrl_coords);
 8014252:	a904      	add	r1, sp, #16
    lv_coord_t new_y = lv_obj_get_y(scrl);
 8014254:	9001      	str	r0, [sp, #4]
    lv_obj_get_coords(scrl, &scrl_coords);
 8014256:	4640      	mov	r0, r8
 8014258:	f7f0 f98c 	bl	8004574 <lv_obj_get_coords>
    lv_obj_get_coords(page, &page_coords);
 801425c:	a902      	add	r1, sp, #8
 801425e:	4620      	mov	r0, r4
 8014260:	f7f0 f988 	bl	8004574 <lv_obj_get_coords>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8014264:	2212      	movs	r2, #18
 8014266:	2100      	movs	r1, #0
 8014268:	4620      	mov	r0, r4
 801426a:	f7f1 f919 	bl	80054a0 <_lv_obj_get_style_int>
    lv_style_int_t right = lv_obj_get_style_pad_right(page, LV_PAGE_PART_BG);
 801426e:	2100      	movs	r1, #0
 8014270:	4607      	mov	r7, r0
 8014272:	4620      	mov	r0, r4
 8014274:	f7ff f973 	bl	801355e <lv_obj_get_style_pad_right>
 8014278:	4682      	mov	sl, r0
    lv_style_int_t top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
 801427a:	4620      	mov	r0, r4
 801427c:	f7ff f9c6 	bl	801360c <lv_obj_get_style_pad_top.constprop.14>
    lv_style_int_t bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
 8014280:	2100      	movs	r1, #0
    lv_style_int_t top = lv_obj_get_style_pad_top(page, LV_PAGE_PART_BG);
 8014282:	4605      	mov	r5, r0
    lv_style_int_t bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
 8014284:	4620      	mov	r0, r4
 8014286:	f7ff f96d 	bl	8013564 <lv_obj_get_style_pad_bottom>
    if(lv_area_get_width(&scrl_coords) + left + right <= lv_area_get_width(&page_coords)) {
 801428a:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801428e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
    lv_style_int_t bottom = lv_obj_get_style_pad_bottom(page, LV_PAGE_PART_BG);
 8014292:	4681      	mov	r9, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014294:	f10e 0101 	add.w	r1, lr, #1
    if(lv_area_get_width(&scrl_coords) + left + right <= lv_area_get_width(&page_coords)) {
 8014298:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 801429c:	eba1 010c 	sub.w	r1, r1, ip
 80142a0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80142a4:	fa1f fb81 	uxth.w	fp, r1
 80142a8:	1c41      	adds	r1, r0, #1
 80142aa:	1ac9      	subs	r1, r1, r3
 80142ac:	b28a      	uxth	r2, r1
 80142ae:	9200      	str	r2, [sp, #0]
 80142b0:	fa0f f28b 	sxth.w	r2, fp
 80142b4:	443a      	add	r2, r7
 80142b6:	4452      	add	r2, sl
 80142b8:	4611      	mov	r1, r2
 80142ba:	f9bd 2000 	ldrsh.w	r2, [sp]
 80142be:	4291      	cmp	r1, r2
 80142c0:	dc23      	bgt.n	801430a <scrl_reposition+0xd2>
        if(scrl_coords.x1 != page_coords.x1 + left) {
 80142c2:	443b      	add	r3, r7
            new_x  = left;
 80142c4:	459c      	cmp	ip, r3
 80142c6:	bf16      	itet	ne
 80142c8:	463e      	movne	r6, r7
 80142ca:	2700      	moveq	r7, #0
 80142cc:	2701      	movne	r7, #1
    if(lv_area_get_height(&scrl_coords) + top + bottom <= lv_area_get_height(&page_coords)) {
 80142ce:	f9bd a016 	ldrsh.w	sl, [sp, #22]
 80142d2:	f9bd e012 	ldrsh.w	lr, [sp, #18]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80142d6:	f10a 0101 	add.w	r1, sl, #1
 80142da:	f9bd c00e 	ldrsh.w	ip, [sp, #14]
 80142de:	eba1 010e 	sub.w	r1, r1, lr
 80142e2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80142e6:	b289      	uxth	r1, r1
 80142e8:	f10c 0301 	add.w	r3, ip, #1
 80142ec:	1a9b      	subs	r3, r3, r2
 80142ee:	b208      	sxth	r0, r1
 80142f0:	b29b      	uxth	r3, r3
 80142f2:	4428      	add	r0, r5
 80142f4:	4448      	add	r0, r9
 80142f6:	fa0f fb83 	sxth.w	fp, r3
 80142fa:	4558      	cmp	r0, fp
 80142fc:	dc20      	bgt.n	8014340 <scrl_reposition+0x108>
        if(scrl_coords.y1 != page_coords.y1 + top) {
 80142fe:	442a      	add	r2, r5
 8014300:	4596      	cmp	lr, r2
 8014302:	d129      	bne.n	8014358 <scrl_reposition+0x120>
    if(refr_x || refr_y) {
 8014304:	b36f      	cbz	r7, 8014362 <scrl_reposition+0x12a>
 8014306:	9d01      	ldr	r5, [sp, #4]
 8014308:	e026      	b.n	8014358 <scrl_reposition+0x120>
        if(scrl_coords.x2 < page_coords.x2 - right) {
 801430a:	eba0 000a 	sub.w	r0, r0, sl
 801430e:	4586      	cmp	lr, r0
 8014310:	da0b      	bge.n	801432a <scrl_reposition+0xf2>
            new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) - right; /* Right align */
 8014312:	9b00      	ldr	r3, [sp, #0]
            lv_page_start_edge_flash(page, LV_PAGE_EDGE_RIGHT);
 8014314:	2104      	movs	r1, #4
            new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) - right; /* Right align */
 8014316:	eba3 060b 	sub.w	r6, r3, fp
 801431a:	eba6 060a 	sub.w	r6, r6, sl
            lv_page_start_edge_flash(page, LV_PAGE_EDGE_RIGHT);
 801431e:	4620      	mov	r0, r4
            new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) - right; /* Right align */
 8014320:	b236      	sxth	r6, r6
            lv_page_start_edge_flash(page, LV_PAGE_EDGE_RIGHT);
 8014322:	f7ff ff3d 	bl	80141a0 <lv_page_start_edge_flash>
            refr_x = true;
 8014326:	2701      	movs	r7, #1
 8014328:	e7d1      	b.n	80142ce <scrl_reposition+0x96>
        else if(scrl_coords.x1 > page_coords.x1 + left) {
 801432a:	443b      	add	r3, r7
 801432c:	459c      	cmp	ip, r3
 801432e:	dd05      	ble.n	801433c <scrl_reposition+0x104>
            lv_page_start_edge_flash(page, LV_PAGE_EDGE_LEFT);
 8014330:	2101      	movs	r1, #1
 8014332:	4620      	mov	r0, r4
 8014334:	f7ff ff34 	bl	80141a0 <lv_page_start_edge_flash>
            new_x  = left; /*Left align*/
 8014338:	463e      	mov	r6, r7
 801433a:	e7f4      	b.n	8014326 <scrl_reposition+0xee>
    bool refr_x      = false;
 801433c:	2700      	movs	r7, #0
 801433e:	e7c6      	b.n	80142ce <scrl_reposition+0x96>
        if(scrl_coords.y2 < page_coords.y2 - bottom) {
 8014340:	ebac 0c09 	sub.w	ip, ip, r9
 8014344:	45e2      	cmp	sl, ip
 8014346:	da0f      	bge.n	8014368 <scrl_reposition+0x130>
            new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) - bottom; /* Bottom align */
 8014348:	1a5d      	subs	r5, r3, r1
            lv_page_start_edge_flash(page, LV_PAGE_EDGE_BOTTOM);
 801434a:	2108      	movs	r1, #8
            new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) - bottom; /* Bottom align */
 801434c:	eba5 0509 	sub.w	r5, r5, r9
 8014350:	b22d      	sxth	r5, r5
            lv_page_start_edge_flash(page, LV_PAGE_EDGE_TOP);
 8014352:	4620      	mov	r0, r4
 8014354:	f7ff ff24 	bl	80141a0 <lv_page_start_edge_flash>
        lv_obj_set_pos(scrl, new_x, new_y);
 8014358:	462a      	mov	r2, r5
 801435a:	4631      	mov	r1, r6
 801435c:	4640      	mov	r0, r8
 801435e:	f7f0 fb1b 	bl	8004998 <lv_obj_set_pos>
}
 8014362:	b007      	add	sp, #28
 8014364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(scrl_coords.y1 > page_coords.y1 + top) {
 8014368:	442a      	add	r2, r5
 801436a:	4596      	cmp	lr, r2
 801436c:	ddca      	ble.n	8014304 <scrl_reposition+0xcc>
            lv_page_start_edge_flash(page, LV_PAGE_EDGE_TOP);
 801436e:	2102      	movs	r1, #2
 8014370:	e7ef      	b.n	8014352 <scrl_reposition+0x11a>
	...

08014374 <lv_page_scrollable_signal>:
{
 8014374:	4bd0      	ldr	r3, [pc, #832]	; (80146b8 <lv_page_scrollable_signal+0x344>)
    if(sign == LV_SIGNAL_GET_STYLE) {
 8014376:	2908      	cmp	r1, #8
{
 8014378:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	4681      	mov	r9, r0
 8014380:	460e      	mov	r6, r1
 8014382:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 8014384:	d105      	bne.n	8014392 <lv_page_scrollable_signal+0x1e>
        return ancestor_signal(scrl, sign, param);
 8014386:	4798      	blx	r3
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, "");
 8014388:	4680      	mov	r8, r0
}
 801438a:	4640      	mov	r0, r8
 801438c:	b002      	add	sp, #8
 801438e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    res = ancestor_signal(scrl, sign, param);
 8014392:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8014394:	2801      	cmp	r0, #1
    res = ancestor_signal(scrl, sign, param);
 8014396:	4680      	mov	r8, r0
    if(res != LV_RES_OK) return res;
 8014398:	d1f7      	bne.n	801438a <lv_page_scrollable_signal+0x16>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, "");
 801439a:	2e07      	cmp	r6, #7
 801439c:	d104      	bne.n	80143a8 <lv_page_scrollable_signal+0x34>
 801439e:	49c7      	ldr	r1, [pc, #796]	; (80146bc <lv_page_scrollable_signal+0x348>)
 80143a0:	4638      	mov	r0, r7
 80143a2:	f7f1 ff3b 	bl	800621c <lv_obj_handle_get_type_signal>
 80143a6:	e7ef      	b.n	8014388 <lv_page_scrollable_signal+0x14>
    lv_obj_t * page               = lv_obj_get_parent(scrl);
 80143a8:	4648      	mov	r0, r9
 80143aa:	f7f0 f889 	bl	80044c0 <lv_obj_get_parent>
 80143ae:	4604      	mov	r4, r0
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 80143b0:	f7f1 fe42 	bl	8006038 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_COORD_CHG) {
 80143b4:	2e02      	cmp	r6, #2
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 80143b6:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_COORD_CHG) {
 80143b8:	d17f      	bne.n	80144ba <lv_page_scrollable_signal+0x146>
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 80143ba:	4620      	mov	r0, r4
 80143bc:	f7f0 f880 	bl	80044c0 <lv_obj_get_parent>
 80143c0:	4682      	mov	sl, r0
        lv_indev_t * indev = lv_indev_get_act();
 80143c2:	f7ee fe73 	bl	80030ac <lv_indev_get_act>
        if(page_ext->scroll_prop  && indev) {
 80143c6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
        lv_indev_t * indev = lv_indev_get_act();
 80143ca:	4606      	mov	r6, r0
        if(page_ext->scroll_prop  && indev) {
 80143cc:	07db      	lsls	r3, r3, #31
 80143ce:	d551      	bpl.n	8014474 <lv_page_scrollable_signal+0x100>
 80143d0:	2800      	cmp	r0, #0
 80143d2:	d04f      	beq.n	8014474 <lv_page_scrollable_signal+0x100>
            lv_page_ext_t * parent_ext = lv_obj_get_ext_attr(lv_obj_get_parent(page_parent));
 80143d4:	4650      	mov	r0, sl
 80143d6:	f7f0 f873 	bl	80044c0 <lv_obj_get_parent>
 80143da:	f7f1 fe2d 	bl	8006038 <lv_obj_get_ext_attr>
            if(parent_ext->scroll_prop_obj == NULL) {
 80143de:	6b83      	ldr	r3, [r0, #56]	; 0x38
            lv_page_ext_t * parent_ext = lv_obj_get_ext_attr(lv_obj_get_parent(page_parent));
 80143e0:	4682      	mov	sl, r0
            if(parent_ext->scroll_prop_obj == NULL) {
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d146      	bne.n	8014474 <lv_page_scrollable_signal+0x100>
                if((lv_indev_is_dragging(indev) == false || page_ext->scroll_prop_obj) && (drag_sum->y || drag_sum->x)) {
 80143e6:	4630      	mov	r0, r6
 80143e8:	f7ee fea3 	bl	8003132 <lv_indev_is_dragging>
 80143ec:	b110      	cbz	r0, 80143f4 <lv_page_scrollable_signal+0x80>
 80143ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d03f      	beq.n	8014474 <lv_page_scrollable_signal+0x100>
 80143f4:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	; 0x2e
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d10c      	bne.n	8014416 <lv_page_scrollable_signal+0xa2>
 80143fc:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	; 0x2c
 8014400:	b3c3      	cbz	r3, 8014474 <lv_page_scrollable_signal+0x100>
                    if((drag_sum->y > 0 && lv_page_on_edge(page, LV_PAGE_EDGE_TOP)) ||
 8014402:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	; 0x2e
 8014406:	2b00      	cmp	r3, #0
 8014408:	da16      	bge.n	8014438 <lv_page_scrollable_signal+0xc4>
                       (drag_sum->y < 0 && lv_page_on_edge(page, LV_PAGE_EDGE_BOTTOM))) {
 801440a:	2108      	movs	r1, #8
 801440c:	4620      	mov	r0, r4
 801440e:	f7ff fc8f 	bl	8013d30 <lv_page_on_edge>
 8014412:	b938      	cbnz	r0, 8014424 <lv_page_scrollable_signal+0xb0>
 8014414:	e010      	b.n	8014438 <lv_page_scrollable_signal+0xc4>
                    if((drag_sum->y > 0 && lv_page_on_edge(page, LV_PAGE_EDGE_TOP)) ||
 8014416:	ddf4      	ble.n	8014402 <lv_page_scrollable_signal+0x8e>
 8014418:	2102      	movs	r1, #2
 801441a:	4620      	mov	r0, r4
 801441c:	f7ff fc88 	bl	8013d30 <lv_page_on_edge>
 8014420:	2800      	cmp	r0, #0
 8014422:	d0ee      	beq.n	8014402 <lv_page_scrollable_signal+0x8e>
                        lv_obj_set_drag_parent(page, true);
 8014424:	2101      	movs	r1, #1
 8014426:	4620      	mov	r0, r4
 8014428:	f7ef ff3c 	bl	80042a4 <lv_obj_set_drag_parent>
                        lv_obj_set_drag_parent(scrl, true);
 801442c:	2101      	movs	r1, #1
 801442e:	4648      	mov	r0, r9
 8014430:	f7ef ff38 	bl	80042a4 <lv_obj_set_drag_parent>
                        parent_ext->scroll_prop_obj = page;
 8014434:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
                    if((drag_sum->x > 0 && lv_page_on_edge(page, LV_PAGE_EDGE_LEFT)) ||
 8014438:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	; 0x2c
 801443c:	2b00      	cmp	r3, #0
 801443e:	dc09      	bgt.n	8014454 <lv_page_scrollable_signal+0xe0>
 8014440:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	; 0x2c
 8014444:	2b00      	cmp	r3, #0
 8014446:	da15      	bge.n	8014474 <lv_page_scrollable_signal+0x100>
                       (drag_sum->x < 0 && lv_page_on_edge(page, LV_PAGE_EDGE_RIGHT))) {
 8014448:	2104      	movs	r1, #4
 801444a:	4620      	mov	r0, r4
 801444c:	f7ff fc70 	bl	8013d30 <lv_page_on_edge>
 8014450:	b930      	cbnz	r0, 8014460 <lv_page_scrollable_signal+0xec>
 8014452:	e00f      	b.n	8014474 <lv_page_scrollable_signal+0x100>
                    if((drag_sum->x > 0 && lv_page_on_edge(page, LV_PAGE_EDGE_LEFT)) ||
 8014454:	2101      	movs	r1, #1
 8014456:	4620      	mov	r0, r4
 8014458:	f7ff fc6a 	bl	8013d30 <lv_page_on_edge>
 801445c:	2800      	cmp	r0, #0
 801445e:	d0ef      	beq.n	8014440 <lv_page_scrollable_signal+0xcc>
                        lv_obj_set_drag_parent(page, true);
 8014460:	2101      	movs	r1, #1
 8014462:	4620      	mov	r0, r4
 8014464:	f7ef ff1e 	bl	80042a4 <lv_obj_set_drag_parent>
                        lv_obj_set_drag_parent(scrl, true);
 8014468:	2101      	movs	r1, #1
 801446a:	4648      	mov	r0, r9
 801446c:	f7ef ff1a 	bl	80042a4 <lv_obj_set_drag_parent>
                        parent_ext->scroll_prop_obj = page;
 8014470:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
        scrl_reposition(page);
 8014474:	4620      	mov	r0, r4
 8014476:	f7ff fedf 	bl	8014238 <scrl_reposition>
        lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 801447a:	4620      	mov	r0, r4
 801447c:	f7f1 fddc 	bl	8006038 <lv_obj_get_ext_attr>
        if((ext->scrlbar.hor_draw || ext->scrlbar.ver_draw) ||
 8014480:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014484:	079d      	lsls	r5, r3, #30
 8014486:	d003      	beq.n	8014490 <lv_page_scrollable_signal+0x11c>
        scrlbar_refresh(page);
 8014488:	4620      	mov	r0, r4
 801448a:	f7ff f97b 	bl	8013784 <scrlbar_refresh>
 801448e:	e77c      	b.n	801438a <lv_page_scrollable_signal+0x16>
           (lv_obj_get_width(scrl) != lv_area_get_width(param) || lv_obj_get_height(scrl) != lv_area_get_height(param))) {
 8014490:	4648      	mov	r0, r9
 8014492:	f7f0 f8b9 	bl	8004608 <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014496:	88bb      	ldrh	r3, [r7, #4]
 8014498:	883a      	ldrh	r2, [r7, #0]
 801449a:	3301      	adds	r3, #1
 801449c:	1a9b      	subs	r3, r3, r2
        if((ext->scrlbar.hor_draw || ext->scrlbar.ver_draw) ||
 801449e:	b21b      	sxth	r3, r3
 80144a0:	4298      	cmp	r0, r3
 80144a2:	d1f1      	bne.n	8014488 <lv_page_scrollable_signal+0x114>
           (lv_obj_get_width(scrl) != lv_area_get_width(param) || lv_obj_get_height(scrl) != lv_area_get_height(param))) {
 80144a4:	4648      	mov	r0, r9
 80144a6:	f7f0 f8bd 	bl	8004624 <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80144aa:	88fb      	ldrh	r3, [r7, #6]
 80144ac:	887a      	ldrh	r2, [r7, #2]
 80144ae:	3301      	adds	r3, #1
 80144b0:	1a9b      	subs	r3, r3, r2
 80144b2:	b21b      	sxth	r3, r3
 80144b4:	4298      	cmp	r0, r3
 80144b6:	d1e7      	bne.n	8014488 <lv_page_scrollable_signal+0x114>
 80144b8:	e767      	b.n	801438a <lv_page_scrollable_signal+0x16>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 80144ba:	2e04      	cmp	r6, #4
 80144bc:	d103      	bne.n	80144c6 <lv_page_scrollable_signal+0x152>
        scrl_reposition(page);
 80144be:	4620      	mov	r0, r4
 80144c0:	f7ff feba 	bl	8014238 <scrl_reposition>
 80144c4:	e7e0      	b.n	8014488 <lv_page_scrollable_signal+0x114>
    else if(sign == LV_SIGNAL_DRAG_BEGIN) {
 80144c6:	2e11      	cmp	r6, #17
 80144c8:	d107      	bne.n	80144da <lv_page_scrollable_signal+0x166>
        if(page_ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) {
 80144ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 80144ce:	f003 031c 	and.w	r3, r3, #28
 80144d2:	2b08      	cmp	r3, #8
 80144d4:	f47f af59 	bne.w	801438a <lv_page_scrollable_signal+0x16>
 80144d8:	e7d6      	b.n	8014488 <lv_page_scrollable_signal+0x114>
    else if(sign == LV_SIGNAL_DRAG_END) {
 80144da:	2e13      	cmp	r6, #19
 80144dc:	f040 80f0 	bne.w	80146c0 <lv_page_scrollable_signal+0x34c>
        if(page_ext->scroll_prop_obj) {
 80144e0:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80144e2:	2e00      	cmp	r6, #0
 80144e4:	d158      	bne.n	8014598 <lv_page_scrollable_signal+0x224>
        if(page_ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) {
 80144e6:	f895 3020 	ldrb.w	r3, [r5, #32]
 80144ea:	f003 021c 	and.w	r2, r3, #28
 80144ee:	2a08      	cmp	r2, #8
 80144f0:	f47f af4b 	bne.w	801438a <lv_page_scrollable_signal+0x16>
            if(page_ext->scrlbar.hor_draw) {
 80144f4:	07da      	lsls	r2, r3, #31
 80144f6:	d524      	bpl.n	8014542 <lv_page_scrollable_signal+0x1ce>
                lv_area_copy(&sb_area_tmp, &page_ext->scrlbar.hor_area);
 80144f8:	f105 0110 	add.w	r1, r5, #16
 80144fc:	4668      	mov	r0, sp
 80144fe:	f7ff f889 	bl	8013614 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8014502:	8a22      	ldrh	r2, [r4, #16]
 8014504:	f8bd 3000 	ldrh.w	r3, [sp]
                sb_area_tmp.y1 += page->coords.y1;
 8014508:	f8bd 1002 	ldrh.w	r1, [sp, #2]
                sb_area_tmp.x1 += page->coords.x1;
 801450c:	4413      	add	r3, r2
 801450e:	f8ad 3000 	strh.w	r3, [sp]
                sb_area_tmp.y1 += page->coords.y1;
 8014512:	8a63      	ldrh	r3, [r4, #18]
                lv_obj_invalidate_area(page, &sb_area_tmp);
 8014514:	4620      	mov	r0, r4
                sb_area_tmp.y1 += page->coords.y1;
 8014516:	4419      	add	r1, r3
 8014518:	f8ad 1002 	strh.w	r1, [sp, #2]
                sb_area_tmp.x2 += page->coords.x1;
 801451c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8014520:	440a      	add	r2, r1
 8014522:	f8ad 2004 	strh.w	r2, [sp, #4]
                sb_area_tmp.y2 += page->coords.y1;
 8014526:	f8bd 2006 	ldrh.w	r2, [sp, #6]
                lv_obj_invalidate_area(page, &sb_area_tmp);
 801452a:	4669      	mov	r1, sp
                sb_area_tmp.y2 += page->coords.y1;
 801452c:	4413      	add	r3, r2
 801452e:	f8ad 3006 	strh.w	r3, [sp, #6]
                lv_obj_invalidate_area(page, &sb_area_tmp);
 8014532:	f7f0 f9b5 	bl	80048a0 <lv_obj_invalidate_area>
                page_ext->scrlbar.hor_draw = 0;
 8014536:	f895 3020 	ldrb.w	r3, [r5, #32]
 801453a:	f36f 0300 	bfc	r3, #0, #1
 801453e:	f885 3020 	strb.w	r3, [r5, #32]
            if(page_ext->scrlbar.ver_draw) {
 8014542:	f895 3020 	ldrb.w	r3, [r5, #32]
 8014546:	079b      	lsls	r3, r3, #30
 8014548:	f57f af1f 	bpl.w	801438a <lv_page_scrollable_signal+0x16>
                lv_area_copy(&sb_area_tmp, &page_ext->scrlbar.ver_area);
 801454c:	f105 0118 	add.w	r1, r5, #24
 8014550:	4668      	mov	r0, sp
 8014552:	f7ff f85f 	bl	8013614 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 8014556:	8a22      	ldrh	r2, [r4, #16]
 8014558:	f8bd 3000 	ldrh.w	r3, [sp]
                sb_area_tmp.y1 += page->coords.y1;
 801455c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
                sb_area_tmp.x1 += page->coords.x1;
 8014560:	4413      	add	r3, r2
 8014562:	f8ad 3000 	strh.w	r3, [sp]
                sb_area_tmp.y1 += page->coords.y1;
 8014566:	8a63      	ldrh	r3, [r4, #18]
                lv_obj_invalidate_area(page, &sb_area_tmp);
 8014568:	4620      	mov	r0, r4
                sb_area_tmp.y1 += page->coords.y1;
 801456a:	4419      	add	r1, r3
 801456c:	f8ad 1002 	strh.w	r1, [sp, #2]
                sb_area_tmp.x2 += page->coords.x1;
 8014570:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8014574:	440a      	add	r2, r1
 8014576:	f8ad 2004 	strh.w	r2, [sp, #4]
                sb_area_tmp.y2 += page->coords.y1;
 801457a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
                lv_obj_invalidate_area(page, &sb_area_tmp);
 801457e:	4669      	mov	r1, sp
                sb_area_tmp.y2 += page->coords.y1;
 8014580:	4413      	add	r3, r2
 8014582:	f8ad 3006 	strh.w	r3, [sp, #6]
                lv_obj_invalidate_area(page, &sb_area_tmp);
 8014586:	f7f0 f98b 	bl	80048a0 <lv_obj_invalidate_area>
                page_ext->scrlbar.ver_draw = 0;
 801458a:	f895 3020 	ldrb.w	r3, [r5, #32]
 801458e:	f36f 0341 	bfc	r3, #1, #1
 8014592:	f885 3020 	strb.w	r3, [r5, #32]
 8014596:	e6f8      	b.n	801438a <lv_page_scrollable_signal+0x16>
            lv_page_ext_t * scroller_page_ext      = lv_obj_get_ext_attr(scroller_page);
 8014598:	4630      	mov	r0, r6
 801459a:	f7f1 fd4d 	bl	8006038 <lv_obj_get_ext_attr>
            page_ext->scroll_prop_obj = NULL;
 801459e:	f04f 0900 	mov.w	r9, #0
            lv_page_ext_t * scroller_page_ext      = lv_obj_get_ext_attr(scroller_page);
 80145a2:	4607      	mov	r7, r0
            lv_obj_set_drag_parent(scroller_page, false);
 80145a4:	4649      	mov	r1, r9
 80145a6:	4630      	mov	r0, r6
            page_ext->scroll_prop_obj = NULL;
 80145a8:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
            lv_obj_set_drag_parent(scroller_page, false);
 80145ac:	f7ef fe7a 	bl	80042a4 <lv_obj_set_drag_parent>
            lv_obj_set_drag_parent(lv_page_get_scrollable(scroller_page), false);
 80145b0:	4630      	mov	r0, r6
 80145b2:	f7ff fb99 	bl	8013ce8 <lv_page_get_scrollable>
 80145b6:	4649      	mov	r1, r9
 80145b8:	f7ef fe74 	bl	80042a4 <lv_obj_set_drag_parent>
            if(scroller_page_ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) {
 80145bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80145c0:	f003 021c 	and.w	r2, r3, #28
 80145c4:	2a08      	cmp	r2, #8
 80145c6:	d14f      	bne.n	8014668 <lv_page_scrollable_signal+0x2f4>
                if(scroller_page_ext->scrlbar.hor_draw) {
 80145c8:	07d8      	lsls	r0, r3, #31
 80145ca:	d524      	bpl.n	8014616 <lv_page_scrollable_signal+0x2a2>
                    lv_area_copy(&sb_area_tmp, &scroller_page_ext->scrlbar.hor_area);
 80145cc:	f107 0110 	add.w	r1, r7, #16
 80145d0:	4668      	mov	r0, sp
 80145d2:	f7ff f81f 	bl	8013614 <lv_area_copy>
                    sb_area_tmp.x1 += scroller_page->coords.x1;
 80145d6:	8a32      	ldrh	r2, [r6, #16]
 80145d8:	f8bd 3000 	ldrh.w	r3, [sp]
                    sb_area_tmp.y1 += scroller_page->coords.y1;
 80145dc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
                    sb_area_tmp.x1 += scroller_page->coords.x1;
 80145e0:	4413      	add	r3, r2
 80145e2:	f8ad 3000 	strh.w	r3, [sp]
                    sb_area_tmp.y1 += scroller_page->coords.y1;
 80145e6:	8a73      	ldrh	r3, [r6, #18]
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
 80145e8:	4630      	mov	r0, r6
                    sb_area_tmp.y1 += scroller_page->coords.y1;
 80145ea:	4419      	add	r1, r3
 80145ec:	f8ad 1002 	strh.w	r1, [sp, #2]
                    sb_area_tmp.x2 += scroller_page->coords.x1;
 80145f0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80145f4:	440a      	add	r2, r1
 80145f6:	f8ad 2004 	strh.w	r2, [sp, #4]
                    sb_area_tmp.y2 += scroller_page->coords.y1;
 80145fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
 80145fe:	4669      	mov	r1, sp
                    sb_area_tmp.y2 += scroller_page->coords.y1;
 8014600:	4413      	add	r3, r2
 8014602:	f8ad 3006 	strh.w	r3, [sp, #6]
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
 8014606:	f7f0 f94b 	bl	80048a0 <lv_obj_invalidate_area>
                    scroller_page_ext->scrlbar.hor_draw = 0;
 801460a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801460e:	f36f 0300 	bfc	r3, #0, #1
 8014612:	f887 3020 	strb.w	r3, [r7, #32]
                if(scroller_page_ext->scrlbar.ver_draw) {
 8014616:	f897 3020 	ldrb.w	r3, [r7, #32]
 801461a:	0799      	lsls	r1, r3, #30
 801461c:	d524      	bpl.n	8014668 <lv_page_scrollable_signal+0x2f4>
                    lv_area_copy(&sb_area_tmp, &scroller_page_ext->scrlbar.ver_area);
 801461e:	f107 0118 	add.w	r1, r7, #24
 8014622:	4668      	mov	r0, sp
 8014624:	f7fe fff6 	bl	8013614 <lv_area_copy>
                    sb_area_tmp.x1 += scroller_page->coords.x1;
 8014628:	8a32      	ldrh	r2, [r6, #16]
 801462a:	f8bd 3000 	ldrh.w	r3, [sp]
                    sb_area_tmp.y1 += scroller_page->coords.y1;
 801462e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
                    sb_area_tmp.x1 += scroller_page->coords.x1;
 8014632:	4413      	add	r3, r2
 8014634:	f8ad 3000 	strh.w	r3, [sp]
                    sb_area_tmp.y1 += scroller_page->coords.y1;
 8014638:	8a73      	ldrh	r3, [r6, #18]
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
 801463a:	4630      	mov	r0, r6
                    sb_area_tmp.y1 += scroller_page->coords.y1;
 801463c:	4419      	add	r1, r3
 801463e:	f8ad 1002 	strh.w	r1, [sp, #2]
                    sb_area_tmp.x2 += scroller_page->coords.x1;
 8014642:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8014646:	440a      	add	r2, r1
 8014648:	f8ad 2004 	strh.w	r2, [sp, #4]
                    sb_area_tmp.y2 += scroller_page->coords.y1;
 801464c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
 8014650:	4669      	mov	r1, sp
                    sb_area_tmp.y2 += scroller_page->coords.y1;
 8014652:	4413      	add	r3, r2
 8014654:	f8ad 3006 	strh.w	r3, [sp, #6]
                    lv_obj_invalidate_area(scroller_page, &sb_area_tmp);
 8014658:	f7f0 f922 	bl	80048a0 <lv_obj_invalidate_area>
                    scroller_page_ext->scrlbar.ver_draw = 0;
 801465c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014660:	f36f 0341 	bfc	r3, #1, #1
 8014664:	f887 3020 	strb.w	r3, [r7, #32]
            lv_page_ext_t * scroller_ext = lv_obj_get_ext_attr(scroller_page);
 8014668:	4630      	mov	r0, r6
 801466a:	f7f1 fce5 	bl	8006038 <lv_obj_get_ext_attr>
                scroller_ext->scroll_prop_obj = NULL;
 801466e:	f04f 0900 	mov.w	r9, #0
            while(scroller_ext->scroll_prop_obj) {
 8014672:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8014674:	2e00      	cmp	r6, #0
 8014676:	f43f af36 	beq.w	80144e6 <lv_page_scrollable_signal+0x172>
                lv_obj_set_drag_parent(scroller_page, false);
 801467a:	2100      	movs	r1, #0
                scroller_ext->scroll_prop_obj = NULL;
 801467c:	f8c0 9038 	str.w	r9, [r0, #56]	; 0x38
                lv_obj_set_drag_parent(scroller_page, false);
 8014680:	4630      	mov	r0, r6
 8014682:	f7ef fe0f 	bl	80042a4 <lv_obj_set_drag_parent>
                lv_obj_set_drag_parent(lv_page_get_scrollable(scroller_page), false);
 8014686:	4630      	mov	r0, r6
 8014688:	f7ff fb2e 	bl	8013ce8 <lv_page_get_scrollable>
 801468c:	2100      	movs	r1, #0
 801468e:	f7ef fe09 	bl	80042a4 <lv_obj_set_drag_parent>
                if(scroller_page_ext->scrlbar.mode == LV_SCROLLBAR_MODE_DRAG) {
 8014692:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014696:	f003 021c 	and.w	r2, r3, #28
 801469a:	2a08      	cmp	r2, #8
 801469c:	d108      	bne.n	80146b0 <lv_page_scrollable_signal+0x33c>
                    scroller_page_ext->scrlbar.ver_draw = 0;
 801469e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80146a2:	f369 0341 	bfi	r3, r9, #1, #1
 80146a6:	f887 3020 	strb.w	r3, [r7, #32]
                    lv_obj_invalidate(scroller_page);
 80146aa:	4630      	mov	r0, r6
 80146ac:	f7f0 f918 	bl	80048e0 <lv_obj_invalidate>
                scroller_ext = lv_obj_get_ext_attr(scroller_page);
 80146b0:	4630      	mov	r0, r6
 80146b2:	f7f1 fcc1 	bl	8006038 <lv_obj_get_ext_attr>
 80146b6:	e7dc      	b.n	8014672 <lv_page_scrollable_signal+0x2fe>
 80146b8:	200025b8 	.word	0x200025b8
 80146bc:	0801993b 	.word	0x0801993b
    else if(sign == LV_SIGNAL_CLEANUP) {
 80146c0:	2e00      	cmp	r6, #0
 80146c2:	f47f ae62 	bne.w	801438a <lv_page_scrollable_signal+0x16>
        page_ext->scrl = NULL;
 80146c6:	6046      	str	r6, [r0, #4]
 80146c8:	e65f      	b.n	801438a <lv_page_scrollable_signal+0x16>
 80146ca:	bf00      	nop

080146cc <lv_area_copy>:
{
 80146cc:	3901      	subs	r1, #1
 80146ce:	f100 0308 	add.w	r3, r0, #8
        *d8 = *s8;
 80146d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80146d6:	f800 2b01 	strb.w	r2, [r0], #1
    while(len) {
 80146da:	4298      	cmp	r0, r3
 80146dc:	d1f9      	bne.n	80146d2 <lv_area_copy+0x6>
}
 80146de:	4770      	bx	lr

080146e0 <lv_slider_position_knob>:

    return style_dsc_p;
}

static void lv_slider_position_knob(lv_obj_t * slider, lv_area_t * knob_area, lv_coord_t knob_size, bool hor)
{
 80146e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146e4:	460c      	mov	r4, r1
 80146e6:	f3c2 014f 	ubfx	r1, r2, #1, #16
 80146ea:	3a01      	subs	r2, #1
 80146ec:	4605      	mov	r5, r0
 80146ee:	b292      	uxth	r2, r2

    if(hor) {
 80146f0:	b38b      	cbz	r3, 8014756 <lv_slider_position_knob+0x76>
        knob_area->x1 -= (knob_size >> 1);
 80146f2:	8823      	ldrh	r3, [r4, #0]
 80146f4:	1a5b      	subs	r3, r3, r1
 80146f6:	b29b      	uxth	r3, r3
 80146f8:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 80146fa:	4413      	add	r3, r2
 80146fc:	80a3      	strh	r3, [r4, #4]
        knob_area->y1 = slider->coords.y1;
 80146fe:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8014702:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = slider->coords.y2;
 8014704:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8014708:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801470a:	2212      	movs	r2, #18
 801470c:	2102      	movs	r1, #2
 801470e:	4628      	mov	r0, r5
 8014710:	f7f0 fec6 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8014714:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8014716:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8014718:	2102      	movs	r1, #2
 801471a:	4628      	mov	r0, r5
 801471c:	f7f0 fec0 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8014720:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8014722:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8014724:	2102      	movs	r1, #2
 8014726:	4628      	mov	r0, r5
 8014728:	f7f0 feba 	bl	80054a0 <_lv_obj_get_style_int>
 801472c:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801472e:	2211      	movs	r2, #17
 8014730:	2102      	movs	r1, #2
 8014732:	4628      	mov	r0, r5
 8014734:	f7f0 feb4 	bl	80054a0 <_lv_obj_get_style_int>
    lv_style_int_t knob_top = lv_obj_get_style_pad_top(slider,    LV_SLIDER_PART_KNOB);
    lv_style_int_t knob_bottom = lv_obj_get_style_pad_bottom(slider, LV_SLIDER_PART_KNOB);

    /*Apply the paddings on the knob area*/
    knob_area->x1 -= knob_left;
    knob_area->x2 += knob_right;
 8014738:	88a3      	ldrh	r3, [r4, #4]
    knob_area->x1 -= knob_left;
 801473a:	8822      	ldrh	r2, [r4, #0]
    knob_area->x2 += knob_right;
 801473c:	441e      	add	r6, r3
    knob_area->y1 -= knob_top;
 801473e:	8863      	ldrh	r3, [r4, #2]
    knob_area->x1 -= knob_left;
 8014740:	eba2 0208 	sub.w	r2, r2, r8
    knob_area->y1 -= knob_top;
 8014744:	1bdb      	subs	r3, r3, r7
 8014746:	8063      	strh	r3, [r4, #2]
    knob_area->y2 += knob_bottom;
 8014748:	88e3      	ldrh	r3, [r4, #6]
    knob_area->x1 -= knob_left;
 801474a:	8022      	strh	r2, [r4, #0]
    knob_area->y2 += knob_bottom;
 801474c:	4418      	add	r0, r3
    knob_area->x2 += knob_right;
 801474e:	80a6      	strh	r6, [r4, #4]
    knob_area->y2 += knob_bottom;
 8014750:	80e0      	strh	r0, [r4, #6]
}
 8014752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        knob_area->y1 -= (knob_size >> 1);
 8014756:	8863      	ldrh	r3, [r4, #2]
 8014758:	1a5b      	subs	r3, r3, r1
 801475a:	b29b      	uxth	r3, r3
 801475c:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 801475e:	4413      	add	r3, r2
 8014760:	80e3      	strh	r3, [r4, #6]
        knob_area->x1 = slider->coords.x1;
 8014762:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8014766:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = slider->coords.x2;
 8014768:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 801476c:	80a3      	strh	r3, [r4, #4]
 801476e:	e7cc      	b.n	801470a <lv_slider_position_knob+0x2a>

08014770 <lv_slider_design>:
{
 8014770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
 8014774:	2a02      	cmp	r2, #2
{
 8014776:	b099      	sub	sp, #100	; 0x64
 8014778:	4605      	mov	r5, r0
 801477a:	468a      	mov	sl, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 801477c:	f000 8093 	beq.w	80148a6 <lv_slider_design+0x136>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8014780:	2a00      	cmp	r2, #0
 8014782:	f040 8088 	bne.w	8014896 <lv_slider_design+0x126>
        ancestor_design_f(slider, clip_area, mode);
 8014786:	4b4d      	ldr	r3, [pc, #308]	; (80148bc <lv_slider_design+0x14c>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	4798      	blx	r3
        lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 801478c:	4628      	mov	r0, r5
 801478e:	f7f1 fc53 	bl	8006038 <lv_obj_get_ext_attr>
 8014792:	4604      	mov	r4, r0
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(slider);
 8014794:	4628      	mov	r0, r5
 8014796:	f7f0 fb5f 	bl	8004e58 <lv_obj_get_base_dir>
 801479a:	4680      	mov	r8, r0
        lv_coord_t objw = lv_obj_get_width(slider);
 801479c:	4628      	mov	r0, r5
 801479e:	f7ef ff33 	bl	8004608 <lv_obj_get_width>
 80147a2:	4606      	mov	r6, r0
        lv_coord_t objh = lv_obj_get_height(slider);
 80147a4:	4628      	mov	r0, r5
 80147a6:	f7ef ff3d 	bl	8004624 <lv_obj_get_height>
        bool hor = objw >= objh ? true : false;
 80147aa:	4286      	cmp	r6, r0
 80147ac:	bfb4      	ite	lt
 80147ae:	f04f 0b00 	movlt.w	fp, #0
 80147b2:	f04f 0b01 	movge.w	fp, #1
 80147b6:	4286      	cmp	r6, r0
 80147b8:	46b1      	mov	r9, r6
 80147ba:	bfa8      	it	ge
 80147bc:	4681      	movge	r9, r0
        if(ext->bar.type == LV_BAR_TYPE_SYMMETRICAL && ext->bar.min_value < 0 && ext->bar.max_value > 0) sym = true;
 80147be:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
        lv_coord_t objh = lv_obj_get_height(slider);
 80147c2:	4607      	mov	r7, r0
        if(ext->bar.type == LV_BAR_TYPE_SYMMETRICAL && ext->bar.min_value < 0 && ext->bar.max_value > 0) sym = true;
 80147c4:	f003 0303 	and.w	r3, r3, #3
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	fa0f f989 	sxth.w	r9, r9
 80147ce:	d107      	bne.n	80147e0 <lv_slider_design+0x70>
 80147d0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	da03      	bge.n	80147e0 <lv_slider_design+0x70>
 80147d8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	dc64      	bgt.n	80148aa <lv_slider_design+0x13a>
        if(hor) {
 80147e0:	42be      	cmp	r6, r7
 80147e2:	da05      	bge.n	80147f0 <lv_slider_design+0x80>
                    knob_area.y1 = ext->bar.indic_area.y1;
 80147e4:	8963      	ldrh	r3, [r4, #10]
                    knob_area.y1 = ext->bar.indic_area.y2;
 80147e6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80147ea:	e008      	b.n	80147fe <lv_slider_design+0x8e>
                if(ext->bar.cur_value >= 0) {
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	db48      	blt.n	8014882 <lv_slider_design+0x112>
                    knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir == LV_BIDI_DIR_RTL, ext->bar.indic_area);
 80147f0:	f1b8 0f01 	cmp.w	r8, #1
 80147f4:	d148      	bne.n	8014888 <lv_slider_design+0x118>
                    knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BIDI_DIR_RTL, ext->bar.indic_area);
 80147f6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80147fa:	f8ad 3004 	strh.w	r3, [sp, #4]
        lv_slider_position_knob(slider, &knob_area, knob_size, hor);
 80147fe:	465b      	mov	r3, fp
 8014800:	464a      	mov	r2, r9
 8014802:	a901      	add	r1, sp, #4
 8014804:	4628      	mov	r0, r5
 8014806:	f7ff ff6b 	bl	80146e0 <lv_slider_position_knob>
        lv_area_copy(&ext->right_knob_area, &knob_area);
 801480a:	a901      	add	r1, sp, #4
 801480c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8014810:	f7ff ff5c 	bl	80146cc <lv_area_copy>

static void lv_slider_draw_knob(lv_obj_t * slider, const lv_area_t * knob_area, const lv_area_t * clip_area)
{
    lv_draw_rect_dsc_t knob_rect_dsc;
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8014814:	a803      	add	r0, sp, #12
 8014816:	f7f7 fbcb 	bl	800bfb0 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(slider, LV_SLIDER_PART_KNOB, &knob_rect_dsc);
 801481a:	aa03      	add	r2, sp, #12
 801481c:	2102      	movs	r1, #2
 801481e:	4628      	mov	r0, r5
 8014820:	f7f1 fd0a 	bl	8006238 <lv_obj_init_draw_rect_dsc>

    lv_draw_rect(knob_area, clip_area, &knob_rect_dsc);
 8014824:	aa03      	add	r2, sp, #12
 8014826:	4651      	mov	r1, sl
 8014828:	a801      	add	r0, sp, #4
 801482a:	f7f7 fbe5 	bl	800bff8 <lv_draw_rect>
 * @param slider pointer to a bar object
 * @return true: symmetric is enabled; false: disable
 */
static inline lv_slider_type_t lv_slider_get_type(lv_obj_t * slider)
{
    lv_bar_type_t type = lv_bar_get_type(slider);
 801482e:	4628      	mov	r0, r5
 8014830:	f7fc fdfa 	bl	8011428 <lv_bar_get_type>
    if(type == LV_BAR_TYPE_SYMMETRICAL)
        return LV_SLIDER_TYPE_SYMMETRICAL;
    else if(type == LV_BAR_TYPE_CUSTOM)
 8014834:	2802      	cmp	r0, #2
 8014836:	d122      	bne.n	801487e <lv_slider_design+0x10e>
            if(hor) {
 8014838:	42be      	cmp	r6, r7
 801483a:	db28      	blt.n	801488e <lv_slider_design+0x11e>
                knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BIDI_DIR_RTL, ext->bar.indic_area);
 801483c:	f1b8 0f01 	cmp.w	r8, #1
 8014840:	bf14      	ite	ne
 8014842:	f9b4 3008 	ldrshne.w	r3, [r4, #8]
 8014846:	f9b4 300c 	ldrsheq.w	r3, [r4, #12]
 801484a:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_slider_position_knob(slider, &knob_area, knob_size, hor);
 801484e:	465b      	mov	r3, fp
 8014850:	464a      	mov	r2, r9
 8014852:	a901      	add	r1, sp, #4
 8014854:	4628      	mov	r0, r5
 8014856:	f7ff ff43 	bl	80146e0 <lv_slider_position_knob>
            lv_area_copy(&ext->left_knob_area, &knob_area);
 801485a:	a901      	add	r1, sp, #4
 801485c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8014860:	f7ff ff34 	bl	80146cc <lv_area_copy>
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8014864:	a803      	add	r0, sp, #12
 8014866:	f7f7 fba3 	bl	800bfb0 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(slider, LV_SLIDER_PART_KNOB, &knob_rect_dsc);
 801486a:	aa03      	add	r2, sp, #12
 801486c:	2102      	movs	r1, #2
 801486e:	4628      	mov	r0, r5
 8014870:	f7f1 fce2 	bl	8006238 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(knob_area, clip_area, &knob_rect_dsc);
 8014874:	aa03      	add	r2, sp, #12
 8014876:	4651      	mov	r1, sl
 8014878:	a801      	add	r0, sp, #4
 801487a:	f7f7 fbbd 	bl	800bff8 <lv_draw_rect>
    return LV_DESIGN_RES_OK;
 801487e:	2000      	movs	r0, #0
 8014880:	e00e      	b.n	80148a0 <lv_slider_design+0x130>
                    knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BIDI_DIR_RTL, ext->bar.indic_area);
 8014882:	f1b8 0f01 	cmp.w	r8, #1
 8014886:	d1b6      	bne.n	80147f6 <lv_slider_design+0x86>
 8014888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801488c:	e7b5      	b.n	80147fa <lv_slider_design+0x8a>
                knob_area.y1 = ext->bar.indic_area.y2;
 801488e:	89e3      	ldrh	r3, [r4, #14]
 8014890:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014894:	e7db      	b.n	801484e <lv_slider_design+0xde>
    else if(mode == LV_DESIGN_DRAW_POST) {
 8014896:	2a01      	cmp	r2, #1
 8014898:	d1f1      	bne.n	801487e <lv_slider_design+0x10e>
        return ancestor_design_f(slider, clip_area, mode);
 801489a:	4b08      	ldr	r3, [pc, #32]	; (80148bc <lv_slider_design+0x14c>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	4798      	blx	r3
}
 80148a0:	b019      	add	sp, #100	; 0x64
 80148a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LV_DESIGN_RES_NOT_COVER;
 80148a6:	4610      	mov	r0, r2
 80148a8:	e7fa      	b.n	80148a0 <lv_slider_design+0x130>
        if(hor) {
 80148aa:	4286      	cmp	r6, r0
 80148ac:	f9b4 3000 	ldrsh.w	r3, [r4]
 80148b0:	da9c      	bge.n	80147ec <lv_slider_design+0x7c>
                if(ext->bar.cur_value >= 0) {
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	da96      	bge.n	80147e4 <lv_slider_design+0x74>
                    knob_area.y1 = ext->bar.indic_area.y2;
 80148b6:	89e3      	ldrh	r3, [r4, #14]
 80148b8:	e795      	b.n	80147e6 <lv_slider_design+0x76>
 80148ba:	bf00      	nop
 80148bc:	200025bc 	.word	0x200025bc

080148c0 <lv_slider_create>:
{
 80148c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148c2:	460e      	mov	r6, r1
    lv_obj_t * slider = lv_bar_create(par, copy);
 80148c4:	f7fc fcf8 	bl	80112b8 <lv_bar_create>
 80148c8:	4604      	mov	r4, r0
    LV_ASSERT_MEM(slider);
 80148ca:	f7fa fb7d 	bl	800efc8 <lv_debug_check_null>
 80148ce:	4603      	mov	r3, r0
 80148d0:	b920      	cbnz	r0, 80148dc <lv_slider_create+0x1c>
 80148d2:	4622      	mov	r2, r4
 80148d4:	4838      	ldr	r0, [pc, #224]	; (80149b8 <lv_slider_create+0xf8>)
 80148d6:	f7fa fb7b 	bl	800efd0 <lv_debug_log_error>
 80148da:	e7fe      	b.n	80148da <lv_slider_create+0x1a>
    if(slider == NULL) return NULL;
 80148dc:	b30c      	cbz	r4, 8014922 <lv_slider_create+0x62>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(slider);
 80148de:	4d37      	ldr	r5, [pc, #220]	; (80149bc <lv_slider_create+0xfc>)
 80148e0:	682b      	ldr	r3, [r5, #0]
 80148e2:	b91b      	cbnz	r3, 80148ec <lv_slider_create+0x2c>
 80148e4:	4620      	mov	r0, r4
 80148e6:	f7f1 fb97 	bl	8006018 <lv_obj_get_design_cb>
 80148ea:	6028      	str	r0, [r5, #0]
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(slider);
 80148ec:	4d34      	ldr	r5, [pc, #208]	; (80149c0 <lv_slider_create+0x100>)
 80148ee:	682b      	ldr	r3, [r5, #0]
 80148f0:	b91b      	cbnz	r3, 80148fa <lv_slider_create+0x3a>
 80148f2:	4620      	mov	r0, r4
 80148f4:	f7f1 fb80 	bl	8005ff8 <lv_obj_get_signal_cb>
 80148f8:	6028      	str	r0, [r5, #0]
    lv_slider_ext_t * ext = lv_obj_allocate_ext_attr(slider, sizeof(lv_slider_ext_t));
 80148fa:	2158      	movs	r1, #88	; 0x58
 80148fc:	4620      	mov	r0, r4
 80148fe:	f7ef fdb9 	bl	8004474 <lv_obj_allocate_ext_attr>
 8014902:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
 8014904:	f7fa fb60 	bl	800efc8 <lv_debug_check_null>
 8014908:	4603      	mov	r3, r0
 801490a:	b920      	cbnz	r0, 8014916 <lv_slider_create+0x56>
 801490c:	462a      	mov	r2, r5
 801490e:	482a      	ldr	r0, [pc, #168]	; (80149b8 <lv_slider_create+0xf8>)
 8014910:	f7fa fb5e 	bl	800efd0 <lv_debug_log_error>
 8014914:	e7fe      	b.n	8014914 <lv_slider_create+0x54>
 8014916:	2200      	movs	r2, #0
    if(ext == NULL) {
 8014918:	b935      	cbnz	r5, 8014928 <lv_slider_create+0x68>
        lv_obj_del(slider);
 801491a:	4620      	mov	r0, r4
 801491c:	f7f1 fc0e 	bl	800613c <lv_obj_del>
        return NULL;
 8014920:	462c      	mov	r4, r5
}
 8014922:	4620      	mov	r0, r4
 8014924:	b003      	add	sp, #12
 8014926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ext->dragging = 0;
 8014928:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
    lv_style_list_init(&ext->style_knob);
 801492c:	f105 0738 	add.w	r7, r5, #56	; 0x38
    ext->dragging = 0;
 8014930:	f362 0300 	bfi	r3, r2, #0, #1
    ext->value_to_set = NULL;
 8014934:	652a      	str	r2, [r5, #80]	; 0x50
    ext->dragging = 0;
 8014936:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
    lv_style_list_init(&ext->style_knob);
 801493a:	4638      	mov	r0, r7
 801493c:	f7f3 fabf 	bl	8007ebe <lv_style_list_init>
    lv_obj_set_signal_cb(slider, lv_slider_signal);
 8014940:	4920      	ldr	r1, [pc, #128]	; (80149c4 <lv_slider_create+0x104>)
 8014942:	4620      	mov	r0, r4
 8014944:	f7ef fd70 	bl	8004428 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(slider, lv_slider_design);
 8014948:	491f      	ldr	r1, [pc, #124]	; (80149c8 <lv_slider_create+0x108>)
 801494a:	4620      	mov	r0, r4
 801494c:	f7ef fd82 	bl	8004454 <lv_obj_set_design_cb>
    if(copy == NULL) {
 8014950:	b9be      	cbnz	r6, 8014982 <lv_slider_create+0xc2>
        lv_obj_set_click(slider, true);
 8014952:	4620      	mov	r0, r4
 8014954:	2101      	movs	r1, #1
 8014956:	f7ef fc69 	bl	800422c <lv_obj_set_click>
        lv_obj_add_protect(slider, LV_PROTECT_PRESS_LOST);
 801495a:	4620      	mov	r0, r4
 801495c:	2110      	movs	r1, #16
 801495e:	f7ef fcb7 	bl	80042d0 <lv_obj_add_protect>
        lv_obj_set_ext_click_area(slider, 0, 0, LV_DPI / 10, LV_DPI / 10);
 8014962:	2310      	movs	r3, #16
 8014964:	4632      	mov	r2, r6
 8014966:	9300      	str	r3, [sp, #0]
 8014968:	4631      	mov	r1, r6
 801496a:	4620      	mov	r0, r4
 801496c:	f7ef fc40 	bl	80041f0 <lv_obj_set_ext_click_area>
        lv_theme_apply(slider, LV_THEME_SLIDER);
 8014970:	4620      	mov	r0, r4
 8014972:	210a      	movs	r1, #10
 8014974:	f7fc f8d8 	bl	8010b28 <lv_theme_apply>
        lv_obj_set_height(slider, LV_DPI / 15);
 8014978:	210a      	movs	r1, #10
 801497a:	4620      	mov	r0, r4
 801497c:	f7f0 fd10 	bl	80053a0 <lv_obj_set_height>
 8014980:	e7cf      	b.n	8014922 <lv_slider_create+0x62>
        lv_slider_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8014982:	4630      	mov	r0, r6
 8014984:	f7f1 fb58 	bl	8006038 <lv_obj_get_ext_attr>
 8014988:	4606      	mov	r6, r0
        lv_style_list_copy(&ext->style_knob, &copy_ext->style_knob);
 801498a:	f100 0138 	add.w	r1, r0, #56	; 0x38
 801498e:	4638      	mov	r0, r7
 8014990:	f7f3 fd7f 	bl	8008492 <lv_style_list_copy>
        lv_area_copy(&ext->left_knob_area, &copy_ext->left_knob_area);
 8014994:	f106 0140 	add.w	r1, r6, #64	; 0x40
 8014998:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801499c:	f7ff fe96 	bl	80146cc <lv_area_copy>
        lv_area_copy(&ext->right_knob_area, &copy_ext->right_knob_area);
 80149a0:	f106 0148 	add.w	r1, r6, #72	; 0x48
 80149a4:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80149a8:	f7ff fe90 	bl	80146cc <lv_area_copy>
        lv_obj_refresh_style(slider, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 80149ac:	22ff      	movs	r2, #255	; 0xff
 80149ae:	4620      	mov	r0, r4
 80149b0:	4611      	mov	r1, r2
 80149b2:	f7f1 f9b7 	bl	8005d24 <lv_obj_refresh_style>
 80149b6:	e7b4      	b.n	8014922 <lv_slider_create+0x62>
 80149b8:	08015994 	.word	0x08015994
 80149bc:	200025bc 	.word	0x200025bc
 80149c0:	200025c0 	.word	0x200025c0
 80149c4:	080149f1 	.word	0x080149f1
 80149c8:	08014771 	.word	0x08014771

080149cc <lv_slider_get_value>:
{
 80149cc:	b510      	push	{r4, lr}
 80149ce:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(slider, LV_OBJX_NAME);
 80149d0:	f7fa fafa 	bl	800efc8 <lv_debug_check_null>
 80149d4:	4603      	mov	r3, r0
 80149d6:	b920      	cbnz	r0, 80149e2 <lv_slider_get_value+0x16>
 80149d8:	4622      	mov	r2, r4
 80149da:	4804      	ldr	r0, [pc, #16]	; (80149ec <lv_slider_get_value+0x20>)
 80149dc:	f7fa faf8 	bl	800efd0 <lv_debug_log_error>
 80149e0:	e7fe      	b.n	80149e0 <lv_slider_get_value+0x14>
    return lv_bar_get_value(slider);
 80149e2:	4620      	mov	r0, r4
}
 80149e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return lv_bar_get_value(slider);
 80149e8:	f7fc bd04 	b.w	80113f4 <lv_bar_get_value>
 80149ec:	080158e8 	.word	0x080158e8

080149f0 <lv_slider_signal>:
{
 80149f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(sign == LV_SIGNAL_GET_STYLE) {
 80149f4:	2908      	cmp	r1, #8
{
 80149f6:	b085      	sub	sp, #20
 80149f8:	4605      	mov	r5, r0
 80149fa:	4689      	mov	r9, r1
 80149fc:	4617      	mov	r7, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
 80149fe:	d129      	bne.n	8014a54 <lv_slider_signal+0x64>
        info->result = lv_slider_get_style(slider, info->part);
 8014a00:	7814      	ldrb	r4, [r2, #0]
    LV_ASSERT_OBJ(slider, LV_OBJX_NAME);
 8014a02:	f7fa fae1 	bl	800efc8 <lv_debug_check_null>
 8014a06:	4603      	mov	r3, r0
 8014a08:	b920      	cbnz	r0, 8014a14 <lv_slider_signal+0x24>
 8014a0a:	462a      	mov	r2, r5
 8014a0c:	48cb      	ldr	r0, [pc, #812]	; (8014d3c <lv_slider_signal+0x34c>)
 8014a0e:	f7fa fadf 	bl	800efd0 <lv_debug_log_error>
 8014a12:	e7fe      	b.n	8014a12 <lv_slider_signal+0x22>
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8014a14:	4628      	mov	r0, r5
 8014a16:	f7f1 fb0f 	bl	8006038 <lv_obj_get_ext_attr>
    switch(part) {
 8014a1a:	2c01      	cmp	r4, #1
 8014a1c:	d016      	beq.n	8014a4c <lv_slider_signal+0x5c>
 8014a1e:	d30e      	bcc.n	8014a3e <lv_slider_signal+0x4e>
 8014a20:	2c02      	cmp	r4, #2
 8014a22:	d015      	beq.n	8014a50 <lv_slider_signal+0x60>
        info->result = lv_slider_get_style(slider, info->part);
 8014a24:	2300      	movs	r3, #0
 8014a26:	607b      	str	r3, [r7, #4]
        else return ancestor_signal(slider, sign, param);
 8014a28:	4bc5      	ldr	r3, [pc, #788]	; (8014d40 <lv_slider_signal+0x350>)
 8014a2a:	463a      	mov	r2, r7
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	2108      	movs	r1, #8
 8014a30:	4628      	mov	r0, r5
 8014a32:	4798      	blx	r3
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8014a34:	4606      	mov	r6, r0
}
 8014a36:	4630      	mov	r0, r6
 8014a38:	b005      	add	sp, #20
 8014a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            style_dsc_p = &slider->style_list;
 8014a3e:	f105 0028 	add.w	r0, r5, #40	; 0x28
        info->result = lv_slider_get_style(slider, info->part);
 8014a42:	6078      	str	r0, [r7, #4]
        if(info->result != NULL) return LV_RES_OK;
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d0ef      	beq.n	8014a28 <lv_slider_signal+0x38>
 8014a48:	2601      	movs	r6, #1
 8014a4a:	e7f4      	b.n	8014a36 <lv_slider_signal+0x46>
            style_dsc_p = &ext->bar.style_indic;
 8014a4c:	3030      	adds	r0, #48	; 0x30
 8014a4e:	e7f8      	b.n	8014a42 <lv_slider_signal+0x52>
            style_dsc_p = &ext->style_knob;
 8014a50:	3038      	adds	r0, #56	; 0x38
 8014a52:	e7f6      	b.n	8014a42 <lv_slider_signal+0x52>
    res = ancestor_signal(slider, sign, param);
 8014a54:	4bba      	ldr	r3, [pc, #744]	; (8014d40 <lv_slider_signal+0x350>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
 8014a5a:	2801      	cmp	r0, #1
    res = ancestor_signal(slider, sign, param);
 8014a5c:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
 8014a5e:	d1ea      	bne.n	8014a36 <lv_slider_signal+0x46>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8014a60:	f1b9 0f07 	cmp.w	r9, #7
 8014a64:	d104      	bne.n	8014a70 <lv_slider_signal+0x80>
 8014a66:	49b7      	ldr	r1, [pc, #732]	; (8014d44 <lv_slider_signal+0x354>)
 8014a68:	4638      	mov	r0, r7
 8014a6a:	f7f1 fbd7 	bl	800621c <lv_obj_handle_get_type_signal>
 8014a6e:	e7e1      	b.n	8014a34 <lv_slider_signal+0x44>
    lv_bar_type_t type = lv_bar_get_type(slider);
 8014a70:	4628      	mov	r0, r5
 8014a72:	f7fc fcd9 	bl	8011428 <lv_bar_get_type>
    if(type == LV_BAR_TYPE_SYMMETRICAL)
 8014a76:	2801      	cmp	r0, #1
 8014a78:	d03e      	beq.n	8014af8 <lv_slider_signal+0x108>
        return LV_SLIDER_TYPE_RANGE;
 8014a7a:	2802      	cmp	r0, #2
 8014a7c:	bf14      	ite	ne
 8014a7e:	f04f 0800 	movne.w	r8, #0
 8014a82:	f04f 0802 	moveq.w	r8, #2
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8014a86:	4628      	mov	r0, r5
 8014a88:	f7f1 fad6 	bl	8006038 <lv_obj_get_ext_attr>
    if(sign == LV_SIGNAL_HIT_TEST) {
 8014a8c:	f1b9 0f0a 	cmp.w	r9, #10
    lv_slider_ext_t * ext = lv_obj_get_ext_attr(slider);
 8014a90:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_HIT_TEST) {
 8014a92:	d133      	bne.n	8014afc <lv_slider_signal+0x10c>
        info->result = _lv_area_is_point_on(&ext->right_knob_area, info->point, 0);
 8014a94:	2200      	movs	r2, #0
 8014a96:	6839      	ldr	r1, [r7, #0]
 8014a98:	3048      	adds	r0, #72	; 0x48
 8014a9a:	f7fa f854 	bl	800eb46 <_lv_area_is_point_on>
 8014a9e:	4602      	mov	r2, r0
 8014aa0:	7138      	strb	r0, [r7, #4]
        if((info->result == false) && (type == LV_SLIDER_TYPE_RANGE)) {
 8014aa2:	b940      	cbnz	r0, 8014ab6 <lv_slider_signal+0xc6>
 8014aa4:	f1b8 0f02 	cmp.w	r8, #2
 8014aa8:	d105      	bne.n	8014ab6 <lv_slider_signal+0xc6>
            info->result = _lv_area_is_point_on(&ext->left_knob_area, info->point, 0);
 8014aaa:	6839      	ldr	r1, [r7, #0]
 8014aac:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8014ab0:	f7fa f849 	bl	800eb46 <_lv_area_is_point_on>
 8014ab4:	7138      	strb	r0, [r7, #4]
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 8014ab6:	f1a9 030d 	sub.w	r3, r9, #13
 8014aba:	2b01      	cmp	r3, #1
 8014abc:	f200 8120 	bhi.w	8014d00 <lv_slider_signal+0x310>
        ext->value_to_set = NULL;
 8014ac0:	2700      	movs	r7, #0
        ext->dragging = false;
 8014ac2:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
        ext->value_to_set = NULL;
 8014ac6:	6527      	str	r7, [r4, #80]	; 0x50
        ext->dragging = false;
 8014ac8:	f36f 0300 	bfc	r3, #0, #1
 8014acc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        lv_group_t * g             = lv_obj_get_group(slider);
 8014ad0:	4628      	mov	r0, r5
 8014ad2:	f7f1 fac1 	bl	8006058 <lv_obj_get_group>
 8014ad6:	4604      	mov	r4, r0
        bool editing               = lv_group_get_editing(g);
 8014ad8:	f7ee f924 	bl	8002d24 <lv_group_get_editing>
 8014adc:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8014ade:	f7ee fae5 	bl	80030ac <lv_indev_get_act>
 8014ae2:	f7ee fae9 	bl	80030b8 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8014ae6:	2804      	cmp	r0, #4
 8014ae8:	d1a5      	bne.n	8014a36 <lv_slider_signal+0x46>
            if(editing) lv_group_set_editing(g, false);
 8014aea:	2d00      	cmp	r5, #0
 8014aec:	d0a3      	beq.n	8014a36 <lv_slider_signal+0x46>
 8014aee:	4639      	mov	r1, r7
 8014af0:	4620      	mov	r0, r4
 8014af2:	f7ee f8a8 	bl	8002c46 <lv_group_set_editing>
 8014af6:	e79e      	b.n	8014a36 <lv_slider_signal+0x46>
        return LV_SLIDER_TYPE_SYMMETRICAL;
 8014af8:	46b0      	mov	r8, r6
 8014afa:	e7c4      	b.n	8014a86 <lv_slider_signal+0x96>
    if(sign == LV_SIGNAL_PRESSED) {
 8014afc:	f1b9 0f0b 	cmp.w	r9, #11
 8014b00:	d174      	bne.n	8014bec <lv_slider_signal+0x1fc>
        ext->dragging = true;
 8014b02:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
        if(type == LV_SLIDER_TYPE_NORMAL || type == LV_SLIDER_TYPE_SYMMETRICAL) {
 8014b06:	f1b8 0f02 	cmp.w	r8, #2
        ext->dragging = true;
 8014b0a:	f043 0301 	orr.w	r3, r3, #1
 8014b0e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
        if(type == LV_SLIDER_TYPE_NORMAL || type == LV_SLIDER_TYPE_SYMMETRICAL) {
 8014b12:	d001      	beq.n	8014b18 <lv_slider_signal+0x128>
                    if(dist_right < dist_left)ext->value_to_set = &ext->bar.cur_value;
 8014b14:	6524      	str	r4, [r4, #80]	; 0x50
 8014b16:	e78e      	b.n	8014a36 <lv_slider_signal+0x46>
            lv_indev_get_point(param, &p);
 8014b18:	a903      	add	r1, sp, #12
 8014b1a:	4638      	mov	r0, r7
 8014b1c:	f7ee faf5 	bl	800310a <lv_indev_get_point>
            bool hor = lv_obj_get_width(slider) >= lv_obj_get_height(slider);
 8014b20:	4628      	mov	r0, r5
 8014b22:	f7ef fd71 	bl	8004608 <lv_obj_get_width>
 8014b26:	4681      	mov	r9, r0
 8014b28:	4628      	mov	r0, r5
 8014b2a:	f7ef fd7b 	bl	8004624 <lv_obj_get_height>
 8014b2e:	4607      	mov	r7, r0
            lv_bidi_dir_t base_dir = lv_obj_get_base_dir(slider);
 8014b30:	4628      	mov	r0, r5
 8014b32:	f7f0 f991 	bl	8004e58 <lv_obj_get_base_dir>
            if(hor) {
 8014b36:	45b9      	cmp	r9, r7
 8014b38:	db35      	blt.n	8014ba6 <lv_slider_signal+0x1b6>
                if((base_dir != LV_BIDI_DIR_RTL && p.x > ext->right_knob_area.x2) || (base_dir == LV_BIDI_DIR_RTL &&
 8014b3a:	2801      	cmp	r0, #1
 8014b3c:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8014b40:	d00a      	beq.n	8014b58 <lv_slider_signal+0x168>
 8014b42:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 8014b46:	428b      	cmp	r3, r1
 8014b48:	dbe4      	blt.n	8014b14 <lv_slider_signal+0x124>
                else if((base_dir != LV_BIDI_DIR_RTL && p.x < ext->left_knob_area.x1) || (base_dir == LV_BIDI_DIR_RTL &&
 8014b4a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8014b4e:	428b      	cmp	r3, r1
 8014b50:	dd0a      	ble.n	8014b68 <lv_slider_signal+0x178>
                    else ext->value_to_set = &ext->bar.start_value;
 8014b52:	1da3      	adds	r3, r4, #6
 8014b54:	6523      	str	r3, [r4, #80]	; 0x50
 8014b56:	e76e      	b.n	8014a36 <lv_slider_signal+0x46>
                if((base_dir != LV_BIDI_DIR_RTL && p.x > ext->right_knob_area.x2) || (base_dir == LV_BIDI_DIR_RTL &&
 8014b58:	f9b4 3048 	ldrsh.w	r3, [r4, #72]	; 0x48
 8014b5c:	428b      	cmp	r3, r1
 8014b5e:	dcd9      	bgt.n	8014b14 <lv_slider_signal+0x124>
                else if((base_dir != LV_BIDI_DIR_RTL && p.x < ext->left_knob_area.x1) || (base_dir == LV_BIDI_DIR_RTL &&
 8014b60:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 8014b64:	428b      	cmp	r3, r1
 8014b66:	dbf4      	blt.n	8014b52 <lv_slider_signal+0x162>
                    dist_left = LV_MATH_ABS((ext->left_knob_area.x1 + (ext->left_knob_area.x2 - ext->left_knob_area.x1) / 2) - p.x);
 8014b68:	2502      	movs	r5, #2
 8014b6a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8014b6e:	f9b4 2044 	ldrsh.w	r2, [r4, #68]	; 0x44
                    dist_right = LV_MATH_ABS((ext->right_knob_area.x1 + (ext->right_knob_area.x2 - ext->right_knob_area.x1) / 2) - p.x);
 8014b72:	f9b4 0048 	ldrsh.w	r0, [r4, #72]	; 0x48
                    dist_left = LV_MATH_ABS((ext->left_knob_area.x1 + (ext->left_knob_area.x2 - ext->left_knob_area.x1) / 2) - p.x);
 8014b76:	1ad2      	subs	r2, r2, r3
 8014b78:	fb92 f2f5 	sdiv	r2, r2, r5
 8014b7c:	441a      	add	r2, r3
                    dist_right = LV_MATH_ABS((ext->right_knob_area.x1 + (ext->right_knob_area.x2 - ext->right_knob_area.x1) / 2) - p.x);
 8014b7e:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
                    dist_left = LV_MATH_ABS((ext->left_knob_area.x1 + (ext->left_knob_area.x2 - ext->left_knob_area.x1) / 2) - p.x);
 8014b82:	1a52      	subs	r2, r2, r1
                    dist_right = LV_MATH_ABS((ext->right_knob_area.x1 + (ext->right_knob_area.x2 - ext->right_knob_area.x1) / 2) - p.x);
 8014b84:	1a1b      	subs	r3, r3, r0
 8014b86:	fb93 f3f5 	sdiv	r3, r3, r5
 8014b8a:	4403      	add	r3, r0
                    dist_left = LV_MATH_ABS((ext->left_knob_area.x1 + (ext->left_knob_area.x2 - ext->left_knob_area.x1) / 2) - p.x);
 8014b8c:	2a00      	cmp	r2, #0
                    dist_right = LV_MATH_ABS((ext->right_knob_area.x1 + (ext->right_knob_area.x2 - ext->right_knob_area.x1) / 2) - p.x);
 8014b8e:	eba3 0301 	sub.w	r3, r3, r1
                    dist_left = LV_MATH_ABS((ext->left_knob_area.x1 + (ext->left_knob_area.x2 - ext->left_knob_area.x1) / 2) - p.x);
 8014b92:	bfb8      	it	lt
 8014b94:	4252      	neglt	r2, r2
                    dist_right = LV_MATH_ABS((ext->right_knob_area.x1 + (ext->right_knob_area.x2 - ext->right_knob_area.x1) / 2) - p.x);
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	bfb8      	it	lt
 8014b9a:	425b      	neglt	r3, r3
                    if(dist_right < dist_left)ext->value_to_set = &ext->bar.cur_value;
 8014b9c:	b212      	sxth	r2, r2
 8014b9e:	b21b      	sxth	r3, r3
 8014ba0:	429a      	cmp	r2, r3
                    if(dist_right < dist_left)ext->value_to_set = &ext->bar.cur_value;
 8014ba2:	ddd6      	ble.n	8014b52 <lv_slider_signal+0x162>
 8014ba4:	e7b6      	b.n	8014b14 <lv_slider_signal+0x124>
                if(p.y < ext->right_knob_area.y1) {
 8014ba6:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8014baa:	f9b4 004a 	ldrsh.w	r0, [r4, #74]	; 0x4a
 8014bae:	4281      	cmp	r1, r0
 8014bb0:	dbb0      	blt.n	8014b14 <lv_slider_signal+0x124>
                else if(p.y > ext->left_knob_area.y2) {
 8014bb2:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 8014bb6:	4299      	cmp	r1, r3
 8014bb8:	dccb      	bgt.n	8014b52 <lv_slider_signal+0x162>
                    dist_left = LV_MATH_ABS((ext->left_knob_area.y1 + (ext->left_knob_area.y2 - ext->left_knob_area.y1) / 2) - p.y);
 8014bba:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8014bbe:	1a9b      	subs	r3, r3, r2
 8014bc0:	fb93 f3f8 	sdiv	r3, r3, r8
 8014bc4:	4413      	add	r3, r2
                    dist_right = LV_MATH_ABS((ext->right_knob_area.y1 + (ext->right_knob_area.y2 - ext->right_knob_area.y1) / 2) - p.y);
 8014bc6:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
                    dist_left = LV_MATH_ABS((ext->left_knob_area.y1 + (ext->left_knob_area.y2 - ext->left_knob_area.y1) / 2) - p.y);
 8014bca:	1a5b      	subs	r3, r3, r1
                    dist_right = LV_MATH_ABS((ext->right_knob_area.y1 + (ext->right_knob_area.y2 - ext->right_knob_area.y1) / 2) - p.y);
 8014bcc:	1a12      	subs	r2, r2, r0
 8014bce:	fb92 f2f8 	sdiv	r2, r2, r8
 8014bd2:	4402      	add	r2, r0
                    dist_left = LV_MATH_ABS((ext->left_knob_area.y1 + (ext->left_knob_area.y2 - ext->left_knob_area.y1) / 2) - p.y);
 8014bd4:	2b00      	cmp	r3, #0
                    dist_right = LV_MATH_ABS((ext->right_knob_area.y1 + (ext->right_knob_area.y2 - ext->right_knob_area.y1) / 2) - p.y);
 8014bd6:	eba2 0201 	sub.w	r2, r2, r1
                    dist_left = LV_MATH_ABS((ext->left_knob_area.y1 + (ext->left_knob_area.y2 - ext->left_knob_area.y1) / 2) - p.y);
 8014bda:	bfb8      	it	lt
 8014bdc:	425b      	neglt	r3, r3
                    dist_right = LV_MATH_ABS((ext->right_knob_area.y1 + (ext->right_knob_area.y2 - ext->right_knob_area.y1) / 2) - p.y);
 8014bde:	2a00      	cmp	r2, #0
 8014be0:	bfb8      	it	lt
 8014be2:	4252      	neglt	r2, r2
                    if(dist_right < dist_left)ext->value_to_set = &ext->bar.cur_value;
 8014be4:	b21b      	sxth	r3, r3
 8014be6:	b212      	sxth	r2, r2
 8014be8:	4293      	cmp	r3, r2
 8014bea:	e7da      	b.n	8014ba2 <lv_slider_signal+0x1b2>
    else if(sign == LV_SIGNAL_PRESSING && ext->value_to_set != NULL) {
 8014bec:	f1b9 0f0c 	cmp.w	r9, #12
 8014bf0:	f47f af61 	bne.w	8014ab6 <lv_slider_signal+0xc6>
 8014bf4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	f43f af5d 	beq.w	8014ab6 <lv_slider_signal+0xc6>
        lv_indev_get_point(param, &p);
 8014bfc:	a903      	add	r1, sp, #12
 8014bfe:	4638      	mov	r0, r7
 8014c00:	f7ee fa83 	bl	800310a <lv_indev_get_point>
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(slider);
 8014c04:	4628      	mov	r0, r5
 8014c06:	f7f0 f927 	bl	8004e58 <lv_obj_get_base_dir>
 8014c0a:	4683      	mov	fp, r0
        lv_coord_t w = lv_obj_get_width(slider);
 8014c0c:	4628      	mov	r0, r5
 8014c0e:	f7ef fcfb 	bl	8004608 <lv_obj_get_width>
 8014c12:	4680      	mov	r8, r0
        lv_coord_t h = lv_obj_get_height(slider);
 8014c14:	4628      	mov	r0, r5
 8014c16:	f7ef fd05 	bl	8004624 <lv_obj_get_height>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8014c1a:	2212      	movs	r2, #18
 8014c1c:	4607      	mov	r7, r0
 8014c1e:	2100      	movs	r1, #0
 8014c20:	4628      	mov	r0, r5
 8014c22:	f7f0 fc3d 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8014c26:	2213      	movs	r2, #19
 8014c28:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8014c2a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8014c2c:	4628      	mov	r0, r5
 8014c2e:	f7f0 fc37 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8014c32:	2210      	movs	r2, #16
 8014c34:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8014c36:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8014c38:	4628      	mov	r0, r5
 8014c3a:	f7f0 fc31 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8014c3e:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8014c40:	9001      	str	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8014c42:	2100      	movs	r1, #0
 8014c44:	4628      	mov	r0, r5
 8014c46:	f7f0 fc2b 	bl	80054a0 <_lv_obj_get_style_int>
        int32_t range = ext->bar.max_value - ext->bar.min_value;
 8014c4a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014c4e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
        if(w >= h) {
 8014c52:	45b8      	cmp	r8, r7
        int32_t range = ext->bar.max_value - ext->bar.min_value;
 8014c54:	eba1 0c02 	sub.w	ip, r1, r2
        if(w >= h) {
 8014c58:	9b01      	ldr	r3, [sp, #4]
 8014c5a:	db3c      	blt.n	8014cd6 <lv_slider_signal+0x2e6>
            if(base_dir == LV_BIDI_DIR_RTL) {
 8014c5c:	f1bb 0f01 	cmp.w	fp, #1
                new_value = (slider->coords.x2 - bg_right) - p.x; /*Make the point relative to the indicator*/
 8014c60:	bf0c      	ite	eq
 8014c62:	8aa8      	ldrheq	r0, [r5, #20]
                new_value = p.x - (slider->coords.x1 + bg_left); /*Make the point relative to the indicator*/
 8014c64:	8a28      	ldrhne	r0, [r5, #16]
 8014c66:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            lv_coord_t indic_w = w - bg_left - bg_right;
 8014c6a:	fa1f fa8a 	uxth.w	sl, sl
 8014c6e:	fa1f f989 	uxth.w	r9, r9
                new_value = (slider->coords.x2 - bg_right) - p.x; /*Make the point relative to the indicator*/
 8014c72:	bf0b      	itete	eq
 8014c74:	eba0 000a 	subeq.w	r0, r0, sl
                new_value = p.x - (slider->coords.x1 + bg_left); /*Make the point relative to the indicator*/
 8014c78:	1a18      	subne	r0, r3, r0
                new_value = (slider->coords.x2 - bg_right) - p.x; /*Make the point relative to the indicator*/
 8014c7a:	1ac0      	subeq	r0, r0, r3
                new_value = p.x - (slider->coords.x1 + bg_left); /*Make the point relative to the indicator*/
 8014c7c:	eba0 0009 	subne.w	r0, r0, r9
 8014c80:	b200      	sxth	r0, r0
            new_value = (new_value * range) / indic_w;
 8014c82:	fb0c f000 	mul.w	r0, ip, r0
            lv_coord_t indic_w = w - bg_left - bg_right;
 8014c86:	eba8 0809 	sub.w	r8, r8, r9
 8014c8a:	eba8 080a 	sub.w	r8, r8, sl
 8014c8e:	fa0f f888 	sxth.w	r8, r8
            new_value = (new_value * range) / indic_w;
 8014c92:	fb90 f0f8 	sdiv	r0, r0, r8
        if(ext->value_to_set == &ext->bar.start_value) {
 8014c96:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014c98:	1da7      	adds	r7, r4, #6
 8014c9a:	42bb      	cmp	r3, r7
            new_value += ext->bar.min_value;
 8014c9c:	4410      	add	r0, r2
            real_min_value = ext->bar.start_value;
 8014c9e:	bf18      	it	ne
 8014ca0:	f9b4 2006 	ldrshne.w	r2, [r4, #6]
            new_value += ext->bar.min_value;
 8014ca4:	b200      	sxth	r0, r0
            real_max_value = ext->bar.cur_value;
 8014ca6:	bf08      	it	eq
 8014ca8:	f9b4 1000 	ldrsheq.w	r1, [r4]
        if(new_value < real_min_value) new_value = real_min_value;
 8014cac:	4290      	cmp	r0, r2
 8014cae:	db03      	blt.n	8014cb8 <lv_slider_signal+0x2c8>
 8014cb0:	4288      	cmp	r0, r1
 8014cb2:	4602      	mov	r2, r0
 8014cb4:	bfa8      	it	ge
 8014cb6:	460a      	movge	r2, r1
        if(*ext->value_to_set != new_value) {
 8014cb8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014cbc:	4291      	cmp	r1, r2
 8014cbe:	f43f aeba 	beq.w	8014a36 <lv_slider_signal+0x46>
            *ext->value_to_set = new_value;
 8014cc2:	801a      	strh	r2, [r3, #0]
            lv_obj_invalidate(slider);
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	f7ef fe0b 	bl	80048e0 <lv_obj_invalidate>
            res = lv_event_send(slider, LV_EVENT_VALUE_CHANGED, NULL);
 8014cca:	2200      	movs	r2, #0
 8014ccc:	2110      	movs	r1, #16
 8014cce:	4628      	mov	r0, r5
 8014cd0:	f7ef fb8a 	bl	80043e8 <lv_event_send>
 8014cd4:	e6ae      	b.n	8014a34 <lv_slider_signal+0x44>
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 8014cd6:	fa1f fe80 	uxth.w	lr, r0
            new_value = p.y - (slider->coords.y2 + bg_bottom); /*Make the point relative to the indicator*/
 8014cda:	f8b5 8016 	ldrh.w	r8, [r5, #22]
 8014cde:	f8bd 000e 	ldrh.w	r0, [sp, #14]
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 8014ce2:	eba7 070e 	sub.w	r7, r7, lr
            new_value = p.y - (slider->coords.y2 + bg_bottom); /*Make the point relative to the indicator*/
 8014ce6:	eba0 0008 	sub.w	r0, r0, r8
 8014cea:	eba0 000e 	sub.w	r0, r0, lr
            new_value = (-new_value * range) / indic_h;
 8014cee:	b200      	sxth	r0, r0
 8014cf0:	4240      	negs	r0, r0
 8014cf2:	fb0c f000 	mul.w	r0, ip, r0
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 8014cf6:	1afb      	subs	r3, r7, r3
            new_value = (-new_value * range) / indic_h;
 8014cf8:	b21b      	sxth	r3, r3
 8014cfa:	fb90 f0f3 	sdiv	r0, r0, r3
 8014cfe:	e7ca      	b.n	8014c96 <lv_slider_signal+0x2a6>
    else if(sign == LV_SIGNAL_COORD_CHG) {
 8014d00:	f1b9 0f02 	cmp.w	r9, #2
 8014d04:	d120      	bne.n	8014d48 <lv_slider_signal+0x358>
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 8014d06:	4628      	mov	r0, r5
 8014d08:	f7ef fc7e 	bl	8004608 <lv_obj_get_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014d0c:	88bb      	ldrh	r3, [r7, #4]
 8014d0e:	883a      	ldrh	r2, [r7, #0]
 8014d10:	3301      	adds	r3, #1
 8014d12:	1a9b      	subs	r3, r3, r2
 8014d14:	b21b      	sxth	r3, r3
 8014d16:	4298      	cmp	r0, r3
 8014d18:	d005      	beq.n	8014d26 <lv_slider_signal+0x336>
            slider->signal_cb(slider, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8014d1a:	69eb      	ldr	r3, [r5, #28]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	2106      	movs	r1, #6
 8014d20:	4628      	mov	r0, r5
 8014d22:	4798      	blx	r3
 8014d24:	e687      	b.n	8014a36 <lv_slider_signal+0x46>
           lv_obj_get_height(slider) != lv_area_get_height(param)) {
 8014d26:	4628      	mov	r0, r5
 8014d28:	f7ef fc7c 	bl	8004624 <lv_obj_get_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014d2c:	88fb      	ldrh	r3, [r7, #6]
 8014d2e:	887a      	ldrh	r2, [r7, #2]
 8014d30:	3301      	adds	r3, #1
 8014d32:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(slider) != lv_area_get_width(param) ||
 8014d34:	b21b      	sxth	r3, r3
 8014d36:	4298      	cmp	r0, r3
 8014d38:	d1ef      	bne.n	8014d1a <lv_slider_signal+0x32a>
 8014d3a:	e67c      	b.n	8014a36 <lv_slider_signal+0x46>
 8014d3c:	080158e8 	.word	0x080158e8
 8014d40:	200025c0 	.word	0x200025c0
 8014d44:	08019925 	.word	0x08019925
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8014d48:	f1b9 0f06 	cmp.w	r9, #6
 8014d4c:	d144      	bne.n	8014dd8 <lv_slider_signal+0x3e8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8014d4e:	2212      	movs	r2, #18
 8014d50:	2102      	movs	r1, #2
 8014d52:	4628      	mov	r0, r5
 8014d54:	f7f0 fba4 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8014d58:	2213      	movs	r2, #19
 8014d5a:	2102      	movs	r1, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 8014d5c:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8014d5e:	4628      	mov	r0, r5
 8014d60:	f7f0 fb9e 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8014d64:	2210      	movs	r2, #16
 8014d66:	2102      	movs	r1, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 8014d68:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8014d6a:	4628      	mov	r0, r5
 8014d6c:	f7f0 fb98 	bl	80054a0 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8014d70:	2211      	movs	r2, #17
 8014d72:	2102      	movs	r1, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8014d74:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 8014d76:	4628      	mov	r0, r5
 8014d78:	f7f0 fb92 	bl	80054a0 <_lv_obj_get_style_int>
 8014d7c:	4607      	mov	r7, r0
        lv_coord_t knob_size = LV_MATH_MIN(lv_obj_get_width(slider), lv_obj_get_height(slider)) >> 1;
 8014d7e:	4628      	mov	r0, r5
 8014d80:	f7ef fc42 	bl	8004608 <lv_obj_get_width>
 8014d84:	4682      	mov	sl, r0
 8014d86:	4628      	mov	r0, r5
 8014d88:	f7ef fc4c 	bl	8004624 <lv_obj_get_height>
 8014d8c:	4582      	cmp	sl, r0
 8014d8e:	4628      	mov	r0, r5
 8014d90:	da1f      	bge.n	8014dd2 <lv_slider_signal+0x3e2>
 8014d92:	f7ef fc39 	bl	8004608 <lv_obj_get_width>
        knob_size += LV_MATH_MAX(LV_MATH_MAX(knob_left, knob_right), LV_MATH_MAX(knob_bottom, knob_top));
 8014d96:	454c      	cmp	r4, r9
        lv_coord_t knob_size = LV_MATH_MIN(lv_obj_get_width(slider), lv_obj_get_height(slider)) >> 1;
 8014d98:	f340 034f 	sbfx	r3, r0, #1, #16
        knob_size += LV_MATH_MAX(LV_MATH_MAX(knob_left, knob_right), LV_MATH_MAX(knob_bottom, knob_top));
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	bfb8      	it	lt
 8014da0:	4648      	movlt	r0, r9
 8014da2:	b200      	sxth	r0, r0
 8014da4:	4540      	cmp	r0, r8
 8014da6:	bfb8      	it	lt
 8014da8:	4640      	movlt	r0, r8
 8014daa:	b204      	sxth	r4, r0
 8014dac:	42bc      	cmp	r4, r7
 8014dae:	bfb8      	it	lt
 8014db0:	463c      	movlt	r4, r7
        knob_size += lv_obj_get_draw_rect_ext_pad_size(slider, LV_SLIDER_PART_KNOB);
 8014db2:	2102      	movs	r1, #2
        knob_size += 2;         /*For rounding error*/
 8014db4:	3402      	adds	r4, #2
        knob_size += lv_obj_get_draw_rect_ext_pad_size(slider, LV_SLIDER_PART_KNOB);
 8014db6:	4628      	mov	r0, r5
        knob_size += 2;         /*For rounding error*/
 8014db8:	441c      	add	r4, r3
        knob_size += lv_obj_get_draw_rect_ext_pad_size(slider, LV_SLIDER_PART_KNOB);
 8014dba:	f7f2 f9bb 	bl	8007134 <lv_obj_get_draw_rect_ext_pad_size>
        knob_size += 2;         /*For rounding error*/
 8014dbe:	b2a4      	uxth	r4, r4
        knob_size += lv_obj_get_draw_rect_ext_pad_size(slider, LV_SLIDER_PART_KNOB);
 8014dc0:	4420      	add	r0, r4
        slider->ext_draw_pad = LV_MATH_MAX(slider->ext_draw_pad, knob_size);
 8014dc2:	f9b5 4032 	ldrsh.w	r4, [r5, #50]	; 0x32
 8014dc6:	b200      	sxth	r0, r0
 8014dc8:	42a0      	cmp	r0, r4
 8014dca:	bfb8      	it	lt
 8014dcc:	4620      	movlt	r0, r4
 8014dce:	8668      	strh	r0, [r5, #50]	; 0x32
 8014dd0:	e631      	b.n	8014a36 <lv_slider_signal+0x46>
        lv_coord_t knob_size = LV_MATH_MIN(lv_obj_get_width(slider), lv_obj_get_height(slider)) >> 1;
 8014dd2:	f7ef fc27 	bl	8004624 <lv_obj_get_height>
 8014dd6:	e7de      	b.n	8014d96 <lv_slider_signal+0x3a6>
    else if(sign == LV_SIGNAL_CONTROL) {
 8014dd8:	f1b9 0f18 	cmp.w	r9, #24
 8014ddc:	d118      	bne.n	8014e10 <lv_slider_signal+0x420>
        char c = *((char *)param);
 8014dde:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8014de0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8014de4:	2a11      	cmp	r2, #17
 8014de6:	d109      	bne.n	8014dfc <lv_slider_signal+0x40c>
            lv_slider_set_value(slider, lv_slider_get_value(slider) + 1, LV_ANIM_ON);
 8014de8:	4628      	mov	r0, r5
 8014dea:	f7ff fdef 	bl	80149cc <lv_slider_get_value>
 8014dee:	1c41      	adds	r1, r0, #1
    lv_bar_set_value(slider, value, anim);
 8014df0:	2201      	movs	r2, #1
 8014df2:	b209      	sxth	r1, r1
 8014df4:	4628      	mov	r0, r5
 8014df6:	f7fc fa33 	bl	8011260 <lv_bar_set_value>
 8014dfa:	e766      	b.n	8014cca <lv_slider_signal+0x2da>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8014dfc:	2b14      	cmp	r3, #20
 8014dfe:	d002      	beq.n	8014e06 <lv_slider_signal+0x416>
 8014e00:	2b12      	cmp	r3, #18
 8014e02:	f47f ae18 	bne.w	8014a36 <lv_slider_signal+0x46>
            lv_slider_set_value(slider, lv_slider_get_value(slider) - 1, LV_ANIM_ON);
 8014e06:	4628      	mov	r0, r5
 8014e08:	f7ff fde0 	bl	80149cc <lv_slider_get_value>
 8014e0c:	1e41      	subs	r1, r0, #1
 8014e0e:	e7ef      	b.n	8014df0 <lv_slider_signal+0x400>
    else if(sign == LV_SIGNAL_CLEANUP) {
 8014e10:	f1b9 0f00 	cmp.w	r9, #0
 8014e14:	d104      	bne.n	8014e20 <lv_slider_signal+0x430>
        lv_obj_clean_style_list(slider, LV_SLIDER_PART_KNOB);
 8014e16:	2102      	movs	r1, #2
 8014e18:	4628      	mov	r0, r5
 8014e1a:	f7ef fc6d 	bl	80046f8 <lv_obj_clean_style_list>
 8014e1e:	e60a      	b.n	8014a36 <lv_slider_signal+0x46>
    else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8014e20:	f1b9 0f19 	cmp.w	r9, #25
 8014e24:	f47f ae07 	bne.w	8014a36 <lv_slider_signal+0x46>
        *editable       = true;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	703b      	strb	r3, [r7, #0]
 8014e2c:	e603      	b.n	8014a36 <lv_slider_signal+0x46>
 8014e2e:	bf00      	nop

08014e30 <lv_win_get_from_btn>:
 * It is useful in the action of the control buttons where only button is known.
 * @param ctrl_btn pointer to a control button of a window
 * @return pointer to the window of 'ctrl_btn'
 */
lv_obj_t * lv_win_get_from_btn(const lv_obj_t * ctrl_btn)
{
 8014e30:	b510      	push	{r4, lr}
 8014e32:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(ctrl_btn, "lv_btn");
 8014e34:	f7fa f8c8 	bl	800efc8 <lv_debug_check_null>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	b920      	cbnz	r0, 8014e46 <lv_win_get_from_btn+0x16>
 8014e3c:	4622      	mov	r2, r4
 8014e3e:	4805      	ldr	r0, [pc, #20]	; (8014e54 <lv_win_get_from_btn+0x24>)
 8014e40:	f7fa f8c6 	bl	800efd0 <lv_debug_log_error>
 8014e44:	e7fe      	b.n	8014e44 <lv_win_get_from_btn+0x14>

    lv_obj_t * header = lv_obj_get_parent(ctrl_btn);
 8014e46:	4620      	mov	r0, r4
 8014e48:	f7ef fb3a 	bl	80044c0 <lv_obj_get_parent>
    lv_obj_t * win    = lv_obj_get_parent(header);

    return win;
}
 8014e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_t * win    = lv_obj_get_parent(header);
 8014e50:	f7ef bb36 	b.w	80044c0 <lv_obj_get_parent>
 8014e54:	080158e8 	.word	0x080158e8

08014e58 <monitor_cb>:
static bool encoder_read(lv_indev_drv_t * drv, lv_indev_data_t *data);


/* -------------------  DISPLAY ---------------  */
void monitor_cb(lv_disp_drv_t * d, uint32_t t, uint32_t p){
	t_saved = t;
 8014e58:	4b01      	ldr	r3, [pc, #4]	; (8014e60 <monitor_cb+0x8>)
 8014e5a:	6019      	str	r1, [r3, #0]
}
 8014e5c:	4770      	bx	lr
 8014e5e:	bf00      	nop
 8014e60:	2000326c 	.word	0x2000326c

08014e64 <LCD_Flush>:
 * @param y1 top coordinate of the rectangle
 * @param y2 bottom coordinate of the rectangle
 * @param color_p pointer to an array of colors
 */
static void LCD_Flush(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 8014e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/*Truncate the area to the screen*/
	int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
	int32_t act_y1 = area->y1 < 0 ? 0 : area->y1;
 8014e68:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
	int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
 8014e6c:	f9b1 5000 	ldrsh.w	r5, [r1]
	int32_t act_y1 = area->y1 < 0 ? 0 : area->y1;
 8014e70:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
	int32_t act_x2 = area->x2 > LV_HOR_RES_MAX - 1 ? LV_HOR_RES_MAX - 1 : area->x2;
 8014e74:	f240 143f 	movw	r4, #319	; 0x13f
	int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
 8014e78:	ea25 79e5 	bic.w	r9, r5, r5, asr #31
	int32_t act_x2 = area->x2 > LV_HOR_RES_MAX - 1 ? LV_HOR_RES_MAX - 1 : area->x2;
 8014e7c:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
{
 8014e80:	4616      	mov	r6, r2
	int32_t act_x2 = area->x2 > LV_HOR_RES_MAX - 1 ? LV_HOR_RES_MAX - 1 : area->x2;
 8014e82:	42a5      	cmp	r5, r4
 8014e84:	bfa8      	it	ge
 8014e86:	4625      	movge	r5, r4
	int32_t act_y2 = area->y2 > LV_VER_RES_MAX - 1 ? LV_VER_RES_MAX - 1 : area->y2;
 8014e88:	f9b1 4006 	ldrsh.w	r4, [r1, #6]

	//ILI9341_Set_Address(act_x1,act_y1,act_x2,act_y2);
#if !USE_DMA
	//Without DMA
	//ILI9341_DrawImage(act_x1, act_y1, (act_x2 - act_x1 + 1), (act_y2 - act_y1 + 1), color_p);
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8014e8c:	4f12      	ldr	r7, [pc, #72]	; (8014ed8 <LCD_Flush+0x74>)
	int32_t act_y2 = area->y2 > LV_VER_RES_MAX - 1 ? LV_VER_RES_MAX - 1 : area->y2;
 8014e8e:	2cef      	cmp	r4, #239	; 0xef
 8014e90:	bfa8      	it	ge
 8014e92:	24ef      	movge	r4, #239	; 0xef
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8014e94:	4638      	mov	r0, r7
 8014e96:	2200      	movs	r2, #0
 8014e98:	2108      	movs	r1, #8
 8014e9a:	f7ec fd71 	bl	8001980 <HAL_GPIO_WritePin>
	ILI9341_SetAddressWindow(act_x1,act_y1,act_x2,act_y2);
 8014e9e:	b2a3      	uxth	r3, r4
 8014ea0:	b2aa      	uxth	r2, r5
 8014ea2:	fa1f f188 	uxth.w	r1, r8
 8014ea6:	fa1f f089 	uxth.w	r0, r9
    ILI9341_WriteData((uint8_t*)color_p, sizeof(uint16_t)*((act_x2 - act_x1 + 1) * (act_y2 - act_y1 + 1)));
 8014eaa:	eba4 0408 	sub.w	r4, r4, r8
	ILI9341_SetAddressWindow(act_x1,act_y1,act_x2,act_y2);
 8014eae:	f7ed fd13 	bl	80028d8 <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)color_p, sizeof(uint16_t)*((act_x2 - act_x1 + 1) * (act_y2 - act_y1 + 1)));
 8014eb2:	eba5 0509 	sub.w	r5, r5, r9
 8014eb6:	1c61      	adds	r1, r4, #1
 8014eb8:	fb05 1101 	mla	r1, r5, r1, r1
 8014ebc:	4630      	mov	r0, r6
 8014ebe:	0049      	lsls	r1, r1, #1
 8014ec0:	f7ed fcea 	bl	8002898 <ILI9341_WriteData>
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8014ec4:	4638      	mov	r0, r7
 8014ec6:	2201      	movs	r2, #1
 8014ec8:	2108      	movs	r1, #8
 8014eca:	f7ec fd59 	bl	8001980 <HAL_GPIO_WritePin>
    	while(1); //in case of error
    }

   	#endif
#endif
}
 8014ece:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   	lv_disp_flush_ready(&disp_drv);
 8014ed2:	4802      	ldr	r0, [pc, #8]	; (8014edc <LCD_Flush+0x78>)
 8014ed4:	f7f9 bab2 	b.w	800e43c <lv_disp_flush_ready>
 8014ed8:	40010c00 	.word	0x40010c00
 8014edc:	200034ac 	.word	0x200034ac

08014ee0 <encoder_read>:
 */

/* Will be called by the library to read the encoder */

bool encoder_read(lv_indev_drv_t * indev, lv_indev_data_t * data)
{
 8014ee0:	b510      	push	{r4, lr}

	if (encBtnFlag == 1) {
 8014ee2:	4b0e      	ldr	r3, [pc, #56]	; (8014f1c <encoder_read+0x3c>)
	} 	else	{
		data->state = LV_INDEV_STATE_REL;
	}


	if(encoderStep>0){
 8014ee4:	4c0e      	ldr	r4, [pc, #56]	; (8014f20 <encoder_read+0x40>)
	if (encBtnFlag == 1) {
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	2b01      	cmp	r3, #1
		data->state = LV_INDEV_STATE_REL;
 8014eea:	bf18      	it	ne
 8014eec:	2300      	movne	r3, #0
 8014eee:	738b      	strb	r3, [r1, #14]
	if(encoderStep>0){
 8014ef0:	8823      	ldrh	r3, [r4, #0]
 8014ef2:	b21b      	sxth	r3, r3
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	dd08      	ble.n	8014f0a <encoder_read+0x2a>
		data->enc_diff = 1;
 8014ef8:	2301      	movs	r3, #1
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
	} else if (encoderStep<0) {
		data->enc_diff = -1;
 8014efa:	818b      	strh	r3, [r1, #12]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8014efc:	4809      	ldr	r0, [pc, #36]	; (8014f24 <encoder_read+0x44>)
 8014efe:	2104      	movs	r1, #4
 8014f00:	f7ec fd43 	bl	800198a <HAL_GPIO_TogglePin>
	} else {
		data->enc_diff = 0;
	}

	encoderStep = 0;
 8014f04:	2000      	movs	r0, #0
 8014f06:	8020      	strh	r0, [r4, #0]

	return false;
}
 8014f08:	bd10      	pop	{r4, pc}
	} else if (encoderStep<0) {
 8014f0a:	8823      	ldrh	r3, [r4, #0]
 8014f0c:	041b      	lsls	r3, r3, #16
 8014f0e:	d502      	bpl.n	8014f16 <encoder_read+0x36>
		data->enc_diff = -1;
 8014f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f14:	e7f1      	b.n	8014efa <encoder_read+0x1a>
		data->enc_diff = 0;
 8014f16:	2300      	movs	r3, #0
 8014f18:	818b      	strh	r3, [r1, #12]
 8014f1a:	e7f3      	b.n	8014f04 <encoder_read+0x24>
 8014f1c:	20003268 	.word	0x20003268
 8014f20:	2000326a 	.word	0x2000326a
 8014f24:	40010800 	.word	0x40010800

08014f28 <lv_lcd_init>:
void lv_lcd_init() {
 8014f28:	b538      	push	{r3, r4, r5, lr}
	lv_disp_buf_init(&buf, disp_buf1, NULL, LV_HOR_RES_MAX * BUFF_LINES);
 8014f2a:	4d0d      	ldr	r5, [pc, #52]	; (8014f60 <lv_lcd_init+0x38>)
	lv_disp_drv_init(&disp_drv);		/*Basic driver initialization*/
 8014f2c:	4c0d      	ldr	r4, [pc, #52]	; (8014f64 <lv_lcd_init+0x3c>)
	lv_disp_buf_init(&buf, disp_buf1, NULL, LV_HOR_RES_MAX * BUFF_LINES);
 8014f2e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8014f32:	2200      	movs	r2, #0
 8014f34:	490c      	ldr	r1, [pc, #48]	; (8014f68 <lv_lcd_init+0x40>)
 8014f36:	4628      	mov	r0, r5
 8014f38:	f7f9 fa3f 	bl	800e3ba <lv_disp_buf_init>
	ILI9341_Init();  		/* Init LCD hardware */
 8014f3c:	f7ed fba0 	bl	8002680 <ILI9341_Init>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8014f40:	2003      	movs	r0, #3
 8014f42:	f7ed fb69 	bl	8002618 <ILI9341_Set_Rotation>
	lv_disp_drv_init(&disp_drv);		/*Basic driver initialization*/
 8014f46:	4620      	mov	r0, r4
 8014f48:	f7f9 fa16 	bl	800e378 <lv_disp_drv_init>
	disp_drv.flush_cb = LCD_Flush;		/*Set a flush callback to draw to the display*/
 8014f4c:	4b07      	ldr	r3, [pc, #28]	; (8014f6c <lv_lcd_init+0x44>)
	disp_drv.buffer = &buf;				/*Set an initialized buffer*/
 8014f4e:	6065      	str	r5, [r4, #4]
	disp_drv.flush_cb = LCD_Flush;		/*Set a flush callback to draw to the display*/
 8014f50:	60e3      	str	r3, [r4, #12]
	disp_drv.monitor_cb = monitor_cb;
 8014f52:	4b07      	ldr	r3, [pc, #28]	; (8014f70 <lv_lcd_init+0x48>)
	lv_disp_drv_register(&disp_drv);
 8014f54:	4620      	mov	r0, r4
	disp_drv.monitor_cb = monitor_cb;
 8014f56:	61a3      	str	r3, [r4, #24]
}
 8014f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_disp_drv_register(&disp_drv);
 8014f5c:	f7f9 baa0 	b.w	800e4a0 <lv_disp_drv_register>
 8014f60:	200025c4 	.word	0x200025c4
 8014f64:	200034ac 	.word	0x200034ac
 8014f68:	200025e8 	.word	0x200025e8
 8014f6c:	08014e65 	.word	0x08014e65
 8014f70:	08014e59 	.word	0x08014e59

08014f74 <lv_encoder_init>:
{
 8014f74:	b500      	push	{lr}
 8014f76:	b089      	sub	sp, #36	; 0x24
	lv_indev_drv_init(&indev_drv);
 8014f78:	a801      	add	r0, sp, #4
 8014f7a:	f7f9 fb11 	bl	800e5a0 <lv_indev_drv_init>
  indev_drv.type = LV_INDEV_TYPE_ENCODER;
 8014f7e:	2304      	movs	r3, #4
 8014f80:	f88d 3004 	strb.w	r3, [sp, #4]
  indev_drv.read_cb = encoder_read;
 8014f84:	4b04      	ldr	r3, [pc, #16]	; (8014f98 <lv_encoder_init+0x24>)
  indev_encoder = lv_indev_drv_register(&indev_drv);
 8014f86:	a801      	add	r0, sp, #4
  indev_drv.read_cb = encoder_read;
 8014f88:	9302      	str	r3, [sp, #8]
  indev_encoder = lv_indev_drv_register(&indev_drv);
 8014f8a:	f7f9 fb19 	bl	800e5c0 <lv_indev_drv_register>
 8014f8e:	4b03      	ldr	r3, [pc, #12]	; (8014f9c <lv_encoder_init+0x28>)
 8014f90:	6018      	str	r0, [r3, #0]
}
 8014f92:	b009      	add	sp, #36	; 0x24
 8014f94:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f98:	08014ee1 	.word	0x08014ee1
 8014f9c:	200034a8 	.word	0x200034a8

08014fa0 <__errno>:
 8014fa0:	4b01      	ldr	r3, [pc, #4]	; (8014fa8 <__errno+0x8>)
 8014fa2:	6818      	ldr	r0, [r3, #0]
 8014fa4:	4770      	bx	lr
 8014fa6:	bf00      	nop
 8014fa8:	20000074 	.word	0x20000074

08014fac <__libc_init_array>:
 8014fac:	b570      	push	{r4, r5, r6, lr}
 8014fae:	2500      	movs	r5, #0
 8014fb0:	4e0c      	ldr	r6, [pc, #48]	; (8014fe4 <__libc_init_array+0x38>)
 8014fb2:	4c0d      	ldr	r4, [pc, #52]	; (8014fe8 <__libc_init_array+0x3c>)
 8014fb4:	1ba4      	subs	r4, r4, r6
 8014fb6:	10a4      	asrs	r4, r4, #2
 8014fb8:	42a5      	cmp	r5, r4
 8014fba:	d109      	bne.n	8014fd0 <__libc_init_array+0x24>
 8014fbc:	f000 fc60 	bl	8015880 <_init>
 8014fc0:	2500      	movs	r5, #0
 8014fc2:	4e0a      	ldr	r6, [pc, #40]	; (8014fec <__libc_init_array+0x40>)
 8014fc4:	4c0a      	ldr	r4, [pc, #40]	; (8014ff0 <__libc_init_array+0x44>)
 8014fc6:	1ba4      	subs	r4, r4, r6
 8014fc8:	10a4      	asrs	r4, r4, #2
 8014fca:	42a5      	cmp	r5, r4
 8014fcc:	d105      	bne.n	8014fda <__libc_init_array+0x2e>
 8014fce:	bd70      	pop	{r4, r5, r6, pc}
 8014fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014fd4:	4798      	blx	r3
 8014fd6:	3501      	adds	r5, #1
 8014fd8:	e7ee      	b.n	8014fb8 <__libc_init_array+0xc>
 8014fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014fde:	4798      	blx	r3
 8014fe0:	3501      	adds	r5, #1
 8014fe2:	e7f2      	b.n	8014fca <__libc_init_array+0x1e>
 8014fe4:	08019974 	.word	0x08019974
 8014fe8:	08019974 	.word	0x08019974
 8014fec:	08019974 	.word	0x08019974
 8014ff0:	08019978 	.word	0x08019978

08014ff4 <memcmp>:
 8014ff4:	b530      	push	{r4, r5, lr}
 8014ff6:	2400      	movs	r4, #0
 8014ff8:	42a2      	cmp	r2, r4
 8014ffa:	d101      	bne.n	8015000 <memcmp+0xc>
 8014ffc:	2000      	movs	r0, #0
 8014ffe:	e007      	b.n	8015010 <memcmp+0x1c>
 8015000:	5d03      	ldrb	r3, [r0, r4]
 8015002:	3401      	adds	r4, #1
 8015004:	190d      	adds	r5, r1, r4
 8015006:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801500a:	42ab      	cmp	r3, r5
 801500c:	d0f4      	beq.n	8014ff8 <memcmp+0x4>
 801500e:	1b58      	subs	r0, r3, r5
 8015010:	bd30      	pop	{r4, r5, pc}

08015012 <memcpy>:
 8015012:	b510      	push	{r4, lr}
 8015014:	1e43      	subs	r3, r0, #1
 8015016:	440a      	add	r2, r1
 8015018:	4291      	cmp	r1, r2
 801501a:	d100      	bne.n	801501e <memcpy+0xc>
 801501c:	bd10      	pop	{r4, pc}
 801501e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015026:	e7f7      	b.n	8015018 <memcpy+0x6>

08015028 <memset>:
 8015028:	4603      	mov	r3, r0
 801502a:	4402      	add	r2, r0
 801502c:	4293      	cmp	r3, r2
 801502e:	d100      	bne.n	8015032 <memset+0xa>
 8015030:	4770      	bx	lr
 8015032:	f803 1b01 	strb.w	r1, [r3], #1
 8015036:	e7f9      	b.n	801502c <memset+0x4>

08015038 <sniprintf>:
 8015038:	b40c      	push	{r2, r3}
 801503a:	b530      	push	{r4, r5, lr}
 801503c:	4b17      	ldr	r3, [pc, #92]	; (801509c <sniprintf+0x64>)
 801503e:	1e0c      	subs	r4, r1, #0
 8015040:	b09d      	sub	sp, #116	; 0x74
 8015042:	681d      	ldr	r5, [r3, #0]
 8015044:	da08      	bge.n	8015058 <sniprintf+0x20>
 8015046:	238b      	movs	r3, #139	; 0x8b
 8015048:	f04f 30ff 	mov.w	r0, #4294967295
 801504c:	602b      	str	r3, [r5, #0]
 801504e:	b01d      	add	sp, #116	; 0x74
 8015050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015054:	b002      	add	sp, #8
 8015056:	4770      	bx	lr
 8015058:	f44f 7302 	mov.w	r3, #520	; 0x208
 801505c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015060:	bf0c      	ite	eq
 8015062:	4623      	moveq	r3, r4
 8015064:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015068:	9304      	str	r3, [sp, #16]
 801506a:	9307      	str	r3, [sp, #28]
 801506c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015070:	9002      	str	r0, [sp, #8]
 8015072:	9006      	str	r0, [sp, #24]
 8015074:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015078:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801507a:	ab21      	add	r3, sp, #132	; 0x84
 801507c:	a902      	add	r1, sp, #8
 801507e:	4628      	mov	r0, r5
 8015080:	9301      	str	r3, [sp, #4]
 8015082:	f000 f86f 	bl	8015164 <_svfiprintf_r>
 8015086:	1c43      	adds	r3, r0, #1
 8015088:	bfbc      	itt	lt
 801508a:	238b      	movlt	r3, #139	; 0x8b
 801508c:	602b      	strlt	r3, [r5, #0]
 801508e:	2c00      	cmp	r4, #0
 8015090:	d0dd      	beq.n	801504e <sniprintf+0x16>
 8015092:	2200      	movs	r2, #0
 8015094:	9b02      	ldr	r3, [sp, #8]
 8015096:	701a      	strb	r2, [r3, #0]
 8015098:	e7d9      	b.n	801504e <sniprintf+0x16>
 801509a:	bf00      	nop
 801509c:	20000074 	.word	0x20000074

080150a0 <strcpy>:
 80150a0:	4603      	mov	r3, r0
 80150a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150a6:	f803 2b01 	strb.w	r2, [r3], #1
 80150aa:	2a00      	cmp	r2, #0
 80150ac:	d1f9      	bne.n	80150a2 <strcpy+0x2>
 80150ae:	4770      	bx	lr

080150b0 <__ssputs_r>:
 80150b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150b4:	688e      	ldr	r6, [r1, #8]
 80150b6:	4682      	mov	sl, r0
 80150b8:	429e      	cmp	r6, r3
 80150ba:	460c      	mov	r4, r1
 80150bc:	4690      	mov	r8, r2
 80150be:	4699      	mov	r9, r3
 80150c0:	d837      	bhi.n	8015132 <__ssputs_r+0x82>
 80150c2:	898a      	ldrh	r2, [r1, #12]
 80150c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80150c8:	d031      	beq.n	801512e <__ssputs_r+0x7e>
 80150ca:	2302      	movs	r3, #2
 80150cc:	6825      	ldr	r5, [r4, #0]
 80150ce:	6909      	ldr	r1, [r1, #16]
 80150d0:	1a6f      	subs	r7, r5, r1
 80150d2:	6965      	ldr	r5, [r4, #20]
 80150d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80150d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80150dc:	f109 0301 	add.w	r3, r9, #1
 80150e0:	443b      	add	r3, r7
 80150e2:	429d      	cmp	r5, r3
 80150e4:	bf38      	it	cc
 80150e6:	461d      	movcc	r5, r3
 80150e8:	0553      	lsls	r3, r2, #21
 80150ea:	d530      	bpl.n	801514e <__ssputs_r+0x9e>
 80150ec:	4629      	mov	r1, r5
 80150ee:	f000 fb2d 	bl	801574c <_malloc_r>
 80150f2:	4606      	mov	r6, r0
 80150f4:	b950      	cbnz	r0, 801510c <__ssputs_r+0x5c>
 80150f6:	230c      	movs	r3, #12
 80150f8:	f04f 30ff 	mov.w	r0, #4294967295
 80150fc:	f8ca 3000 	str.w	r3, [sl]
 8015100:	89a3      	ldrh	r3, [r4, #12]
 8015102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015106:	81a3      	strh	r3, [r4, #12]
 8015108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801510c:	463a      	mov	r2, r7
 801510e:	6921      	ldr	r1, [r4, #16]
 8015110:	f7ff ff7f 	bl	8015012 <memcpy>
 8015114:	89a3      	ldrh	r3, [r4, #12]
 8015116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801511a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801511e:	81a3      	strh	r3, [r4, #12]
 8015120:	6126      	str	r6, [r4, #16]
 8015122:	443e      	add	r6, r7
 8015124:	6026      	str	r6, [r4, #0]
 8015126:	464e      	mov	r6, r9
 8015128:	6165      	str	r5, [r4, #20]
 801512a:	1bed      	subs	r5, r5, r7
 801512c:	60a5      	str	r5, [r4, #8]
 801512e:	454e      	cmp	r6, r9
 8015130:	d900      	bls.n	8015134 <__ssputs_r+0x84>
 8015132:	464e      	mov	r6, r9
 8015134:	4632      	mov	r2, r6
 8015136:	4641      	mov	r1, r8
 8015138:	6820      	ldr	r0, [r4, #0]
 801513a:	f000 faa1 	bl	8015680 <memmove>
 801513e:	68a3      	ldr	r3, [r4, #8]
 8015140:	2000      	movs	r0, #0
 8015142:	1b9b      	subs	r3, r3, r6
 8015144:	60a3      	str	r3, [r4, #8]
 8015146:	6823      	ldr	r3, [r4, #0]
 8015148:	441e      	add	r6, r3
 801514a:	6026      	str	r6, [r4, #0]
 801514c:	e7dc      	b.n	8015108 <__ssputs_r+0x58>
 801514e:	462a      	mov	r2, r5
 8015150:	f000 fb56 	bl	8015800 <_realloc_r>
 8015154:	4606      	mov	r6, r0
 8015156:	2800      	cmp	r0, #0
 8015158:	d1e2      	bne.n	8015120 <__ssputs_r+0x70>
 801515a:	6921      	ldr	r1, [r4, #16]
 801515c:	4650      	mov	r0, sl
 801515e:	f000 faa9 	bl	80156b4 <_free_r>
 8015162:	e7c8      	b.n	80150f6 <__ssputs_r+0x46>

08015164 <_svfiprintf_r>:
 8015164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015168:	461d      	mov	r5, r3
 801516a:	898b      	ldrh	r3, [r1, #12]
 801516c:	b09d      	sub	sp, #116	; 0x74
 801516e:	061f      	lsls	r7, r3, #24
 8015170:	4680      	mov	r8, r0
 8015172:	460c      	mov	r4, r1
 8015174:	4616      	mov	r6, r2
 8015176:	d50f      	bpl.n	8015198 <_svfiprintf_r+0x34>
 8015178:	690b      	ldr	r3, [r1, #16]
 801517a:	b96b      	cbnz	r3, 8015198 <_svfiprintf_r+0x34>
 801517c:	2140      	movs	r1, #64	; 0x40
 801517e:	f000 fae5 	bl	801574c <_malloc_r>
 8015182:	6020      	str	r0, [r4, #0]
 8015184:	6120      	str	r0, [r4, #16]
 8015186:	b928      	cbnz	r0, 8015194 <_svfiprintf_r+0x30>
 8015188:	230c      	movs	r3, #12
 801518a:	f8c8 3000 	str.w	r3, [r8]
 801518e:	f04f 30ff 	mov.w	r0, #4294967295
 8015192:	e0c8      	b.n	8015326 <_svfiprintf_r+0x1c2>
 8015194:	2340      	movs	r3, #64	; 0x40
 8015196:	6163      	str	r3, [r4, #20]
 8015198:	2300      	movs	r3, #0
 801519a:	9309      	str	r3, [sp, #36]	; 0x24
 801519c:	2320      	movs	r3, #32
 801519e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80151a2:	2330      	movs	r3, #48	; 0x30
 80151a4:	f04f 0b01 	mov.w	fp, #1
 80151a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80151ac:	9503      	str	r5, [sp, #12]
 80151ae:	4637      	mov	r7, r6
 80151b0:	463d      	mov	r5, r7
 80151b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80151b6:	b10b      	cbz	r3, 80151bc <_svfiprintf_r+0x58>
 80151b8:	2b25      	cmp	r3, #37	; 0x25
 80151ba:	d13e      	bne.n	801523a <_svfiprintf_r+0xd6>
 80151bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80151c0:	d00b      	beq.n	80151da <_svfiprintf_r+0x76>
 80151c2:	4653      	mov	r3, sl
 80151c4:	4632      	mov	r2, r6
 80151c6:	4621      	mov	r1, r4
 80151c8:	4640      	mov	r0, r8
 80151ca:	f7ff ff71 	bl	80150b0 <__ssputs_r>
 80151ce:	3001      	adds	r0, #1
 80151d0:	f000 80a4 	beq.w	801531c <_svfiprintf_r+0x1b8>
 80151d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151d6:	4453      	add	r3, sl
 80151d8:	9309      	str	r3, [sp, #36]	; 0x24
 80151da:	783b      	ldrb	r3, [r7, #0]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	f000 809d 	beq.w	801531c <_svfiprintf_r+0x1b8>
 80151e2:	2300      	movs	r3, #0
 80151e4:	f04f 32ff 	mov.w	r2, #4294967295
 80151e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151ec:	9304      	str	r3, [sp, #16]
 80151ee:	9307      	str	r3, [sp, #28]
 80151f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151f4:	931a      	str	r3, [sp, #104]	; 0x68
 80151f6:	462f      	mov	r7, r5
 80151f8:	2205      	movs	r2, #5
 80151fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80151fe:	4850      	ldr	r0, [pc, #320]	; (8015340 <_svfiprintf_r+0x1dc>)
 8015200:	f000 fa30 	bl	8015664 <memchr>
 8015204:	9b04      	ldr	r3, [sp, #16]
 8015206:	b9d0      	cbnz	r0, 801523e <_svfiprintf_r+0xda>
 8015208:	06d9      	lsls	r1, r3, #27
 801520a:	bf44      	itt	mi
 801520c:	2220      	movmi	r2, #32
 801520e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015212:	071a      	lsls	r2, r3, #28
 8015214:	bf44      	itt	mi
 8015216:	222b      	movmi	r2, #43	; 0x2b
 8015218:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801521c:	782a      	ldrb	r2, [r5, #0]
 801521e:	2a2a      	cmp	r2, #42	; 0x2a
 8015220:	d015      	beq.n	801524e <_svfiprintf_r+0xea>
 8015222:	462f      	mov	r7, r5
 8015224:	2000      	movs	r0, #0
 8015226:	250a      	movs	r5, #10
 8015228:	9a07      	ldr	r2, [sp, #28]
 801522a:	4639      	mov	r1, r7
 801522c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015230:	3b30      	subs	r3, #48	; 0x30
 8015232:	2b09      	cmp	r3, #9
 8015234:	d94d      	bls.n	80152d2 <_svfiprintf_r+0x16e>
 8015236:	b1b8      	cbz	r0, 8015268 <_svfiprintf_r+0x104>
 8015238:	e00f      	b.n	801525a <_svfiprintf_r+0xf6>
 801523a:	462f      	mov	r7, r5
 801523c:	e7b8      	b.n	80151b0 <_svfiprintf_r+0x4c>
 801523e:	4a40      	ldr	r2, [pc, #256]	; (8015340 <_svfiprintf_r+0x1dc>)
 8015240:	463d      	mov	r5, r7
 8015242:	1a80      	subs	r0, r0, r2
 8015244:	fa0b f000 	lsl.w	r0, fp, r0
 8015248:	4318      	orrs	r0, r3
 801524a:	9004      	str	r0, [sp, #16]
 801524c:	e7d3      	b.n	80151f6 <_svfiprintf_r+0x92>
 801524e:	9a03      	ldr	r2, [sp, #12]
 8015250:	1d11      	adds	r1, r2, #4
 8015252:	6812      	ldr	r2, [r2, #0]
 8015254:	9103      	str	r1, [sp, #12]
 8015256:	2a00      	cmp	r2, #0
 8015258:	db01      	blt.n	801525e <_svfiprintf_r+0xfa>
 801525a:	9207      	str	r2, [sp, #28]
 801525c:	e004      	b.n	8015268 <_svfiprintf_r+0x104>
 801525e:	4252      	negs	r2, r2
 8015260:	f043 0302 	orr.w	r3, r3, #2
 8015264:	9207      	str	r2, [sp, #28]
 8015266:	9304      	str	r3, [sp, #16]
 8015268:	783b      	ldrb	r3, [r7, #0]
 801526a:	2b2e      	cmp	r3, #46	; 0x2e
 801526c:	d10c      	bne.n	8015288 <_svfiprintf_r+0x124>
 801526e:	787b      	ldrb	r3, [r7, #1]
 8015270:	2b2a      	cmp	r3, #42	; 0x2a
 8015272:	d133      	bne.n	80152dc <_svfiprintf_r+0x178>
 8015274:	9b03      	ldr	r3, [sp, #12]
 8015276:	3702      	adds	r7, #2
 8015278:	1d1a      	adds	r2, r3, #4
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	9203      	str	r2, [sp, #12]
 801527e:	2b00      	cmp	r3, #0
 8015280:	bfb8      	it	lt
 8015282:	f04f 33ff 	movlt.w	r3, #4294967295
 8015286:	9305      	str	r3, [sp, #20]
 8015288:	4d2e      	ldr	r5, [pc, #184]	; (8015344 <_svfiprintf_r+0x1e0>)
 801528a:	2203      	movs	r2, #3
 801528c:	7839      	ldrb	r1, [r7, #0]
 801528e:	4628      	mov	r0, r5
 8015290:	f000 f9e8 	bl	8015664 <memchr>
 8015294:	b138      	cbz	r0, 80152a6 <_svfiprintf_r+0x142>
 8015296:	2340      	movs	r3, #64	; 0x40
 8015298:	1b40      	subs	r0, r0, r5
 801529a:	fa03 f000 	lsl.w	r0, r3, r0
 801529e:	9b04      	ldr	r3, [sp, #16]
 80152a0:	3701      	adds	r7, #1
 80152a2:	4303      	orrs	r3, r0
 80152a4:	9304      	str	r3, [sp, #16]
 80152a6:	7839      	ldrb	r1, [r7, #0]
 80152a8:	2206      	movs	r2, #6
 80152aa:	4827      	ldr	r0, [pc, #156]	; (8015348 <_svfiprintf_r+0x1e4>)
 80152ac:	1c7e      	adds	r6, r7, #1
 80152ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80152b2:	f000 f9d7 	bl	8015664 <memchr>
 80152b6:	2800      	cmp	r0, #0
 80152b8:	d038      	beq.n	801532c <_svfiprintf_r+0x1c8>
 80152ba:	4b24      	ldr	r3, [pc, #144]	; (801534c <_svfiprintf_r+0x1e8>)
 80152bc:	bb13      	cbnz	r3, 8015304 <_svfiprintf_r+0x1a0>
 80152be:	9b03      	ldr	r3, [sp, #12]
 80152c0:	3307      	adds	r3, #7
 80152c2:	f023 0307 	bic.w	r3, r3, #7
 80152c6:	3308      	adds	r3, #8
 80152c8:	9303      	str	r3, [sp, #12]
 80152ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152cc:	444b      	add	r3, r9
 80152ce:	9309      	str	r3, [sp, #36]	; 0x24
 80152d0:	e76d      	b.n	80151ae <_svfiprintf_r+0x4a>
 80152d2:	fb05 3202 	mla	r2, r5, r2, r3
 80152d6:	2001      	movs	r0, #1
 80152d8:	460f      	mov	r7, r1
 80152da:	e7a6      	b.n	801522a <_svfiprintf_r+0xc6>
 80152dc:	2300      	movs	r3, #0
 80152de:	250a      	movs	r5, #10
 80152e0:	4619      	mov	r1, r3
 80152e2:	3701      	adds	r7, #1
 80152e4:	9305      	str	r3, [sp, #20]
 80152e6:	4638      	mov	r0, r7
 80152e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152ec:	3a30      	subs	r2, #48	; 0x30
 80152ee:	2a09      	cmp	r2, #9
 80152f0:	d903      	bls.n	80152fa <_svfiprintf_r+0x196>
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d0c8      	beq.n	8015288 <_svfiprintf_r+0x124>
 80152f6:	9105      	str	r1, [sp, #20]
 80152f8:	e7c6      	b.n	8015288 <_svfiprintf_r+0x124>
 80152fa:	fb05 2101 	mla	r1, r5, r1, r2
 80152fe:	2301      	movs	r3, #1
 8015300:	4607      	mov	r7, r0
 8015302:	e7f0      	b.n	80152e6 <_svfiprintf_r+0x182>
 8015304:	ab03      	add	r3, sp, #12
 8015306:	9300      	str	r3, [sp, #0]
 8015308:	4622      	mov	r2, r4
 801530a:	4b11      	ldr	r3, [pc, #68]	; (8015350 <_svfiprintf_r+0x1ec>)
 801530c:	a904      	add	r1, sp, #16
 801530e:	4640      	mov	r0, r8
 8015310:	f3af 8000 	nop.w
 8015314:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015318:	4681      	mov	r9, r0
 801531a:	d1d6      	bne.n	80152ca <_svfiprintf_r+0x166>
 801531c:	89a3      	ldrh	r3, [r4, #12]
 801531e:	065b      	lsls	r3, r3, #25
 8015320:	f53f af35 	bmi.w	801518e <_svfiprintf_r+0x2a>
 8015324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015326:	b01d      	add	sp, #116	; 0x74
 8015328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801532c:	ab03      	add	r3, sp, #12
 801532e:	9300      	str	r3, [sp, #0]
 8015330:	4622      	mov	r2, r4
 8015332:	4b07      	ldr	r3, [pc, #28]	; (8015350 <_svfiprintf_r+0x1ec>)
 8015334:	a904      	add	r1, sp, #16
 8015336:	4640      	mov	r0, r8
 8015338:	f000 f882 	bl	8015440 <_printf_i>
 801533c:	e7ea      	b.n	8015314 <_svfiprintf_r+0x1b0>
 801533e:	bf00      	nop
 8015340:	08019936 	.word	0x08019936
 8015344:	0801993c 	.word	0x0801993c
 8015348:	08019940 	.word	0x08019940
 801534c:	00000000 	.word	0x00000000
 8015350:	080150b1 	.word	0x080150b1

08015354 <_printf_common>:
 8015354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015358:	4691      	mov	r9, r2
 801535a:	461f      	mov	r7, r3
 801535c:	688a      	ldr	r2, [r1, #8]
 801535e:	690b      	ldr	r3, [r1, #16]
 8015360:	4606      	mov	r6, r0
 8015362:	4293      	cmp	r3, r2
 8015364:	bfb8      	it	lt
 8015366:	4613      	movlt	r3, r2
 8015368:	f8c9 3000 	str.w	r3, [r9]
 801536c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015370:	460c      	mov	r4, r1
 8015372:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015376:	b112      	cbz	r2, 801537e <_printf_common+0x2a>
 8015378:	3301      	adds	r3, #1
 801537a:	f8c9 3000 	str.w	r3, [r9]
 801537e:	6823      	ldr	r3, [r4, #0]
 8015380:	0699      	lsls	r1, r3, #26
 8015382:	bf42      	ittt	mi
 8015384:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015388:	3302      	addmi	r3, #2
 801538a:	f8c9 3000 	strmi.w	r3, [r9]
 801538e:	6825      	ldr	r5, [r4, #0]
 8015390:	f015 0506 	ands.w	r5, r5, #6
 8015394:	d107      	bne.n	80153a6 <_printf_common+0x52>
 8015396:	f104 0a19 	add.w	sl, r4, #25
 801539a:	68e3      	ldr	r3, [r4, #12]
 801539c:	f8d9 2000 	ldr.w	r2, [r9]
 80153a0:	1a9b      	subs	r3, r3, r2
 80153a2:	42ab      	cmp	r3, r5
 80153a4:	dc29      	bgt.n	80153fa <_printf_common+0xa6>
 80153a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80153aa:	6822      	ldr	r2, [r4, #0]
 80153ac:	3300      	adds	r3, #0
 80153ae:	bf18      	it	ne
 80153b0:	2301      	movne	r3, #1
 80153b2:	0692      	lsls	r2, r2, #26
 80153b4:	d42e      	bmi.n	8015414 <_printf_common+0xc0>
 80153b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80153ba:	4639      	mov	r1, r7
 80153bc:	4630      	mov	r0, r6
 80153be:	47c0      	blx	r8
 80153c0:	3001      	adds	r0, #1
 80153c2:	d021      	beq.n	8015408 <_printf_common+0xb4>
 80153c4:	6823      	ldr	r3, [r4, #0]
 80153c6:	68e5      	ldr	r5, [r4, #12]
 80153c8:	f003 0306 	and.w	r3, r3, #6
 80153cc:	2b04      	cmp	r3, #4
 80153ce:	bf18      	it	ne
 80153d0:	2500      	movne	r5, #0
 80153d2:	f8d9 2000 	ldr.w	r2, [r9]
 80153d6:	f04f 0900 	mov.w	r9, #0
 80153da:	bf08      	it	eq
 80153dc:	1aad      	subeq	r5, r5, r2
 80153de:	68a3      	ldr	r3, [r4, #8]
 80153e0:	6922      	ldr	r2, [r4, #16]
 80153e2:	bf08      	it	eq
 80153e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80153e8:	4293      	cmp	r3, r2
 80153ea:	bfc4      	itt	gt
 80153ec:	1a9b      	subgt	r3, r3, r2
 80153ee:	18ed      	addgt	r5, r5, r3
 80153f0:	341a      	adds	r4, #26
 80153f2:	454d      	cmp	r5, r9
 80153f4:	d11a      	bne.n	801542c <_printf_common+0xd8>
 80153f6:	2000      	movs	r0, #0
 80153f8:	e008      	b.n	801540c <_printf_common+0xb8>
 80153fa:	2301      	movs	r3, #1
 80153fc:	4652      	mov	r2, sl
 80153fe:	4639      	mov	r1, r7
 8015400:	4630      	mov	r0, r6
 8015402:	47c0      	blx	r8
 8015404:	3001      	adds	r0, #1
 8015406:	d103      	bne.n	8015410 <_printf_common+0xbc>
 8015408:	f04f 30ff 	mov.w	r0, #4294967295
 801540c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015410:	3501      	adds	r5, #1
 8015412:	e7c2      	b.n	801539a <_printf_common+0x46>
 8015414:	2030      	movs	r0, #48	; 0x30
 8015416:	18e1      	adds	r1, r4, r3
 8015418:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801541c:	1c5a      	adds	r2, r3, #1
 801541e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015422:	4422      	add	r2, r4
 8015424:	3302      	adds	r3, #2
 8015426:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801542a:	e7c4      	b.n	80153b6 <_printf_common+0x62>
 801542c:	2301      	movs	r3, #1
 801542e:	4622      	mov	r2, r4
 8015430:	4639      	mov	r1, r7
 8015432:	4630      	mov	r0, r6
 8015434:	47c0      	blx	r8
 8015436:	3001      	adds	r0, #1
 8015438:	d0e6      	beq.n	8015408 <_printf_common+0xb4>
 801543a:	f109 0901 	add.w	r9, r9, #1
 801543e:	e7d8      	b.n	80153f2 <_printf_common+0x9e>

08015440 <_printf_i>:
 8015440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015444:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015448:	460c      	mov	r4, r1
 801544a:	7e09      	ldrb	r1, [r1, #24]
 801544c:	b085      	sub	sp, #20
 801544e:	296e      	cmp	r1, #110	; 0x6e
 8015450:	4617      	mov	r7, r2
 8015452:	4606      	mov	r6, r0
 8015454:	4698      	mov	r8, r3
 8015456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015458:	f000 80b3 	beq.w	80155c2 <_printf_i+0x182>
 801545c:	d822      	bhi.n	80154a4 <_printf_i+0x64>
 801545e:	2963      	cmp	r1, #99	; 0x63
 8015460:	d036      	beq.n	80154d0 <_printf_i+0x90>
 8015462:	d80a      	bhi.n	801547a <_printf_i+0x3a>
 8015464:	2900      	cmp	r1, #0
 8015466:	f000 80b9 	beq.w	80155dc <_printf_i+0x19c>
 801546a:	2958      	cmp	r1, #88	; 0x58
 801546c:	f000 8083 	beq.w	8015576 <_printf_i+0x136>
 8015470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015474:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015478:	e032      	b.n	80154e0 <_printf_i+0xa0>
 801547a:	2964      	cmp	r1, #100	; 0x64
 801547c:	d001      	beq.n	8015482 <_printf_i+0x42>
 801547e:	2969      	cmp	r1, #105	; 0x69
 8015480:	d1f6      	bne.n	8015470 <_printf_i+0x30>
 8015482:	6820      	ldr	r0, [r4, #0]
 8015484:	6813      	ldr	r3, [r2, #0]
 8015486:	0605      	lsls	r5, r0, #24
 8015488:	f103 0104 	add.w	r1, r3, #4
 801548c:	d52a      	bpl.n	80154e4 <_printf_i+0xa4>
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	6011      	str	r1, [r2, #0]
 8015492:	2b00      	cmp	r3, #0
 8015494:	da03      	bge.n	801549e <_printf_i+0x5e>
 8015496:	222d      	movs	r2, #45	; 0x2d
 8015498:	425b      	negs	r3, r3
 801549a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801549e:	486f      	ldr	r0, [pc, #444]	; (801565c <_printf_i+0x21c>)
 80154a0:	220a      	movs	r2, #10
 80154a2:	e039      	b.n	8015518 <_printf_i+0xd8>
 80154a4:	2973      	cmp	r1, #115	; 0x73
 80154a6:	f000 809d 	beq.w	80155e4 <_printf_i+0x1a4>
 80154aa:	d808      	bhi.n	80154be <_printf_i+0x7e>
 80154ac:	296f      	cmp	r1, #111	; 0x6f
 80154ae:	d020      	beq.n	80154f2 <_printf_i+0xb2>
 80154b0:	2970      	cmp	r1, #112	; 0x70
 80154b2:	d1dd      	bne.n	8015470 <_printf_i+0x30>
 80154b4:	6823      	ldr	r3, [r4, #0]
 80154b6:	f043 0320 	orr.w	r3, r3, #32
 80154ba:	6023      	str	r3, [r4, #0]
 80154bc:	e003      	b.n	80154c6 <_printf_i+0x86>
 80154be:	2975      	cmp	r1, #117	; 0x75
 80154c0:	d017      	beq.n	80154f2 <_printf_i+0xb2>
 80154c2:	2978      	cmp	r1, #120	; 0x78
 80154c4:	d1d4      	bne.n	8015470 <_printf_i+0x30>
 80154c6:	2378      	movs	r3, #120	; 0x78
 80154c8:	4865      	ldr	r0, [pc, #404]	; (8015660 <_printf_i+0x220>)
 80154ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80154ce:	e055      	b.n	801557c <_printf_i+0x13c>
 80154d0:	6813      	ldr	r3, [r2, #0]
 80154d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80154d6:	1d19      	adds	r1, r3, #4
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	6011      	str	r1, [r2, #0]
 80154dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80154e0:	2301      	movs	r3, #1
 80154e2:	e08c      	b.n	80155fe <_printf_i+0x1be>
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80154ea:	6011      	str	r1, [r2, #0]
 80154ec:	bf18      	it	ne
 80154ee:	b21b      	sxthne	r3, r3
 80154f0:	e7cf      	b.n	8015492 <_printf_i+0x52>
 80154f2:	6813      	ldr	r3, [r2, #0]
 80154f4:	6825      	ldr	r5, [r4, #0]
 80154f6:	1d18      	adds	r0, r3, #4
 80154f8:	6010      	str	r0, [r2, #0]
 80154fa:	0628      	lsls	r0, r5, #24
 80154fc:	d501      	bpl.n	8015502 <_printf_i+0xc2>
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	e002      	b.n	8015508 <_printf_i+0xc8>
 8015502:	0668      	lsls	r0, r5, #25
 8015504:	d5fb      	bpl.n	80154fe <_printf_i+0xbe>
 8015506:	881b      	ldrh	r3, [r3, #0]
 8015508:	296f      	cmp	r1, #111	; 0x6f
 801550a:	bf14      	ite	ne
 801550c:	220a      	movne	r2, #10
 801550e:	2208      	moveq	r2, #8
 8015510:	4852      	ldr	r0, [pc, #328]	; (801565c <_printf_i+0x21c>)
 8015512:	2100      	movs	r1, #0
 8015514:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015518:	6865      	ldr	r5, [r4, #4]
 801551a:	2d00      	cmp	r5, #0
 801551c:	60a5      	str	r5, [r4, #8]
 801551e:	f2c0 8095 	blt.w	801564c <_printf_i+0x20c>
 8015522:	6821      	ldr	r1, [r4, #0]
 8015524:	f021 0104 	bic.w	r1, r1, #4
 8015528:	6021      	str	r1, [r4, #0]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d13d      	bne.n	80155aa <_printf_i+0x16a>
 801552e:	2d00      	cmp	r5, #0
 8015530:	f040 808e 	bne.w	8015650 <_printf_i+0x210>
 8015534:	4665      	mov	r5, ip
 8015536:	2a08      	cmp	r2, #8
 8015538:	d10b      	bne.n	8015552 <_printf_i+0x112>
 801553a:	6823      	ldr	r3, [r4, #0]
 801553c:	07db      	lsls	r3, r3, #31
 801553e:	d508      	bpl.n	8015552 <_printf_i+0x112>
 8015540:	6923      	ldr	r3, [r4, #16]
 8015542:	6862      	ldr	r2, [r4, #4]
 8015544:	429a      	cmp	r2, r3
 8015546:	bfde      	ittt	le
 8015548:	2330      	movle	r3, #48	; 0x30
 801554a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801554e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015552:	ebac 0305 	sub.w	r3, ip, r5
 8015556:	6123      	str	r3, [r4, #16]
 8015558:	f8cd 8000 	str.w	r8, [sp]
 801555c:	463b      	mov	r3, r7
 801555e:	aa03      	add	r2, sp, #12
 8015560:	4621      	mov	r1, r4
 8015562:	4630      	mov	r0, r6
 8015564:	f7ff fef6 	bl	8015354 <_printf_common>
 8015568:	3001      	adds	r0, #1
 801556a:	d14d      	bne.n	8015608 <_printf_i+0x1c8>
 801556c:	f04f 30ff 	mov.w	r0, #4294967295
 8015570:	b005      	add	sp, #20
 8015572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015576:	4839      	ldr	r0, [pc, #228]	; (801565c <_printf_i+0x21c>)
 8015578:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801557c:	6813      	ldr	r3, [r2, #0]
 801557e:	6821      	ldr	r1, [r4, #0]
 8015580:	1d1d      	adds	r5, r3, #4
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	6015      	str	r5, [r2, #0]
 8015586:	060a      	lsls	r2, r1, #24
 8015588:	d50b      	bpl.n	80155a2 <_printf_i+0x162>
 801558a:	07ca      	lsls	r2, r1, #31
 801558c:	bf44      	itt	mi
 801558e:	f041 0120 	orrmi.w	r1, r1, #32
 8015592:	6021      	strmi	r1, [r4, #0]
 8015594:	b91b      	cbnz	r3, 801559e <_printf_i+0x15e>
 8015596:	6822      	ldr	r2, [r4, #0]
 8015598:	f022 0220 	bic.w	r2, r2, #32
 801559c:	6022      	str	r2, [r4, #0]
 801559e:	2210      	movs	r2, #16
 80155a0:	e7b7      	b.n	8015512 <_printf_i+0xd2>
 80155a2:	064d      	lsls	r5, r1, #25
 80155a4:	bf48      	it	mi
 80155a6:	b29b      	uxthmi	r3, r3
 80155a8:	e7ef      	b.n	801558a <_printf_i+0x14a>
 80155aa:	4665      	mov	r5, ip
 80155ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80155b0:	fb02 3311 	mls	r3, r2, r1, r3
 80155b4:	5cc3      	ldrb	r3, [r0, r3]
 80155b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80155ba:	460b      	mov	r3, r1
 80155bc:	2900      	cmp	r1, #0
 80155be:	d1f5      	bne.n	80155ac <_printf_i+0x16c>
 80155c0:	e7b9      	b.n	8015536 <_printf_i+0xf6>
 80155c2:	6813      	ldr	r3, [r2, #0]
 80155c4:	6825      	ldr	r5, [r4, #0]
 80155c6:	1d18      	adds	r0, r3, #4
 80155c8:	6961      	ldr	r1, [r4, #20]
 80155ca:	6010      	str	r0, [r2, #0]
 80155cc:	0628      	lsls	r0, r5, #24
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	d501      	bpl.n	80155d6 <_printf_i+0x196>
 80155d2:	6019      	str	r1, [r3, #0]
 80155d4:	e002      	b.n	80155dc <_printf_i+0x19c>
 80155d6:	066a      	lsls	r2, r5, #25
 80155d8:	d5fb      	bpl.n	80155d2 <_printf_i+0x192>
 80155da:	8019      	strh	r1, [r3, #0]
 80155dc:	2300      	movs	r3, #0
 80155de:	4665      	mov	r5, ip
 80155e0:	6123      	str	r3, [r4, #16]
 80155e2:	e7b9      	b.n	8015558 <_printf_i+0x118>
 80155e4:	6813      	ldr	r3, [r2, #0]
 80155e6:	1d19      	adds	r1, r3, #4
 80155e8:	6011      	str	r1, [r2, #0]
 80155ea:	681d      	ldr	r5, [r3, #0]
 80155ec:	6862      	ldr	r2, [r4, #4]
 80155ee:	2100      	movs	r1, #0
 80155f0:	4628      	mov	r0, r5
 80155f2:	f000 f837 	bl	8015664 <memchr>
 80155f6:	b108      	cbz	r0, 80155fc <_printf_i+0x1bc>
 80155f8:	1b40      	subs	r0, r0, r5
 80155fa:	6060      	str	r0, [r4, #4]
 80155fc:	6863      	ldr	r3, [r4, #4]
 80155fe:	6123      	str	r3, [r4, #16]
 8015600:	2300      	movs	r3, #0
 8015602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015606:	e7a7      	b.n	8015558 <_printf_i+0x118>
 8015608:	6923      	ldr	r3, [r4, #16]
 801560a:	462a      	mov	r2, r5
 801560c:	4639      	mov	r1, r7
 801560e:	4630      	mov	r0, r6
 8015610:	47c0      	blx	r8
 8015612:	3001      	adds	r0, #1
 8015614:	d0aa      	beq.n	801556c <_printf_i+0x12c>
 8015616:	6823      	ldr	r3, [r4, #0]
 8015618:	079b      	lsls	r3, r3, #30
 801561a:	d413      	bmi.n	8015644 <_printf_i+0x204>
 801561c:	68e0      	ldr	r0, [r4, #12]
 801561e:	9b03      	ldr	r3, [sp, #12]
 8015620:	4298      	cmp	r0, r3
 8015622:	bfb8      	it	lt
 8015624:	4618      	movlt	r0, r3
 8015626:	e7a3      	b.n	8015570 <_printf_i+0x130>
 8015628:	2301      	movs	r3, #1
 801562a:	464a      	mov	r2, r9
 801562c:	4639      	mov	r1, r7
 801562e:	4630      	mov	r0, r6
 8015630:	47c0      	blx	r8
 8015632:	3001      	adds	r0, #1
 8015634:	d09a      	beq.n	801556c <_printf_i+0x12c>
 8015636:	3501      	adds	r5, #1
 8015638:	68e3      	ldr	r3, [r4, #12]
 801563a:	9a03      	ldr	r2, [sp, #12]
 801563c:	1a9b      	subs	r3, r3, r2
 801563e:	42ab      	cmp	r3, r5
 8015640:	dcf2      	bgt.n	8015628 <_printf_i+0x1e8>
 8015642:	e7eb      	b.n	801561c <_printf_i+0x1dc>
 8015644:	2500      	movs	r5, #0
 8015646:	f104 0919 	add.w	r9, r4, #25
 801564a:	e7f5      	b.n	8015638 <_printf_i+0x1f8>
 801564c:	2b00      	cmp	r3, #0
 801564e:	d1ac      	bne.n	80155aa <_printf_i+0x16a>
 8015650:	7803      	ldrb	r3, [r0, #0]
 8015652:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801565a:	e76c      	b.n	8015536 <_printf_i+0xf6>
 801565c:	08019947 	.word	0x08019947
 8015660:	08019958 	.word	0x08019958

08015664 <memchr>:
 8015664:	b510      	push	{r4, lr}
 8015666:	b2c9      	uxtb	r1, r1
 8015668:	4402      	add	r2, r0
 801566a:	4290      	cmp	r0, r2
 801566c:	4603      	mov	r3, r0
 801566e:	d101      	bne.n	8015674 <memchr+0x10>
 8015670:	2300      	movs	r3, #0
 8015672:	e003      	b.n	801567c <memchr+0x18>
 8015674:	781c      	ldrb	r4, [r3, #0]
 8015676:	3001      	adds	r0, #1
 8015678:	428c      	cmp	r4, r1
 801567a:	d1f6      	bne.n	801566a <memchr+0x6>
 801567c:	4618      	mov	r0, r3
 801567e:	bd10      	pop	{r4, pc}

08015680 <memmove>:
 8015680:	4288      	cmp	r0, r1
 8015682:	b510      	push	{r4, lr}
 8015684:	eb01 0302 	add.w	r3, r1, r2
 8015688:	d807      	bhi.n	801569a <memmove+0x1a>
 801568a:	1e42      	subs	r2, r0, #1
 801568c:	4299      	cmp	r1, r3
 801568e:	d00a      	beq.n	80156a6 <memmove+0x26>
 8015690:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015694:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015698:	e7f8      	b.n	801568c <memmove+0xc>
 801569a:	4283      	cmp	r3, r0
 801569c:	d9f5      	bls.n	801568a <memmove+0xa>
 801569e:	1881      	adds	r1, r0, r2
 80156a0:	1ad2      	subs	r2, r2, r3
 80156a2:	42d3      	cmn	r3, r2
 80156a4:	d100      	bne.n	80156a8 <memmove+0x28>
 80156a6:	bd10      	pop	{r4, pc}
 80156a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80156ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80156b0:	e7f7      	b.n	80156a2 <memmove+0x22>
	...

080156b4 <_free_r>:
 80156b4:	b538      	push	{r3, r4, r5, lr}
 80156b6:	4605      	mov	r5, r0
 80156b8:	2900      	cmp	r1, #0
 80156ba:	d043      	beq.n	8015744 <_free_r+0x90>
 80156bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156c0:	1f0c      	subs	r4, r1, #4
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	bfb8      	it	lt
 80156c6:	18e4      	addlt	r4, r4, r3
 80156c8:	f000 f8d0 	bl	801586c <__malloc_lock>
 80156cc:	4a1e      	ldr	r2, [pc, #120]	; (8015748 <_free_r+0x94>)
 80156ce:	6813      	ldr	r3, [r2, #0]
 80156d0:	4610      	mov	r0, r2
 80156d2:	b933      	cbnz	r3, 80156e2 <_free_r+0x2e>
 80156d4:	6063      	str	r3, [r4, #4]
 80156d6:	6014      	str	r4, [r2, #0]
 80156d8:	4628      	mov	r0, r5
 80156da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156de:	f000 b8c6 	b.w	801586e <__malloc_unlock>
 80156e2:	42a3      	cmp	r3, r4
 80156e4:	d90b      	bls.n	80156fe <_free_r+0x4a>
 80156e6:	6821      	ldr	r1, [r4, #0]
 80156e8:	1862      	adds	r2, r4, r1
 80156ea:	4293      	cmp	r3, r2
 80156ec:	bf01      	itttt	eq
 80156ee:	681a      	ldreq	r2, [r3, #0]
 80156f0:	685b      	ldreq	r3, [r3, #4]
 80156f2:	1852      	addeq	r2, r2, r1
 80156f4:	6022      	streq	r2, [r4, #0]
 80156f6:	6063      	str	r3, [r4, #4]
 80156f8:	6004      	str	r4, [r0, #0]
 80156fa:	e7ed      	b.n	80156d8 <_free_r+0x24>
 80156fc:	4613      	mov	r3, r2
 80156fe:	685a      	ldr	r2, [r3, #4]
 8015700:	b10a      	cbz	r2, 8015706 <_free_r+0x52>
 8015702:	42a2      	cmp	r2, r4
 8015704:	d9fa      	bls.n	80156fc <_free_r+0x48>
 8015706:	6819      	ldr	r1, [r3, #0]
 8015708:	1858      	adds	r0, r3, r1
 801570a:	42a0      	cmp	r0, r4
 801570c:	d10b      	bne.n	8015726 <_free_r+0x72>
 801570e:	6820      	ldr	r0, [r4, #0]
 8015710:	4401      	add	r1, r0
 8015712:	1858      	adds	r0, r3, r1
 8015714:	4282      	cmp	r2, r0
 8015716:	6019      	str	r1, [r3, #0]
 8015718:	d1de      	bne.n	80156d8 <_free_r+0x24>
 801571a:	6810      	ldr	r0, [r2, #0]
 801571c:	6852      	ldr	r2, [r2, #4]
 801571e:	4401      	add	r1, r0
 8015720:	6019      	str	r1, [r3, #0]
 8015722:	605a      	str	r2, [r3, #4]
 8015724:	e7d8      	b.n	80156d8 <_free_r+0x24>
 8015726:	d902      	bls.n	801572e <_free_r+0x7a>
 8015728:	230c      	movs	r3, #12
 801572a:	602b      	str	r3, [r5, #0]
 801572c:	e7d4      	b.n	80156d8 <_free_r+0x24>
 801572e:	6820      	ldr	r0, [r4, #0]
 8015730:	1821      	adds	r1, r4, r0
 8015732:	428a      	cmp	r2, r1
 8015734:	bf01      	itttt	eq
 8015736:	6811      	ldreq	r1, [r2, #0]
 8015738:	6852      	ldreq	r2, [r2, #4]
 801573a:	1809      	addeq	r1, r1, r0
 801573c:	6021      	streq	r1, [r4, #0]
 801573e:	6062      	str	r2, [r4, #4]
 8015740:	605c      	str	r4, [r3, #4]
 8015742:	e7c9      	b.n	80156d8 <_free_r+0x24>
 8015744:	bd38      	pop	{r3, r4, r5, pc}
 8015746:	bf00      	nop
 8015748:	20003270 	.word	0x20003270

0801574c <_malloc_r>:
 801574c:	b570      	push	{r4, r5, r6, lr}
 801574e:	1ccd      	adds	r5, r1, #3
 8015750:	f025 0503 	bic.w	r5, r5, #3
 8015754:	3508      	adds	r5, #8
 8015756:	2d0c      	cmp	r5, #12
 8015758:	bf38      	it	cc
 801575a:	250c      	movcc	r5, #12
 801575c:	2d00      	cmp	r5, #0
 801575e:	4606      	mov	r6, r0
 8015760:	db01      	blt.n	8015766 <_malloc_r+0x1a>
 8015762:	42a9      	cmp	r1, r5
 8015764:	d903      	bls.n	801576e <_malloc_r+0x22>
 8015766:	230c      	movs	r3, #12
 8015768:	6033      	str	r3, [r6, #0]
 801576a:	2000      	movs	r0, #0
 801576c:	bd70      	pop	{r4, r5, r6, pc}
 801576e:	f000 f87d 	bl	801586c <__malloc_lock>
 8015772:	4a21      	ldr	r2, [pc, #132]	; (80157f8 <_malloc_r+0xac>)
 8015774:	6814      	ldr	r4, [r2, #0]
 8015776:	4621      	mov	r1, r4
 8015778:	b991      	cbnz	r1, 80157a0 <_malloc_r+0x54>
 801577a:	4c20      	ldr	r4, [pc, #128]	; (80157fc <_malloc_r+0xb0>)
 801577c:	6823      	ldr	r3, [r4, #0]
 801577e:	b91b      	cbnz	r3, 8015788 <_malloc_r+0x3c>
 8015780:	4630      	mov	r0, r6
 8015782:	f000 f863 	bl	801584c <_sbrk_r>
 8015786:	6020      	str	r0, [r4, #0]
 8015788:	4629      	mov	r1, r5
 801578a:	4630      	mov	r0, r6
 801578c:	f000 f85e 	bl	801584c <_sbrk_r>
 8015790:	1c43      	adds	r3, r0, #1
 8015792:	d124      	bne.n	80157de <_malloc_r+0x92>
 8015794:	230c      	movs	r3, #12
 8015796:	4630      	mov	r0, r6
 8015798:	6033      	str	r3, [r6, #0]
 801579a:	f000 f868 	bl	801586e <__malloc_unlock>
 801579e:	e7e4      	b.n	801576a <_malloc_r+0x1e>
 80157a0:	680b      	ldr	r3, [r1, #0]
 80157a2:	1b5b      	subs	r3, r3, r5
 80157a4:	d418      	bmi.n	80157d8 <_malloc_r+0x8c>
 80157a6:	2b0b      	cmp	r3, #11
 80157a8:	d90f      	bls.n	80157ca <_malloc_r+0x7e>
 80157aa:	600b      	str	r3, [r1, #0]
 80157ac:	18cc      	adds	r4, r1, r3
 80157ae:	50cd      	str	r5, [r1, r3]
 80157b0:	4630      	mov	r0, r6
 80157b2:	f000 f85c 	bl	801586e <__malloc_unlock>
 80157b6:	f104 000b 	add.w	r0, r4, #11
 80157ba:	1d23      	adds	r3, r4, #4
 80157bc:	f020 0007 	bic.w	r0, r0, #7
 80157c0:	1ac3      	subs	r3, r0, r3
 80157c2:	d0d3      	beq.n	801576c <_malloc_r+0x20>
 80157c4:	425a      	negs	r2, r3
 80157c6:	50e2      	str	r2, [r4, r3]
 80157c8:	e7d0      	b.n	801576c <_malloc_r+0x20>
 80157ca:	684b      	ldr	r3, [r1, #4]
 80157cc:	428c      	cmp	r4, r1
 80157ce:	bf16      	itet	ne
 80157d0:	6063      	strne	r3, [r4, #4]
 80157d2:	6013      	streq	r3, [r2, #0]
 80157d4:	460c      	movne	r4, r1
 80157d6:	e7eb      	b.n	80157b0 <_malloc_r+0x64>
 80157d8:	460c      	mov	r4, r1
 80157da:	6849      	ldr	r1, [r1, #4]
 80157dc:	e7cc      	b.n	8015778 <_malloc_r+0x2c>
 80157de:	1cc4      	adds	r4, r0, #3
 80157e0:	f024 0403 	bic.w	r4, r4, #3
 80157e4:	42a0      	cmp	r0, r4
 80157e6:	d005      	beq.n	80157f4 <_malloc_r+0xa8>
 80157e8:	1a21      	subs	r1, r4, r0
 80157ea:	4630      	mov	r0, r6
 80157ec:	f000 f82e 	bl	801584c <_sbrk_r>
 80157f0:	3001      	adds	r0, #1
 80157f2:	d0cf      	beq.n	8015794 <_malloc_r+0x48>
 80157f4:	6025      	str	r5, [r4, #0]
 80157f6:	e7db      	b.n	80157b0 <_malloc_r+0x64>
 80157f8:	20003270 	.word	0x20003270
 80157fc:	20003274 	.word	0x20003274

08015800 <_realloc_r>:
 8015800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015802:	4607      	mov	r7, r0
 8015804:	4614      	mov	r4, r2
 8015806:	460e      	mov	r6, r1
 8015808:	b921      	cbnz	r1, 8015814 <_realloc_r+0x14>
 801580a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801580e:	4611      	mov	r1, r2
 8015810:	f7ff bf9c 	b.w	801574c <_malloc_r>
 8015814:	b922      	cbnz	r2, 8015820 <_realloc_r+0x20>
 8015816:	f7ff ff4d 	bl	80156b4 <_free_r>
 801581a:	4625      	mov	r5, r4
 801581c:	4628      	mov	r0, r5
 801581e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015820:	f000 f826 	bl	8015870 <_malloc_usable_size_r>
 8015824:	42a0      	cmp	r0, r4
 8015826:	d20f      	bcs.n	8015848 <_realloc_r+0x48>
 8015828:	4621      	mov	r1, r4
 801582a:	4638      	mov	r0, r7
 801582c:	f7ff ff8e 	bl	801574c <_malloc_r>
 8015830:	4605      	mov	r5, r0
 8015832:	2800      	cmp	r0, #0
 8015834:	d0f2      	beq.n	801581c <_realloc_r+0x1c>
 8015836:	4631      	mov	r1, r6
 8015838:	4622      	mov	r2, r4
 801583a:	f7ff fbea 	bl	8015012 <memcpy>
 801583e:	4631      	mov	r1, r6
 8015840:	4638      	mov	r0, r7
 8015842:	f7ff ff37 	bl	80156b4 <_free_r>
 8015846:	e7e9      	b.n	801581c <_realloc_r+0x1c>
 8015848:	4635      	mov	r5, r6
 801584a:	e7e7      	b.n	801581c <_realloc_r+0x1c>

0801584c <_sbrk_r>:
 801584c:	b538      	push	{r3, r4, r5, lr}
 801584e:	2300      	movs	r3, #0
 8015850:	4c05      	ldr	r4, [pc, #20]	; (8015868 <_sbrk_r+0x1c>)
 8015852:	4605      	mov	r5, r0
 8015854:	4608      	mov	r0, r1
 8015856:	6023      	str	r3, [r4, #0]
 8015858:	f7eb fea0 	bl	800159c <_sbrk>
 801585c:	1c43      	adds	r3, r0, #1
 801585e:	d102      	bne.n	8015866 <_sbrk_r+0x1a>
 8015860:	6823      	ldr	r3, [r4, #0]
 8015862:	b103      	cbz	r3, 8015866 <_sbrk_r+0x1a>
 8015864:	602b      	str	r3, [r5, #0]
 8015866:	bd38      	pop	{r3, r4, r5, pc}
 8015868:	200034e0 	.word	0x200034e0

0801586c <__malloc_lock>:
 801586c:	4770      	bx	lr

0801586e <__malloc_unlock>:
 801586e:	4770      	bx	lr

08015870 <_malloc_usable_size_r>:
 8015870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015874:	1f18      	subs	r0, r3, #4
 8015876:	2b00      	cmp	r3, #0
 8015878:	bfbc      	itt	lt
 801587a:	580b      	ldrlt	r3, [r1, r0]
 801587c:	18c0      	addlt	r0, r0, r3
 801587e:	4770      	bx	lr

08015880 <_init>:
 8015880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015882:	bf00      	nop
 8015884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015886:	bc08      	pop	{r3}
 8015888:	469e      	mov	lr, r3
 801588a:	4770      	bx	lr

0801588c <_fini>:
 801588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801588e:	bf00      	nop
 8015890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015892:	bc08      	pop	{r3}
 8015894:	469e      	mov	lr, r3
 8015896:	4770      	bx	lr
